Ä bodyappBar	bodyScrimbottomSheetsnackBarmaterialBannerpersistentFooterbottomNavigationBarfloatingActionButtondrawer	endDrawer	statusBarchildofmaybeOfcreateState
_scaffolds_materialBanners_materialBannerController
_snackBars_snackBarController_snackBarTimer_accessibleNavigationdidChangeDependencies	_register_unregister_updateScaffolds_isRootshowSnackBar_didUpdateAnimationStyle_handleSnackBarStatusChangedremoveCurrentSnackBarhideCurrentSnackBarclearSnackBarsshowMaterialBanner"_handleMaterialBannerStatusChangedremoveCurrentMaterialBannerhideCurrentMaterialBannerclearMaterialBannersbuilddispose_scaffoldMessengerStateupdateShouldNotifyfloatingActionButtonSizebottomSheetSizecontentBottom
contentTop	minInsetsminViewPaddingscaffoldSizesnackBarSizematerialBannerSizetextDirectionbeginendanimatorprogress	getOffsettoStringbottomNavigationBarTopfloatingActionButtonArea_scaleFloatingActionButtoncopyWithcontextfloatingActionButtonScalegeometryvalue_updateWithbottomWidgetsHeightappBarHeightmaterialBannerHeight==hashCode
extendBodyextendBodyBehindAppBargeometryNotifier$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation)floatingActionButtonMoveAnimationProgress"floatingActionButtonMotionAnimatorisSnackBarFloatingsnackBarWidthextendBodyBehindMaterialBannerperformLayoutshouldRelayoutfabMoveAnimationfabMotionAnimatorcurrentController_previousController_previousExitScaleAnimation$_previousExitRotationCurvedAnimation_currentEntranceScaleAnimation_previousScaleAnimation_previousRotationAnimation_currentScaleAnimation_extendedCurrentScaleAnimation_currentRotationAnimation_previousChild	initStatedidUpdateWidget_entranceTurnTween_disposeAnimations_updateAnimations%_handlePreviousAnimationStatusChanged_isExtendedFloatingActionButton_onProgressChanged_updateGeometryScaledrawerBarrierDismissiblefloatingActionButtonLocationfloatingActionButtonAnimatorpersistentFooterButtonspersistentFooterAlignmentpersistentFooterDecorationonDrawerChangedonEndDrawerChangeddrawerScrimColorbottomSheetScrimBuilderbackgroundColorresizeToAvoidBottomInsetprimarydrawerDragStartBehaviordrawerEdgeDragWidthdrawerEnableOpenDragGestureendDrawerEnableOpenDragGesturerestorationId
geometryOf	hasDrawer_defaultBottomSheetScrimBuilderrestoreState
_drawerKey_endDrawerKey_bodyKey	hasAppBarhasEndDrawerhasFloatingActionButton_appBarMaxHeightappBarMaxHeight_drawerOpened_endDrawerOpenedisDrawerOpenisEndDrawerOpen_drawerOpenedCallback_endDrawerOpenedCallback
openDraweropenEndDrawer_scaffoldMessenger_messengerSnackBar_updateSnackBar_messengerMaterialBanner_updateMaterialBanner_dismissedBottomSheets_currentBottomSheet_currentBottomSheetKey_persistentSheetHistoryEntry _maybeBuildPersistentBottomSheet_closeCurrentBottomSheetcloseDrawercloseEndDrawer_updatePersistentBottomSheet_buildBottomSheetshowBottomSheet#_floatingActionButtonMoveController_floatingActionButtonAnimator%_previousFloatingActionButtonLocation_floatingActionButtonLocation)_floatingActionButtonVisibilityController_showFloatingActionButton_moveFloatingActionButton_handleStatusBarTap_geometryNotifier_resizeToAvoidBottomInset_addIfNonNull_buildEndDrawer_buildDrawer$_bottomSheetScrimAnimationController_showBodyScrimshowBodyScrim	isEnabledinvoke_widget
_completerclosedclosesetStateanimationController
enableDragshowDragHandle	onClosingonDismissed	onDisposebuilderisPersistent	elevationshapeclipBehaviorconstraintsanimationCurve_handleDragStart_handleDragEnd_handleStatusChangeextentChanged_isLocalHistoryEntry%_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScopeÅDragStartBehaviorFloatingActionButtonLocationendFloatFloatingActionButtonAnimatorscalingCurvestandardEasingdoubleSnackBarMaterialBannerBuildContextofshowSnackBarshowMaterialBannerdebugCheckHasScaffoldMessengerStatefulWidgetWidget	GlobalKeyMaterialAppscaffoldMessengerKey"dependOnInheritedWidgetOfExactType_scaffoldMessengerStateoverrideStateTickerProviderStateMixinLinkedHashSetQueueMaterialBannerClosedReasonAnimationControllerSnackBarClosedReasonTimerbool	protectedvoid
MediaQueryaccessibleNavigationOfcontextisActivereasontimeoutdidChangeDependenciesadd
isNotEmpty_updateSnackBar_updateMaterialBannerremovescaffoldfindAncestorStateOfTypecontainsdurationclosebehaviorSnackBarBehaviorfloatingfloatingActionButtonpersistentFooterButtonsbottomNavigationBarAnimationStylesnackBarAnimationStylereverseDurationnoAnimationcreateAnimationControllervsyncaddStatusListenerisEmptyisDismissedforward_withAnimationfallbackKey	UniqueKey	CompleterfirstsetStateaddLast	exceptionFlutterErrorStringdiagnosticstoDescriptionListDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintdescribeOwnershipChain	fromPartsdisposeAnimationStatus	dismissedremoveFirst	completedreverse
_completerisCompletedcompletecancelvaluehidethenmountedcleardebugCheckHasMediaQuery
ModalRoutedynamic	isCurrent_widgetisForwardOrCompletedactionscaffoldMessengerStatechildwidgetInheritedWidgetFloatingActionButtonOffset	immutableSizezeroBottomSheetbody
EdgeInsetsbottomappBartopMediaQueryDatapaddingresizeToAvoidBottomInsetviewPadding
viewInsetsTextDirection	getOffsetbeginendprogressobjectRuntimeTypeValueNotifier
geometryOfBottomAppBarRectbottomNavigationBarToplerpcenterfloatingActionButtonAreaChangeNotifierValueListenableRenderObjectfindRenderObjectownerdebugDoingPaint_scaleFloatingActionButtonfloatingActionButtonScalecopyWithnotifyListenersBoxConstraintsObjectmaterialBannerHeightbottomWidgetsHeightappBarHeightinthashhashCodeStatelessWidgetLayoutBuilderbuilderconstraintsmaxdataMultiChildLayoutDelegateloosetightenwidthheighthasChildlayoutChildpositionChildpersistentFootermaxWidth	maxHeightmaterialBannerclampDouble	bodyScrimsnackBarbottomSheetbottomSheetSizecontentBottom
contentTopfloatingActionButtonSize	minInsetsscaffoldSizesnackBarSizematerialBannerSizetextDirectionminViewPaddingstartTop	centerTopendTopminiStartTopminiCenterTop
miniEndTopstartDocked
startFloatcenterDockedcenterFloatendContained	endDockedminiStartDockedminiStartFloatminiCenterDockedminiCenterFloatminiEndDockedminiEndFloatsizemin	statusBardrawertight	endDrawer_updateWith)floatingActionButtonMoveAnimationProgress$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation
extendBodyextendBodyBehindAppBar	AnimationCurvedAnimationTrainHoppingAnimation	initStatekFloatingActionButtonSeguecurrentControllerdidUpdateWidgetfabMotionAnimatorfabMoveAnimationkey
AnimatableTween!kFloatingActionButtonTurnIntervalchain
CurveTweencurveCurveseaseInparentanimatedrivegetScaleAnimationgetRotationAnimationAnimationMinIntervaladdListener
isExtendedStack	alignment	AlignmentcenterRightchildrenFadeTransitionopacityScaleTransitionscaleRotationTransitionturnsgeometryNotifiershowBottomSheetTextCenterAppBarSafeAreaDraggableScrollableSheetshowBodyScrimTabBar
TabBarViewTabControllerDrawerBottomNavigationBarshowModalBottomSheetAlignmentDirectional	centerEndstartCircularNotchedRectanglebackgroundColorPreferredSizeWidgetSizedBoxexpandListView
TextButtonOverflowBarDividercreateBorderSideBoxDecorationltrrtl
openDrawercloseDrawer	NavigatorpopdrawerEnableOpenDragGestureDrawerCallbackopenEndDrawercloseEndDrawerendDrawerEnableOpenDragGestureDrawerThemeData
scrimColorColorsblack54ColorModalBarrierblackMaterial	ThemeDatascaffoldBackgroundColorLocalHistoryEntryBottomSheetThemeDataprimaryRestorationBucketRestorationScopeRestorationManagerBuilderdescribeElementregisterForUpdates	hasDrawerAnimatedBuilder	animationdismissiblecolorwithOpacityRestorationMixinrestorationIdregisterForRestorationDrawerControllerStateRestorableBoolcurrentStateonDrawerChangedcallonEndDrawerChanged
IconButtonopen
_snackBars_materialBannersDraggableScrollableNotificationextentinitialExtentprecisionErrorToleranceonRemoveDraggableScrollableActuatorresetaddLocalHistoryEntrygrowablesheetanimationControllerNotificationListeneronNotificationStatefulBuilderStateSettershrinkisPersistent_isLocalHistoryEntryfuturewhenCompleteWidgetBuilderShapeBorderClip
enableDragshowDragHandle	onClosingonDismissed	onDispose shouldDisposeAnimationController	elevationshapeclipBehaviorVoidCallbackfntransitionAnimationControllersheetAnimationStyleTickerFutureisAnimatinggetAnimationRestartfromScrollControllerPrimaryScrollControllermaybeOf
hasClients	animateToDurationmillisecondseaseOutCircfloatingActionButtonLocationfloatingActionButtonAnimator_unregister	_registerLayoutIdremovePadding
removeLeftremoveLeftPadding	removeTopremoveTopPaddingremoveRightremoveRightPaddingremoveBottomremoveBottomPaddingremoveBottomInsetremoveViewInsetsmaintainBottomViewPaddingidDrawerControllerDrawerAlignmentdrawerCallbackdragStartBehaviordrawerDragStartBehaviordrawerScrimColoredgeDragWidthdrawerEdgeDragWidthenableOpenDragGestureisDrawerOpendrawerBarrierDismissibledebugCheckHasDirectionalityThemeDirectionalityKeyedSubtreebottomSheetScrimBuilderview	paddingOfpreferredHeightForpreferredSizeisFiniteConstrainedBoxFlexibleSpaceBarcreateSettingscurrentExtentbottomCentersnackBarThemefixedMaterialBannerThemeDataMaterialBannerTheme	Container
decorationpersistentFooterDecorationborderBorderIntrinsicHeightPaddingallAlignpersistentFooterAlignmentspacingoverflowAlignmentOverflowBarAlignmentplatformTargetPlatformiOSmacOSGestureDetectorHitTestBehavioropaqueonTapexcludeFromSemanticsandroidfuchsialinuxwindowsviewInsetsOfviewPaddingOfScrollNotificationObserverActionsactionsTypeActionIntentDismissIntentCustomMultiChildLayoutdelegate"floatingActionButtonMotionAnimatorisSnackBarFloatingextendBodyBehindMaterialBannersnackBarWidthDismissActionisEndDrawerOpenFutureParametricCurveremoveStatusListenerDragStartDetailslinearDragEndDetailsSplitendCurve)_floatingActionButtonVisibilityController	minExtentshouldCloseOnMinExtenttopStartheightFactor	transform	Semantics	container	onDismissonDragStart	onDragEndStatefulWidgetStateTickerProviderStateMixinInheritedWidgetFloatingActionButtonLocationChangeNotifierValueListenableBoxConstraintsStatelessWidgetMultiChildLayoutDelegateRestorationMixinDismissActionScaffoldFeatureControllerZß'4Øå¬8À}¯'
G∆¿    Ç(   
dart:async  Ç=   dart:collection  ÇW   ÇiÇlmathÇl	dart:math  Çs   dart:ui  ÇÜ   package:flutter/foundation.dartÇ÷ÇÏDragStartBehavior Ç∞   package:flutter/gestures.dart  ÇÔ   package:flutter/widgets.dart  É   app_bar.dart  É.   banner.dart  ÉD   banner_theme.dart  É`   bottom_sheet.dart  É|   colors.dart  Éí   curves.dart  É®   
debug.dart  ÉΩ   divider.dart  É‘   drawer.dart  ÉÍ   flexible_space_bar.dart  Ñ   floating_action_button.dart  Ñ2   $floating_action_button_location.dart  Ña   material.dart  Ñy   snack_bar.dart  Ñí   snack_bar_theme.dart  Ñ±   
theme.dart¿ › ¿PçÄ <ÄÜÄ§Ä•Ä’ÄŸÄÙÅÅGÅqÅïÅ∏ÅﬁÅ˙ÇÇ&Ç'Ç<ÇVÇrÇÑÇÖÇØÇÓÉÉÉ-ÉCÉ_É{ÉëÉßÉºÉ”ÉÈÑÑ1Ñ`ÑxÑëÑ∞Ñ≈Ñ∆ÑﬁÖÖ)ÖEÖ[ÖÇÖÉÖŒÖ˘ÜDÜnÜoÜßÜÛááLá}áÆáØáƒáÃá÷á„áÚá˛àà$à;àSà]àjàwàyàzàƒà»âââ_âèâìâ‚ä,ä]äòäúä‰ã5ãàã”ãˆã˙åå]åaå¥åƒå»å÷å⁄ç(çyçÀééméòéÚè#èoè¨è≠è›è„êê*ê+ê{êäêêê¶êÚë3ë9ëëë£ë©ë¸íNíöí‰ììì5ìÖì“îîdî∞î’î€ï3ïEïKïóï—ï◊ïÁïÌñ=ñ|ñÃñ˘ó4óiójóúóÂòòòòdò{òÅò‘ò⁄òÍòô9ôàô…ô¸öDöoösötöÄöƒö∆ö«öÏöõ7õàõ”úú,ú0úcú¡ùùhùÕùˇûUûüûÀû‰üüüüü>üêü‡†*†z†††Ã†Ì°°4°u°{°≠°–°‘°’¢ ¢¢¢<¢_¢É¢ã¢å¢µ¢ﬂ¢Á¢Ì¢Ò¢Ú££U£à£ù£°£¢£æ£ı§§8§b§j§p§t§u§≈••6•ì•Œ•“•”•Â•Ê¶5¶Ç¶…¶Ó¶ÙßCßêßﬂßÌßÛ®D®J®õ®€©*©Y©_©®©»©Œ©‰™5™;™•™∑™Ω™Ò™˜´I´ô´Á¨9¨â¨ﬂ≠≠≠≠n≠t≠ﬁ≠≠ˆÆÆwÆ}ÆÁÆ˘ÆˇØNØ°Ø≈ØÀ∞!∞t∞ò∞û∞È∞Ô±±T±§±™≤≤&≤,≤v≤è≤ª≤¬≤Œ≤Î≥:≥g≥n≥§≥‰¥¥V¥i¥°¥ø¥Ôµµµjµ∏∂∂W∂v∂ƒ∂Ì∂¯∑(∑G∑P∑©∑∞∑∫∑Œ∑ˆ∏ ∏∏4∏F∏o∏ΩππXπ∞π–∫∫u∫¨∫Ω∫÷ª*ªÄª≈ººrº±º¬ºΩ?ΩPΩ_ΩñΩ¢Ω¨Ω¡ΩÕΩ‹Ω‚Ω„Ω˙Ω˛ΩˇæIæsæ¡øøEøiøqøwø{ø|ø∫ø–øˆ¿ @¿ @3¿ @W¿ @c¿ @¿ @§¿ @Œ¿ @ÿ¿ @˛¿ A¿ A>¿ Aè¿ Aõ¿ A∑¿ A€¿ Aˇ¿ B¿ B¿ B¿ B¿ Bc¿ Bv¿ B|¿ BÕ¿ C¿ Cw¿ Cï¿ C£¿ C©¿ C¸¿ D¿ D@¿ DF¿ Dd¿ D¿ Dπ¿ Dﬂ¿ D„¿ D‰¿ E/¿ E5¿ E{¿ E”¿ F¿ F#¿ F)¿ F|¿ Fû¿ F∆¿ FË¿ Fı¿ G4¿ GM¿ Gs¿ Gô¿ G£¿ G≠¿ G≥¿ G—¿ GÏ¿ G¿ GÒ¿ H:¿ H{¿ Hï¿ H◊¿ HÂ¿ HÎ¿ IA¿ I[¿ Is¿ Iò¿ I≥¿ I∑¿ I∏¿ I—¿ I“¿ J'¿ Jz¿ J«¿ JÏ¿ JÚ¿ KG¿ K†¿ Kı¿ L¿ L	¿ Lf¿ L¶¿ L˚¿ M0¿ M6¿ M¿ Mü¿ M•¿ Mª¿ N¿ N¿ Nà¿ Nö¿ Nˆ¿ O¿ O¿ O+¿ OH¿ Où¿ O ¿ O—¿ P)¿ Ph¿ På¿ P¬¿ PÓ¿ PÙ¿ QO¿ Q©¿ Qˇ¿ RO¿ Rn¿ R»¿ R˜¿ S¿ S8¿ S]¿ Sf¿ S≈¿ SÃ¿ Sﬁ¿ T
¿ T¿ T*¿ TA¿ TE¿ TF¿ Tä¿ T†¿ T∆¿ TÛ¿ U	¿ U3¿ U?¿ U[¿ UÜ¿ U∂¿ U¿¿ UÊ¿ V¿ V&¿ VJ¿ VY¿ V_¿ Vc¿ Vd¿ V¥¿ V«¿ VÕ¿ W$¿ Wx¿ Wù¿ WË¿ WÔ¿ X¿ X!¿ X'¿ XÜ¿ X®¿ X ¿ X–¿ X—¿ Y¿ Y7¿ Y;¿ Y<¿ Yç¿ Yì¿ YŸ¿ Y¸¿ ZE¿ ZL¿ Zö¿ Z®¿ ZÆ¿ [¿ [/¿ []¿ [¿ [å¿ [—¿ [Í¿ \¿ \6¿ \@¿ \J¿ \P¿ \T¿ \U¿ \¶¿ \Ô¿ ]¿ ]]¿ ]k¿ ]q¿ ]¡¿ ]ı¿ ^¿ ^D¿ ^e¿ ^i¿ ^j¿ ^w¿ ^É¿ ^™¿ ^ÿ¿ _ ¿ _!¿ _B¿ _É¿ _±¿ _˚¿ `9¿ `r¿ `±¿ `ˆ¿ aO¿ ae¿ as¿ a∫¿ a»¿ a“¿ a⁄¿ a‡¿ a·¿ b8¿ b<¿ b=¿ bJ¿ bV¿ bi¿ bì¿ b∑¿ b’¿ b¿ c¿ c	¿ c¿ c¿ cD¿ cf¿ cÄ¿ cº¿ cı¿ cˆ¿ d.¿ d/¿ d;¿ du¿ d≥¿ dµ¿ d∂¿ e¿ e*¿ e.¿ eh¿ e∞¿ eÏ¿ e¿ f0¿ fe¿ fp¿ fí¿ f„¿ g+¿ gO¿ gr¿ gì¿ g±¿ g›¿ g˙¿ h¿ h<¿ h\¿ hÇ¿ h£¿ h©¿ h™¿ hﬂ¿ hÂ¿ i1¿ iX¿ iY¿ iç¿ iì¿ i’¿ iı¿ j¿ j¿ j\¿ js¿ jy¿ jæ¿ k¿ kV¿ km¿ ks¿ k√¿ l¿ l`¿ lz¿ lò¿ lô¿ l‡¿ l˜¿ l˝¿ mB¿ mâ¿ m∑¿ mΩ¿ n¿ nZ¿ n™¿ næ¿ nŸ¿ n⁄¿ o"¿ o;¿ oA¿ oã¿ oÆ¿ p¿ p/¿ p5¿ ps¿ p©¿ p«¿ p»¿ q¿ q.¿ q4¿ qÉ¿ q—¿ r¿ rm¿ rê¿ r≥¿ r¥¿ rﬁ¿ r‰¿ s3¿ s¿ s¥¿ s∫¿ t¿ tU¿ t•¿ tŒ¿ t‘¿ u#¿ uF¿ ua¿ ub¿ uì¿ uô¿ uË¿ v¿ v¿ v;¿ vA¿ vñ¿ v∑¿ v∏¿ vˆ¿ w¿ w¿ w¿ wj¿ wn¿ w∑¿ x¿ x#¿ xo¿ xÀ¿ xÃ¿ x¯¿ y"¿ yQ¿ yj¿ yk¿ yw¿ y∏¿ y◊¿ z¿ z3¿ zM¿ zT¿ zX¿ zY¿ ze¿ z{¿ zı¿ z˘¿ z˚¿ z¸¿ {I¿ {M¿ {è¿ {æ¿ {¬¿ |¿ |a¿ |e¿ |±¿ |Û¿ }¿ }¿ }a¿ }¶¿ }±¿ } ¿ ~¿ ~f¿ ~g¿ ~∞¿ ~˝¿ ¿ 9¿ a¿ b¿ ¢¿ ®¿ Ï¿ Ä¿ Ä¿ ÄY¿ Äw¿ Ää¿ Äê¿ Äë¿ ÄØ¿ Ä˛¿ Å¿ Å¿ Å.¿ Åb¿ ÅÇ¿ Åï¿ Åù¿ Å⁄¿ Åﬁ¿ Åﬂ¿ Ç7¿ ÇM¿ Ç≠¿ Ç ¿ É¿ Éz¿ ÉÅ¿ ÉÖ¿ Éá¿ Éà¿ Éø¿ ÉÚ¿ Ñ,¿ Ñ-¿ ÑK¿ Ñp¿ Ñç¿ Ñé¿ Ñö¿ Ñπ¿ Ñ…¿ Ö¿ ÖX¿ Öt¿ Ö∆¿ Ü¿ Üw¿ ÜÇ¿ Üä¿ Üù¿ Üß¿ ÜÛ¿ Ü˜¿ Ü¯¿ á¿ á1¿ áU¿ á|¿ áÉ¿ áÂ¿ à¿ à=¿ àw¿ à~¿ àï¿ àô¿ àõ¿ àú¿ àË¿ â:¿ â=¿ âà¿ â€¿ ä*¿ äx¿ ä«¿ äÈ¿ ã¿ ã:¿ ãN¿ ãc¿ ãä¿ ã™¿ ã“¿ ã˚¿ å¿ åG¿ åH¿ ål¿ åâ¿ åÆ¿ åØ¿ ç ¿ çQ¿ ç§¿ çÌ¿ ç˘¿ é¿ é6¿ éJ¿ éP¿ é{¿ éπ¿ éı¿ è!¿ è%¿ è&¿ è2¿ èH¿ è§¿ è¶¿ èß¿ è¸¿ êK¿ êg¿ êj¿ êø¿ ë¿ ë;¿ ëR¿ ëp¿ ëö¿ ë≤¿ ë∏¿ ëπ¿ ëŒ¿ ëÁ¿ í¿ í¿ í¿ í@¿ ír¿ íÖ¿ íã¿ íå¿ í¶¿ íÍ¿ ìB¿ ìÅ¿ ìÇ¿ ì´¿ ìˇ¿ î%¿ î&¿ îX¿ îp¿ îï¿ îÍ¿ î˙¿ ï¿ ï¿ ï9¿ ï[¿ ï§¿ ï±¿ ï»¿ ï”¿ ï‹¿ ï„¿ ïÁ¿ ïÈ¿ ïÍ¿ ñ#¿ ñ7¿ ñT¿ ñv¿ ñó¿ ñª¿ ñ›¿ ó¿ óL¿ óâ¿ óø¿ óÂ¿ ò¿ ò$¿ òN¿ òÄ¿ òÜ¿ òá¿ ò†¿ ò≈¿ ò„¿ ô¿ ô+¿ ô_¿ ô`¿ ô´¿ ôı¿ ö/¿ öx¿ öy¿ öö¿ öπ¿ ö∫¿ öÁ¿ öË¿ öÙ¿ õ¿ õ^¿ õ_¿ õ≠¿ õ¸¿ úL¿ úà¿ úâ¿ úÊ¿ ù¿ ù*¿ ùP¿ ùo¿ ùp¿ ùö¿ ùÔ¿ û/¿ ûg¿ ûm¿ ûn¿ ûí¿ û…¿ ü¿ ü0¿ üN¿ ü^¿ üñ¿ ü‚¿ †?¿ †E¿ †F¿ †z¿ †π¿ †Í¿ °7¿ °@¿ °y¿ °°¿ °º¿ °Ã¿ ¢¿ ¢¿ ¢>¿ ¢Ä¿ ¢â¿ ¢è¿ ¢ê¿ ¢π¿ ¢Î¿ £G¿ £ï¿ £ñ¿ £…¿ £ˆ¿ §'¿ §/¿ §5¿ §6¿ §Ñ¿ §»¿ §Í¿ •¿ • ¿ •`¿ •g¿ •h¿ •ê¿ •ÿ¿ •Ÿ¿ ¶.¿ ¶}¿ ¶¿¿ ¶Ó¿ ßP¿ ß©¿ ß∏¿ ß€¿ ß„¿ ß‰¿ ®&¿ ®W¿ ®y¿ ®≤¿ ®‰¿ ©¿ ©¿ ©I¿ ©ã¿ ©ë¿ ©í¿ ©‰¿ ™3¿ ™z¿ ™ƒ¿ ™À¿ ´ ¿ ´c¿ ´±¿ ´˛¿ ¨N¿ ¨u¿ ¨v¿ ¨ú¿ ¨ø¿ ¨Ï¿ ≠5¿ ≠f¿ ≠à¿ ≠ë¿ ≠⁄¿ Æ¿ Æ¿ Æ¿ Æb¿ Æé¿ Æ—¿ Ø!¿ Ø'¿ Ø(¿ ØW¿ Øõ¿ ØÃ¿ ∞
¿ ∞¿ ∞k¿ ∞Ä¿ ∞£¿ ±¿ ±¿ ±¿ ±¿ ±?¿ ±w¿ ±’¿ ±÷¿ ≤$¿ ≤H¿ ≤õ¿ ≤≈¿ ≤Î¿ ≤Ï¿ ≥6¿ ≥ô¿ ≥ª¿ ≥Ê¿ ¥¿ ¥ ¿ ¥D¿ ¥t¿ ¥ö¿ ¥¬¿ ¥À¿ µ ¿ µ9¿ µB¿ µô¿ µ≤¿ µª¿ ∂¿ ∂*¿ ∂I¿ ∂Ü¿ ∂è¿ ∂”¿ ∑	¿ ∑¿ ∑¿ ∑<¿ ∑î¿ ∑ª¿ ∑ﬂ¿ ∏¿ ∏E¿ ∏P¿ ∏X¿ ∏Y¿ ∏Å¿ ∏–¿ π¿ π3¿ πb¿ πó¿ πÕ¿ ∫¿ ∫;¿ ∫n¿ ∫£¿ ∫◊¿ ª¿ ª>¿ ªo¿ ªß¿ ªﬁ¿ º¿ ºO¿ ºÖ¿ º¿¿ º¿ º˘¿ ΩW¿ ΩÖ¿ ΩÂ¿ Ωˆ¿ æ4¿ æ>¿ æM¿ æë¿ æ·¿ ø2¿ ø~¿ øì¿ øﬂ¿ ¿¿ ¿G¿ ¿d¿ ¿l¿ ¿m¿ ¿ƒ¿ ¿Ÿ¿ ¿˘¿ ¡=¿ ¡F¿ ¡G¿ ¡Y¿ ¡ö¿ ¡•¿ ¬
¿ ¬l¿ ¬◊¿ ¬˘¿ √R¿ √t¿ √∞¿ √˜¿ ƒ¿ ƒv¿ ƒÕ¿ ≈$¿ ≈w¿ ≈à¿ ≈°¿ ∆¿ ∆#¿ ∆3¿ ∆?¿ ∆I¿ ∆^¿ ∆j¿ ∆p¿ ∆q¿ ∆û¿ ∆ˇ¿ «:¿ «@¿ «A¿ «k¿ «∞¿ «Ë¿ «Ó¿ «Ô¿ »¿ »d¿ »ü¿ »•¿ »¶¿ »»¿ »˛¿ …8¿ …?¿ …C¿ …D¿ …P¿ …Ö¿ …∂¿ …Ó¿  $¿  e¿  û¿ À¿ Àd¿ Àî¿ À⁄¿ Àﬁ¿ À‡¿ À·¿ Ã.¿ Ã2¿ Ã{¿ Ã¿ Ã∫¿ Ãˇ¿ Õ>¿ Õx¿ Õ∑¿ Õ·¿ Õ˙¿ Œ¿ ŒC¿ Œg¿ Œå¿ Œí¿ Œì¿ Œ™¿ Œ÷¿ œ¿ œB¿ œC¿ œ~¿ œ≠¿ œÆ¿ œ∫¿ –¿ –¿ –¿ –w¿ –õ¿ –ı¿ —*¿ —Z¿ —ä¿ —√¿ —ˆ¿ “(¿ “a¿ “⁄¿ ”¿ ”D¿ ”|¿ ”ñ¿ ”ó¿ ”£¿ ”∏¿ ”œ¿ ”–¿ ‘1¿ ‘s¿ ‘å¿ ‘ç¿ ‘≠¿ ’ ¿ ’¿ ’F¿ ’S¿ ’ù¿ ’Ì¿ ÷¿ ÷¿ ÷¿ ÷¿ ÷%¿ ÷8¿ ÷[¿ ÷á¿ ÷º¿ ÷Î¿ ◊¿ ◊¿ ◊¿ ◊¿ ◊+¿ ◊o¿ ◊ï¿ ◊ÿ¿ ÿ¿ ÿ5¿ ÿÇ¿ ÿù¿ ÿ£¿ ÿ‹¿ Ÿ¿ Ÿk¿ Ÿy¿ Ÿ¿ Ÿ™¿ ŸÏ¿ ⁄(¿ ⁄w¿ ⁄≤¿ ⁄—¿ ⁄ı¿ €#¿ €-¿ €<¿ €ã¿ €Ÿ¿ ‹$¿ ‹N¿ ‹j¿ ‹ã¿ ‹¢¿ ‹–¿ ‹ÿ¿ ‹ﬁ¿ ‹‚¿ ‹„¿ ›)¿ ›]¿ ›k¿ ›ò¿ ›ô¿ ›∑¿ ›·¿ ﬁ
¿ ﬁ¿ ﬁ¿ ﬁ,¿ ﬁX¿ ﬁâ¿ ﬁº¿ ﬁﬂ¿ ﬁ˚¿ ﬂ¿ ﬂ7¿ ﬂs¿ ﬂñ¿ ﬂ≤¿ ﬂπ¿ ﬂ∫¿ ‡¿ ‡¿ ‡'¿ ‡]¿ ‡^¿ ‡ç¿ ‡√¿ ‡Î¿ ·¿ ·¿ ·m¿ ·á¿ ·é¿ ·è¿ ·≈¿ ‚"¿ ‚I¿ ‚P¿ ‚≥¿ ‚⁄¿ ‚·¿ ‚‚¿ „¿ „S¿ „á¿ „∫¿ ‰¿ ‰g¿ ‰t¿ ‰™¿ ‰∆¿ ‰Ï¿ ‰ı¿ Â*¿ ÂF¿ Âo¿ Âx¿ Â≤¿ ÂŸ¿ Â¯¿ Ê¿ Ê:¿ Êd¿ ÊÉ¿ Êå¿ Êí¿ Êì¿ Ê÷¿ Á	¿ Á¿ ÁL¿ Áâ¿ Áç¿ Áé¿ Á’¿ ÁÁ¿ Ë¿ ËU¿ ËÅ¿ Ëâ¿ Ëë¿ Ëï¿ Ëñ¿ Ëœ¿ È¿ È¿ È¿ È ¿ ÈG¿ ÈY¿ ÈÅ¿ Èõ¿ È…¿ Í¿ Í\¿ Ík¿ Íà¿ Í∂¿ Î¿ Î(¿ Îc¿ Î~¿ Î±¿ Ï
¿ Ï¿ Ï#¿ Ï>¿ Ïi¿ Ï«¿ Ï‘¿ Ï›¿ Ï‰¿ ÏË¿ ÏÈ¿ Ì¿ Ìh¿ Ìl¿ Ìm¿ Ìô¿ Ì‰¿ ÌË¿ ÌÍ¿ ÌÎ¿ Ó-¿ Ó1¿ Óu¿ Óy¿ ÓÆ¿ Óˇ¿ Ô-¿ Ô1¿ ÔE¿ Ôì¿ Ôﬂ¿ '¿ O¿ S¿ ú¿ ¨¿ ∞¿ ƒ¿ Ò¿ Òa¿ Ò∞¿ ÒÍ¿ ÒÓ¿ ÚS¿ ÚW¿ Ú†¿ Ú∞¿ Ú¥¿ Ú»¿ Û¿ Ûf¿ Û≤¿ ÛÍ¿ Ù9¿ Ùp¿ Ùt¿ Ù◊¿ Ù€¿ ı$¿ ı4¿ ı8¿ ıt¿ ıx¿ ıø¿ ˆ¿ ˆM¿ ˆî¿ ˆÿ¿ ˜¿ ˜Q¿ ˜ì¿ ˜¢¿ ˜¶¿ ˜Ê¿ ¯,¿ ¯l¿ ¯≠¿ ¯Â¿ ˘&¿ ˘@¿ ˘D¿ ˘ã¿ ˘è¿ ˘Œ¿ ˙¿ ˙q¿ ˙u¿ ˙ƒ¿ ˚,¿ ˚q¿ ˚u¿ ˚›¿ ¸2¿ ¸6¿ ¸M¿ ¸Q¿ ¸j¿ ¸n¿ ¸´¿ ¸‚¿ ˝ ¿ ˝N¿ ˝R¿ ˝ô¿ ˝÷¿ ˛$¿ ˛n¿ ˛≥¿ ˛æ¿ ˛¬¿ ˛÷¿ ˇ'¿ ˇq¿ ˇu¿ ˇÅ¿ ˇŒ¿ ˇ˙¿ ¿ T¿ ä¿ ñ¿ û¿ •¿ ≠¿ Ω¿ ¡¿¿D¿{¿¿ç¿ë¿·¿¿T¿è¿‡¿1¿¿«¿ÿ¿'¿p¿Å¿“¿!¿r¿∞¿ ¿=¿Ö¿‘¿	¿]¿•¿Ï¿I¿q¿Æ¿¡¿–¿·¿¿	¿	6¿	]¿	¿	ƒ¿	È¿	˙¿
¿
(¿
E¿
c¿
y¿
ì¿
∂¿
œ¿¿(¿R¿{¿ñ¿⁄¿¯¿%¿U¿m¿s¿t¿∫¿¿M¿u¿{¿»¿¿¿c¿©¿ı¿>¿Ñ¿ä¿ö¿†¿Ë¿¿&¿'¿l¿r¿¬¿ˇ¿¿g¿é¿è¿›¿)¿W¿]¿£¿º¿¬¿Î¿Ò¿¿¿Q¿k¿ê¿ë¿…¿Ó¿Ô¿¿ ¿d¿•¿Ò¿>¿q¿w¿≈¿¿e¿¨¿’¿€¿)¿y¿∆¿˚¿¿¿^¿d¿é¿¥¿µ¿¿	¿t¿∏¿π¿¿¿Ñ¿»¿…¿¿¿b¿™¿∞¿È¿Ô¿*¿\¿ã¿å¿€¿·¿¿M¿N¿õ¿°¿Û¿¿¿+¿1¿Ü¿ﬂ¿¿¿]¿©¿”¿Ÿ¿ı¿˚¿ B¿ H¿ õ¿  ¿ –¿ Ê¿! ¿!a¿!≤¿!º¿!¬¿"¿"&¿">¿"?¿"ñ¿"ø¿"¿¿#
¿#O¿#y¿#¿#õ¿#°¿#Î¿#Ò¿$G¿$v¿$|¿$í¿$¬¿%¿%T¿%d¿%j¿%¿¿%“¿%Ì¿%Ó¿&H¿&t¿&u¿&–¿&÷¿' ¿'Z¿'{¿'|¿'◊¿'›¿(5¿(ò¿(Ë¿)0¿)6¿)î¿)Î¿)Ò¿*,¿*¿*Ä¿*Õ¿*”¿+¿+5¿+6¿+~¿+Ñ¿+“¿+Û¿+˘¿,I¿,_¿,Ñ¿,Ö¿,≥¿,π¿-¿-V¿-å¿-í¿-‚¿.3¿.¿.¶¿.¨¿.Ù¿/A¿/o¿/u¿/¬¿0¿0 ¿0&¿0r¿0Ω¿1	¿1)¿1/¿1?¿1E¿1ì¿1 ¿2¿2\¿2û¿2ª¿2º¿3¿3T¿3†¿3¶¿3Ó¿4?¿4ã¿4ë¿4©¿4—¿4“¿5¿5!¿5n¿5∑¿5Ω¿6¿6"¿68¿69¿6|¿6Ø¿6∞¿6˙¿7¿7¿7T¿7û¿7Ï¿86¿8g¿8ì¿8∏¿8π¿8˝¿9¿9¿9U¿9[¿9î¿9æ¿9ø¿:¿:¿: ¿:Y¿:_¿:ò¿:≈¿:∆¿;¿;¿;]¿;ê¿;ñ¿;„¿<4¿<:¿<J¿<P¿<ù¿<Ø¿<Œ¿<œ¿=¿=>¿=D¿=ë¿=’¿=€¿>¿>!¿>7¿>á¿>∏¿>æ¿?¿?¿?$¿?:¿?ä¿?’¿@"¿@s¿@∫¿@Ã¿@“¿A ¿A2¿A8¿AÖ¿A–¿B ¿Bp¿B™¿B∞¿C ¿CI¿Cç¿Cì¿C‡¿D'¿DY¿D≠¿D«¿D‹¿D‚¿E¿Es¿Eã¿Eˆ¿FX¿F´¿F¥¿F≈¿G(¿GÄ¿G≠¿GÙ¿G˝¿H¿Hn¿HÃ¿I*¿Iã¿IË¿JB¿Jo¿Jx¿JØ¿J∑¿Jª¿Jº¿K	¿K+¿K1¿KÇ¿K ¿K–¿L¿L¿L&¿L,¿Lu¿L¿¿Lÿ¿M¿MM¿MQ¿MR¿Mü¿Mœ¿M’¿N¿N¿Nh¿N≤¿O ¿O¿O¿Oe¿O≥¿O˘¿P(¿P.¿Py¿P»¿Q¿Qa¿Qs¿Q¡¿QÛ¿R2¿RS¿Râ¿Rü¿R˙¿S¿S¿SÉ¿Sÿ¿S„¿Sˆ¿T[¿Tµ¿T‰¿U-¿U8¿UK¿U≠¿V¿Vm¿V◊¿V‚¿W¿W%¿W+¿WV¿WZ¿W[¿W©¿W∑¿WΩ¿X
¿XX¿X•¿Xˆ¿Y¿Y¿YQ¿YW¿Yg¿Ym¿Yæ¿Z¿ZU¿Zs¿Zÿ¿[¿[¿[h¿[ì¿[ô¿[ù¿[û¿\¿\¿\;¿\r¿\’¿]
¿]O¿]P¿]y¿]°¿]È¿]Ù¿]ı¿^P¿^Y¿^`¿^d¿^e¿^q¿^£¿^•¿^¶¿^¬¿^∆¿_¿_:¿_ò¿_§¿_Ÿ¿_⁄¿_Á¿_Û¿`<¿`v¿`∑¿`ª¿`º¿`Ã¿`Õ¿a'¿aÑ¿aÖ¿aØ¿a∞¿aÓ¿b¿b¿b\¿bã¿bå¿bÕ¿c¿c¿cO¿cö¿cõ¿c∑¿c∏¿cÈ¿cÔ¿d8¿dk¿d©¿dÍ¿dÎ¿e¿e ¿e0¿e6¿eÇ¿eó¿e«¿e»¿e˙¿f ¿f¿f¿ff¿f}¿f≥¿f¥¿f‚¿g0¿gD¿gl¿gv¿g§¿g™¿gÆ¿gØ¿g‡¿h4¿hH¿hs¿h}¿hÆ¿h¥¿h∏¿hπ¿h‹¿h‚¿i3¿ie¿ik¿iπ¿j	¿j¿j¿jb¿jy¿j¿j–¿jÊ¿k.¿kY¿k_¿kÑ¿kà¿kâ¿kµ¿kª¿l¿lJ¿lP¿lû¿lÓ¿l¸¿m¿mJ¿ma¿mg¿m∏¿m—¿n¿n;¿nA¿ni¿nm¿nn¿nß¿n’¿n÷¿nË¿o9¿o:¿oá¿o¢¿o˚¿p\¿p]¿pê¿p§¿p‘¿pﬁ¿p‰¿pË¿pÈ¿q¿q¿q\¿që¿qÙ¿qı¿rH¿ri¿r∫¿s¿s=¿sM¿sN¿sç¿s°¿s›¿sÁ¿sÌ¿sÒ¿sÚ¿t¿t¿tY¿t•¿t∏¿u¿uF¿u~¿u±¿u≤¿uﬁ¿v#¿vx¿v ¿vı¿wW¿wn¿wÃ¿x&¿x\¿xö¿x∑¿y ¿y+¿yr¿yß¿y∏¿y«¿z ¿z,¿zg¿zô¿z£¿zπ¿z¡¿z¬¿{¿{t¿{ê¿{ø¿|¿|2¿|M¿|X¿|ì¿|¿¿| ¿|˙¿}¿}¿}2¿}S¿}õ¿}€¿~¿~1¿~^¿~¶¿~Ó¿¿¿!¿.¿9¿U¿á¿ê¿ñ¿ö¿õ¿ø¿Ê¿Ä¿ÄD¿ÄL¿Ä^¿Äü¿ÄŒ¿Ä⁄¿ÄÔ¿Ä˚¿Å¿Å¿Å¿Å@¿ÅF¿Åó¿ÅÆ¿Å”¿Å˚¿Ç¿Ç¿Ç¿ÇC¿ÇI¿Çö¿Ç¥¿Çﬂ¿É
¿É¿É¿É¿É=¿Éw¿É{¿É|¿É±¿ÉŒ¿ÉÓ¿Ñ$¿Ñ@¿ÑW¿Ño¿Ñá¿Ñ®¿Ñæ¿Ñÿ¿Ö
¿Ö¿Ö!¿Öx¿Öî¿Öﬂ¿Ü ¿Ü|¿Üá¿Üè¿Ü¢¿Ü¨¿Ü≠¿ÜÊ¿á&¿áV¿áÅ¿áÇ¿á°¿á¿¿á¡¿á¯¿à¿àF¿àv¿à£¿à´¿à±¿à≤¿àÿ¿àÛ¿â¿â,¿â4¿âo¿â¢¿â≈¿â∆¿â‡¿ä¿ä¿ä¿äJ¿ä^¿ä~¿ä∏¿ä‹¿äÊ¿äÁ¿ã¿ãF¿ãN¿ãj¿ãp¿ãq¿ã£¿ã≤¿ãœ¿ãÍ¿åM¿åy¿åâ¿åò¿å•¿å¶¿å«¿åÛ¿ç¿ç+¿çH¿çP¿çV¿çW¿ç¿çö¿ç ¿ç˘¿é¿é5¿é`¿ér¿é|¿éπ¿éÿ¿é·¿é˘¿è5¿èM¿èÖ¿èì¿èù¿è¶¿èº¿èŸ¿è¯¿ê(¿êQ¿ê[¿êd¿ê|¿êû¿ê∆¿ê‚¿êˆ¿ë¿ë8¿ë?¿ë@¿ëY¿ëï¿ëõ¿ëú¿ë ¿ë›¿ëÓ¿í-¿íG¿íz¿íÉ¿íò¿íü¿í£¿í§¿íÚ¿ì3¿ì9¿ìã¿ìü¿ì•¿ìÊ¿î5¿îH¿îN¿îô¿îË¿ï¿ï¿ïe¿ï´¿ï¯¿ï˛¿ñN¿ñú¿ñ–¿ñ÷¿ó%¿ós¿ó©¿óØ¿óˇ¿òP¿òú¿ò√¿ò…¿òﬂ¿ô)¿ôs¿ô£¿ô©¿ö¿ö¿ö$¿ös¿ö¨¿ö≤¿ö˛¿õ:¿õi¿õo¿õπ¿ú¿ú5¿ú;¿úä¿úê¿ú¶¿úÚ¿ù8¿ù>¿ù°¿ù≥¿ù√¿ù…¿û¿û,¿ûx¿û≈¿û’¿ü&¿üy¿ü’¿†!¿†]¿†ê¿†≠¿†…¿†‡¿†¯¿°¿°1¿°G¿°a¿°ô¿°¬¿°…¿°Ÿ¿¢¿¢¿¢h¿¢©¿£¿£¿£¿£+¿£5¿£c¿£d¿£Ñ¿£Ø¿£Ÿ¿§>¿§U¿§g¿§ñ¿§ß¿§ƒ¿§Ì¿•¿•5¿•K¿•o¿•ë¿•±¿•Ÿ¿¶*¿¶3¿¶;¿¶\¿¶`¿¶a¿¶Å¿¶¡¿ß¿ßK¿ßä¿ßã¿ß—¿ß“¿®¿®0¿®p¿®t¿®u¿®«¿©¿©n¿©ï¿™¿™F¿™¿™Ø¿™◊¿™˛¿´1¿´:¿´ä¿´Ω¿´∆¿´Ã¿´Õ¿´ﬂ¿¨¿¨R¿¨Z¿¨[¿¨π¿≠¿≠+¿≠x¿≠|¿≠}¿≠Æ¿≠Ø¿≠ˇ¿ÆK¿Æu¿Æî¿ÆÙ¿ØE¿Øn¿Ø{¿Ø±¿Ø‘¿Ø›¿Ø„¿ØÁ¿ØË¿Ø˜¿Ø¯¿∞,¿∞-¿∞T¿∞à¿∞å¿∞ç¿∞ö¿∞¶¿∞ª¿∞“¿±(¿±L¿±¢¿±∆¿≤¿≤g¿≤¶¿≤π¿≤À¿≤˚¿≥¿≥¿≥H¿≥t¿≥á¿≥é¿≥è¿≥‹¿≥‡¿≥·¿≥Ó¿≥˙¿¥'¿¥M¿¥¿¿µ¿µ?¿µó¿µù¿µˆ¿∂¿∂m¿∂v¿∂|¿∂≥¿∂≈¿∑'¿∑a¿∑{¿∑‘¿∏¿∏¿∏4¿∏m¿∏ ¿π¿π¿π"¿π,¿πA¿πM¿πu¿πô¿πÈ¿∫¿∫$¿∫L¿∫T¿∫Z¿∫^¿∫_¿∫l¿∫x¿∫ô¿∫Í¿ª!¿ªÇ¿ª“¿ª¯¿ºX¿ºÖ¿ºã¿º–¿Ω¿Ω,¿Ω-¿ΩU¿Ωx¿Ω|¿Ω}¿Ωä¿Ωñ¿Ω©¿Ω ¿Ω˝¿æ6¿æa¿æ~¿æû¿æ“¿æÁ¿æÎ¿æÏ¿ø¿ø¿ø2¿øH¿øm¿øë¿ø∑¿øﬁ¿¿¿¿.¿¿5¿¿u¿¿ö¿¿Ω¿¿‰¿¡¿¡¿¡1¿¡i¿¡o¿¡p¿¡∂¿¬¿¬¿¬¿¬3¿¬G¿¬Y¿¬p¿¬ß¿¬≤¿¬ª¿¬¡¿¬≈¿¬∆¿√¿√9¿√U¿√j¿√|¿√ñ¿√¥¿√ﬁ¿ƒ¿ƒO¿ƒ~¿ƒ≥¿ƒ˚¿≈+¿≈p¿≈î¿≈ü¿≈¿¿∆¿∆C¿∆d¿∆§¿∆»¿∆—¿∆◊¿∆€¿∆‹¿«(¿«I¿«b¿«w¿«â¿«£¿«æ¿«Í¿»¿»X¿»á¿»º¿…¿….¿…s¿…î¿…ü¿…Ω¿ ¿ @¿ a¿ °¿ ≈¿ Œ¿ ‘¿ ÿ¿ Ÿ¿À¿À9¿À:¿Àe¿Àk¿Àƒ¿À˛¿Ã!¿Ã5¿ÃU¿Ã_¿Ãe¿Ã≠¿Ã¿Ãˆ¿Ã˙¿Ã˚¿Õ¿Õ¿Õ;¿Õi¿Õõ¿ÕŒ¿Œ¿Œ¿ŒE¿ŒX¿Œh¿ŒÇ¿Œì¿Œ≠¿Œ⁄¿œ¿œe¿œt¿œé¿œÆ¿œ›¿œ˛¿–¿–q¿–•¿–¨¿–∆¿–€¿–Ì¿—I¿—j¿—ã¿—´¿—Õ¿—¿—˘¿—ˇ¿“ ¿“!¿“{¿“î¿“Ì¿”3¿”H¿”Z¿”r¿”∑¿”È¿‘¿‘:¿‘G¿‘R¿‘p¿‘í¿‘≥¿‘÷¿‘˘¿’¿’¿’	¿’.¿’I¿’J¿’ñ¿’∏¿’„¿’ˇ¿÷$¿÷m¿÷x¿÷Å¿÷ñ¿÷®¿÷∑¿÷⁄¿÷¸¿◊¿◊?¿◊w¿◊Ä¿◊Ü¿◊á¿◊∞¿◊÷¿ÿ¿ÿ8¿ÿf¿ÿà¿ÿ“¿Ÿ,¿Ÿ-¿ŸB¿ŸT¿Ÿy¿Ÿô¿Ÿª¿Ÿ€¿Ÿ˛¿⁄¿⁄u¿⁄¥¿⁄Ω¿⁄√¿⁄ƒ¿⁄ı¿€$¿€P¿€£¿€¬¿‹¿‹R¿‹S¿‹h¿‹z¿‹•¿‹À¿‹Ì¿›¿›A¿›d¿›£¿›¨¿›≤¿›≥¿›Â¿›˙¿ﬁ¿ﬁ¿ﬁ5¿ﬁh¿ﬁ…¿ﬁ‰¿ﬁ¸¿ﬂ ¿ﬂ>¿ﬂp¿ﬂé¿ﬂÕ¿ﬂÛ¿‡¿‡T¿‡ì¿‡®¿‡ª¿‡Ã¿‡€¿‡Ë¿‡Û¿·¿·=¿·]¿·Ä¿·¡¿‚ ¿‚	¿‚¿‚¿‚>¿‚S¿‚e¿‚â¿‚¥¿‚÷¿‚ˆ¿„¿„=¿„|¿„Ö¿„ã¿„å¿„ü¿„Ø¿„÷¿‰¿‰O¿‰|¿‰¬¿‰Ó¿‰˜¿Â!¿Â@¿Â^¿Â~¿Âü¿Â¶¿Âß¿Â…¿ÂË¿Ê	¿Ê ¿Ê4¿ÊO¿Ê}¿Ê•¿Á¿Á.¿Á;¿Á^¿ÁÇ¿Á§¿Á…¿ÁÓ¿Á˘¿Ë¿Ë?¿Ë`¿ËÉ¿Ëí¿Ëò¿Ëô¿Ëª¿ËË¿È¿È%¿ÈU¿ÈÇ¿Èà¿Èâ¿È—¿Í¿Í¿Íz¿Í{¿Í≈¿Í¸¿ÎN¿Î®¿Î∏¿Î ¿Î—¿Î“¿ÎÌ¿Ï	¿Ï4¿Ï]¿Ïv¿Ïƒ¿ÏÊ¿Ì"¿Ì_¿Ì}¿Ì‹¿Ó¿Ó8¿Ók¿Ó∂¿Ó‡¿Ô¿Ôm¿Ô¨¿ÔÔ¿F¿¿·¿Ò¿ÒO¿Ò£¿Ò’¿ÒÍ¿Ú¿Ú#¿Ú4¿ÚC¿ÚP¿Ú[¿Úd¿Úk¿Úo¿Úq¿Úr¿Ú•¿ÚÀ¿ÚÃ¿ÚÍ¿ÚÎ¿Ú˜¿Û ¿Ûv¿Ûz¿Û{¿Ûá¿Û≠¿Û’¿Ù ¿Ù¿Ù¿Ù¿ÙC¿ÙG¿Ùã¿Ù∞¿ÙÁ¿ıF¿ıY¿ız¿ı{¿ıÃ¿ı˘¿ı˙¿ˆZ¿ˆv¿ˆw¿ˆ«¿ˆÊ¿ˆË¿ˆÈ¿˜¿˜<¿˜K¿˜r¿˜é¿˜ß¿˜ƒ¿˜„¿˜˛¿¯¿¯7¿¯K¿¯[¿¯r¿¯à¿¯ú¿¯¢¿¯£¿¯ø¿˘¿˘0¿˘N¿˘o¿˘í¿˘≥¿˘“¿˘Ì¿˙¿˙(¿˙D¿˙`¿˙Ö¿˙Ü¿˙í¿˙‹¿˙ﬁ¿˙ﬂ¿˚%¿˚k¿˚l¿˚x¿˚ç¿˚§¿˚·¿¸(¿¸,¿¸-¿¸9¿¸L¿¸ñ¿¸¥¿¸…¿¸Õ¿¸Œ¿¸⁄¿˝¿˝9¿˝Ç¿˝Ü¿˝á¿˝ò¿˝¬¿˝‡¿˝‰¿˝Â¿˛¿˛^¿˛Ç¿˛Ü¿˛á¿˛ ¿ˇ¿ˇz¿ˇ~¿ˇ¿ˇ¥¿ˇ“¿ˇÙ¿ˇ˙¿ˇ˛¿ˇˇ¿ D¿ Ç¿ ª¿ ˘¿:¿}¿~¿ﬂ¿¿%¿k¿ï¿õ¿Ë¿!¿P¿¿é¿î¿¶¿™¿´¿∑¿ﬁ¿˙¿'¿^¿t¿®¿¸¿¿¿(¿@¿Y¿ë¿◊¿ ¿¿[¿Ü¿π¿‰¿¿5¿Z¿è¿∏¿Ÿ¿¿5¿B¿M¿V¿]¿a¿c¿d¿¢¿¶¿Û¿˜¿	B¿	Ñ¿	†¿	∆¿

¿
5¿
G¿
\¿
m¿
ç¿
¨¿
Ω¿
æ¿
·¿
„¿
‰¿¿,¿I¿m¿á¿ç¿é¿¶¿⁄¿€¿Á¿¿J¿N¿P   Åw/// @docImport 'package:flutter/services.dart';
///
/// @docImport 'app.dart';
/// @docImport 'bottom_app_bar.dart';
/// @docImport 'bottom_navigation_bar.dart';
/// @docImport 'bottom_sheet_theme.dart';
/// @docImport 'drawer_theme.dart';
/// @docImport 'icon_button.dart';
/// @docImport 'tab_controller.dart';
/// @docImport 'tabs.dart';
/// @docImport 'text_button.dart';Ç'   Ç<   ÇVÇmÇl Çr   ÇÖ   ÇØ  Ç÷ÇÏÇÓ   É   É-   ÉC   É_   É{   Éë   Éß   Éº   É”   ÉÈ   Ñ   Ñ1   Ñ`   Ñx   Ñë   Ñ∞     àzíKàzé¯Üw/// Manages [SnackBar]s and [MaterialBanner]s for descendant [Scaffold]s.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=lytQi-slT5Y}
///
/// This class provides APIs for showing snack bars and material banners at the
/// bottom and top of the screen, respectively.
///
/// To display one of these notifications, obtain the [ScaffoldMessengerState]
/// for the current [BuildContext] via [ScaffoldMessenger.of] and use the
/// [ScaffoldMessengerState.showSnackBar] or the
/// [ScaffoldMessengerState.showMaterialBanner] functions.
///
/// When the [ScaffoldMessenger] has nested [Scaffold] descendants, the
/// ScaffoldMessenger will only present the notification to the root Scaffold of
/// the subtree of Scaffolds. In order to show notifications for the inner, nested
/// Scaffolds, set a new scope by instantiating a new ScaffoldMessenger in
/// between the levels of nesting.
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [SnackBar], which is a temporary notification typically shown near the
///    bottom of the app using the [ScaffoldMessengerState.showSnackBar] method.
///  * [MaterialBanner], which is a temporary notification typically shown at the
///    top of the app using the [ScaffoldMessengerState.showMaterialBanner] method.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor.
///  * Cookbook: [Display a SnackBar](https://docs.flutter.dev/cookbook/design/snackbars) è%ÄÜèw èwèà I/// Creates a widget that manages [SnackBar]s for [Scaffold] descendants.èä	èëèê  èïè§è£   èØyê#ê#`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}   ê-áÂóóÜÖ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// {@tool dartpad}
/// Typical usage of the [ScaffoldMessenger.of] function is to call it in
/// response to a user gesture or an application state change.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.0.dart **
/// {@end-tool}
///
/// A less elegant but more expedient solution is to assign a [GlobalKey] to the
/// [ScaffoldMessenger], then use the `key.currentState` property to obtain the
/// [ScaffoldMessengerState] rather than using the [ScaffoldMessenger.of]
/// function. The [MaterialApp.scaffoldMessengerKey] refers to the root
/// ScaffoldMessenger that is provided by default.
///
/// {@tool dartpad}
/// Sometimes [SnackBar]s are produced by code that doesn't have ready access
/// to a valid [BuildContext]. One such example of this is when you show a
/// SnackBar from a method outside of the `build` function. In these
/// cases, you can assign a [GlobalKey] to the [ScaffoldMessenger]. This
/// example shows a key being used to obtain the [ScaffoldMessengerState]
/// provided by the [MaterialApp].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.1.dart **
/// {@end-tool}
///
/// If there is no [ScaffoldMessenger] in scope, then this will assert in
/// debug mode, and throw an exception in release mode.
///
/// See also:
///
///  * [maybeOf], which is a similar function but will return null instead of
///    throwing if there is no [ScaffoldMessenger] ancestor.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor. óó*ó)   òÇ\ô©ô©Åa/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Will return null if a [ScaffoldMessenger] is not found in the given context.
///
/// See also:
///
///  * [of], which is a similar function, except that it will throw an
///    exception if a [ScaffoldMessenger] is not found in the given context. ô±ôøôæ   övMöôöô   övöw ö«¿ HCö«úiÅõ/// State for a [ScaffoldMessenger].
///
/// A [ScaffoldMessengerState] object can be used to [showSnackBar] or
/// [showMaterialBanner] for every registered [Scaffold] that is a descendant of
/// the associated [ScaffoldMessenger]. Scaffolds will register to receive
/// [SnackBar]s and [MaterialBanner]s from their closest ScaffoldMessenger
/// ancestor.
///
/// Typically obtained via [ScaffoldMessenger.of].  ú√NúÊúÊ úÛù ùùùùùÄ∂ùjùj 
ù}ùÇù»ùÉùúù«ùùù≠ù…ù ùœ.ù‰ù‰  ûÄúûHûH 
û[û`ûöûaûzûôû{ûÖûõûúû°(û∂û∂  ûÕû‘û‘  ûÊûÏûÏ    üÇÕü$ü$   üüüü°◊Å°‹°‹  °Ê°ı°Ù   ¢ÙÄ¨¢˘¢˘  £££   £§Äœ£©£©    •Ä¬••  ••+•*   •Ëò≤h≤hã√/// Shows a [SnackBar] across all registered [Scaffold]s. Scaffolds register
/// to receive snack bars from their closest [ScaffoldMessenger] ancestor.
/// If there are several registered scaffolds the snack bar is shown
/// simultaneously on all of them.
///
/// A scaffold can show at most one snack bar at a time. If this function is
/// called while another snack bar is already visible, the given snack bar
/// will be added to a queue and displayed after the earlier snack bars have
/// closed.
///
/// To control how long a [SnackBar] remains visible, use [SnackBar.duration].
///
/// To remove the [SnackBar] with an exit animation, use [hideCurrentSnackBar]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [SnackBar] suddenly (without an
/// animation), use [removeCurrentSnackBar].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.0.dart **
/// {@end-tool}
///
/// ## Relative positioning of floating SnackBars
///
/// A [SnackBar] with [SnackBar.behavior] set to [SnackBarBehavior.floating] is
/// positioned above the widgets provided to [Scaffold.floatingActionButton],
/// [Scaffold.persistentFooterButtons], and [Scaffold.bottomNavigationBar].
/// If some or all of these widgets take up enough space such that the SnackBar
/// would not be visible when positioned above them, an error will be thrown.
/// In this case, consider constraining the size of these widgets to allow room for
/// the SnackBar to be visible.
///
/// {@tool dartpad}
/// Here is an example showing how to display a [SnackBar] with [showSnackBar]
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// Here is an example showing that a floating [SnackBar] appears above [Scaffold.floatingActionButton].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.1.dart **
/// {@end-tool}
///
/// If [AnimationStyle.duration] is provided in the [snackBarAnimationStyle]
/// parameter, it will be used to override the snackbar show animation duration.
/// Otherwise, defaults to 250ms.
///
/// If [AnimationStyle.reverseDuration] is provided in the [snackBarAnimationStyle]
/// parameter, it will be used to override the snackbar hide animation duration.
/// Otherwise, defaults to 250ms.
///
/// To disable the snackbar animation, use [AnimationStyle.noAnimation].
///
/// {@tool dartpad}
/// This sample showcases how to override [SnackBar] show and hide animation
/// duration using [AnimationStyle] in [ScaffoldMessengerState.showSnackBar].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.2.dart **
/// {@end-tool}
/// ≤z≤Ñ≤É  ≤ì&≤§≤£   æÅyææ  æ&æ0æ/   ø~ÇôøÉøÉ  ø†ø±ø∞   ¿ BÇ«¿ C"¿ C"Ä˜/// Removes the current [SnackBar] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed snack bar does not run its normal exit animation. If there are
/// any queued snack bars, they begin their entrance animation immediately. ¿ C99¿ CO¿ CN  ¿ CW¿ Ck¿ Cl¿ DÊÉ	¿ EÇ¿ EÇÄê/// Removes the current [SnackBar] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ¿ Eó7¿ E≠¿ E¨  ¿ Eµ¿ E…¿ E ¿ GÛÅ√¿ HÇ¿ HÇÄÖ/// Removes all the snackBars currently in queue by clearing the queue
/// and running normal exit animation on the current snackBar.   ¿ I‘äp¿ N‚¿ N‚Ñô/// Shows a [MaterialBanner] across all registered [Scaffold]s. Scaffolds register
/// to receive material banners from their closest [ScaffoldMessenger] ancestor.
/// If there are several registered scaffolds the material banner is shown
/// simultaneously on all of them.
///
/// A scaffold can show at most one material banner at a time. If this function is
/// called while another material banner is already visible, the given material banner
/// will be added to a queue and displayed after the earlier material banners have
/// closed.
///
/// To remove the [MaterialBanner] with an exit animation, use [hideCurrentMaterialBanner]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [MaterialBanner] suddenly (without an
/// animation), use [removeCurrentMaterialBanner].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [MaterialBanner] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_material_banner.0.dart **
/// {@end-tool} ¿ N˙¿ O
¿ O	   ¿ THÇ¿ TM¿ TM  ¿ Tp¿ TÅ¿ TÄ   ¿ VfÇ‘¿ W¿ WÅ	/// Removes the current [MaterialBanner] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed material banner does not run its normal exit animation. If there are
/// any queued material banners, they begin their entrance animation immediately. ¿ W°E¿ WΩ¿ Wº  ¿ W≈¿ Wﬂ¿ W‡¿ Y>É¿ Y‡¿ Y‡Äñ/// Removes the current [MaterialBanner] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ¿ Z C¿ Z¿ Z  ¿ Z$¿ Z>¿ Z?¿ \WÇ¿ \ˆ¿ \ˆÄï/// Removes all the [MaterialBanner]s currently in queue by clearing the queue
/// and running normal exit animation on the current [MaterialBanner].   ¿ ^lÉœ¿ ^å¿ ^å  ¿ ^í¿ ^†¿ ^ü  ¿ ^l¿ ^m¿ ^y¿ ^z¿ b?Ä…¿ b]¿ b]   ¿ b?¿ b@¿ bL¿ bM ¿ cÅ®¿ c¿ c  ¿ cFÄÆ¿ cL ¿ cL¿ cc  ¿ cj¿ cz¿ cy  ¿ cÑ6¿ c•¿ c§  ¿ c€¿ c√¿ c›¿ c¯4¿ d¿ d    ¿ d1ÄÅ¿ dB¿ dB  ¿ dU¿ dn¿ dm  ¿ d1¿ d2 ¿ d∂íf¿ d∂¿ fvÅÆ/// The geometry of the [Scaffold] after all its contents have been laid out
/// except the [FloatingActionButton].
///
/// The [Scaffold] passes this pre-layout geometry to its
/// [FloatingActionButtonLocation], which produces an [Offset] that the
/// [Scaffold] uses to position the [FloatingActionButton].
///
/// For a description of the [Scaffold]'s geometry after it has
/// finished laying out, see the [ScaffoldGeometry]. ¿ fîÇ¿ g3 ¿ g3¿ gL Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.
¿ gS¿ gb¿ ga  ¿ gv¿ gÖ¿ gÑ  ¿ gó¿ g¶¿ g•  ¿ gµ&¿ gƒ¿ g√  ¿ g·¿ g¿ gÔ  ¿ g˛¿ h¿ h  ¿ h ¿ h/¿ h.  ¿ h@¿ hO¿ hN  ¿ h` ¿ ho¿ hn  ¿ hÜ¿ hï¿ hî   
¿ h¨Ä™¿ i>¿ i>ÄÄ/// The [Size] of [Scaffold.floatingActionButton].
///
/// If [Scaffold.floatingActionButton] is null, this will be [Size.zero]. ¿ i[Ä∂¿ j¿ jÄì/// The [Size] of the [Scaffold]'s [BottomSheet].
///
/// If the [Scaffold] is not currently showing a [BottomSheet],
/// this will be [Size.zero]. ¿ jÇÄ¿ lâ¿ lâÇM/// The vertical distance from the Scaffold's origin to the bottom of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the bottom of the screen, while
/// keeping it above the [BottomSheet], the [Scaffold.bottomNavigationBar],
/// or the keyboard.
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.bottom] of [minInsets] when aligning a [FloatingActionButton]
/// to [contentBottom]. ¿ lõÇ<¿ nÕ¿ nÕÇ/// The vertical distance from the [Scaffold]'s origin to the top of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the top of the screen, while
/// keeping it below the [Scaffold.appBar].
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.top] of [minInsets] when aligning a [FloatingActionButton] to
/// [contentTop]. ¿ n‹ÅÈ¿ pº¿ pºÅ∫/// The minimum padding to inset the [FloatingActionButton] by for it
/// to remain visible.
///
/// This value is the result of calling [MediaQueryData.padding] in the
/// [Scaffold]'s [BuildContext],
/// and is useful for insetting the [FloatingActionButton] to avoid features like
/// the system status bar or the keyboard.
///
/// If [Scaffold.resizeToAvoidBottomInset] is set to false,
/// [EdgeInsets.bottom] of [minInsets] will be 0.0. ¿ p ÅÁ¿ r£¿ r£Å∑/// The minimum padding to inset interactive elements to be within a safe,
/// un-obscured space.
///
/// This value reflects the [MediaQueryData.viewPadding] of the [Scaffold]'s
/// [BuildContext] when [Scaffold.resizeToAvoidBottomInset] is false or and
/// the [MediaQueryData.viewInsets] > 0.0. This helps distinguish between
/// different types of obstructions on the screen, such as software keyboards
/// and physical device notches. ¿ r∂Ç©¿ uS¿ uSÇw/// The [Size] of the whole [Scaffold].
///
/// If the [Size] of the [Scaffold]'s contents is modified by values such as
/// [Scaffold.resizeToAvoidBottomInset] or the keyboard opening, then the
/// [scaffoldSize] will not reflect those changes.
///
/// This means that [FloatingActionButtonLocation]s designed to reposition
/// the [FloatingActionButton] based on events such as the keyboard popping
/// up should use [minInsets] to make sure that the [FloatingActionButton] is
/// inset by enough to remain visible.
///
/// See [minInsets] and [MediaQueryData.padding] for more information on the
/// appropriate insets to apply. ¿ udÄù¿ uı¿ uı/// The [Size] of the [Scaffold]'s [SnackBar].
///
/// If the [Scaffold] is not showing a [SnackBar], this will be [Size.zero]. ¿ vÄØ¿ v£¿ v£Äã/// The [Size] of the [Scaffold]'s [MaterialBanner].
///
/// If the [Scaffold] is not showing a [MaterialBanner], this will be [Size.zero]. ¿ v∫_¿ w¿ w;/// The [TextDirection] of the [Scaffold]'s [BuildContext].    ¿ fe¿ ff¿ wÉ‹¿ w¿ x)Ä˘/// A snapshot of a transition between two [FloatingActionButtonLocation]s.
///
/// [ScaffoldState] uses this to seamlessly change transition animations
/// when a running [FloatingActionButtonLocation] transition is interrupted by a new transition. ¿ xqY¿ xw ¿ xw¿ xï  ¿ xñ
¿ xú¿ xõ  ¿ x¢¿ x®¿ xß  ¿ x¨¿ x≤¿ x±  ¿ xª¿ x¡¿ x¿   ¿ xŒ(¿ xÒ¿ xÒ  ¿ x˙&¿ y¿ y  ¿ y$+¿ yG¿ yG  ¿ yS¿ y`¿ y`    ¿ ymÄÍ¿ yÄ¿ yÄ  ¿ yä*¿ y•¿ y§  ¿ ym¿ yn¿ z[Äù¿ zn¿ zn   ¿ z[¿ z\¿ x¿ x¿ z¸àä¿ z¸¿ }∑Ç©/// Geometry information for [Scaffold] components after layout is finished.
///
/// To get a [ValueNotifier] for the scaffold geometry of a given
/// [BuildContext], use [Scaffold.geometryOf].
///
/// The ScaffoldGeometry is only available during the paint phase, because
/// its value is computed during the animation and layout phases prior to painting.
///
/// For an example of using the [ScaffoldGeometry], see the [BottomAppBar],
/// which uses the [ScaffoldGeometry] to paint a notch around the
/// [FloatingActionButton].
///
/// For information about the [Scaffold]'s geometry that is used while laying
/// out the [FloatingActionButton], see [ScaffoldPrelayoutGeometry]. ¿ }ÃÄô¿ ~ ¿ ~¿ ~& A/// Create an object that describes the geometry of a [Scaffold].¿ ~(¿ ~.¿ ~-  ¿ ~E¿ ~K¿ ~J   ¿ ~iÄˆ¿ I¿ IÄ…/// The distance from the [Scaffold]'s top edge to the top edge of the
/// rectangle in which the [Scaffold.bottomNavigationBar] bar is laid out.
///
/// Null if [Scaffold.bottomNavigationBar] is null. ¿ dÄÆ¿ ˙¿ ˙ÄÉ/// The [Scaffold.floatingActionButton]'s bounding rectangle.
///
/// This is null when there is no floating action button showing.   ¿ ÄÅ∆¿ Ä(¿ Ä(  ¿ ÄC¿ ÄK¿ ÄJ   ¿ Å·Å£¿ Ç`¿ Ç`i/// Creates a copy of this [ScaffoldGeometry] but with the given fields replaced with
/// the new values. ¿ Çj¿ Çs¿ Çr  ¿ Çä¿ Çë¿ Çê   ¿ }¶¿ }ß¿ ÉàÖ¿ Éà¿ Éé  ¿ ÉÙ7¿ ÉÙ ¿ ÉÙ¿ Ñ  ¿ Ñ¿ Ñ¿ Ñ  ¿ Ñ¿ Ñ#¿ Ñ"   ¿ Ñ/¿ ÑB¿ ÑB  ¿ ÑM!¿ ÑU¿ ÑU  ¿ Ñr¿ ÑÉ¿ ÑÉ  ¿ ÑêÇf¿ Ñ±¿ Ñ±   ¿ Ñê¿ Ñë ¿ Ü˙Åû¿ Üˇ¿ Üˇ  ¿ á¿ á¿ á  ¿ á5¿ á<¿ á;  ¿ áY!¿ áb¿ áa    ¿ äÈÑº¿ äÈ¿ äÔ  ¿ ãÅ(¿ ã$ ¿ ã$¿ ã7  ¿ ã>¿ ãE¿ ãD  ¿ ãR¿ ãY¿ ãX  ¿ ãg!¿ ãv¿ ãu  ¿ ãé¿ ãù¿ ãú  ¿ ãÆ"¿ ãΩ¿ ãº  ¿ ãŸ¿ ãﬂ¿ ã¯¿ ãÙ¿ ã‡¿ ã˜¿ å¿ å¿ å¿ å¿ å	¿ å¿ å$¿ å*¿ åD¿ å@¿ å+¿ åC¿ åJ ¿ åW¿ åW  ¿ ån¿ å{¿ å{  ¿ åã!¿ åò¿ åò  ¿ è({¿ è<¿ è<   ¿ è(¿ è) ¿ çÔÅ5¿ é	¿ é	  ¿ é¿ é¿ é  ¿ çÔ¿ ç ¿ ëÑ⁄¿ ë¿ ë  ¿ ë=z¿ ëC ¿ ëC¿ ëO  ¿ ëV¿ ëe¿ ëd  ¿ ët$¿ ëÉ¿ ëÇ  ¿ ëû¿ ë≠¿ ë¨   ¿ ëª¿ ë»¿ ë»  ¿ ë–¿ ë€¿ ë€  ¿ ëÈ!¿ ëÙ¿ ëÙ    ¿ íÉ◊¿ í"¿ í"  ¿ í(¿ í6¿ í5  ¿ í¿ í ¿ ïÍµı¿ ïÍ¿ ï  ¿ ñ%Ç`¿ ñ% ¿ ñ%¿ ñ4  ¿ ñ;¿ ñJ¿ ñI  ¿ ñX¿ ñg¿ ñf  ¿ ñz¿ ñâ¿ ñà  ¿ ñõ¿ ñ™¿ ñ©  ¿ ñ·2¿ ñ¿ ñÔ  ¿ ó1¿ ó(¿ ó'  ¿ óP7¿ ó_¿ ó^  ¿ óç0¿ óú¿ óõ  ¿ ó√ ¿ ó“¿ ó—  ¿ óÈ¿ ó¯¿ ó˜  ¿ ò
¿ ò¿ ò  ¿ ò($¿ ò7¿ ò6  ¿ òR,¿ òa¿ ò`   ¿ òâ¿ òî¿ òî  ¿ ò¢!¿ ò≠¿ ò≠  ¿ ò«¿ òÿ¿ òÿ  ¿ òÂ¿ òˆ¿ òˆ  ¿ ô!¿ ô¿ ô  ¿ ô-0¿ ôM¿ ôM  ¿ ôbG¿ ôÖ¿ ôÖ  ¿ ô≠F¿ ô–¿ ô–  ¿ ô˜6¿ ö¿ ö  ¿ ö1E¿ öT¿ öT  ¿ ö{¿ öÜ¿ öÜ  ¿ öú¿ ö™¿ ö™  ¿ öº)¿ ö«¿ ö«    ¿ öÍÆX¿ ö˚¿ ö˚  ¿ õ		¿ õ¿ õ  ¿ öÍ¿ öÎ¿ …FÇó¿ …W¿ …W  ¿ …f¿ …w¿ …v  ¿ …F¿ …G ¿ À·Ñ:¿ À·¿ Õ~Åñ/// Handler for scale and rotation animations in the [FloatingActionButton].
///
/// Currently, there are two types of [FloatingActionButton] animations:
///
/// * Entrance/Exit animations, which this widget triggers
///   when the [FloatingActionButton] is added, updated, or removed.
/// * Motion animations, which are triggered by the [Scaffold]
///   when its [FloatingActionButtonLocation] is updated. ¿ ÕπÄÿ¿ Õø ¿ Õø¿ Õﬁ  ¿ ÕÂ¿ ÕÙ¿ ÕÛ  ¿ Õ˛¿ Œ¿ Œ  ¿ Œ"¿ Œ1¿ Œ0  ¿ ŒG¿ ŒV¿ ŒU  ¿ Œk¿ Œz¿ Œy   ¿ Œï¿ Œ£¿ Œ£  ¿ Œ¨(¿ Œƒ¿ Œƒ  ¿ Œÿ4¿ Œ˚¿ Œ˚  ¿ œ0¿ œ0¿ œ0  ¿ œEf¿ œö¿ œö8/// Controls the current child widget.child as it exits.   ¿ œ∞i¿ œ·¿ œ·   ¿ œ∞¿ œ± ¿ –ùÃ¿ –¿ –#   ¿ —,,¿ —E¿ —E  ¿ —\,¿ —m¿ —m  ¿ —å5¿ —ù¿ —ù  ¿ —≈/¿ —÷¿ —÷  ¿ —¯.¿ “¿ “  ¿ “*5¿ “E¿ “E  ¿ “‹-¿ “Û¿ “Û  ¿ ”5¿ ”$¿ ”$  ¿ ”F4¿ ”a¿ ”a  ¿ ”~¿ ”Ü¿ ”Ü  ¿ ‹ÂÄ±¿ ›¿ › ¿ ›¿ ›¿ ›&¿ › ¿ ›'¿ ›m¿ ›2¿ ›-¿ ›8¿ ›4¿ ›:¿ ›d¿ ›a¿ ›f¿ ›n¿ ›o¿ ›t¿ ›ï¿ ›u¿ ›¿ ›î¿ ›Ö¿ ›Ä¿ ›á¿ ›ç¿ ›é  
¿ ”ôÇ~¿ ”™¿ ”™   ¿ ”ô¿ ”ö¿ ÷Å¿ ÷,¿ ÷,   ¿ ÷¿ ÷¿ ◊!Ö¿¿ ◊2¿ ◊2  ¿ ◊B)¿ ◊c¿ ◊b  ¿ ◊!¿ ◊"¿ ›õr¿ ›†¿ ›†    ¿ ﬁâ{¿ ﬁ¿ ﬁ    ¿ ÁêÅ¿ Áï¿ Áï  ¿ Áª¿ ÁÃ¿ ÁÀ   ¿ Ëòz¿ Ëù¿ Ëù  ¿ ËΩ¿ Ë∆¿ Ë≈   ¿ ÈÉ—¿ È)¿ È)  ¿ È/¿ È=¿ È<  ¿ È¿ È¿ ÏÎÄÄ¿ Ï¿ Ï    ¿ Ìox¿ Ìt¿ Ìt  ¿ Ìâ¿ Ìë¿ Ìê    ¿ ÌÎ¿ pπ¿ ÌÎ¿Oö]/// Implements the basic Material Design visual layout structure.
///
/// This class provides APIs for showing drawers and bottom sheets.
///
/// To display a persistent bottom sheet, obtain the
/// [ScaffoldState] for the current [BuildContext] via [Scaffold.of] and use the
/// [ScaffoldState.showBottomSheet] function.
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a [body] and [FloatingActionButton].
/// The [body] is a [Text] placed in a [Center] in order to center the text
/// within the [Scaffold]. The [FloatingActionButton] is connected to a
/// callback that increments a counter.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a blueGrey [backgroundColor], [body]
/// and [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in
/// order to center the text within the [Scaffold]. The [FloatingActionButton]
/// is connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_background_color.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a
/// [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order
/// to center the text within the [Scaffold]. The [FloatingActionButton] is
/// centered and docked within the [BottomAppBar] using
/// [FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is
/// connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_bottom_app_bar.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.2.dart **
/// {@end-tool}
///
/// ## Scaffold layout, the keyboard, and display "notches"
///
/// The scaffold will expand to fill the available space. That usually
/// means that it will occupy its entire window or device screen. When
/// the device's keyboard appears the Scaffold's ancestor [MediaQuery]
/// widget's [MediaQueryData.viewInsets] changes and the Scaffold will
/// be rebuilt. By default the scaffold's [body] is resized to make
/// room for the keyboard. To prevent the resize set
/// [resizeToAvoidBottomInset] to false. In either case the focused
/// widget will be scrolled into view if it's within a scrollable
/// container.
///
/// The [MediaQueryData.padding] value defines areas that might
/// not be completely visible, like the display "notch" on the iPhone
/// X. The scaffold's [body] is not inset by this padding value
/// although an [appBar] or [bottomNavigationBar] will typically
/// cause the body to avoid the padding. The [SafeArea]
/// widget can be used within the scaffold's body to avoid areas
/// like display notches.
///
/// ## Floating action button with a draggable scrollable bottom sheet
///
/// If [Scaffold.bottomSheet] is a [DraggableScrollableSheet],
/// [Scaffold.floatingActionButton] is set, and the bottom sheet is dragged to
/// cover greater than 70% of the Scaffold's height, two things happen in parallel:
///
///   * Scaffold starts to show scrim (see [ScaffoldState.showBodyScrim]), and
///   * [Scaffold.floatingActionButton] is scaled down through an animation with a [Curves.easeIn], and
///     disappears when the bottom sheet covers the entire Scaffold.
///
/// And as soon as the bottom sheet is dragged down to cover less than 70% of the [Scaffold], the scrim
/// disappears and [Scaffold.floatingActionButton] animates back to its normal size.
///
/// ## Troubleshooting
///
/// ### Nested Scaffolds
///
/// The Scaffold is designed to be a top level container for
/// a [MaterialApp]. This means that adding a Scaffold
/// to each route on a Material app will provide the app with
/// Material's basic visual layout structure.
///
/// It is typically not necessary to nest Scaffolds. For example, in a
/// tabbed UI, where the [bottomNavigationBar] is a [TabBar]
/// and the body is a [TabBarView], you might be tempted to make each tab bar
/// view a scaffold with a differently titled AppBar. Rather, it would be
/// better to add a listener to the [TabController] that updates the
/// AppBar
///
/// {@tool snippet}
/// Add a listener to the app's tab controller so that the [AppBar] title of the
/// app's one and only scaffold is reset each time a new tab is selected.
///
/// ```dart
/// TabController(vsync: tickerProvider, length: tabCount)..addListener(() {
///   if (!tabController.indexIsChanging) {
///     setState(() {
///       // Rebuild the enclosing scaffold with a new AppBar title
///       appBarTitle = 'Tab ${tabController.index}';
///     });
///   }
/// })
/// ```
/// {@end-tool}
///
/// Although there are some use cases, like a presentation app that
/// shows embedded flutter content, where nested scaffolds are
/// appropriate, it's best to avoid nesting scaffolds.
///
/// See also:
///
///  * [AppBar], which is a horizontal bar typically shown at the top of an app
///    using the [appBar] property.
///  * [BottomAppBar], which is a horizontal bar typically shown at the bottom
///    of an app using the [bottomNavigationBar] property.
///  * [FloatingActionButton], which is a circular button typically shown in the
///    bottom right corner of the app using the [floatingActionButton] property.
///  * [Drawer], which is a vertical panel that is typically displayed to the
///    left of the body (and often hidden on phones) using the [drawer]
///    property.
///  * [BottomNavigationBar], which is a horizontal array of buttons typically
///    shown along the bottom of the app using the [bottomNavigationBar]
///    property.
///  * [BottomSheet], which is an overlay typically shown near the bottom of the
///    app. A bottom sheet can either be persistent, in which case it is shown
///    using the [ScaffoldState.showBottomSheet] method, or modal, in which case
///    it is shown using the [showModalBottomSheet] function.
///  * [SnackBar], which is a lightweight message with an optional action which
///    briefly displays at the bottom of the screen. Use the
///    [ScaffoldMessengerState.showSnackBar] method to show snack bars.
///  * [MaterialBanner], which displays an important, succinct message, at the
///    top of the screen, below the app bar. Use the
///    [ScaffoldMessengerState.showMaterialBanner] method to show material banners.
///  * [ScaffoldState], which is the state associated with this widget.
///  * <https://material.io/design/layout/responsive-layout-grid.html>
///  * Cookbook: [Add a Drawer to a screen](https://docs.flutter.dev/cookbook/design/drawer) ¿sÉˇ¿∂ ¿∂¿æ :/// Creates a visual scaffold for Material Design widgets.¿≈	¿Ã¿À  ¿‘¿⁄¿Ÿ  ¿Â	¿Î¿Í  ¿Ù¿˙¿˘  ¿	!¿	¿	  ¿	:!¿	@¿	?  ¿	a¿	g¿	f  ¿	É?¿	â¿	à  ¿	»¿	Œ¿	Õ  ¿	Ì¿	Û¿	Ú  ¿	˛¿
¿
  ¿
¿
¿
  ¿
,¿
2¿
1  ¿
I¿
O¿
N  ¿
g¿
m¿
l  ¿
}¿
É¿
Ç  ¿
ó¿
ù¿
ú  ¿
∫¿
¿¿
ø  ¿
”6¿
Ÿ¿
ÿ  ¿¿¿  ¿,$¿2¿1  ¿V#¿\¿[  ¿¿Ö¿Ñ  ¿ö>¿†¿ü  ¿ﬁ¿‰¿„  ¿¸'¿¿  ¿)*¿/¿.  ¿Y¿_¿^  ¿	§¿	∏¿	π¿
…¿
Ú¿¿¿!¿L¿t¿π¿¿O¿vÉÆ¿¿Ét/// If true, and [bottomNavigationBar] or [persistentFooterButtons]
/// is specified, then the [body] extends to the bottom of the Scaffold,
/// instead of only extending to the top of the [bottomNavigationBar]
/// or the [persistentFooterButtons].
///
/// If true, a [MediaQuery] widget whose bottom padding matches the height
/// of the [bottomNavigationBar] will be added above the scaffold's [body].
///
/// This property is often useful when the [bottomNavigationBar] has
/// a non-rectangular shape, like [CircularNotchedRectangle], which
/// adds a [FloatingActionButton] sized notch to the top edge of the bar.
/// In this case specifying `extendBody: true` ensures that scaffold's
/// body will be visible through the bottom navigation bar's notch.
///
/// See also:
///
///  * [extendBodyBehindAppBar], which extends the height of the body
///    to the top of the scaffold. ¿)Åc¿t¿tÅ3/// Whether the drawer can be dismissed by tapping on the barrier.
///
/// If false, and a [drawer] is specified, then the barrier behind the drawer
/// will not respond to a tap event and thus remains open.
///
/// Defaults to true, in which case the drawer will close upon the user tapping on the barrier. ¿ëÅ˝¿x¿xÅ¡/// If true, and an [appBar] is specified, then the height of the [body] is
/// extended to include the height of the app bar and the top of the body
/// is aligned with the top of the app bar.
///
/// This is useful if the app bar's [AppBar.backgroundColor] is not
/// completely opaque.
///
/// This property is false by default.
///
/// See also:
///
///  * [extendBody], which extends the height of the body to the bottom
///    of the scaffold. ¿ìY¿Ê¿Ê5/// An app bar to display at the top of the scaffold. ¿ÒÑ¿¿ÉÁ/// The primary content of the scaffold.
///
/// Displayed below the [appBar], above the bottom of the ambient
/// [MediaQuery]'s [MediaQueryData.viewInsets], and behind the
/// [floatingActionButton] and [drawer]. If [resizeToAvoidBottomInset] is
/// false then the body is not resized when the onscreen keyboard appears,
/// i.e. it is not inset by `viewInsets.bottom`.
///
/// The widget in the body of the scaffold is positioned at the top-left of
/// the available space between the app bar and the bottom of the scaffold. To
/// center this widget instead, consider putting it in a [Center] widget and
/// having that be the body. To expand this widget instead, consider
/// putting it in a [SizedBox.expand].
///
/// If you have a column of widgets that should normally fit on the screen,
/// but may overflow and would in such cases need to scroll, consider using a
/// [ListView] as the body of the scaffold. This is also a good choice for
/// the case where your body is a scrollable list. ¿Äû¿û¿ûu/// A button displayed floating above [body], in the bottom right corner.
///
/// Typically a [FloatingActionButton]. ¿∑Äˇ¿ö¿öÄ∏/// Responsible for determining where the [floatingActionButton] should go.
///
/// If null, the [ScaffoldState] will use the default location, [FloatingActionButtonLocation.endFloat]. ¿ªÅ¿™¿™Äƒ/// Animator to move the [floatingActionButton] to a new [floatingActionButtonLocation].
///
/// If null, the [ScaffoldState] will use the default animator, [FloatingActionButtonAnimator.scaling]. ¿ÀÅæ¿r¿rÅÄ/// A set of buttons that are displayed at the bottom of the scaffold.
///
/// Typically this is a list of [TextButton] widgets. These buttons are
/// persistently visible, even if the [body] of the scaffold scrolls.
///
/// These widgets will be wrapped in an [OverflowBar].
///
/// The [persistentFooterButtons] are rendered above the
/// [bottomNavigationBar] but below the [body]. ¿éÄΩ¿2¿2ÄÇ/// The alignment of the [persistentFooterButtons] inside the [OverflowBar].
///
/// Defaults to [AlignmentDirectional.centerEnd]. ¿PÅ¿¿ˆ¿ˆÅ~/// Decoration for the container that holds the [persistentFooterButtons].
///
/// By default, this container has a top border with a width of 1.0, created by
/// [Divider.createBorderSide].
///
/// See also:
///
///  * [persistentFooterButtons], which defines the buttons to show in the footer.
///  * [persistentFooterAlignment], which defines the alignment of the footer buttons. ¿É'¿"6¿"6ÇÏ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from either left-to-right ([TextDirection.ltr]) or
/// right-to-left ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe on mobile, set the
/// [Scaffold.drawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openDrawer] to open the drawer and [Navigator.pop] to close
/// it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.drawer.0.dart **
/// {@end-tool} ¿"A|¿"Æ¿"ÆT/// Optional callback that is called when the [Scaffold.drawer] is opened or closed. ¿"¬É)¿%‚¿%‚ÇÎ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from right-to-left ([TextDirection.ltr]) or
/// left-to-right ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openEndDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe, set the
/// [Scaffold.endDrawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openEndDrawer] to open the drawer and [Navigator.pop] to
/// close it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.end_drawer.0.dart **
/// {@end-tool} ¿%ÄÇ¿&`¿&`W/// Optional callback that is called when the [Scaffold.endDrawer] is opened or closed. ¿&wÅ¿'i¿'iÄ‹/// The color to use for the scrim that obscures primary content while a drawer is open.
///
/// If this is null, then [DrawerThemeData.scrimColor] is used. If that
/// is also null, then it defaults to [Colors.black54]. ¿'~Çˇ¿*f¿*fÇô/// A builder for the widget that obscures primary content while a bottom sheet is open.
///
/// The builder receives the current [BuildContext] and an [Animation] as parameters.
/// The [Animation] ranges from 0.0 to 1.0 based on how much the bottom sheet covers the screen.
/// A value of 0.0 represents when the bottom sheet covers 70% of the screen,
/// and 1.0 represents when the bottom sheet fully covers the screen.
///
/// If this is null, then a non-dismissable [ModalBarrier] with [Colors.black] is used. The
/// barrier is animated to fade in and out as the bottom sheet is opened and closed.
///
/// If the builder returns null, then no scrim is shown. ¿*ÇÄ±¿+$¿+$Äé/// The color of the [Material] widget that underlies the entire Scaffold.
///
/// The theme's [ThemeData.scaffoldBackgroundColor] by default. ¿+8ÅJ¿,o¿,oÅ/// A bottom navigation bar to display at the bottom of the scaffold.
///
/// Snack bars slide from underneath the bottom navigation bar while bottom
/// sheets are stacked on top.
///
/// The [bottomNavigationBar] is rendered below the [persistentFooterButtons]
/// and the [body]. ¿,áÜ2¿2Æ¿2ÆÖ⁄/// The persistent bottom sheet to display.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// Unlike the persistent bottom sheet displayed by [showBottomSheet]
/// this bottom sheet is not a [LocalHistoryEntry] and cannot be dismissed
/// with the scaffold appbar's back button.
///
/// If a persistent bottom sheet created with [showBottomSheet] is already
/// visible, it must be closed before building the Scaffold with a new
/// [bottomSheet].
///
/// The value of [bottomSheet] can be any widget at all. It's unlikely to
/// actually be a [BottomSheet], which is used by the implementations of
/// [showBottomSheet] and [showModalBottomSheet]. Typically it's a widget
/// that includes [Material].
///
/// See also:
///
///  * [showBottomSheet], which displays a bottom sheet as a route that can
///    be dismissed with the scaffold's back button.
///  * [showModalBottomSheet], which displays a modal bottom sheet.
///  * [BottomSheetThemeData], which can be used to customize the default
///    bottom sheet property values when using a [BottomSheet]. ¿2æÇ¿4∑¿4∑Å⁄/// If true the [body] and the scaffold's floating widgets should size
/// themselves to avoid the onscreen keyboard whose height is defined by the
/// ambient [MediaQuery]'s [MediaQueryData.viewInsets] `bottom` property.
///
/// For example, if there is an onscreen keyboard displayed above the
/// scaffold, the body can be resized to avoid overlapping the keyboard, which
/// prevents widgets inside the body from being obscured by the keyboard.
///
/// Defaults to true. ¿4‘Åb¿6/¿6/ÅA/// Whether this scaffold is being displayed at the top of the screen.
///
/// If true then the height of the [appBar] will be extended by the height
/// of the screen's status bar, i.e. the top padding for [MediaQuery].
///
/// The default value of this property, like the default value of
/// [AppBar.primary], is true. ¿6;r¿6ñ¿6ñ@/// {@macro flutter.material.DrawerController.dragStartBehavior} ¿6≤Ç¿8£¿8£Å–/// The width of the area within which a horizontal swipe will open the
/// drawer.
///
/// By default, the value used is 20.0 added to the padding edge of
/// `MediaQuery.paddingOf(context)` that corresponds to the surrounding
/// [TextDirection]. This ensures that the drag area for notched devices is
/// not obscured. For example, if `TextDirection.of(context)` is set to
/// [TextDirection.ltr], 20.0 will be added to
/// `MediaQuery.paddingOf(context).left`. ¿8ªÅ¿9°¿9°ÄŒ/// Determines if the [Scaffold.drawer] can be opened with a drag
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿9¡Å¿:•¿:•ÄÃ/// Determines if the [Scaffold.endDrawer] can be opened with a
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿:»Ç¿<ø¿<øÅ–/// Restoration ID to save and restore the state of the [Scaffold].
///
/// If it is non-null, the scaffold will persist and restore whether the
/// [drawer] and [endDrawer] was open or closed.
///
/// The state of this widget is persisted in a [RestorationBucket] claimed
/// from the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.   ¿<—çÈ¿D>¿D>á/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will cause an
/// assert in debug mode, and throw an exception in release mode.
///
/// This method can be expensive (it walks the element tree).
///
/// {@tool dartpad}
/// Typical usage of the [Scaffold.of] function is to call it from within the
/// `build` method of a child of a [Scaffold].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// When the [Scaffold] is actually created in the same `build` function, the
/// `context` argument to the `build` function can't be used to find the
/// [Scaffold] (since it's "above" the widget being returned in the widget
/// tree). In such cases, the following technique with a [Builder] can be used
/// to provide a new scope with a [BuildContext] that is "under" the
/// [Scaffold]:
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.1.dart **
/// {@end-tool}
///
/// A more efficient solution is to split your build function into several
/// widgets. This introduces a new context from which you can obtain the
/// [Scaffold]. In this solution, you would have an outer widget that creates
/// the [Scaffold] populated by instances of your new inner widgets, and then
/// in these inner widgets you would use [Scaffold.of].
///
/// A less elegant but more expedient solution is assign a [GlobalKey] to the
/// [Scaffold], then use the `key.currentState` property to obtain the
/// [ScaffoldState] rather than using the [Scaffold.of] function.
///
/// If there is no [Scaffold] in scope, then this will throw an exception.
/// To return null if there is no [Scaffold], use [maybeOf] instead. ¿DA¿DO¿DN   ¿JæÇí¿L¿LÇ/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will return null.
/// To throw an exception instead, use [of] instead of this function.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [of], a similar function to this one that throws if no instance
///    encloses the given context. Also includes some sample code in its
///    documentation. ¿L¯¿M¿M   ¿MTä¿Qû¿QûÉ¯/// Returns a [ValueListenable] for the [ScaffoldGeometry] for the closest
/// [Scaffold] ancestor of the given context.
///
/// The [ValueListenable.value] is only available at paint time.
///
/// Notifications are guaranteed to be sent before the first paint pass
/// with the new geometry, but there is no guarantee whether a build or
/// layout passes are going to happen between the notification and the next
/// paint pass.
///
/// The closest [Scaffold] ancestor for the context might change, e.g when
/// an element is moved from one scaffold to another. For [StatefulWidget]s
/// using this listenable, a change of the [Scaffold] ancestor will
/// trigger a [State.didChangeDependencies].
///
/// A typical pattern for listening to the scaffold geometry would be to
/// call [Scaffold.geometryOf] in [State.didChangeDependencies], compare the
/// return value with the previous listenable, if it has changed, unregister
/// the listener, and register a listener to the new [ScaffoldGeometry]
/// listenable. ¿Q©¿Q∑¿Q∂   ¿W]Ñ?¿Z¿ZÇâ/// Whether the Scaffold that most tightly encloses the given context has a
/// drawer.
///
/// If this is being used during a build (for example to decide whether to
/// show an "open drawer" button), set the `registerForUpdates` argument to
/// true. This will then set up an [InheritedWidget] relationship with the
/// [Scaffold] so that the client widget gets rebuilt whenever the [hasDrawer]
/// value changes.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [Scaffold.of], which provides access to the [ScaffoldState] object as a
///    whole, from which you can show bottom sheets, and so forth. ¿Z¿Z)¿Z(  ¿Z2¿Z8¿Z7  ¿ZL¿[†Ç√¿[Æ¿[Æ  ¿[Œ¿[‹¿[€  ¿[‰¿[˜¿[ˆ   ¿^g;¿^Å¿^Å   ¿^g¿^h ¿^¶¿ ì ¿^¶¿_@Äì/// State for a [Scaffold].
///
/// Can display [BottomSheet]s. Retrieve a [ScaffoldState] from the current
/// [BuildContext] using [Scaffold.of].  ¿`œV¿`ˆ¿`ˆ ¿a¿a¿a"¿a¿a#¿a$¿a)Y¿aP¿aP ¿a`¿ai¿a¿aj¿aÄ¿aÅ¿aá&¿aó¿aó ¿a¢¿a´¿a¨¿cù¿c•¿c•  ¿dm:¿dÇ¿dÇ ¿dí¿d†¿d¶¿d°¿d´=¿d¿¿d¿ ¿d”¿d·¿dÁ¿d‚¿n©*¿n¡¿n¡  ¿nÍM¿o%¿o%  ¿qì_¿q⁄¿q⁄  ¿t∫R¿t€¿t€ ¿u
¿u¿tÙ¿u	¿tı¿u4¿u1¿u1  ¿uH4¿uX¿uX ¿uq¿uz¿u{¿uÄ/¿uì¿uì  ¿¶É<¿¶ú¿¶ú  ¿¶√?¿¶Â¿¶Â  ¿ßC¿ß$¿ß$  ¿ßM;¿ßk¿ßk  ¿ßçB¿ß¶¿ß¶  ¿Ø˙0¿∞¿∞  ¿ €=¿ Ù¿ Ù  ¿À¿À!¿À! ¿À2	¿_ö>¿_≤¿_≤   ¿_ö¿_õ¿a≤j¿a˘¿a˘;/// Whether this scaffold has a non-null [Scaffold.appBar].   ¿b j¿bg¿bg;/// Whether this scaffold has a non-null [Scaffold.drawer].   ¿bés¿bÿ¿bÿ>/// Whether this scaffold has a non-null [Scaffold.endDrawer].   ¿cÄî¿cZ¿cZI/// Whether this scaffold has a non-null [Scaffold.floatingActionButton].   ¿c∫Ä∞¿dF¿dFy/// The max height the [Scaffold.appBar] uses.
///
/// This is based on the appBar preferred height plus the top padding.   ¿dÌÄŸ¿e¢¿e¢Äü/// Whether the [Scaffold.drawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openDrawer], which opens the [Scaffold.drawer] of a
///    [Scaffold].   ¿e ÄË¿fà¿fàÄ®/// Whether the [Scaffold.endDrawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openEndDrawer], which opens the [Scaffold.endDrawer] of
///    a [Scaffold].   ¿∞/\¿∞8¿∞8     ¿_‹Äﬁ¿_˙¿_˙  ¿`¿`¿`  ¿`%¿`+¿`*  ¿_‹¿_›¿_È¿_Í¿f∂Ä˜¿fª¿fª  ¿f—¿f◊¿f÷   ¿g±Å¿g∂¿g∂  ¿gœ¿g’¿g‘   ¿hªÇÃ¿j◊¿j◊Å¸/// Opens the [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.drawer], this function will cause
/// the drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿kãÇ·¿mø¿møÇ/// Opens the end side [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.endDrawer], this function will cause
/// the end side drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿oâÅ^¿oé¿oé    ¿rJÅ¶¿rO¿rO    ¿u¥âÂ¿uπ¿uπ    ¿ùÅg¿¢¿¢    ¿ÅÄ¸¿Åû¿ÅûÄä/// Closes [Scaffold.drawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿ÇÅ¿Ç°¿Ç°Äç/// Closes [Scaffold.endDrawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿Éc¿É¿É    ¿É~è$¿Éû¿Éû  ¿Éµ¿Éƒ¿É√  ¿É“¿É·¿É‡  ¿ÉÚ0¿Ñ¿Ñ  ¿Ñ(¿Ñ0¿Ñ/  ¿ÑD¿ÑM¿ÑL  ¿Ñ[¿Ñi¿Ñh  ¿Ñs¿Ñz¿Ñy  ¿Ñã¿Ñú¿Ñõ  ¿Ñ¨¿Ñ≥¿Ñ≤  ¿Ñ¬¿Ñ…¿Ñ»  ¿Ñ‹,¿Ñ‚¿Ñ·  ¿Ö¿í¶ìπ¿†¿†ç,/// Shows a Material Design bottom sheet in the nearest [Scaffold]. To show
/// a persistent bottom sheet, use the [Scaffold.bottomSheet].
///
/// Returns a controller that can be used to close and otherwise manipulate the
/// bottom sheet.
///
/// To rebuild the bottom sheet (e.g. if it is stateful), call
/// [PersistentBottomSheetController.setState] on the controller returned by
/// this method.
///
/// The new bottom sheet becomes a [LocalHistoryEntry] for the enclosing
/// [ModalRoute] and a back button is added to the app bar of the [Scaffold]
/// that closes the bottom sheet.
///
/// The [transitionAnimationController] controls the bottom sheet's entrance and
/// exit animations. It's up to the owner of the controller to call
/// [AnimationController.dispose] when the controller is no longer needed.
///
/// To create a persistent bottom sheet that is not a [LocalHistoryEntry] and
/// does not add a back button to the enclosing Scaffold's app bar, use the
/// [Scaffold.bottomSheet] constructor parameter.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// {@tool dartpad}
/// This example demonstrates how to use [showBottomSheet] to display a
/// bottom sheet when a user taps a button. It also demonstrates how to
/// close a bottom sheet using the Navigator.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_state.show_bottom_sheet.0.dart **
/// {@end-tool}
///
/// The [sheetAnimationStyle] parameter is used to override the bottom sheet
/// animation duration and reverse animation duration.
///
/// If [AnimationStyle.duration] is provided, it will be used to override
/// the bottom sheet animation duration in the underlying
/// [BottomSheet.createAnimationController].
///
/// If [AnimationStyle.reverseDuration] is provided, it will be used to
/// override the bottom sheet reverse animation duration in the underlying
/// [BottomSheet.createAnimationController].
///
/// To disable the bottom sheet animation, use [AnimationStyle.noAnimation].
///
/// {@tool dartpad}
/// This sample showcases how to override the [showBottomSheet] animation
/// duration and reverse animation duration using [AnimationStyle].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_state.show_bottom_sheet.1.dart **
/// {@end-tool}
/// See also:
///
///  * [BottomSheet], which becomes the parent of the widget returned by the
///    `builder`.
///  * [showBottomSheet], which calls this method given a [BuildContext].
///  * [showModalBottomSheet], which can be used to display a modal bottom
///    sheet.
///  * [Scaffold.of], for information about how to obtain the [ScaffoldState].
///  * The Material 2 spec at <https://m2.material.io/components/sheets-bottom>.
///  * The Material 3 spec at <https://m3.material.io/components/bottom-sheets/overview>.
///  * [AnimationStyle], which is used to override the modal bottom sheet
///    animation duration and reverse animation duration. 
¿†î¿†£¿†¢  ¿†±¿†π¿†∏  ¿†Õ¿†÷¿†’  ¿†‰¿†Ú¿†Ò  ¿†¸¿°¿°  ¿°¿°%¿°$  ¿°5¿°<¿°;  ¿°K¿°R¿°Q  ¿°e2¿°{¿°z  ¿°ù#¿°Æ¿°≠   ¿ß‘Äü¿®¿®./// Shows the [Scaffold.floatingActionButton].   ¿®…Ñ≤¿®Œ¿®Œ  ¿®Ë.¿©¿©   ¿ÆwÅo¿Æ|¿Æ|    ¿∞èÉP¿∞≠¿∞≠   ¿∞è¿∞ê¿∞ú¿∞ù¿≥„Üz¿¥¿¥  ¿¥¿¥¿¥  ¿≥„¿≥‰¿≥¿≥Ò¿∫aÉ¿∫¿∫   ¿∫a¿∫b¿∫n¿∫o¿ΩÅk¿Ωù¿Ωù   ¿Ω¿ΩÄ¿Ωå¿Ωç¿æÓÉ÷¿æÛ¿æÛ  	¿ø¿ø¿ø  ¿ø#¿ø,¿ø+  ¿ø6¿ø>¿ø=  ¿øL¿ø[¿øZ  ¿øq¿øÄ¿ø  ¿øï ¿ø§¿ø£  ¿øª!¿ø ¿ø…  ¿ø‚¿øË¿øÁ  ¿¿&¿¿¿¿  ¿ø˚¿¿'¿¬»Ñ¿¬Õ¿¬Õ  ¿¬›¿¬Ì¿¬Ï  ¿¬ˆ¿√¿√   ¿∆ﬁÉ˘¿∆„¿∆„  ¿∆¿« ¿∆ˇ  ¿«	¿«¿«   ¿À<ÅΩ¿ÀÀ¿ÀÀÄÉ/// Updates the state of the body scrim.
///
/// This method is used to show or hide the body scrim and to set the animation value. ¿ÀŸ
¿Àﬂ¿Àﬁ  ¿ÀÂ¿ÀÌ¿ÀÏ   ¿Ã˝•q¿Õ¿Õ  ¿Õ#¿Õ1¿Õ0  ¿Ã˝¿Ã˛¿Õ
¿Õ ¿ÚrÅì¿Úr¿Úx  ¿Úß#¿Úß ¿Úß¿Úª  ¿Úº¿Ú¬¿Ú¡   ¿ÚŒ¿Ú·¿Ú·    ¿ÚÌÄå¿Ú˛¿Ú˛  ¿Û¿Û¿Û  ¿ÚÌ¿ÚÓ¿Û}ÄÜ¿Ûé¿Ûé  ¿Ûï¿Û§¿Û£  ¿Û}¿Û~ ¿ÙÇ‡¿Ù¿Ù∂Ä®/// An interface for controlling a feature of a [Scaffold].
///
/// Commonly obtained from [ScaffoldMessengerState.showSnackBar] or
/// [ScaffoldState.showBottomSheet].¿Ù–¿Ù–¿Ù–¿Ù‚¿Ù‚¿Ù‚¿ÙÈ\¿ÙÔ¿ı¿ı	¿ı
¿ı	 ¿ı¿ı¿ı  ¿ı¿ı¿ı  ¿ı*
¿ı0¿ı/  ¿ı6¿ı<¿ı;   ¿ıH¿ıP¿ıP  ¿ı[¿ın¿ın  ¿ı¸x¿ˆo¿ˆo]/// Remove the feature (e.g., bottom sheet, snack bar, or material banner) from the scaffold. ¿ˆyk¿ˆ‹¿ˆ‹M/// Mark the feature (e.g., bottom sheet or snack bar) as needing to rebuild. ¿ı}{¿ı‹¿ı‹N/// Completes when the feature controlled by this object is no longer visible.      ¿ˆÈÉÙ¿ˆÈ¿ˆÔ  ¿˜ÅÇ¿˜% ¿˜%¿˜9  ¿˜@	¿˜G¿˜F  ¿˜O!¿˜^¿˜]  ¿˜v¿˜|¿˜{  ¿˜í¿˜ò¿˜ó  ¿˜´¿˜∫¿˜π  ¿˜»¿˜◊¿˜÷  ¿˜Á¿˜ˆ¿˜ı  ¿¯¿¯¿¯  ¿¯!¿¯'¿¯&  ¿¯;¿¯A¿¯@  ¿¯O
¿¯U¿¯T  ¿¯_¿¯e¿¯d  ¿¯v¿¯|¿¯{  ¿¯å¿¯í¿¯ë  ¿˜à¿¯¿¯•/¿¯¡¿¯¡  ¿˘¿˘$¿˘$  ¿˘2¿˘>¿˘>  ¿˘P¿˘d¿˘d  ¿˘q¿˘Ö¿˘Ö  ¿˘î¿˘®¿˘®  ¿˘µ¿˘…¿˘…  ¿˘‘¿˘ﬂ¿˘ﬂ  ¿˘Ô¿˘¸¿˘¸  ¿˙¿˙¿˙  ¿˙*¿˙=¿˙=  ¿˙F¿˙R¿˙R  ¿˙b!¿˙x¿˙x    ¿˙àS¿˙Æ¿˙Æ   ¿˙à¿˙â ¿˙ﬂçÉ¿˙ﬂ¿˙Â   ¿˚'B¿˚?¿˚? ¿˚P  	¿˚nÄΩ¿˚¿˚   ¿˚n¿˚o¿¸/Äù¿¸@¿¸@   ¿¸/¿¸0¿¸–Äµ¿¸·¿¸·  ¿¸Ò¿˝¿˝  ¿¸–¿¸—¿˝âZ¿˝é¿˝é    ¿˝ÁÄû¿˝Ï¿˝Ï  ¿˝˝¿˛¿˛   ¿˛âÄÙ¿˛é¿˛é  ¿˛ù¿˛≠¿˛¨  ¿˛∂¿˛Ω¿˛º   ¿ˇÅ|¿ˇÜ¿ˇÜ  ¿ˇö¿ˇ´¿ˇ™   ¿ É®¿ ¿   ¿ ,¿ 5¿ 4   ¿≠Ñ≥¿¿¿¿  ¿∆¿‘¿”  ¿≠¿Æ ¿dÇ~¿d¿	¶Å;/// A [ScaffoldFeatureController] for standard bottom sheets.
///
/// This is the type of objects returned by [ScaffoldState.showBottomSheet].
///
/// This controller is used to display both standard and persistent bottom
/// sheets. A bottom sheet is only persistent if it is set as the
/// [Scaffold.bottomSheet]. ¿
Ä∞¿
¿
1¿
2¿
3¿
2 ¿
9¿
@¿
?  ¿
K¿
R¿
Q  ¿
`¿
g¿
f  ¿
q¿
Ñ¿
É  ¿
ë¿
ó¿
ñ  ¿
≤¿
∑¿
∏¿
π¿
∫¿
¿¿
À¿
À      ¿
‰Åk¿
‰¿
Í  ¿w¿ ¿¿)  ¿0¿?¿>  ¿M¿\¿[  ¿q¿Å¿Ä   ¿ê¿õ¿õ  ¿®0¿»¿»    ¿›p¿Ó¿Ó  ¿¿¿  ¿›¿ﬁ  áØÄ…áØá¥   á∆á∆á∆  áŒáŒáŒ  áÿ	áÿáÿ  áÂáÂáÂ  áÙáÙáÙ  à à à   ààà  à&à&à&  à=à=à=  àUàUàU  à_	à_à_  àl	àlàl              ÖÉtÖ¶Ö¶ Ö“ÖÓÖÔÖ˘sÜÜ ÜHÜdÜeÜo6Ü{Ü{ Üóá3á$á$ áGáL/áYáY áxá}/áäáä á© 
  ÄÆ  package:flutter/services.dart  Ä‚  app.dart  Ä˝  bottom_app_bar.dart  Å#  bottom_navigation_bar.dart  ÅP  bottom_sheet_theme.dart  Åz  drawer_theme.dart  Åû  icon_button.dart  Å¡  tab_controller.dart  ÅÁ  	tabs.dart  Ç  text_button.dart çÄ <ÄÜÄ§Ä•Ä’ÄŸÄÙÅÅGÅqÅïÅ∏ÅﬁÅ˙ÇÇ&Ç'Ç<ÇVÇrÇÑÇÖÇØÇÓÉÉÉ-ÉCÉ_É{ÉëÉßÉºÉ”ÉÈÑÑ1Ñ`ÑxÑëÑ∞Ñ≈Ñ∆ÑﬁÖÖ)ÖEÖ[ÖÇÖÉÖŒÖ˘ÜDÜnÜoÜßÜÛááLá}áÆáØáƒáÃá÷á„áÚá˛àà$à;àSà]àjàwàyàzàƒà»âââ_âèâìâ‚ä,ä]äòäúä‰ã5ãàã”ãˆã˙åå]åaå¥åƒå»å÷å⁄ç(çyçÀééméòéÚè#èoè¨è≠è›è„êê*ê+ê{êäêêê¶êÚë3ë9ëëë£ë©ë¸íNíöí‰ììì5ìÖì“îîdî∞î’î€ï3ïEïKïóï—ï◊ïÁïÌñ=ñ|ñÃñ˘ó4óiójóúóÂòòòòdò{òÅò‘ò⁄òÍòô9ôàô…ô¸öDöoösötöÄöƒö∆ö«öÏöõ7õàõ”úú,ú0úcú¡ùùhùÕùˇûUûüûÀû‰üüüüü>üêü‡†*†z†††Ã†Ì°°4°u°{°≠°–°‘°’¢ ¢¢¢<¢_¢É¢ã¢å¢µ¢ﬂ¢Á¢Ì¢Ò¢Ú££U£à£ù£°£¢£æ£ı§§8§b§j§p§t§u§≈••6•ì•Œ•“•”•Â•Ê¶5¶Ç¶…¶Ó¶ÙßCßêßﬂßÌßÛ®D®J®õ®€©*©Y©_©®©»©Œ©‰™5™;™•™∑™Ω™Ò™˜´I´ô´Á¨9¨â¨ﬂ≠≠≠≠n≠t≠ﬁ≠≠ˆÆÆwÆ}ÆÁÆ˘ÆˇØNØ°Ø≈ØÀ∞!∞t∞ò∞û∞È∞Ô±±T±§±™≤≤&≤,≤v≤è≤ª≤¬≤Œ≤Î≥:≥g≥n≥§≥‰¥¥V¥i¥°¥ø¥Ôµµµjµ∏∂∂W∂v∂ƒ∂Ì∂¯∑(∑G∑P∑©∑∞∑∫∑Œ∑ˆ∏ ∏∏4∏F∏o∏ΩππXπ∞π–∫∫u∫¨∫Ω∫÷ª*ªÄª≈ººrº±º¬ºΩ?ΩPΩ_ΩñΩ¢Ω¨Ω¡ΩÕΩ‹Ω‚Ω„Ω˙Ω˛ΩˇæIæsæ¡øøEøiøqøwø{ø|ø∫ø–øˆ¿ @¿ @3¿ @W¿ @c¿ @¿ @§¿ @Œ¿ @ÿ¿ @˛¿ A¿ A>¿ Aè¿ Aõ¿ A∑¿ A€¿ Aˇ¿ B¿ B¿ B¿ B¿ Bc¿ Bv¿ B|¿ BÕ¿ C¿ Cw¿ Cï¿ C£¿ C©¿ C¸¿ D¿ D@¿ DF¿ Dd¿ D¿ Dπ¿ Dﬂ¿ D„¿ D‰¿ E/¿ E5¿ E{¿ E”¿ F¿ F#¿ F)¿ F|¿ Fû¿ F∆¿ FË¿ Fı¿ G4¿ GM¿ Gs¿ Gô¿ G£¿ G≠¿ G≥¿ G—¿ GÏ¿ G¿ GÒ¿ H:¿ H{¿ Hï¿ H◊¿ HÂ¿ HÎ¿ IA¿ I[¿ Is¿ Iò¿ I≥¿ I∑¿ I∏¿ I—¿ I“¿ J'¿ Jz¿ J«¿ JÏ¿ JÚ¿ KG¿ K†¿ Kı¿ L¿ L	¿ Lf¿ L¶¿ L˚¿ M0¿ M6¿ M¿ Mü¿ M•¿ Mª¿ N¿ N¿ Nà¿ Nö¿ Nˆ¿ O¿ O¿ O+¿ OH¿ Où¿ O ¿ O—¿ P)¿ Ph¿ På¿ P¬¿ PÓ¿ PÙ¿ QO¿ Q©¿ Qˇ¿ RO¿ Rn¿ R»¿ R˜¿ S¿ S8¿ S]¿ Sf¿ S≈¿ SÃ¿ Sﬁ¿ T
¿ T¿ T*¿ TA¿ TE¿ TF¿ Tä¿ T†¿ T∆¿ TÛ¿ U	¿ U3¿ U?¿ U[¿ UÜ¿ U∂¿ U¿¿ UÊ¿ V¿ V&¿ VJ¿ VY¿ V_¿ Vc¿ Vd¿ V¥¿ V«¿ VÕ¿ W$¿ Wx¿ Wù¿ WË¿ WÔ¿ X¿ X!¿ X'¿ XÜ¿ X®¿ X ¿ X–¿ X—¿ Y¿ Y7¿ Y;¿ Y<¿ Yç¿ Yì¿ YŸ¿ Y¸¿ ZE¿ ZL¿ Zö¿ Z®¿ ZÆ¿ [¿ [/¿ []¿ [¿ [å¿ [—¿ [Í¿ \¿ \6¿ \@¿ \J¿ \P¿ \T¿ \U¿ \¶¿ \Ô¿ ]¿ ]]¿ ]k¿ ]q¿ ]¡¿ ]ı¿ ^¿ ^D¿ ^e¿ ^i¿ ^j¿ ^w¿ ^É¿ ^™¿ ^ÿ¿ _ ¿ _!¿ _B¿ _É¿ _±¿ _˚¿ `9¿ `r¿ `±¿ `ˆ¿ aO¿ ae¿ as¿ a∫¿ a»¿ a“¿ a⁄¿ a‡¿ a·¿ b8¿ b<¿ b=¿ bJ¿ bV¿ bi¿ bì¿ b∑¿ b’¿ b¿ c¿ c	¿ c¿ c¿ cD¿ cf¿ cÄ¿ cº¿ cı¿ cˆ¿ d.¿ d/¿ d;¿ du¿ d≥¿ dµ¿ d∂¿ e¿ e*¿ e.¿ eh¿ e∞¿ eÏ¿ e¿ f0¿ fe¿ fp¿ fí¿ f„¿ g+¿ gO¿ gr¿ gì¿ g±¿ g›¿ g˙¿ h¿ h<¿ h\¿ hÇ¿ h£¿ h©¿ h™¿ hﬂ¿ hÂ¿ i1¿ iX¿ iY¿ iç¿ iì¿ i’¿ iı¿ j¿ j¿ j\¿ js¿ jy¿ jæ¿ k¿ kV¿ km¿ ks¿ k√¿ l¿ l`¿ lz¿ lò¿ lô¿ l‡¿ l˜¿ l˝¿ mB¿ mâ¿ m∑¿ mΩ¿ n¿ nZ¿ n™¿ næ¿ nŸ¿ n⁄¿ o"¿ o;¿ oA¿ oã¿ oÆ¿ p¿ p/¿ p5¿ ps¿ p©¿ p«¿ p»¿ q¿ q.¿ q4¿ qÉ¿ q—¿ r¿ rm¿ rê¿ r≥¿ r¥¿ rﬁ¿ r‰¿ s3¿ s¿ s¥¿ s∫¿ t¿ tU¿ t•¿ tŒ¿ t‘¿ u#¿ uF¿ ua¿ ub¿ uì¿ uô¿ uË¿ v¿ v¿ v;¿ vA¿ vñ¿ v∑¿ v∏¿ vˆ¿ w¿ w¿ w¿ wj¿ wn¿ w∑¿ x¿ x#¿ xo¿ xÀ¿ xÃ¿ x¯¿ y"¿ yQ¿ yj¿ yk¿ yw¿ y∏¿ y◊¿ z¿ z3¿ zM¿ zT¿ zX¿ zY¿ ze¿ z{¿ zı¿ z˘¿ z˚¿ z¸¿ {I¿ {M¿ {è¿ {æ¿ {¬¿ |¿ |a¿ |e¿ |±¿ |Û¿ }¿ }¿ }a¿ }¶¿ }±¿ } ¿ ~¿ ~f¿ ~g¿ ~∞¿ ~˝¿ ¿ 9¿ a¿ b¿ ¢¿ ®¿ Ï¿ Ä¿ Ä¿ ÄY¿ Äw¿ Ää¿ Äê¿ Äë¿ ÄØ¿ Ä˛¿ Å¿ Å¿ Å.¿ Åb¿ ÅÇ¿ Åï¿ Åù¿ Å⁄¿ Åﬁ¿ Åﬂ¿ Ç7¿ ÇM¿ Ç≠¿ Ç ¿ É¿ Éz¿ ÉÅ¿ ÉÖ¿ Éá¿ Éà¿ Éø¿ ÉÚ¿ Ñ,¿ Ñ-¿ ÑK¿ Ñp¿ Ñç¿ Ñé¿ Ñö¿ Ñπ¿ Ñ…¿ Ö¿ ÖX¿ Öt¿ Ö∆¿ Ü¿ Üw¿ ÜÇ¿ Üä¿ Üù¿ Üß¿ ÜÛ¿ Ü˜¿ Ü¯¿ á¿ á1¿ áU¿ á|¿ áÉ¿ áÂ¿ à¿ à=¿ àw¿ à~¿ àï¿ àô¿ àõ¿ àú¿ àË¿ â:¿ â=¿ âà¿ â€¿ ä*¿ äx¿ ä«¿ äÈ¿ ã¿ ã:¿ ãN¿ ãc¿ ãä¿ ã™¿ ã“¿ ã˚¿ å¿ åG¿ åH¿ ål¿ åâ¿ åÆ¿ åØ¿ ç ¿ çQ¿ ç§¿ çÌ¿ ç˘¿ é¿ é6¿ éJ¿ éP¿ é{¿ éπ¿ éı¿ è!¿ è%¿ è&¿ è2¿ èH¿ è§¿ è¶¿ èß¿ è¸¿ êK¿ êg¿ êj¿ êø¿ ë¿ ë;¿ ëR¿ ëp¿ ëö¿ ë≤¿ ë∏¿ ëπ¿ ëŒ¿ ëÁ¿ í¿ í¿ í¿ í@¿ ír¿ íÖ¿ íã¿ íå¿ í¶¿ íÍ¿ ìB¿ ìÅ¿ ìÇ¿ ì´¿ ìˇ¿ î%¿ î&¿ îX¿ îp¿ îï¿ îÍ¿ î˙¿ ï¿ ï¿ ï9¿ ï[¿ ï§¿ ï±¿ ï»¿ ï”¿ ï‹¿ ï„¿ ïÁ¿ ïÈ¿ ïÍ¿ ñ#¿ ñ7¿ ñT¿ ñv¿ ñó¿ ñª¿ ñ›¿ ó¿ óL¿ óâ¿ óø¿ óÂ¿ ò¿ ò$¿ òN¿ òÄ¿ òÜ¿ òá¿ ò†¿ ò≈¿ ò„¿ ô¿ ô+¿ ô_¿ ô`¿ ô´¿ ôı¿ ö/¿ öx¿ öy¿ öö¿ öπ¿ ö∫¿ öÁ¿ öË¿ öÙ¿ õ¿ õ^¿ õ_¿ õ≠¿ õ¸¿ úL¿ úà¿ úâ¿ úÊ¿ ù¿ ù*¿ ùP¿ ùo¿ ùp¿ ùö¿ ùÔ¿ û/¿ ûg¿ ûm¿ ûn¿ ûí¿ û…¿ ü¿ ü0¿ üN¿ ü^¿ üñ¿ ü‚¿ †?¿ †E¿ †F¿ †z¿ †π¿ †Í¿ °7¿ °@¿ °y¿ °°¿ °º¿ °Ã¿ ¢¿ ¢¿ ¢>¿ ¢Ä¿ ¢â¿ ¢è¿ ¢ê¿ ¢π¿ ¢Î¿ £G¿ £ï¿ £ñ¿ £…¿ £ˆ¿ §'¿ §/¿ §5¿ §6¿ §Ñ¿ §»¿ §Í¿ •¿ • ¿ •`¿ •g¿ •h¿ •ê¿ •ÿ¿ •Ÿ¿ ¶.¿ ¶}¿ ¶¿¿ ¶Ó¿ ßP¿ ß©¿ ß∏¿ ß€¿ ß„¿ ß‰¿ ®&¿ ®W¿ ®y¿ ®≤¿ ®‰¿ ©¿ ©¿ ©I¿ ©ã¿ ©ë¿ ©í¿ ©‰¿ ™3¿ ™z¿ ™ƒ¿ ™À¿ ´ ¿ ´c¿ ´±¿ ´˛¿ ¨N¿ ¨u¿ ¨v¿ ¨ú¿ ¨ø¿ ¨Ï¿ ≠5¿ ≠f¿ ≠à¿ ≠ë¿ ≠⁄¿ Æ¿ Æ¿ Æ¿ Æb¿ Æé¿ Æ—¿ Ø!¿ Ø'¿ Ø(¿ ØW¿ Øõ¿ ØÃ¿ ∞
¿ ∞¿ ∞k¿ ∞Ä¿ ∞£¿ ±¿ ±¿ ±¿ ±¿ ±?¿ ±w¿ ±’¿ ±÷¿ ≤$¿ ≤H¿ ≤õ¿ ≤≈¿ ≤Î¿ ≤Ï¿ ≥6¿ ≥ô¿ ≥ª¿ ≥Ê¿ ¥¿ ¥ ¿ ¥D¿ ¥t¿ ¥ö¿ ¥¬¿ ¥À¿ µ ¿ µ9¿ µB¿ µô¿ µ≤¿ µª¿ ∂¿ ∂*¿ ∂I¿ ∂Ü¿ ∂è¿ ∂”¿ ∑	¿ ∑¿ ∑¿ ∑<¿ ∑î¿ ∑ª¿ ∑ﬂ¿ ∏¿ ∏E¿ ∏P¿ ∏X¿ ∏Y¿ ∏Å¿ ∏–¿ π¿ π3¿ πb¿ πó¿ πÕ¿ ∫¿ ∫;¿ ∫n¿ ∫£¿ ∫◊¿ ª¿ ª>¿ ªo¿ ªß¿ ªﬁ¿ º¿ ºO¿ ºÖ¿ º¿¿ º¿ º˘¿ ΩW¿ ΩÖ¿ ΩÂ¿ Ωˆ¿ æ4¿ æ>¿ æM¿ æë¿ æ·¿ ø2¿ ø~¿ øì¿ øﬂ¿ ¿¿ ¿G¿ ¿d¿ ¿l¿ ¿m¿ ¿ƒ¿ ¿Ÿ¿ ¿˘¿ ¡=¿ ¡F¿ ¡G¿ ¡Y¿ ¡ö¿ ¡•¿ ¬
¿ ¬l¿ ¬◊¿ ¬˘¿ √R¿ √t¿ √∞¿ √˜¿ ƒ¿ ƒv¿ ƒÕ¿ ≈$¿ ≈w¿ ≈à¿ ≈°¿ ∆¿ ∆#¿ ∆3¿ ∆?¿ ∆I¿ ∆^¿ ∆j¿ ∆p¿ ∆q¿ ∆û¿ ∆ˇ¿ «:¿ «@¿ «A¿ «k¿ «∞¿ «Ë¿ «Ó¿ «Ô¿ »¿ »d¿ »ü¿ »•¿ »¶¿ »»¿ »˛¿ …8¿ …?¿ …C¿ …D¿ …P¿ …Ö¿ …∂¿ …Ó¿  $¿  e¿  û¿ À¿ Àd¿ Àî¿ À⁄¿ Àﬁ¿ À‡¿ À·¿ Ã.¿ Ã2¿ Ã{¿ Ã¿ Ã∫¿ Ãˇ¿ Õ>¿ Õx¿ Õ∑¿ Õ·¿ Õ˙¿ Œ¿ ŒC¿ Œg¿ Œå¿ Œí¿ Œì¿ Œ™¿ Œ÷¿ œ¿ œB¿ œC¿ œ~¿ œ≠¿ œÆ¿ œ∫¿ –¿ –¿ –¿ –w¿ –õ¿ –ı¿ —*¿ —Z¿ —ä¿ —√¿ —ˆ¿ “(¿ “a¿ “⁄¿ ”¿ ”D¿ ”|¿ ”ñ¿ ”ó¿ ”£¿ ”∏¿ ”œ¿ ”–¿ ‘1¿ ‘s¿ ‘å¿ ‘ç¿ ‘≠¿ ’ ¿ ’¿ ’F¿ ’S¿ ’ù¿ ’Ì¿ ÷¿ ÷¿ ÷¿ ÷¿ ÷%¿ ÷8¿ ÷[¿ ÷á¿ ÷º¿ ÷Î¿ ◊¿ ◊¿ ◊¿ ◊¿ ◊+¿ ◊o¿ ◊ï¿ ◊ÿ¿ ÿ¿ ÿ5¿ ÿÇ¿ ÿù¿ ÿ£¿ ÿ‹¿ Ÿ¿ Ÿk¿ Ÿy¿ Ÿ¿ Ÿ™¿ ŸÏ¿ ⁄(¿ ⁄w¿ ⁄≤¿ ⁄—¿ ⁄ı¿ €#¿ €-¿ €<¿ €ã¿ €Ÿ¿ ‹$¿ ‹N¿ ‹j¿ ‹ã¿ ‹¢¿ ‹–¿ ‹ÿ¿ ‹ﬁ¿ ‹‚¿ ‹„¿ ›)¿ ›]¿ ›k¿ ›ò¿ ›ô¿ ›∑¿ ›·¿ ﬁ
¿ ﬁ¿ ﬁ¿ ﬁ,¿ ﬁX¿ ﬁâ¿ ﬁº¿ ﬁﬂ¿ ﬁ˚¿ ﬂ¿ ﬂ7¿ ﬂs¿ ﬂñ¿ ﬂ≤¿ ﬂπ¿ ﬂ∫¿ ‡¿ ‡¿ ‡'¿ ‡]¿ ‡^¿ ‡ç¿ ‡√¿ ‡Î¿ ·¿ ·¿ ·m¿ ·á¿ ·é¿ ·è¿ ·≈¿ ‚"¿ ‚I¿ ‚P¿ ‚≥¿ ‚⁄¿ ‚·¿ ‚‚¿ „¿ „S¿ „á¿ „∫¿ ‰¿ ‰g¿ ‰t¿ ‰™¿ ‰∆¿ ‰Ï¿ ‰ı¿ Â*¿ ÂF¿ Âo¿ Âx¿ Â≤¿ ÂŸ¿ Â¯¿ Ê¿ Ê:¿ Êd¿ ÊÉ¿ Êå¿ Êí¿ Êì¿ Ê÷¿ Á	¿ Á¿ ÁL¿ Áâ¿ Áç¿ Áé¿ Á’¿ ÁÁ¿ Ë¿ ËU¿ ËÅ¿ Ëâ¿ Ëë¿ Ëï¿ Ëñ¿ Ëœ¿ È¿ È¿ È¿ È ¿ ÈG¿ ÈY¿ ÈÅ¿ Èõ¿ È…¿ Í¿ Í\¿ Ík¿ Íà¿ Í∂¿ Î¿ Î(¿ Îc¿ Î~¿ Î±¿ Ï
¿ Ï¿ Ï#¿ Ï>¿ Ïi¿ Ï«¿ Ï‘¿ Ï›¿ Ï‰¿ ÏË¿ ÏÈ¿ Ì¿ Ìh¿ Ìl¿ Ìm¿ Ìô¿ Ì‰¿ ÌË¿ ÌÍ¿ ÌÎ¿ Ó-¿ Ó1¿ Óu¿ Óy¿ ÓÆ¿ Óˇ¿ Ô-¿ Ô1¿ ÔE¿ Ôì¿ Ôﬂ¿ '¿ O¿ S¿ ú¿ ¨¿ ∞¿ ƒ¿ Ò¿ Òa¿ Ò∞¿ ÒÍ¿ ÒÓ¿ ÚS¿ ÚW¿ Ú†¿ Ú∞¿ Ú¥¿ Ú»¿ Û¿ Ûf¿ Û≤¿ ÛÍ¿ Ù9¿ Ùp¿ Ùt¿ Ù◊¿ Ù€¿ ı$¿ ı4¿ ı8¿ ıt¿ ıx¿ ıø¿ ˆ¿ ˆM¿ ˆî¿ ˆÿ¿ ˜¿ ˜Q¿ ˜ì¿ ˜¢¿ ˜¶¿ ˜Ê¿ ¯,¿ ¯l¿ ¯≠¿ ¯Â¿ ˘&¿ ˘@¿ ˘D¿ ˘ã¿ ˘è¿ ˘Œ¿ ˙¿ ˙q¿ ˙u¿ ˙ƒ¿ ˚,¿ ˚q¿ ˚u¿ ˚›¿ ¸2¿ ¸6¿ ¸M¿ ¸Q¿ ¸j¿ ¸n¿ ¸´¿ ¸‚¿ ˝ ¿ ˝N¿ ˝R¿ ˝ô¿ ˝÷¿ ˛$¿ ˛n¿ ˛≥¿ ˛æ¿ ˛¬¿ ˛÷¿ ˇ'¿ ˇq¿ ˇu¿ ˇÅ¿ ˇŒ¿ ˇ˙¿ ¿ T¿ ä¿ ñ¿ û¿ •¿ ≠¿ Ω¿ ¡¿¿D¿{¿¿ç¿ë¿·¿¿T¿è¿‡¿1¿¿«¿ÿ¿'¿p¿Å¿“¿!¿r¿∞¿ ¿=¿Ö¿‘¿	¿]¿•¿Ï¿I¿q¿Æ¿¡¿–¿·¿¿	¿	6¿	]¿	¿	ƒ¿	È¿	˙¿
¿
(¿
E¿
c¿
y¿
ì¿
∂¿
œ¿¿(¿R¿{¿ñ¿⁄¿¯¿%¿U¿m¿s¿t¿∫¿¿M¿u¿{¿»¿¿¿c¿©¿ı¿>¿Ñ¿ä¿ö¿†¿Ë¿¿&¿'¿l¿r¿¬¿ˇ¿¿g¿é¿è¿›¿)¿W¿]¿£¿º¿¬¿Î¿Ò¿¿¿Q¿k¿ê¿ë¿…¿Ó¿Ô¿¿ ¿d¿•¿Ò¿>¿q¿w¿≈¿¿e¿¨¿’¿€¿)¿y¿∆¿˚¿¿¿^¿d¿é¿¥¿µ¿¿	¿t¿∏¿π¿¿¿Ñ¿»¿…¿¿¿b¿™¿∞¿È¿Ô¿*¿\¿ã¿å¿€¿·¿¿M¿N¿õ¿°¿Û¿¿¿+¿1¿Ü¿ﬂ¿¿¿]¿©¿”¿Ÿ¿ı¿˚¿ B¿ H¿ õ¿  ¿ –¿ Ê¿! ¿!a¿!≤¿!º¿!¬¿"¿"&¿">¿"?¿"ñ¿"ø¿"¿¿#
¿#O¿#y¿#¿#õ¿#°¿#Î¿#Ò¿$G¿$v¿$|¿$í¿$¬¿%¿%T¿%d¿%j¿%¿¿%“¿%Ì¿%Ó¿&H¿&t¿&u¿&–¿&÷¿' ¿'Z¿'{¿'|¿'◊¿'›¿(5¿(ò¿(Ë¿)0¿)6¿)î¿)Î¿)Ò¿*,¿*¿*Ä¿*Õ¿*”¿+¿+5¿+6¿+~¿+Ñ¿+“¿+Û¿+˘¿,I¿,_¿,Ñ¿,Ö¿,≥¿,π¿-¿-V¿-å¿-í¿-‚¿.3¿.¿.¶¿.¨¿.Ù¿/A¿/o¿/u¿/¬¿0¿0 ¿0&¿0r¿0Ω¿1	¿1)¿1/¿1?¿1E¿1ì¿1 ¿2¿2\¿2û¿2ª¿2º¿3¿3T¿3†¿3¶¿3Ó¿4?¿4ã¿4ë¿4©¿4—¿4“¿5¿5!¿5n¿5∑¿5Ω¿6¿6"¿68¿69¿6|¿6Ø¿6∞¿6˙¿7¿7¿7T¿7û¿7Ï¿86¿8g¿8ì¿8∏¿8π¿8˝¿9¿9¿9U¿9[¿9î¿9æ¿9ø¿:¿:¿: ¿:Y¿:_¿:ò¿:≈¿:∆¿;¿;¿;]¿;ê¿;ñ¿;„¿<4¿<:¿<J¿<P¿<ù¿<Ø¿<Œ¿<œ¿=¿=>¿=D¿=ë¿=’¿=€¿>¿>!¿>7¿>á¿>∏¿>æ¿?¿?¿?$¿?:¿?ä¿?’¿@"¿@s¿@∫¿@Ã¿@“¿A ¿A2¿A8¿AÖ¿A–¿B ¿Bp¿B™¿B∞¿C ¿CI¿Cç¿Cì¿C‡¿D'¿DY¿D≠¿D«¿D‹¿D‚¿E¿Es¿Eã¿Eˆ¿FX¿F´¿F¥¿F≈¿G(¿GÄ¿G≠¿GÙ¿G˝¿H¿Hn¿HÃ¿I*¿Iã¿IË¿JB¿Jo¿Jx¿JØ¿J∑¿Jª¿Jº¿K	¿K+¿K1¿KÇ¿K ¿K–¿L¿L¿L&¿L,¿Lu¿L¿¿Lÿ¿M¿MM¿MQ¿MR¿Mü¿Mœ¿M’¿N¿N¿Nh¿N≤¿O ¿O¿O¿Oe¿O≥¿O˘¿P(¿P.¿Py¿P»¿Q¿Qa¿Qs¿Q¡¿QÛ¿R2¿RS¿Râ¿Rü¿R˙¿S¿S¿SÉ¿Sÿ¿S„¿Sˆ¿T[¿Tµ¿T‰¿U-¿U8¿UK¿U≠¿V¿Vm¿V◊¿V‚¿W¿W%¿W+¿WV¿WZ¿W[¿W©¿W∑¿WΩ¿X
¿XX¿X•¿Xˆ¿Y¿Y¿YQ¿YW¿Yg¿Ym¿Yæ¿Z¿ZU¿Zs¿Zÿ¿[¿[¿[h¿[ì¿[ô¿[ù¿[û¿\¿\¿\;¿\r¿\’¿]
¿]O¿]P¿]y¿]°¿]È¿]Ù¿]ı¿^P¿^Y¿^`¿^d¿^e¿^q¿^£¿^•¿^¶¿^¬¿^∆¿_¿_:¿_ò¿_§¿_Ÿ¿_⁄¿_Á¿_Û¿`<¿`v¿`∑¿`ª¿`º¿`Ã¿`Õ¿a'¿aÑ¿aÖ¿aØ¿a∞¿aÓ¿b¿b¿b\¿bã¿bå¿bÕ¿c¿c¿cO¿cö¿cõ¿c∑¿c∏¿cÈ¿cÔ¿d8¿dk¿d©¿dÍ¿dÎ¿e¿e ¿e0¿e6¿eÇ¿eó¿e«¿e»¿e˙¿f ¿f¿f¿ff¿f}¿f≥¿f¥¿f‚¿g0¿gD¿gl¿gv¿g§¿g™¿gÆ¿gØ¿g‡¿h4¿hH¿hs¿h}¿hÆ¿h¥¿h∏¿hπ¿h‹¿h‚¿i3¿ie¿ik¿iπ¿j	¿j¿j¿jb¿jy¿j¿j–¿jÊ¿k.¿kY¿k_¿kÑ¿kà¿kâ¿kµ¿kª¿l¿lJ¿lP¿lû¿lÓ¿l¸¿m¿mJ¿ma¿mg¿m∏¿m—¿n¿n;¿nA¿ni¿nm¿nn¿nß¿n’¿n÷¿nË¿o9¿o:¿oá¿o¢¿o˚¿p\¿p]¿pê¿p§¿p‘¿pﬁ¿p‰¿pË¿pÈ¿q¿q¿q\¿që¿qÙ¿qı¿rH¿ri¿r∫¿s¿s=¿sM¿sN¿sç¿s°¿s›¿sÁ¿sÌ¿sÒ¿sÚ¿t¿t¿tY¿t•¿t∏¿u¿uF¿u~¿u±¿u≤¿uﬁ¿v#¿vx¿v ¿vı¿wW¿wn¿wÃ¿x&¿x\¿xö¿x∑¿y ¿y+¿yr¿yß¿y∏¿y«¿z ¿z,¿zg¿zô¿z£¿zπ¿z¡¿z¬¿{¿{t¿{ê¿{ø¿|¿|2¿|M¿|X¿|ì¿|¿¿| ¿|˙¿}¿}¿}2¿}S¿}õ¿}€¿~¿~1¿~^¿~¶¿~Ó¿¿¿!¿.¿9¿U¿á¿ê¿ñ¿ö¿õ¿ø¿Ê¿Ä¿ÄD¿ÄL¿Ä^¿Äü¿ÄŒ¿Ä⁄¿ÄÔ¿Ä˚¿Å¿Å¿Å¿Å@¿ÅF¿Åó¿ÅÆ¿Å”¿Å˚¿Ç¿Ç¿Ç¿ÇC¿ÇI¿Çö¿Ç¥¿Çﬂ¿É
¿É¿É¿É¿É=¿Éw¿É{¿É|¿É±¿ÉŒ¿ÉÓ¿Ñ$¿Ñ@¿ÑW¿Ño¿Ñá¿Ñ®¿Ñæ¿Ñÿ¿Ö
¿Ö¿Ö!¿Öx¿Öî¿Öﬂ¿Ü ¿Ü|¿Üá¿Üè¿Ü¢¿Ü¨¿Ü≠¿ÜÊ¿á&¿áV¿áÅ¿áÇ¿á°¿á¿¿á¡¿á¯¿à¿àF¿àv¿à£¿à´¿à±¿à≤¿àÿ¿àÛ¿â¿â,¿â4¿âo¿â¢¿â≈¿â∆¿â‡¿ä¿ä¿ä¿äJ¿ä^¿ä~¿ä∏¿ä‹¿äÊ¿äÁ¿ã¿ãF¿ãN¿ãj¿ãp¿ãq¿ã£¿ã≤¿ãœ¿ãÍ¿åM¿åy¿åâ¿åò¿å•¿å¶¿å«¿åÛ¿ç¿ç+¿çH¿çP¿çV¿çW¿ç¿çö¿ç ¿ç˘¿é¿é5¿é`¿ér¿é|¿éπ¿éÿ¿é·¿é˘¿è5¿èM¿èÖ¿èì¿èù¿è¶¿èº¿èŸ¿è¯¿ê(¿êQ¿ê[¿êd¿ê|¿êû¿ê∆¿ê‚¿êˆ¿ë¿ë8¿ë?¿ë@¿ëY¿ëï¿ëõ¿ëú¿ë ¿ë›¿ëÓ¿í-¿íG¿íz¿íÉ¿íò¿íü¿í£¿í§¿íÚ¿ì3¿ì9¿ìã¿ìü¿ì•¿ìÊ¿î5¿îH¿îN¿îô¿îË¿ï¿ï¿ïe¿ï´¿ï¯¿ï˛¿ñN¿ñú¿ñ–¿ñ÷¿ó%¿ós¿ó©¿óØ¿óˇ¿òP¿òú¿ò√¿ò…¿òﬂ¿ô)¿ôs¿ô£¿ô©¿ö¿ö¿ö$¿ös¿ö¨¿ö≤¿ö˛¿õ:¿õi¿õo¿õπ¿ú¿ú5¿ú;¿úä¿úê¿ú¶¿úÚ¿ù8¿ù>¿ù°¿ù≥¿ù√¿ù…¿û¿û,¿ûx¿û≈¿û’¿ü&¿üy¿ü’¿†!¿†]¿†ê¿†≠¿†…¿†‡¿†¯¿°¿°1¿°G¿°a¿°ô¿°¬¿°…¿°Ÿ¿¢¿¢¿¢h¿¢©¿£¿£¿£¿£+¿£5¿£c¿£d¿£Ñ¿£Ø¿£Ÿ¿§>¿§U¿§g¿§ñ¿§ß¿§ƒ¿§Ì¿•¿•5¿•K¿•o¿•ë¿•±¿•Ÿ¿¶*¿¶3¿¶;¿¶\¿¶`¿¶a¿¶Å¿¶¡¿ß¿ßK¿ßä¿ßã¿ß—¿ß“¿®¿®0¿®p¿®t¿®u¿®«¿©¿©n¿©ï¿™¿™F¿™¿™Ø¿™◊¿™˛¿´1¿´:¿´ä¿´Ω¿´∆¿´Ã¿´Õ¿´ﬂ¿¨¿¨R¿¨Z¿¨[¿¨π¿≠¿≠+¿≠x¿≠|¿≠}¿≠Æ¿≠Ø¿≠ˇ¿ÆK¿Æu¿Æî¿ÆÙ¿ØE¿Øn¿Ø{¿Ø±¿Ø‘¿Ø›¿Ø„¿ØÁ¿ØË¿Ø˜¿Ø¯¿∞,¿∞-¿∞T¿∞à¿∞å¿∞ç¿∞ö¿∞¶¿∞ª¿∞“¿±(¿±L¿±¢¿±∆¿≤¿≤g¿≤¶¿≤π¿≤À¿≤˚¿≥¿≥¿≥H¿≥t¿≥á¿≥é¿≥è¿≥‹¿≥‡¿≥·¿≥Ó¿≥˙¿¥'¿¥M¿¥¿¿µ¿µ?¿µó¿µù¿µˆ¿∂¿∂m¿∂v¿∂|¿∂≥¿∂≈¿∑'¿∑a¿∑{¿∑‘¿∏¿∏¿∏4¿∏m¿∏ ¿π¿π¿π"¿π,¿πA¿πM¿πu¿πô¿πÈ¿∫¿∫$¿∫L¿∫T¿∫Z¿∫^¿∫_¿∫l¿∫x¿∫ô¿∫Í¿ª!¿ªÇ¿ª“¿ª¯¿ºX¿ºÖ¿ºã¿º–¿Ω¿Ω,¿Ω-¿ΩU¿Ωx¿Ω|¿Ω}¿Ωä¿Ωñ¿Ω©¿Ω ¿Ω˝¿æ6¿æa¿æ~¿æû¿æ“¿æÁ¿æÎ¿æÏ¿ø¿ø¿ø2¿øH¿øm¿øë¿ø∑¿øﬁ¿¿¿¿.¿¿5¿¿u¿¿ö¿¿Ω¿¿‰¿¡¿¡¿¡1¿¡i¿¡o¿¡p¿¡∂¿¬¿¬¿¬¿¬3¿¬G¿¬Y¿¬p¿¬ß¿¬≤¿¬ª¿¬¡¿¬≈¿¬∆¿√¿√9¿√U¿√j¿√|¿√ñ¿√¥¿√ﬁ¿ƒ¿ƒO¿ƒ~¿ƒ≥¿ƒ˚¿≈+¿≈p¿≈î¿≈ü¿≈¿¿∆¿∆C¿∆d¿∆§¿∆»¿∆—¿∆◊¿∆€¿∆‹¿«(¿«I¿«b¿«w¿«â¿«£¿«æ¿«Í¿»¿»X¿»á¿»º¿…¿….¿…s¿…î¿…ü¿…Ω¿ ¿ @¿ a¿ °¿ ≈¿ Œ¿ ‘¿ ÿ¿ Ÿ¿À¿À9¿À:¿Àe¿Àk¿Àƒ¿À˛¿Ã!¿Ã5¿ÃU¿Ã_¿Ãe¿Ã≠¿Ã¿Ãˆ¿Ã˙¿Ã˚¿Õ¿Õ¿Õ;¿Õi¿Õõ¿ÕŒ¿Œ¿Œ¿ŒE¿ŒX¿Œh¿ŒÇ¿Œì¿Œ≠¿Œ⁄¿œ¿œe¿œt¿œé¿œÆ¿œ›¿œ˛¿–¿–q¿–•¿–¨¿–∆¿–€¿–Ì¿—I¿—j¿—ã¿—´¿—Õ¿—¿—˘¿—ˇ¿“ ¿“!¿“{¿“î¿“Ì¿”3¿”H¿”Z¿”r¿”∑¿”È¿‘¿‘:¿‘G¿‘R¿‘p¿‘í¿‘≥¿‘÷¿‘˘¿’¿’¿’	¿’.¿’I¿’J¿’ñ¿’∏¿’„¿’ˇ¿÷$¿÷m¿÷x¿÷Å¿÷ñ¿÷®¿÷∑¿÷⁄¿÷¸¿◊¿◊?¿◊w¿◊Ä¿◊Ü¿◊á¿◊∞¿◊÷¿ÿ¿ÿ8¿ÿf¿ÿà¿ÿ“¿Ÿ,¿Ÿ-¿ŸB¿ŸT¿Ÿy¿Ÿô¿Ÿª¿Ÿ€¿Ÿ˛¿⁄¿⁄u¿⁄¥¿⁄Ω¿⁄√¿⁄ƒ¿⁄ı¿€$¿€P¿€£¿€¬¿‹¿‹R¿‹S¿‹h¿‹z¿‹•¿‹À¿‹Ì¿›¿›A¿›d¿›£¿›¨¿›≤¿›≥¿›Â¿›˙¿ﬁ¿ﬁ¿ﬁ5¿ﬁh¿ﬁ…¿ﬁ‰¿ﬁ¸¿ﬂ ¿ﬂ>¿ﬂp¿ﬂé¿ﬂÕ¿ﬂÛ¿‡¿‡T¿‡ì¿‡®¿‡ª¿‡Ã¿‡€¿‡Ë¿‡Û¿·¿·=¿·]¿·Ä¿·¡¿‚ ¿‚	¿‚¿‚¿‚>¿‚S¿‚e¿‚â¿‚¥¿‚÷¿‚ˆ¿„¿„=¿„|¿„Ö¿„ã¿„å¿„ü¿„Ø¿„÷¿‰¿‰O¿‰|¿‰¬¿‰Ó¿‰˜¿Â!¿Â@¿Â^¿Â~¿Âü¿Â¶¿Âß¿Â…¿ÂË¿Ê	¿Ê ¿Ê4¿ÊO¿Ê}¿Ê•¿Á¿Á.¿Á;¿Á^¿ÁÇ¿Á§¿Á…¿ÁÓ¿Á˘¿Ë¿Ë?¿Ë`¿ËÉ¿Ëí¿Ëò¿Ëô¿Ëª¿ËË¿È¿È%¿ÈU¿ÈÇ¿Èà¿Èâ¿È—¿Í¿Í¿Íz¿Í{¿Í≈¿Í¸¿ÎN¿Î®¿Î∏¿Î ¿Î—¿Î“¿ÎÌ¿Ï	¿Ï4¿Ï]¿Ïv¿Ïƒ¿ÏÊ¿Ì"¿Ì_¿Ì}¿Ì‹¿Ó¿Ó8¿Ók¿Ó∂¿Ó‡¿Ô¿Ôm¿Ô¨¿ÔÔ¿F¿¿·¿Ò¿ÒO¿Ò£¿Ò’¿ÒÍ¿Ú¿Ú#¿Ú4¿ÚC¿ÚP¿Ú[¿Úd¿Úk¿Úo¿Úq¿Úr¿Ú•¿ÚÀ¿ÚÃ¿ÚÍ¿ÚÎ¿Ú˜¿Û ¿Ûv¿Ûz¿Û{¿Ûá¿Û≠¿Û’¿Ù ¿Ù¿Ù¿Ù¿ÙC¿ÙG¿Ùã¿Ù∞¿ÙÁ¿ıF¿ıY¿ız¿ı{¿ıÃ¿ı˘¿ı˙¿ˆZ¿ˆv¿ˆw¿ˆ«¿ˆÊ¿ˆË¿ˆÈ¿˜¿˜<¿˜K¿˜r¿˜é¿˜ß¿˜ƒ¿˜„¿˜˛¿¯¿¯7¿¯K¿¯[¿¯r¿¯à¿¯ú¿¯¢¿¯£¿¯ø¿˘¿˘0¿˘N¿˘o¿˘í¿˘≥¿˘“¿˘Ì¿˙¿˙(¿˙D¿˙`¿˙Ö¿˙Ü¿˙í¿˙‹¿˙ﬁ¿˙ﬂ¿˚%¿˚k¿˚l¿˚x¿˚ç¿˚§¿˚·¿¸(¿¸,¿¸-¿¸9¿¸L¿¸ñ¿¸¥¿¸…¿¸Õ¿¸Œ¿¸⁄¿˝¿˝9¿˝Ç¿˝Ü¿˝á¿˝ò¿˝¬¿˝‡¿˝‰¿˝Â¿˛¿˛^¿˛Ç¿˛Ü¿˛á¿˛ ¿ˇ¿ˇz¿ˇ~¿ˇ¿ˇ¥¿ˇ“¿ˇÙ¿ˇ˙¿ˇ˛¿ˇˇ¿ D¿ Ç¿ ª¿ ˘¿:¿}¿~¿ﬂ¿¿%¿k¿ï¿õ¿Ë¿!¿P¿¿é¿î¿¶¿™¿´¿∑¿ﬁ¿˙¿'¿^¿t¿®¿¸¿¿¿(¿@¿Y¿ë¿◊¿ ¿¿[¿Ü¿π¿‰¿¿5¿Z¿è¿∏¿Ÿ¿¿5¿B¿M¿V¿]¿a¿c¿d¿¢¿¶¿Û¿˜¿	B¿	Ñ¿	†¿	∆¿

¿
5¿
G¿
\¿
m¿
ç¿
¨¿
Ω¿
æ¿
·¿
„¿
‰¿¿,¿I¿m¿á¿ç¿é¿¶¿⁄¿€¿Á¿¿J¿N¿P   %_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScope  A