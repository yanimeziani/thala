Å_tokeninstance__getRootIsolateToken	_instance_configurationonPlatformConfigurationChanged_onPlatformConfigurationChanged#_onPlatformConfigurationChangedZonedisplays	_displaysviews_viewsviewimplicitView_debugLastImplicitView_debugRecordedLastImplicitViewonMetricsChanged_onMetricsChanged_onMetricsChangedZone_addView_removeView_sendViewFocusEventengineId	_engineId_updateDisplays_updateWindowMetricsonViewFocusChange_onViewFocusChange_onViewFocusChangeZonerequestViewFocusChange_requestViewFocusChangeonBeginFrame_onBeginFrame_onBeginFrameZone_beginFrameonDrawFrame_onDrawFrame_onDrawFrameZone
_drawFrameonPointerDataPacket_onPointerDataPacket_onPointerDataPacketZone_dispatchPointerDataPacket_kPointerDataFieldCount_unpackPointerDataPacket_keyDataListener	onKeyData
_onKeyData_kKeyDataFieldCount_unpackKeyDataonReportTimings_onReportTimings_onReportTimingsZone_setNeedsReportTimings_nativeSetNeedsReportTimings__nativeSetNeedsReportTimings_reportTimingssendPlatformMessage_sendPlatformMessage__sendPlatformMessagesendPortPlatformMessage_sendPortPlatformMessage__sendPortPlatformMessageregisterBackgroundIsolate__registerBackgroundIsolateonPlatformMessage_onPlatformMessage_onPlatformMessageZone_respondToPlatformMessage__respondToPlatformMessage%_zonedPlatformMessageResponseCallback_dispatchPlatformMessagesetIsolateDebugName_setIsolateDebugNamerequestDartPerformanceMode_requestDartPerformanceModegetPersistentIsolateData_getPersistentIsolateDatascheduleFrame_scheduleFramescheduleWarmUpFrame_endWarmUpFrameaccessibilityFeaturesonAccessibilityFeaturesChanged_onAccessibilityFeaturesChanged#_onAccessibilityFeaturesChangedZone_updateAccessibilityFeaturesupdateSemantics_updateSemanticslocalelocalescomputePlatformResolvedLocale_computePlatformResolvedLocale__computePlatformResolvedLocaleonLocaleChanged_onLocaleChanged_onLocaleChangedZone_updateLocales_localeClosureinitialLifecycleState_initialLifecycleState_initialLifecycleStateAccessed_updateInitialLifecycleStatealwaysUse24HourFormattextScaleFactoronTextScaleFactorChanged_onTextScaleFactorChanged_onTextScaleFactorChangedZonenativeSpellCheckServiceDefined_nativeSpellCheckServiceDefined supportsShowingSystemContextMenu!_supportsShowingSystemContextMenubrieflyShowPassword_brieflyShowPasswordplatformBrightnessonPlatformBrightnessChanged_onPlatformBrightnessChanged _onPlatformBrightnessChangedZonesystemFontFamilyonSystemFontFamilyChanged_onSystemFontFamilyChanged_onSystemFontFamilyChangedZone_updateUserSettingsDatasemanticsEnabledonSemanticsEnabledChanged_onSemanticsEnabledChanged_onSemanticsEnabledChangedZone_updateSemanticsEnabledonSemanticsActionEvent_onSemanticsActionEvent_onSemanticsActionEventZone_updateFrameData	frameData
_frameDataonFrameDataChanged_onFrameDataChanged_onFrameDataChangedZone_dispatchSemanticsAction_onError_onErrorZoneonError_dispatchErrordefaultRouteName_defaultRouteNamescaleFontSize_cachedFontSizes_scaleAndMemoize_getScaledFontSizenamevalueisSupportedplatformProvidesSystemColorslightdark
brightness_systemColorUnsupportedErroraccentColoraccentColorText
activeTextbuttonBorder
buttonFace
buttonTextcanvas
canvasTextfield	fieldTextgrayText	highlighthighlightTextlinkTextmarkmarkTextselectedItemselectedItemTextvisitedTextcopyWithconfigurationId	displayIddevicePixelRatiosize
viewInsetsviewPaddingsystemGestureInsetspaddinggestureSettingsdisplayFeaturestoString
vsyncStart
buildStartbuildFinishrasterStartrasterFinishrasterFinishWallTimelayerCacheCountlayerCacheBytespictureCacheCountpictureCacheBytesframeNumber_dataLengthtimestampInMicroseconds_rawDuration_rawInfobuildDurationrasterDurationvsyncOverhead	totalSpanlayerCacheMegabytespictureCacheMegabytes_data	_formatMSdetachedresumedinactivehiddenpausedexitcancel
cancelablerequiredlefttoprightbottomzerominWidthmaxWidth	minHeight	maxHeightisSatisfiedByisTight/==hashCodeboundstypestateunknownfoldhingecutoutpostureFlatpostureHalfOpenedlanguageCode_languageCode_deprecatedLanguageSubtagMap
scriptCodecountryCode_countryCode_deprecatedRegionSubtagMap_cachedLocale_cachedLocaleStringtoLanguageTag_rawToStringbalancedlatency
throughputmemoryviewIdnodeId	arguments_noArgumentPlaceholder	direction	unfocusedfocused	undefinedforwardbackward&VoidCallbackFrameCallbackTimingsCallbackPointerDataPacketCallbackKeyDataCallbackSemanticsActionEventCallbackPlatformMessageResponseCallbackPlatformMessageCallback_SetNeedsReportTimingsFuncErrorCallback_kUnsetGestureSetting_kFlutterKeyDataChannel_wrapUnmodifiableByteDataRootIsolateTokenPlatformDispatcherSystemColorSystemColorPalette_PlatformConfiguration_ViewConfiguration
FramePhase_FrameTimingInfoFrameTimingAppLifecycleStateAppExitResponseAppExitTypeViewPaddingWindowPaddingViewConstraintsDisplayFeatureDisplayFeatureTypeDisplayFeatureStateLocaleDartPerformanceModeSemanticsActionEventViewFocusChangeCallbackViewFocusEventViewFocusStateViewFocusDirectionÅ9dartuivoidonBeginFrameDateTimeDurationonReportTimingsListonPointerDataPacketPointerDataPacket	onKeyDataboolKeyDataonSemanticsActionEventsendPlatformMessageonPlatformMessageByteDataChannelBufferssetListener
DeprecatedStringonErrorObject
StackTracedoublepragmaasUnmodifiableViewint_NativeInt64symbolconfigurationinstanceZonerootcurrentFlutterViewdisplayIterableDisplayvaluesMapidViewofBuildContextviews_implicitViewId	identicalViewConfigurationWidgetsBindingObserver
MediaQuerycontainsKey_invokeremove_invoke1clear_viewConfigurationfocusedforward	unfocused	undefinedviewIdstateindex	directionVoidSceneBuilderrenderscheduleFramemicrosecondsGestureBinding	Int64ListbytesPerElementlengthInBytesPointerDataiadd
embedderIdgetInt64_kFakeHostEndian	timeStampchangePointerChangekindPointerDeviceKind
signalKindPointerSignalKinddevicepointerIdentifier	physicalX
getFloat64	physicalYphysicalDeltaXphysicalDeltaYbuttonsobscuredsynthesizedpressurepressureMinpressureMaxdistancedistanceMaxsizeradiusMajorradiusMinor	radiusMin	radiusMaxorientationtiltplatformDatascrollDeltaXscrollDeltaYpanXpanY	panDeltaX	panDeltaYscalerotationdataChannelCallbackkeyData	Uint8Listcallbackbuffer
asByteDatapacketchannelBuffersclearListener	getUint64utf8decoderconvertasUint8ListtypeKeyEventTypephysicallogical	characterSchedulerBindingaddTimingsCallbackbuildDurationrasterDuration	totalSpanTimelineBoollength_dataLengthsublist	ExceptionHandleSendPort
nativePortDartPluginRegistrantensureInitialized_tokenIntPtrrunUnaryGuardedkControlChannelNamehandleMessage_invoke3responseDatapushIntscheduleWarmUpFrameTimerrun
beginFrame	drawFrameAccessibilityFeaturesaccessibilityFeaturescopyWithSemanticsUpdate_NativeSemanticsUpdatePointerisEmptyfromSubtagsfirstlocaleslanguageCodecountryCode
scriptCode
isNotEmptylocaleIndextoStringlifecycleStateshowTimePickeralwaysUse24HourFormattextScaleFactorEditableTextStateSpellCheckConfigurationAdaptiveTextSelectionToolbarEditableTextobscureText
BrightnesslightplatformBrightnesssystemFontFamilyjsondecodenumtoDoubledark
StateErrorvalueconfigurationIdsemanticsEnabled	FrameDataframeNumberSemanticsAction	fromIndexnodeId	arguments	runBinaryhandleUncaughtErroresrunApp	NavigatorSystemChannels
navigationtextScalerOfisFinitefloorceillowerupper_getScaledFontSize	errorCodeDoubleUnsupportedErrorhighContrastaccentColor
buttonTextColordefaultRouteNameSizezeroGestureSettings	_displaysboundshingecutoutfoldoverrideruntimeTypevsyncOverhead
vsyncStart
buildStartbuildFinishrasterStartrasterFinishrasterFinishWallTime
timestampslayerCacheCountlayerCacheBytespictureCacheCountpictureCacheByteslastinMicrosecondsdetachedresumedinactivepausedAppLifecycleListenerdidChangeAppLifecycleStateUIKitactivityAppKithiddenonDrawFrameonExitRequesteddidRequestAppExitServicesBindingexitApplicationWidgetsBindingexitrequiredcancel
viewInsetspadding
EdgeInsetsScaffoldlefttoprightbottomBoxConstraintswidthheightinfinityminWidthmaxWidth	minHeight	maxHeighthashtoStringAsFixedpostureFlatpostureHalfOpenedunknownRectUnicodeIANAlocalekeepToStringStringBufferwriteSemanticsNodeSemanticsBindingperformSemanticsActiononViewFocusChangeViewFocusChange Ò!ŸÙxW ‰¸√±"   ¿eŒ ¿Óúå <ÄÜÄ§ÄµÄ∂Ä¸Å$Å%ÅZÅ^Å´ÅÒÇ7Ç;ÇàÇ’É	ÉCÉDÉ|ÉÄÉ≠ÉÚÑ>ÑÖÑ‘Ö ÖlÖ∫ÖÈÖ¸Ü@ÜAÜ}Ü ÜÀÜ˝ááNáÇáπá∫á˘àLàMààÉàÀà˜â@âAâÇâÜâ¿âÕää:ä<ä^äπä∫ä„ã#ã$ãTãXã•ãŒã“å"åpå¶åˆå˜çDçoçpç´çÆçÔé)é*éDéüé†éÃéÂèè	èWèkèlèºêê9êhê¢ê©ê™ëë4ë6ë7ë`ëdë´ëØë˚íííkíöíûí‚ììì\ì•ìıîBîQîlî∑îÏïïBïFïGïqïwïªññXñ^ñØñ˝óKóïóÊòòòcò¥ò‡ô0ô~ôóôŒööö_ö`öñöúöÍö˘õPõÅõπõ¯ú(ú`údúeúâúèúﬂúÂù.ù4ùÑù“ùÏùÚû<ûãû‹ü-üNü™üÚ†(†`†a†Ø†∆†Ã°°P°ç°é°⁄°Î¢!¢"¢n¢•¢´¢¯£C£Å£á£—§§b§à§é§’• •n•º¶¶Y¶û¶§¶¥¶∫¶Ìß:ßSßußÆßÌß˘®.®N®¨®˜®˛©,©<©h©x©≠©Ÿ™™!™0™Y™à™ê™£™≠™¿™ƒ™≈™Ï´´´l´É´â´Ÿ¨¨=¨C¨ë¨†¨¶¨Ó≠≠	≠≠≠i≠°≠‹ÆÆ:ÆdÆïÆ∑Æ·ÆÂÆÊØØØRØWØ£ØŒ∞∞R∞è∞≈∞…∞ ∞ˆ∞˚±± ±m±ï±≤≤≤$≤2≤8≤{≤í≤»≤Ã≤Õ≥ ≥P≥T≥U≥®≥ﬁ¥¥<¥=¥O¥P¥}¥Ç¥ß¥ÿ¥ÔµµDµJµÄµÑµÖµ±µ∂µ∂@∂à∂ƒ∂˙∂˛∂ˇ∑[∑a∑±∏∏[∏™∏˚ππ%πwπ≈∫∫a∫g∫∫ªªwªﬁºº
º\ºpºvº¬º˚ΩΩOΩUΩeΩkΩ‰æ(æoæøøø6øòø√¿ @ ¿ @#¿ @N¿ @R¿ @S¿ @ò¿ @û¿ @Ù¿ AR¿ Az¿ AÄ¿ Aœ¿ A¯¿ A˛¿ BN¿ B~¿ BÑ¿ Bî¿ Bö¿ BÌ¿ C¿ C&¿ CI¿ Ct¿ C{¿ Cæ¿ C¬¿ C√¿ CÚ¿ D8¿ D<¿ Dí¿ Dì¿ D ¿ D–¿ E¿ Eh¿ Eã¿ Eë¿ E‚¿ F#¿ Fp¿ Fë¿ F≈¿ FÂ¿ G¿ G9¿ GW¿ G}¿ GÅ¿ GÇ¿ GÆ¿ G’¿ H4¿ H8¿ H9¿ HÇ¿ H¬¿ H»¿ I¿ I]¿ Ié¿ I¨¿ I—¿ I˝¿ J¿ J?¿ JC¿ JD¿ Jp¿ JÜ¿ J≤¿ J∂¿ J∑¿ J¯¿ J˛¿ KO¿ K^¿ Kd¿ Kt¿ Kz¿ K«¿ Kÿ¿ L&¿ LY¿ LÜ¿ L«¿ LÏ¿ M¿ M¿ M¿ MJ¿ M¿ M¶¿ M…¿ MÊ¿ N¿ N2¿ N;¿ NA¿ NE¿ NF¿ Në¿ N‡¿ O¿ O¿ OY¿ Oå¿ O‘¿ P¿ P\¿ Pê¿ P∑¿ PÁ¿ P˜¿ Q¿ QU¿ Q¢¿ R¿ Re¿ R∆¿ R‹¿ S;¿ SÑ¿ Sÿ¿ T&¿ Tt¿ T«¿ U¿ Ud¿ U¥¿ V¿ VT¿ V§¿ VÙ¿ WA¿ Wë¿ W⁄¿ X*¿ Xz¿ X»¿ Y¿ Yf¿ YØ¿ Y˛¿ ZO¿ Z†¿ ZÈ¿ [2¿ [Ä¿ [Œ¿ \¿ \e¿ \Æ¿ \π¿ \¬¿ \˝¿ ]¿ ]-¿ ]1¿ ]2¿ ]Ö¿ ] ¿ ]Â¿ ^¿ ^8¿ ^m¿ ^ò¿ ^Ã¿ ^Ÿ¿ ^È¿ _¿ _¿ _ ¿ _!¿ _^¿ _d¿ _µ¿ _ƒ¿ _ ¿ `¿ `O¿ `¿ `û¿ `À¿ `Ê¿ a¿ ag¿ at¿ a±¿ a∑¿ aª¿ aº¿ b	¿ b¿ b6¿ ba¿ bç¿ bé¿ bÕ¿ c ¿ c3¿ c4¿ cH¿ cù¿ cÕ¿ c‹¿ c¸¿ d[¿ dh¿ di¿ dé¿ dÔ¿ eG¿ eè¿ e÷¿ eÚ¿ fB¿ fI¿ fJ¿ f^¿ fb¿ fc¿ f¨¿ f≈¿ fÀ¿ g¿ gh¿ gâ¿ gè¿ g€¿ h(¿ h[¿ ha¿ h≤¿ hˇ¿ i@¿ iF¿ ir¿ ix¿ i≈¿ j¿ j_¿ jå¿ j»¿ jÌ¿ k¿ kI¿ kÖ¿ kµ¿ kª¿ k‹¿ l¿ l	¿ l
¿ lD¿ lE¿ lû¿ lü¿ lˇ¿ mA¿ mB¿ mn¿ mô¿ m‘¿ n¿ nX¿ n∞¿ n∂¿ n˘¿ n˝¿ n˛¿ o3¿ o9¿ oÜ¿ o—¿ p¿ pX¿ p^¿ pØ¿ pΩ¿ q"¿ qR¿ q^¿ qï¿ q°¿ q®¿ q¡¿ qﬂ¿ qÂ¿ qÈ¿ qÍ¿ r
¿ r¿ rJ¿ r^¿ rí¿ rì¿ r«¿ s
¿ s¿ s?¿ sP¿ s¿ sì¿ sò¿ sô¿ sﬂ¿ sÂ¿ t5¿ tÖ¿ t÷¿ u%¿ ur¿ uë¿ uÓ¿ vK¿ vd¿ vÇ¿ và¿ vå¿ vç¿ vÍ¿ w)¿ w*¿ wf¿ w≠¿ w±¿ wÊ¿ w˜¿ x¿ x¿ x-¿ x2¿ x3¿ x¿ x»¿ x‚¿ y¿ yK¿ yz¿ y~¿ y¿ y‰¿ z+¿ z,¿ zo¿ zu¿ zæ¿ zﬁ¿ z‰¿ {4¿ {Ç¿ {ò¿ {û¿ {Ô¿ |>¿ |R¿ |X¿ |©¿ |∏¿ |«¿ |˝¿ }8¿ }<¿ }Ñ¿ }≥¿ }ﬁ¿ }Ì¿ ~#¿ ~^¿ ~b¿ ~ü¿ ~¬¿ ~Ì¿ ~Ò¿ ~Ú¿ ¿ b¿ ñ¿ ó¿ ¡¿ Ä	¿ Ä¿ Ä`¿ Äa¿ Ä¨¿ Ä¿ ÅA¿ Åp¿ Åv¿ Åí¿ Å•¿ Å´¿ Å¨¿ ÅÌ¿ Ç¿ Ç¿ Ç<¿ Çt¿ Ç{¿ Ç¿ ÇÄ¿ Ç¬¿ Ç»¿ É	¿ ÉR¿ Ék¿ É∫¿ É¿ É¸¿ Ñ)¿ Ñ;¿ Ñp¿ Ñx¿ Ñ§¿ ÑË¿ Ö¿ Ö#¿ Ö1¿ Ö?¿ Öb¿ Ö°¿ Ö¨¿ Öµ¿ Ö¬¿ Ü¿ Ü@¿ ÜJ¿ ÜP¿ ÜT¿ ÜU¿ Üû¿ Ü≠¿ Ü≥¿ á¿ áF¿ áL¿ áõ¿ á¿ à5¿ à|¿ à}¿ à›¿ â¿ â¿ â{¿ âÅ¿ â„¿ ä¿ ä¿ äq¿ äØ¿ ä‹¿ ä‡¿ ä·¿ ãD¿ ãÅ¿ ãÇ¿ ã—¿ å¿ å	¿ åZ¿ å´¿ åŸ¿ åﬂ¿ ç(¿ çL¿ çì¿ çî¿ çı¿ é.¿ é/¿ éÄ¿ é™¿ é∞¿ é¿¿ é∆¿ è¿ è0¿ è~¿ èè¿ èª¿ èº¿ ê¿ ê9¿ ê:¿ êâ¿ ê—¿ ê◊¿ ë&¿ ëv¿ ëΩ¿ í
¿ í[¿ ím¿ ís¿ í©¿ í◊¿ í›¿ ì+¿ ìv¿ ì|¿ ìå¿ ìí¿ ìﬂ¿ î¿ îb¿ î§¿ ï¿ ïL¿ ïg¿ ïz¿ ïç¿ ï¶¿ ïÆ¿ ï≤¿ ï≥¿ ñ¿ ñ2¿ ñ3¿ ñÄ¿ ñ€¿ ñ‹¿ ó'¿ ó6¿ ó<¿ óç¿ óú¿ óÛ¿ ò$¿ ò\¿ òõ¿ òÀ¿ ô¿ ô¿ ô¿ ô4¿ ôf¿ ôµ¿ ô˛¿ öD¿ öR¿ öX¿ ö±¿ õ¿ õU¿ õY¿ õZ¿ õ£¿ õ©¿ õ¯¿ úB¿ úQ¿ úW¿ ú¶¿ ú’¿ úÁ¿ ù5¿ ù¿ ùÄ¿ ùœ¿ û¿ û;¿ ûB¿ ût¿ û¿¿ û¡¿ ûÒ¿ ü0¿ ü4¿ üà¿ üâ¿ ü¡¿ ü«¿ †¿ †V¿ †\¿ †™¿ †‚¿ †Ë¿ °4¿ °Ñ¿ °≠¿ ¢¿ ¢¿ ¢C¿ ¢I¿ ¢ô¿ ¢ÿ¿ ¢ﬁ¿ £/¿ £z¿ £ä¿ £ê¿ £‹¿ £‚¿ £Ú¿ £¯¿ §C¿ §m¿ §£¿ §§¿ §⁄¿ §‡¿ •¿ •¿ •e¿ •k¿ •´¿ •Í¿ ¶3¿ ¶o¿ ¶£¿ ¶ÿ¿ ß¿ ß?¿ ßE¿ ßF¿ ßú¿ ßù¿ ß∫¿ ß€¿ ß¸¿ ®5¿ ®m¿ ®v¿ ®|¿ ®ç¿ ®ë¿ ®í¿ ®Á¿ ©$¿ ©%¿ ©I¿ ©ñ¿ ©ö¿ ©˛¿ ©ˇ¿ ™A¿ ™G¿ ™ò¿ ™ß¿ ™≠¿ ™Ω¿ ™√¿ ´¿ ´>¿ ´w¿ ´ô¿ ´¬¿ ´Ú¿ ¨¿ ¨<¿ ¨@¿ ¨A¿ ¨m¿ ¨õ¿ ¨ø¿ ¨˛¿ ≠G¿ ≠w¿ ≠ƒ¿ Æ¿ Æ[¿ Æ®¿ Æ©¿ Æø¿ Æ€¿ Ø¿ Ø]¿ Øõ¿ Ø¶¿ ØØ¿ ∞¿ ∞2¿ ∞:¿ ∞@¿ ∞Z¿ ∞h¿ ∞n¿ ∞∏¿ ±
¿ ±>¿ ±B¿ ±C¿ ±o¿ ±ü¿ ±†¿ ±È¿ ±Ô¿ ≤1¿ ≤7¿ ≤à¿ ≤≥¿ ≤ÿ¿ ≥¿ ≥&¿ ≥*¿ ≥+¿ ≥Q¿ ≥R¿ ≥£¿ ≥Ò¿ ¥	¿ ¥8¿ ¥9¿ ¥e¿ ¥ô¿ ¥Ï¿ µ¿ µ2¿ µX¿ µ^¿ µb¿ µc¿ µ≥¿ µ¡¿ µ«¿ µˆ¿ ∂@¿ ∂A¿ ∂g¿ ∂m¿ ∂∏¿ ∂Ï¿ ∂Ú¿ ∑>¿ ∑M¿ ∑S¿ ∑c¿ ∑i¿ ∑¥¿ ∑ﬁ¿ ∏¿ ∏¿ ∏j¿ ∏p¿ ∏¡¿ ∏–¿ ∏÷¿ ∏Ê¿ ∏Ï¿ π7¿ πg¿ π≤¿ π›¿ ∫¿ ∫H¿ ∫r¿ ∫§¿ ∫®¿ ∫©¿ ∫ı¿ ∫˚¿ ª:¿ ª}¿ ªë¿ ªﬂ¿ º¿ º¿ º`¿ ºf¿ º¥¿ Ω¿ Ω¿ Ωc¿ Ωï¿ Ωñ¿ Ω„¿ æ¿ æ¿ æ%¿ æ+¿ æy¿ æí¿ æ ¿ æÓ¿ æÔ¿ ø>¿ øà¿ ø¢¿ øÏ¿ øÌ¿ ¿;¿ ¿A¿ ¿í¿ ¿°¿ ¿ß¿ ¿∑¿ ¿Ω¿ ¡¿ ¡8¿ ¡â¿ ¡∑¿ ¡Ï¿ ¬(¿ ¬U¿ ¬ä¿ ¬é¿ ¬è¿ ¬⁄¿ √¿ √¿ √j¿ √p¿ √¡¿ √–¿ √÷¿ √Ê¿ √Ï¿ ƒ7¿ ƒg¿ ƒ¥¿ ƒ‡¿ ≈¿ ≈M¿ ≈x¿ ≈´¿ ≈Ø¿ ≈∞¿ ≈‹¿ ∆¿ ∆c¿ ∆{¿ ∆â¿ ∆è¿ ∆ê¿ ∆·¿ «0¿ «í¿ «ƒ¿ »¿ »¿ »H¿ »N¿ »O¿ »Ç¿ »Ω¿ »Ò¿ …=¿ …J¿ …{¿ …Å¿ …Ç¿ …°¿ …Ì¿  ¿  F¿  L¿  ú¿  Ω¿  ‡¿ À<¿ ÀC¿ Àç¿ Àœ¿ Ã¿ ÃC¿ Ãã¿ ÃÌ¿ Õ¿ Õi¿ ÕŒ¿ ÕÙ¿ Œ¿ Œ@¿ Œd¿ Œá¿ Œï¿ Œõ¿ Œ–¿ Œ¯¿ œ,¿ œZ¿ œÑ¿ œ¨¿ œ≥¿ –¿ –'¿ –F¿ –é¿ –î¿ –π¿ —¿ —¿ —0¿ —z¿ —Ä¿ —Ñ¿ —Ö¿ —“¿ —˝¿ “¿ “P¿ “_¿ “ü¿ “†¿ “Ô¿ “ı¿ ”=¿ ”U¿ ”¢¿ ”Œ¿ ‘¿ ‘;¿ ‘f¿ ‘ô¿ ‘ù¿ ‘û¿ ‘ ¿ ‘˘¿ ’B¿ ’¿ ’ç¿ ’ì¿ ’„¿ ÷5¿ ÷}¿ ÷Å¿ ÷Ç¿ ÷Œ¿ ÷Û¿ ÷˘¿ ◊E¿ ◊å¿ ◊í¿ ◊⁄¿ ◊Ú¿ ÿI¿ ÿÇ¿ ÿ≤¿ ÿ˘¿ Ÿ!¿ ŸQ¿ ŸU¿ ŸV¿ ŸÇ¿ Ÿ≠¿ Ÿÿ¿ ⁄¿ ⁄¿ ⁄¿ ⁄S¿ ⁄ç¿ ⁄ë¿ ⁄í¿ ⁄∆¿ ⁄Ô¿ €¿ €¿ €h¿ €ß¿ €Ã¿ €¯¿ ‹+¿ ‹O¿ ‹{¿ ‹¿ ‹Ä¿ ‹¨¿ ›¿ ›&¿ ›D¿ ›g¿ ›É¿ ›µ¿ ›Õ¿ ›Â¿ ›˛¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ.¿ ﬁD¿ ﬁE¿ ﬁë¿ ﬁ†¿ ﬁ¶¿ ﬁı¿ ﬂF¿ ﬂè¿ ﬂø¿ ﬂ≈¿ ‡¿ ‡e¿ ‡µ¿ ‡ƒ¿ ‡ ¿ ·¿ ·i¿ ·™¿ ·‘¿ ·˝¿ ‚¿ ‚7¿ ‚;¿ ‚<¿ ‚y¿ ‚ï¿ ‚©¿ ‚Ø¿ ‚—¿ ‚“¿ „¿ „.¿ „;¿ „G¿ „ß¿ „æ¿ „Ô¿ ‰¿ ‰¿ ‰¿ ‰¿ ‰¿ ‰e¿ ‰u¿ ‰{¿ ‰≈¿ ‰À¿ ‰‹¿ ‰‚¿ ‰¸¿ Âo¿ Â¿¿ Ê¿ ÊZ¿ Ê†¿ ÊÈ¿ ÁT¿ ÁZ¿ Ág¿ Ám¿ ÁÉ¿ Ë¿ Ë\¿ Ë¨¿ Ë˙¿ È!¿ È'¿ È7¿ È=¿ Èr¿ Èº¿ È·¿ Í¿ Í¿ Íq¿ Íü¿ Í†¿ ÍÒ¿ Î¿ Î!¿ Îq¿ Îø¿ Ï¿ Ï[¿ Ïo¿ Ïu¿ Ï«¿ Ì¿ Ì^¿ Ìd¿ Ìµ¿ Ó¿ ÓR¿ Óa¿ Óì¿ Ó∂¿ Ó›¿ Óﬁ¿ Ô ¿ Ô¿ Ô%¿ Ô&¿ Ô^¿ Ôî¿ ÔΩ¿ Ôˇ¿ S¿ Y¿ e¿ é¿ ◊¿ ﬁ¿ ﬂ¿ Ò7¿ Ò{¿ Ò≠¿ ÒÛ¿ Ò˙¿ Ò˛¿ Òˇ¿ Ú=¿ Úc¿ Úù¿ Ú–¿ Û¿ Û4¿ ÛÄ¿ Ûú¿ ÛØ¿ Ûµ¿ Û˙¿ Ù¿ Ù9¿ ÙS¿ ÙY¿ ÙZ¿ Ù°¿ Ù‰¿ ı¿ ı¿ ı ¿ ı9¿ ıã¿ ıë¿ ı©¿ ı∏¿ ˆ¿ ˆ?¿ ˆñ¿ ˆπ¿ ˜¿ ˜¿ ˜#¿ ˜'¿ ˜(¿ ˜q¿ ˜ä¿ ˜è¿ ˜÷¿ ¯"¿ ¯p¿ ¯¬¿ ˘¿ ˘_¿ ˘Ø¿ ˘Ï¿ ˙;¿ ˙X¿ ˙]¿ ˙≠¿ ˙˝¿ ˚N¿ ˚û¿ ˚’¿ ¸:¿ ¸ï¿ ¸ó¿ ¸ò¿ ¸ÿ¿ ¸‹¿ ˝-¿ ˝p¿ ˝π¿ ˝Ù¿ ˝¯¿ ˛-¿ ˛~¿ ˛Õ¿ ˇ¿ ˇn¿ ˇº¿ ˇ”¿ ˇ◊¿ 6¿ k¿ o¿ |¿ Ä¿ å¿ ¢¿ ¶¿ …¿ È¿¿q¿¥¿≈¿¿¿¿¿X¿^¿f¿j¿x¿|¿∫¿ ¿N¿h¿ï¿õ¿˙¿Y¿æ¿ƒ¿¿+¿b¿c¿™¿∞¿˛¿N¿ì¿’¿¸¿¿¿¿X¿m¿n¿≥¿π¿	¿(¿>¿?¿ç¿°¿ß¿∑¿Ω¿		¿	4¿	]¿	^¿	°¿	ß¿	Ò¿	˜¿
¿
¿
[¿
î¿
ï¿
∆¿¿¿I¿ô¿õ¿ú¿˜¿˚¿Z¿ƒ¿Â¿¿¿L¿k¿l¿ß¿˙¿˛¿ˇ¿/¿5¿E¿K¿ã¿“¿”¿¿¿¿#¿c¿Æ¿Ø¿ﬁ¿‰¿Ù¿˙¿:¿Ä¿Å¿≤¿∏¿»¿Œ¿¿V¿W¿Ü¿å¿ú¿¢¿‚¿(¿)¿X¿^¿n¿t¿¥¿˙¿˚¿&¿,¿<¿B¿Ç¿ƒ¿≈¿Ù¿˙¿
¿¿P¿ñ¿ó¿¡¿«¿◊¿›¿¿^¿_¿ç¿ì¿£¿©¿È¿.¿/¿\¿b¿r¿x¿∏¿¸¿˝¿+¿1¿A¿G¿á¿Ã¿Õ¿ˇ¿¿¿¿[¿§¿•¿“¿ÿ¿Ë¿Ó¿.¿r¿s¿ú¿¢¿≤¿∏¿¯¿8¿9¿f¿l¿|¿Ç¿¬¿¿¿8¿>¿N¿T¿î¿‹¿›¿¿¿(¿.¿n¿∫¿ª¿Î¿Ò¿¿¿G¿é¿ê¿ë¿¥¿∏¿Ú¿¿2¿u¿ù¿¿¿¿¿5¿P¿k¿Ö¿ã¿å¿∞¿‚¿ ¿ ¿ C¿ `¿ {¿ ô¿ ∑¿ —¿ ÿ¿ ˚¿!M¿!ü¿!‚¿"+¿"k¿"ì¿"÷¿#¿#Y¿#`¿#d¿#e¿#≤¿#Á¿#Ë¿$8¿$F¿$j¿$k¿$∏¿$„¿%¿%¿%R¿%ú¿%∂¿%›¿%ﬁ¿&¿&$¿&%¿&e¿&É¿&Ñ¿&—¿&·¿'¿'¿'3¿'U¿'V¿'ì¿'ô¿'Á¿(4¿(Ä¿(…¿)¿)¿)`¿)±¿)ˇ¿*O¿*ô¿*Õ¿*Î¿*Ì¿*Ó¿+¿+.¿+K¿+l¿+á¿+Ø¿+ÿ¿,	¿,.¿,b¿,ó¿,Ø¿,µ¿,∂¿,Î¿-¿-(¿-)¿-X¿-y¿-z¿-¥¿-«¿-»¿.¿.h¿.∂¿.º¿/¿/V¿/v¿/w¿/∆¿0¿0`¿0Ø¿0¿¿0∆¿1¿1a¿1°¿1ß¿1ˆ¿2A¿2b¿2c¿2≤¿2ˇ¿37¿3=¿3à¿3–¿4¿47¿48¿4á¿4÷¿5!¿5p¿5Å¿5á¿5÷¿6!¿6>¿6?¿6â¿6è¿6‹¿7%¿7@¿7i¿7j¿7Ø¿7µ¿8 ¿8$¿8*¿8|¿8’¿9)¿9{¿9À¿:¿:v¿:|¿:ƒ¿;¿;J¿;x¿;y¿;Ö¿;õ¿;√¿;«¿;…¿; ¿<¿<¿<Z¿<l¿<≥¿<π¿<Â¿<Û¿<Ù¿=&¿=,¿=X¿=f¿=g¿=õ¿=°¿=Õ¿=‹¿=›¿>¿>¿>I¿>X¿>Y¿>î¿>ö¿>«¿>◊¿>ÿ¿? ¿?&¿?s¿?®¿?¿¿?¬¿?√¿?€¿@*¿@=¿@>¿@Ü¿@ô¿@ö¿@Í¿@ˇ¿A ¿AC¿AX¿AY¿A~¿Aç¿Aè¿Aê¿A¡¿A≈¿B¿BR¿Bå¿B‘¿C)¿CB¿CF¿Cí¿C„¿D2¿DT¿Dh¿D´¿D±¿Dˇ¿E=¿EC¿EÑ¿Eú¿Eπ¿E÷¿EÙ¿F¿F1¿FX¿Fu¿Fí¿F±¿F–¿FÍ¿FÒ¿G¿G#¿G5¿GH¿G[¿Go¿Gã¿G¢¿Gπ¿G“¿GÎ¿G˛¿H¿H
¿H¿HN¿HT¿Hï¿H∞¿H∂¿I¿I\¿Iü¿I†¿I¸¿I˝¿JM¿Jó¿Jﬁ¿Jﬂ¿K8¿K9¿Kê¿Kë¿K…¿Kœ¿L¿Lm¿Lö¿L“¿Lÿ¿M¿M¿M^¿M®¿Mº¿M—¿N¿N?¿NT¿Nt¿N∆¿N«¿O¿O¿OL¿OÄ¿O°¿Oı¿Oˆ¿PF¿PS¿Ps¿Pƒ¿P≈¿Pˇ¿Q¿QU¿Qp¿Q§¿Q™¿Q¿R¿R_¿R`¿R®¿RÆ¿R˝¿SF¿SG¿Sñ¿Sú¿T¿TK¿TL¿Tü¿T•¿U¿UN¿UO¿Uô¿Uü¿UÏ¿V9¿V:¿Vã¿Vë¿V˜¿WD¿WE¿Wö¿W†¿X¿XM¿XN¿Xä¿XØ¿X∞¿Y
¿Y¿Y\¿Y]¿Yi¿Y¿Y∆¿Yˇ¿Z6¿Ze¿Zì¿Z¡¿ZÛ¿[%¿[L¿[P¿[R¿[S¿[ê¿[î¿[Â¿\'¿\Y¿\]¿\©¿\¯¿]¿]¿]m¿]∏¿]Â¿^G¿^ã¿^Î¿_;¿_t¿_x¿_Ø¿_ˇ¿`A¿`p¿`∞¿`¥¿a¿a	¿aS¿aù¿aÏ¿b8¿b<¿bJ¿bN¿bú¿b«¿c¿c4¿cP¿c”¿cË¿d¿da¿dv¿dï¿d¸¿e¿e*¿ey¿eè¿eï¿e‰¿f8¿fH¿fN¿fõ¿fß¿f≠¿g¿gG¿gS¿gT¿g†¿gÒ¿h ¿h¿hU¿h⁄¿i)¿iv¿iÜ¿iÁ¿j¿jí¿jø¿k"¿k6¿k<¿kä¿kû¿k©¿k™¿kı¿l1¿l7¿lÜ¿l¬¿l»¿m¿mF¿mL¿m£¿mÚ¿nC¿në¿n≠¿n≥¿o¿o¿oÄ¿oæ¿p#¿pp¿pΩ¿q¿q[¿qß¿q¯¿q˛¿rJ¿rs¿r¿rÄ¿r–¿s ¿sp¿sº¿s¬¿t¿t^¿t¨¿t˘¿uI¿ug¿uq¿ur¿u¡¿u÷¿u‹¿v&¿vs¿vÑ¿vä¿vø¿v…¿vÀ¿vÃ¿w¿w¿wa¿w≠¿wË¿wˇ¿x*¿x2¿x3¿xg¿xq¿xs¿xt¿x≠¿x‘¿xÁ¿y4¿y¿y»¿z¿zi¿zw¿zx¿z√¿z˚¿{¿{Q¿{¢¿{Ú¿|B¿|Q¿|]¿|_¿|`¿|≠¿|˚¿}G¿}í¿}ß¿}´¿}˘¿~¿~¿~#¿~'¿~q¿~†¿~¿>¿S¿g¿¿ó¿Æ¿«¿·¿Á¿Ë¿Ä?¿ÄT¿ÄU¿Ä´¿Äø¿Ä¿¿Å¿Å.¿Å/¿Åà¿Åü¿Å†¿Å”¿Ç2¿Ç3¿Ç?¿ÇU¿Çß¿Ç´¿Ç≠¿ÇÆ¿ÇÓ¿ÇÚ¿É¿É¿É<¿Ét¿Év¿Éõ¿Éú¿É—¿É’¿Ñ$¿ÑV¿ÑZ¿Ñâ¿Ñª¿Ñø¿Ñ¸¿Ö ¿Ö;¿Öx¿Ö|¿Öπ¿ÖΩ¿Ü¿Ü$¿Ü<¿Üw¿Üë¿Ü™¿Üœ¿ÜÈ¿á¿á¿á¿á_¿áÇ¿áü¿áº¿á€¿á˙¿á˚¿à3¿àL¿àM¿àÖ¿àã¿à≠¿à∆¿à«¿â ¿â¿â¿âT¿âZ¿â|¿âñ¿âó¿âœ¿âÒ¿ä¿ä<¿äb¿äÜ¿ää¿äã¿ä”¿ã¿ã¿ãe¿ãì¿ãØ¿ã“¿ãı¿å¿å?¿åF¿åJ¿åK¿åW¿åz¿åú¿åØ¿åµ¿å·¿åı¿å˚¿ç"¿çH¿çn¿çñ¿çº¿ç¿¿ç¡¿çÕ¿é¿é¿é'¿é=¿éÑ¿é≠¿é≥¿éÃ¿éÛ¿è¿è5¿èd¿èj¿è§¿èº¿èÌ¿èı¿ê@¿êF¿êG¿êÉ¿ê¬¿êÒ¿êı¿ê˜¿ê¯¿ë>¿ëB¿ëi¿ëm¿ëæ¿í¿íb¿íf¿íº¿ì#¿ìQ¿ìU¿ìŸ¿ì›¿î_¿îc¿îÈ¿îÌ¿ï:¿ïâ¿ïÿ¿ñ&¿ñq¿ñà¿ñı¿ó¿óq¿ó¿ó∂¿óÒ¿ó˙¿ó˚¿ò\¿òb¿òµ¿ô¿ôb¿ôô¿ôü¿ô‹¿ô‚¿ö,¿öz¿öè¿öê¿ö…¿öÍ¿öÎ¿õ;¿õA¿õz¿õù¿õû¿õ™¿õÕ¿õÔ¿ú¿ú¿ú4¿úH¿úN¿út¿úñ¿ú¥¿ú“¿ú÷¿ú◊¿ú„¿ù¿ù¿ù(¿ù>¿ùÜ¿ùä¿ùå¿ùç¿ù‹¿ù˙¿ù˛¿ûI¿ûó¿û÷¿ü¿ü¿ü`¿üß¿ü˛¿†)¿†-¿†±¿†µ¿°7¿°;¿°¡¿°€¿¢¿¢'¿¢(¿¢d¿¢j¿¢ƒ¿¢Ã¿¢Õ¿£¿£'¿£(¿£w¿£Å¿£É¿£Ñ¿£”¿£Ó¿£Ú¿§;¿§{¿§’¿§Ÿ¿•*¿•=¿•á¿•∞¿•À¿¶¿¶?¿¶J¿¶K¿¶y¿¶¿¶Ω¿¶Ã¿¶Õ¿ß¿ß$¿ßt¿ß¡¿ß÷¿ßÿ¿ßŸ¿®(¿®,¿®T¿®ß¿®¿®Ù¿©D¿©^¿©¡¿™¿™[¿™å¿™ê¿™û¿™¢¿™ˆ¿´¿´¿´S¿´ë¿´π¿´ø¿´“¿´ÿ¿´Ê¿¨¿¨S¿¨]¿¨c¿¨¨¿¨˘¿≠7¿≠=¿≠á¿≠∫¿Æ¿Æz¿Æ…¿Ø¿ØO¿Ø§¿Øπ¿Øø¿∞	¿∞¿∞#¿∞3¿∞9¿∞¿∞ì¿∞À¿∞Ó¿±¿±¿±+¿±1¿±p¿±v¿±«¿±Ë¿≤H¿≤ß¿≥¿≥K¿≥Q¿≥†¿≥Ó¿¥2¿¥8¿¥Ö¿¥ÿ¿¥ﬁ¿µ(¿µ<¿µú¿µæ¿µ‚¿∂¿∂#¿∂E¿∂F¿∂x¿∂~¿∂∆¿∂Ã¿∑¿∑|¿∑Ã¿∑Í¿∑¿∏@¿∏Ñ¿∏Œ¿π¿πB¿πH¿πñ¿π©¿∫¿∫
¿∫¿∫ ¿∫l¿∫á¿∫‚¿ª ¿ª¿ª?¿ªÜ¿ª⁄¿º¿º@¿ºr¿º•¿º„¿Ω¿ΩH¿ΩÄ¿Ω∏¿ΩÒ¿æ(¿æ^¿æî¿æœ¿ø¿ø8¿øt¿ø®¿ø‹¿¿¿¿R¿¿ç¿¿¬¿¿Ú¿¡%¿¡W¿¡â¿¡∫¿¡Ó¿¬0¿¬g¿¬ò¿¬ÿ¿√¿√>¿√r¿√Æ¿√È¿ƒ¿ƒP¿ƒÄ¿ƒæ¿ƒÒ¿≈,¿≈a¿≈ï¿≈«¿≈˛¿∆1¿∆d¿∆ô¿∆‘¿«¿«5¿«h¿«ü¿«—¿»¿»<¿»v¿»¶¿»Ÿ¿…¿…D¿…y¿…¥¿…Í¿ *¿ \¿ ó¿ À¿À¿À4¿Àh¿Àõ¿À€¿Ã¿Ã<¿ÃA¿ÃB¿Ãj¿Ãp¿ÃΩ¿Ã√¿Õ¿Õ6¿Õè¿Õï¿Õ•¿Õ´¿Õ˜¿Œ¿Œ.¿Œ/¿ŒW¿Œ]¿Œ™¿Œ∞¿Œ¸¿œ`¿œÆ¿œÃ¿œ“¿– ¿–q¿–∫¿—
¿—-¿—3¿—C¿—I¿—ï¿—∞¿“¿“%¿“&¿“d¿“´¿“˝¿”-¿”r¿”∞¿”Â¿‘ ¿‘P¿‘U¿‘V¿‘b¿‘Ö¿‘ß¿‘∫¿‘¿¿‘‹¿‘¿‘ˆ¿’'¿’_¿’ê¿’¨¿’ﬁ¿’Ì¿÷¿÷I¿÷\¿÷ª¿◊¿◊¿◊¿◊*¿◊è¿◊ê¿◊∞¿◊÷¿◊◊¿ÿ¿ÿ¿ÿY¿ÿ©¿ÿÒ¿Ÿ¿Ÿ¿Ÿ#¿ŸN¿Ÿj¿Ÿô¿Ÿü¿Ÿ¿¿Ÿƒ¿Ÿ≈¿⁄
¿⁄¿⁄Z¿⁄•¿⁄¥¿⁄„¿⁄‰¿€¿€G¿€¿€©¿€Ø¿€›¿‹¿‹H¿‹N¿‹i¿‹m¿‹o¿‹p¿‹∑¿‹ª¿›¿›x¿›ì¿› ¿›÷¿›◊¿ﬁ(¿ﬁt¿ﬁ¬¿ﬁ‡¿ﬁÎ¿ﬁÏ¿ﬂ>¿ﬂá¿ﬂï¿ﬂñ¿ﬂË¿‡
¿‡¿‡¿‡¿‡d¿‡µ¿‡∆¿‡ ¿·¿·¿·F¿·e¿·}¿·ó¿·±¿·≈¿·À¿·Ã¿·ˆ¿‚¿‚¿‚e¿‚|¿‚ê¿‚ë¿‚›¿‚Ò¿‚Ú¿„¿„6¿„7¿„p¿„q¿„¡¿„—¿„Û¿‰¿‰¿‰0¿‰`¿‰g¿‰à¿‰ß¿‰Ã¿‰Ò¿ÂD¿ÂK¿ÂO¿ÂQ¿ÂR¿Âå¿Â‹¿Â›¿Ê'¿Ê+¿ÊÅ¿Êè¿Ê¨¿Êœ¿Á-¿Á.¿Áq¿ÁÖ¿ÁÜ¿Á®¿Á∆¿Á«¿ÁÌ¿Ë¿Ë¿Ë ¿Ë6¿Ëä¿Ëé¿Ëê¿Ëë¿Ë ¿ËŒ¿È$¿È(¿È~¿ÈÇ¿È´¿ÈØ¿ÈÌ¿Í+¿Í/¿Í=¿ÍA¿ÍÉ¿Í⁄¿Í¿Î*¿Î7¿Î8¿Îh¿Îs¿Îu¿Îv¿Î ¿ÎŒ¿Î‹¿Î‡¿Ï5¿Ïå¿Ï¶¿ÏÂ¿ÏÎ¿Ì=¿ÌW¿Ìd¿Ìe¿Ì∞¿Ì∂¿ÌÔ¿Ì˙¿Ì˚¿ÓG¿ÓM¿Óé¿Óö¿Óú       é†Çïé†é“+/// A token that represents a root isolate. éÁ éÁé˜é¯é˘é¯ é˙è éˇ   è^ècècK/// An enumeration representing the root isolate (0 if not a root isolate). ènÅ9ê)ê)Äó/// The token for the root isolate that is executing this Dart code.  If this
/// Dart code is not executing on a root isolate [instance] will be null.ê4ê§ê•ê¶  ê¨Äáëë   ê¨ê≠ê≥êƒê∫ê¥ê¬ê√ê≈ëêÃê∆êŒ ë7¿ Î_ë7îWÉ/// Platform event dispatcher singleton.
///
/// The most basic interface to the host operating system's interface.
///
/// This is the central entry point for platform messages and configuration
/// events from the platform.
///
/// It exposes the core scheduler API, the input event callback, the graphics
/// drawing API, and other such core services.
///
/// It manages the list of the application's [views] as well as the
/// [configuration] of various platform attributes.
///
/// Consider avoiding static references to this singleton through
/// [PlatformDispatcher.instance] and instead prefer using a binding for
/// dependency resolution such as `WidgetsBinding.instance.platformDispatcher`.
/// See [PlatformDispatcher.instance] for more information about why this is
/// preferred. înÄ◊îÓï ïïï{/// Private constructor, since only dart:ui is supposed to create one of
/// these. Use [instance] to access the singleton.  4ô–Bôô ô¸öööööFö.ö. ö?öEö[ö\õR-õ`õ`  õÉ4õàõà õÆõ≤õ≥†*4†B†B †\†]†N†[†O†T°R9°n°n °â°ä°w°à°x°}™«#™‘™‘  ™Ó+™Û™Û ´ÆÆ'Æ'  Æ<&ÆAÆA ÆYÆ]Æ^¥?¥D¥D  ø	+ø"ø"  øö'øüøü ø∏øºøΩ¿ F«¿ F÷¿ F÷  ¿ FÁ"¿ FÏ¿ FÏ ¿ G ¿ G¿ G¿ Iê¿ Iû¿ Iû  ¿ IÆ!¿ I≥¿ I≥ ¿ I∆¿ I ¿ IÀ¿ L(/¿ LC¿ LC  ¿ L[)¿ L`¿ L` ¿ L{¿ L¿ LÄ¿ N‚-¿ NÛ¿ NÛ ¿ O¿ `Å¿ `í¿ `í  ¿ bc(¿ bt¿ bt ¿ bä¿ j !¿ j€¿ j€  ¿ jÔ%¿ jÙ¿ jÙ ¿ k¿ k¿ k¿ l6¿ l,¿ l,  ¿ }Ü+¿ }ü¿ }ü  ¿ }µ'¿ }∫¿ }∫ ¿ }”¿ }◊¿ }ÿ¿ óı-¿ ò¿ ò  ¿ ò&4¿ ò+¿ ò+ ¿ òQ¿ òU¿ òV¿ ´y¿ ´á¿ ´á  ¿ ´õ%¿ ´†¿ ´† ¿ ´∑¿ ´ª¿ ´º¿ ≥-"¿ ≥9¿ ≥9  ¿ ≥TÄ‚¿ ¥¿ ¥Ä∞/// Tracks if the initial state has been accessed. Once accessed, we will stop
/// updating the [initialLifecycleState], as it is not the preferred way to
/// access the state.¿ ¥1¿ π¥'¿ π¬¿ π¬  ¿ πﬂ.¿ π‰¿ π‰ ¿ ∫¿ ∫¿ ∫	¿ ª·,¿ ªÊ¿ ªÊ ¿ º¿ Ωe.¿ Ωj¿ Ωj ¿ Ωé¿ æÃ ¿ æ—¿ æ— ¿ æË¿ ¡ã*¿ ¡ô¿ ¡ô  ¿ ¡π1¿ ¡æ¿ ¡æ ¿ ¡·¿ ¡Â¿ ¡Ê¿ ƒ∂(¿ ƒƒ¿ ƒƒ  ¿ ƒ‚/¿ ƒÁ¿ ƒÁ ¿ ≈¿ ≈¿ ≈¿ ”§(¿ ”≤¿ ”≤  ¿ ”–/¿ ”’¿ ”’ ¿ ”ˆ¿ ”˙¿ ”˚¿ ÿK5¿ ÿi¿ ÿi  ¿ ÿÑ,¿ ÿâ¿ ÿâ ¿ ÿß¿ ÿ´¿ ÿ¨¿ ⁄Ò*¿ ⁄˚¿ ⁄˚ ¿ €¿ €¿ €¿ €¿ €¿ €¿ €©!¿ €∑¿ €∑  ¿ €Œ(¿ €”¿ €” ¿ €Ì¿ €Ò¿ €Ú¿ ﬁ¿ ﬁ$¿ ﬁ$  ¿ ﬁ0¿ ﬁ6¿ ﬁ6  ¿ Ú?"¿ ÚQ¿ ÚQ  %ïIÑÑô∑ô∑Ñ)/// The [PlatformDispatcher] singleton.
///
/// Consider avoiding static references to this singleton through
/// [PlatformDispatcher.instance] and instead prefer using a binding for
/// dependency resolution such as `WidgetsBinding.instance.platformDispatcher`.
///
/// Static access of this object means that Flutter has few, if any options to
/// fake or mock the given object in tests. Even in cases where Dart offers
/// special language constructs to forcefully shadow such properties, those
/// mechanisms would only be reasonable for tests and they would not be
/// reasonable for a future of Flutter where we legitimately want to select an
/// appropriate implementation at runtime.
///
/// The only place that `WidgetsBinding.instance.platformDispatcher` is
/// inappropriate is if access to these APIs is required before the binding is
/// initialized by invoking `runApp()` or
/// `WidgetsFlutterBinding.instance.ensureInitialized()`. In that case, it is
/// necessary (though unfortunate) to use the [PlatformDispatcher.instance]
/// object statically.   öbÄÌõõÄê/// Called when the platform configuration changes.
///
/// The engine invokes this callback in the same zone in which the callback
/// was set.   úgÉ¿†
†
Ç /// The current list of displays.
///
/// If any of their configurations change, [onMetricsChanged] will be called.
///
/// To get the display for a [FlutterView], use [FlutterView.display].
///
/// Platforms may limit what information is available to the application with
/// regard to secondary displays and/or displays that do not have an active
/// application window.
///
/// Presently, on Android and Web this collection will only contain the
/// display that the current window is on. On iOS, it will only contains the
/// main display on the phone or tablet. On Desktops other than Linux, it will
/// contain only a main display with a valid refresh rate but invalid size and
/// device pixel ratio values.   †cÄÏ°8°8Ä≤/// The current list of views, including top level platform windows used by
/// the application.
///
/// If any of their configurations change, [onMetricsChanged] will be called.   ¢$àüßfßfÑ˛/// The [FlutterView] provided by the engine if the platform is unable to
/// create windows, or, for backwards compatibility.
///
/// If the platform provides an implicit view, it can be used to bootstrap
/// the framework. This is common for platforms designed for single-view
/// applications like mobile devices with a single display.
///
/// Applications and libraries must not rely on this property being set
/// as it may be null depending on the engine's configuration. Instead,
/// consider using [View.of] to lookup the [FlutterView] the current
/// [BuildContext] is drawing into.
///
/// While the properties on the referenced [FlutterView] may change,
/// the reference itself is guaranteed to never change over the lifetime
/// of the application: if this property is null at startup, it will remain
/// so throughout the entire lifetime of the application. If it points to a
/// specific [FlutterView], it will continue to point to the same view until
/// the application is shut down (although the engine may replace or remove
/// the underlying backing surface of the view at its discretion).
///
/// See also:
///
/// * [View.of], for accessing the current view.
/// * [PlatformDispatcher.views] for a list of all [FlutterView]s provided
///   by the platform.   ´Ç¯≠≠Çõ/// A callback that is invoked whenever the [ViewConfiguration] of any of the
/// [views] changes.
///
/// For example when the device is rotated or when the application is resized
/// (e.g. when showing applications side-by-side on Android),
/// `onMetricsChanged` is called.
///
/// The engine invokes this callback in the same zone in which the callback
/// was set.
///
/// The framework registers with this callback and updates the layout
/// appropriately.
///
/// See also:
///
/// * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///   register for notifications when this is called.
/// * [MediaQuery.of], a simpler mechanism for the same.   ≥WÄ‰¥%¥%Äæ/// Opaque engine identifier for the engine running current isolate. Can be used
/// in native code to retrieve the engine instance.
/// The identifier is valid while the isolate is running.   ∑àæﬁæﬁá{/// A callback invoked immediately after the focus is transitioned across [FlutterView]s.
///
/// When the platform moves the focus from one [FlutterView] to another, this
/// callback is invoked indicating the new view that has focus and the direction
/// in which focus was received. For example, if focus is moved to the [FlutterView]
/// with ID 2 in the forward direction (could be the result of pressing tab)
/// the callback receives a [ViewFocusEvent] with [ViewFocusState.focused] and
/// [ViewFocusDirection.forward].
///
/// Typically, receivers of this event respond by moving the focus to the first
/// focusable widget inside the [FlutterView] with ID 2. If a view receives
/// focus in the backward direction (could be the result of pressing shift + tab),
/// typically the last focusable widget inside that view is focused.
///
/// The platform may remove focus from a [FlutterView]. For example, on the web,
/// the browser can move focus to another element, or to the browser's built-in UI.
/// On desktop, the operating system can switch to another window (e.g. using Alt + Tab on Windows).
/// In scenarios like these, [onViewFocusChange] will be invoked with [ViewFocusState.unfocused] and
/// [ViewFocusDirection.undefined].
///
/// Receivers typically respond to this event by removing all focus indications
/// from the app.
///
/// Apps can also programmatically request to move the focus to a desired
/// [FlutterView] by calling [requestViewFocusChange].
///
/// The callback is invoked in the same zone in which the callback was set.
///
/// See also:
///
///   * [requestViewFocusChange] to programmatically instruct the platform to move focus to a different [FlutterView].
///   * [ViewFocusState] for a list of allowed focus transitions.
///   * [ViewFocusDirection] for a list of allowed focus directions.
///   * [ViewFocusEvent], which is the event object provided to the callback.   ¿ DïÇ/¿ F¶¿ F¶ÅÈ/// A callback invoked when any view begins a frame.
///
/// A callback that is invoked to notify the application that it is an
/// appropriate time to provide a scene using the [SceneBuilder] API and the
/// [FlutterView.render] method.
///
/// When possible, this is driven by the hardware VSync signal of the attached
/// screen with the highest VSync rate. This is only called if
/// [PlatformDispatcher.scheduleFrame] has been called since the last time
/// this callback was invoked.   ¿ H;ÅR¿ Iq¿ IqÅ/// A callback that is invoked for each frame after [onBeginFrame] has
/// completed and after the microtask queue has been drained.
///
/// This can be used to implement a second phase of frame rendering that
/// happens after any deferred work queued by the [onBeginFrame] phase.   ¿ JπÅl¿ K˘¿ K˘Å/// A callback that is invoked when pointer data is available.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [GestureBinding], the Flutter framework class which manages pointer
///    events.   ¿ _#Å[¿ `f¿ `fÅ/// A callback that is invoked when key data is available.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// The callback should return true if the key event has been handled by the
/// framework and should not be propagated further.   ¿ feÑb¿ j£¿ j£É˛/// A callback that is invoked to report the [FrameTiming] of recently
/// rasterized frames.
///
/// It's preferred to use [SchedulerBinding.addTimingsCallback] than to use
/// [onReportTimings] directly because [SchedulerBinding.addTimingsCallback]
/// allows multiple callbacks.
///
/// This can be used to see if the application has missed frames (through
/// [FrameTiming.buildDuration] and [FrameTiming.rasterDuration]), or high
/// latencies (through [FrameTiming.totalSpan]).
///
/// Unlike [Timeline], the timing information here is available in the release
/// mode (additional to the profile and the debug mode). Hence this can be
/// used to monitor the application's performance in the wild.
///
/// {@macro dart.ui.TimingsCallback.list}
///
/// If this is null, no additional work will be done. If this is not null,
/// Flutter spends less than 0.1ms every 1 second to report the timings
/// (measured on iPhone6S). The 0.1ms is about 0.6% of 16ms (frame budget for
/// 60fps), or 0.01% CPU usage per second.   ¿ z.ÉU¿ }[¿ }[Çm/// Deprecated. Migrate to [ChannelBuffers.setListener] instead.
///
/// Called whenever this platform dispatcher receives a message from a
/// platform-specific plugin.
///
/// The `name` parameter determines which plugin sent the message. The `data`
/// parameter is the payload and is typically UTF-8 encoded JSON but can be
/// arbitrary data.
///
/// Message handlers must call the function given in the `callback` parameter.
/// If the handler does not need to respond, the handler should pass null to
/// the callback.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.  ¿ |∫¿ |ª¿ |≈¿ }:¿ |À¿ }¿ ñ5Ä•¿ ñú¿ ñúJ/// Additional accessibility features that may be enabled by the platform.   ¿ ñﬁÅ¿ ó∞¿ ó∞Äµ/// A callback that is invoked when the value of [accessibilityFeatures]
/// changes.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.   ¿ üãÇv¿ °∫¿ °∫Ç/// The system-reported default locale of the device.
///
/// This establishes the language and formatting conventions that application
/// should, if possible, use to render their user interface.
///
/// This is the first locale selected by the user and is the user's primary
/// locale (the locale the device UI is displayed in)
///
/// This is equivalent to `locales.first`, except that it will provide an
/// undefined (using the language tag "und") non-null locale if the [locales]
/// list has not been set or is empty.   ¿ ¢Çù¿ §Ä¿ §ÄÇK/// The full system-reported supported locales of the device.
///
/// This establishes the language and formatting conventions that application
/// should, if possible, use to render their user interface.
///
/// The list is ordered in order of priority, with lower-indexed locales being
/// preferred over higher-indexed ones. The first element is the primary
/// [locale].
///
/// The [onLocaleChanged] callback is called whenever this value changes.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this value changes.   ¿ ™Åu¿ ´R¿ ´RÅ,/// A callback that is invoked whenever [locale] changes value.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this callback is invoked.   ¿ ±¢Åá¿ ≤¿¿ ≤¿Å/// The lifecycle state immediately after dart isolate initialization.
///
/// This property will not be updated as the lifecycle changes.
///
/// It is used to initialize [SchedulerBinding.lifecycleState] at startup with
/// any buffered lifecycle state events.   ¿ µeÄ⁄¿ ∂¿ ∂Ää/// The setting indicating whether time should always be shown in the 24-hour
/// format.
///
/// This option is used by [showTimePicker].   ¿ ∂CÅ⁄¿ ∑Î¿ ∑ÎÅÑ/// The system-reported text scale.
///
/// This establishes the text scaling factor to use when rendering text,
/// according to the user's platform preferences.
///
/// The [onTextScaleFactorChanged] callback is called whenever this value
/// changes.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this value changes.   ¿ ∏!Åê¿ π{¿ π{Å5/// A callback that is invoked whenever [textScaleFactor] changes value.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this callback is invoked.   ¿ ∫´Å3¿ ªú¿ ªúÄ›/// Whether the spell check service is supported on the current platform.
///
/// This option is used by [EditableTextState] to define its
/// [SpellCheckConfiguration] when a default spell check service
/// is requested.   ¿ ºÅP¿ Ω¿ ΩÄˆ/// Whether showing system context menu is supported on the current platform.
///
/// This option is used by [AdaptiveTextSelectionToolbar] to decide whether
/// to show system context menu, or to fallback to the default Flutter context
/// menu.   ¿ ΩòÅ1¿ æù¿ æùÄÌ/// Whether briefly displaying the characters as you type in obscured text
/// fields is enabled in system settings.
///
/// See also:
///
///  * [EditableText.obscureText], which when set to true hides the text in
///    the text field.   ¿ æÒÄ˙¿ ø≥¿ ø≥Ä¨/// The setting indicating the current brightness mode of the host platform.
/// If the platform has no preference, [platformBrightness] defaults to
/// [Brightness.light].   ¿ øÔÅô¿ ¡L¿ ¡LÅ8/// A callback that is invoked whenever [platformBrightness] changes value.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this callback is invoked.   ¿ ¬ëÄã¿ ¬Ë¿ ¬ËH/// The setting indicating the current system font of the host platform.   ¿ √ Åì¿ ƒ{¿ ƒ{Å6/// A callback that is invoked whenever [systemFontFamily] changes value.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this callback is invoked.   ¿ —áÅ¿ “j¿ “jÄœ/// Whether the user has requested that updateSemantics be called when the
/// semantic contents of a view changes.
///
/// The [onSemanticsEnabledChanged] callback is called whenever this value
/// changes.   ¿ “¢Äˇ¿ ”i¿ ”iÄ¨/// A callback that is invoked when the value of [semanticsEnabled] changes.
///
/// The framework invokes this callback in the same zone in which the
/// callback was set.   ¿ ÷ÑÅƒ¿ ÿ¿ ÿÅ_/// A callback that is invoked whenever the user requests an action to be
/// performed on a semantics node.
///
/// This callback is used when the user expresses the action they wish to
/// perform based on the semantics node supplied by updateSemantics.
///
/// The framework invokes this callback in the same zone in which the
/// callback was set.   ¿ ⁄îZ¿ ⁄÷¿ ⁄÷1/// The [FrameData] object for the current frame.   ¿ € ÄÜ¿ €|¿ €|G/// A callback that is invoked when the window updates the [FrameData].   ¿ ﬁGÉå¿ ·ø¿ ·øÉD/// A callback that is invoked when an unhandled error occurs in the root
/// isolate.
///
/// This callback must return `true` if it has handled the error. Otherwise,
/// it must return `false` and a fallback mechanism such as printing to stderr
/// will be used, as configured by the specific platform embedding via
/// `Settings::unhandled_exception_callback`.
///
/// The VM or the process may exit or become unresponsive after calling this
/// callback. The callback will not be called for exceptions that cause the VM
/// or process to terminate or become unresponsive before the callback can be
/// invoked.
///
/// This callback is not directly invoked by errors in child isolates of the
/// root isolate. Programs that create new isolates must listen for errors on
/// those isolates and forward the errors to the root isolate.   ¿ ‰Ö¸¿ ÈÓ¿ ÈÓÖå/// The route or path that the embedder requested when the application was
/// launched.
///
/// This will be the string "`/`" if no particular route was requested.
///
/// ## Android
///
/// On Android, calling
/// [`FlutterView.setInitialRoute`](/javadoc/io/flutter/view/FlutterView.html#setInitialRoute-java.lang.String-)
/// will set this value. The value must be set sufficiently early, i.e. before
/// the [runApp] call is executed in Dart, for this to have any effect on the
/// framework. The `createFlutterView` method in your `FlutterActivity`
/// subclass is a suitable time to set the value. The application's
/// `AndroidManifest.xml` file must also be updated to have a suitable
/// [`<intent-filter>`](https://developer.android.com/guide/topics/manifest/intent-filter-element.html).
///
/// ## iOS
///
/// On iOS, calling
/// [`FlutterViewController.setInitialRoute`](/ios-embedder/interface_flutter_view_controller.html#a7f269c2da73312f856d42611cc12a33f)
/// will set this value. The value must be set sufficiently early, i.e. before
/// the [runApp] call is executed in Dart, for this to have any effect on the
/// framework. The `application:didFinishLaunchingWithOptions:` method is a
/// suitable time to set this value.
///
/// See also:
///
///  * [Navigator], a widget that handles routing.
///  * [SystemChannels.navigation], which handles subsequent navigation
///    requests from the embedder.   õªÄ®õøõø  õﬁõÌõÏ   Æf~ÆjÆj  Æ{ÆäÆâ   ø≈Äåø…ø…  ø€!øıøÙ   ¿ Gs¿ G¿ G  ¿ G¿ G.¿ G-   ¿ I”o¿ I◊¿ I◊  ¿ I„¿ IÚ¿ IÒ   ¿ LàÄî¿ Lå¿ Lå  ¿ L†#¿ Lº¿ Lª   ¿ `†Å¿ `§¿ `§  ¿ `Æ¿ `¿¿ `ø   ¿ kÄ¿ k¿ k  ¿ k,¿ k>¿ k=   ¿ }‡Å¿ ~h¿ ~h  ¿ ~z!¿ ~î¿ ~ì  ¿ }‡¿ }·¿ }Î¿ ~`¿ }Ò¿ ~'¿ ò^Ä®¿ òb¿ òb  ¿ òÅ¿ òê¿ òè   ¿ ´ƒ{¿ ´»¿ ´»  ¿ ´ÿ¿ ´Á¿ ´Ê   ¿ ∫Äñ¿ ∫¿ ∫  ¿ ∫.¿ ∫=¿ ∫<   ¿ ¡ÓÄü¿ ¡Ú¿ ¡Ú  ¿ ¬¿ ¬¿ ¬   ¿ ≈Äô¿ ≈¿ ≈  ¿ ≈3¿ ≈B¿ ≈A   ¿ ‘Äô¿ ‘¿ ‘  ¿ ‘!¿ ‘0¿ ‘/   ¿ ÿ¥Ä†¿ ÿ∏¿ ÿ∏  ¿ ÿœ&¿ ÿÓ¿ ÿÌ   ¿ €˙ÄÑ¿ €˛¿ €˛  ¿ ‹¿ ‹ ¿ ‹   ¿ ·÷d¿ ·⁄¿ ·⁄  ¿ ·‚¿ ·Ú¿ ·Ò   9°êÄê°˙°˙X/// Returns the [FlutterView] with the provided ID if one exists, or null
/// otherwise. ¢ ¢¢   Ø–Ä¯Ø’Ø’  ØﬁØ„Ø‚  ØÊ$Ø˙Ø˘   ±óÅ4±ú±ú  ±®±≠±¨   ≤œÄÑ≤‘≤‘  ≤Ë≤¯≤˜   ¥©Ä⁄¥Æ¥Æ  ¥æ¥Õ¥Ã   µÚÅµ˜µ˜  ∂
∂∂  ∂$∂,∂+   ¿ @UÉl¿ BÙ¿ BÙÇ{/// Requests a focus change of the [FlutterView] with ID [viewId].
///
/// If an app would like to request the engine to move focus, in forward direction,
/// to the [FlutterView] with ID 1 it should call this method with [ViewFocusState.focused]
/// and [ViewFocusDirection.forward].
///
/// There is no need to call this method if the view in question already has
/// focus as it won't have any effect.
///
/// A call to this method will lead to the engine calling [onViewFocusChange]
/// if the request is successfully fulfilled.
///
/// See also:
///
///  * [onViewFocusChange], a callback to subscribe to view focus change events. ¿ C¿ C¿ C  ¿ C*¿ CC¿ CB  ¿ CM%¿ Cj¿ Ci   ¿ C≈ÄÃ¿ DS¿ DS  ¿ Dk
¿ Dp¿ Do  ¿ Dw	¿ D|¿ D{  ¿ DÇ¿ Dá¿ DÜ  ¿ C≈¿ C∆¿ CÃ¿ CÔ¿ C“¿ CÕ¿ C⁄¿ CÓ¿ C€¿ C‚¿ CÈ¿ C¿ D:¿ C¸¿ Cˆ¿ C˛¿ G∞Äá¿ Gµ¿ Gµ  ¿ G¡¿ G∆¿ G≈   ¿ JrC¿ Jw¿ Jw    ¿ MLÄ¯¿ MQ¿ MQ  ¿ Ml¿ Mv¿ Mu   ¿ Oé¿ O-¿ O-  ¿ OF¿ OP¿ OO   ¿ ]4ÅÎ¿ ]K¿ ]K  ¿ ]\¿ ]m¿ ]l  ¿ ]w	¿ ]}¿ ]|   ¿ bœÉí¿ bﬁ¿ bﬁ  ¿ bÌ¿ b˜¿ bˆ   ¿ lGV¿ lL¿ lL  ¿ li
¿ lo¿ ln   ¿ l°Äü¿ m¿ m  ¿ m4
¿ m:¿ m9  ¿ l°¿ l¢¿ l®¿ lº¿ lÆ¿ l©¿ l∂¿ lª¿ l∑¿ lΩ¿ l˝¿ lƒ¿ læ¿ l∆¿ mpÅå¿ mu¿ mu  ¿ mÑ¿ mè¿ mé   ¿ o ÇË¿ pƒ¿ pƒÅ¨/// Sends a message to a platform-specific plugin.
///
/// The `name` parameter determines which plugin receives the message. The
/// `data` parameter contains the message payload and is typically UTF-8
/// encoded JSON but can be arbitrary data. If the plugin replies to the
/// message, `callback` will be called with the response.
///
/// The framework invokes [callback] in the same zone in which this method was
/// called. ¿ pÿ¿ p‡¿ pﬂ  ¿ pÂ¿ p¿ pÔ  ¿ pı)¿ q¿ q   ¿ qÏÄ•¿ qÙ¿ qÙ  ¿ r¿ r¿ r  ¿ r)¿ rA¿ r@  ¿ rN¿ rY¿ rX   ¿ rïÅ¿ s(¿ s(  ¿ sC¿ sK¿ sJ  ¿ sT)¿ sv¿ su  ¿ sÉ¿ sé¿ sç  ¿ rï¿ rñ¿ rú¿ rƒ¿ r§¿ rù¿ r¨¿ r√¿ r≠¿ rµ¿ rΩ¿ r≈¿ s¿ r—¿ rÀ¿ r”¿ sõÇ¿ uò¿ uòÅÁ/// Sends a message to a platform-specific plugin via a [SendPort].
///
/// This operates similarly to [sendPlatformMessage] but is used when sending
/// messages from background isolates. The [port] parameter allows Flutter to
/// know which isolate to send the result to. The [name] parameter is the name
/// of the channel communication will happen on. The [data] parameter is the
/// payload of the message. The [identifier] parameter is a unique integer
/// assigned to the message. ¿ u∞¿ u∏¿ u∑  ¿ uΩ¿ u»¿ u«  ¿ uÕ¿ u“¿ u—  ¿ u›¿ uÁ¿ uÊ   ¿ vèÄô¿ vó¿ vó  ¿ v∞¿ v∏¿ v∑  ¿ vΩ¿ v¬¿ v¡  ¿ vÕ¿ v“¿ v—  ¿ v◊¿ v‚¿ v·   ¿ w,Å¿ wÀ¿ wÀ  ¿ wÍ¿ wÚ¿ wÒ  ¿ w˚¿ x ¿ wˇ  ¿ x¿ x¿ x  ¿ x¿ x(¿ x'  ¿ w,¿ w-¿ w3¿ wc¿ w;¿ w4¿ wC¿ wb¿ wD¿ wL¿ wT¿ w\¿ wd¿ wØ¿ wp¿ wj¿ wr¿ x5ÅH¿ xÈ¿ xÈÄ®/// Registers the current isolate with the isolate identified with by the
/// [token]. This is required if platform channels are to be used on a
/// background isolate. ¿ y¿ y¿ y   ¿ yÅÄ©¿ y˚¿ y˚  ¿ z¿ z¿ z  ¿ yÅ¿ yÇ¿ yà¿ yù¿ yé¿ yâ¿ yñ¿ yú¿ yó¿ yû¿ y‚¿ y•¿ yü¿ yß¿ ~ÙÄ°¿ %¿ %)/// Called by [_dispatchPlatformMessage]. ¿ ?¿ D¿ C  ¿ O¿ Z¿ Y   ¿ ôÄ∆¿ Ä$¿ Ä$  ¿ Ä?¿ ÄD¿ ÄC  ¿ ÄO¿ ÄZ¿ ÄY  ¿ ô¿ ö¿ †¿ æ¿ ¶¿ °¿ Æ¿ Ω¿ Ø¿ ∑¿ ø¿ Ä¿ À¿ ≈¿ Õ¿ ÄcÇ¿ Å¿ ÅÄä/// Wraps the given [callback] in another callback that ensures that the
/// original callback is called in the zone it was registered in. ¿ ÅE)¿ Åg¿ Åf   ¿ ÇÇÉ—¿ Ér¿ ÉrÄ‡/// Send a message to the framework using the [ChannelBuffers].
///
/// This method constructs the appropriate callback to respond
/// with the given `responseId`. It should only be called for messages
/// from the platform. ¿ Éã¿ Éì¿ Éí  ¿ Éò¿ É£¿ É¢  ¿ É®¿ É≠¿ É¨   ¿ ÜWÇ$¿ à<¿ à<ÅÕ/// Set the debug name associated with this platform dispatcher's root
/// isolate.
///
/// Normally debug names are automatically generated from the Dart port, entry
/// point, and source file. For example: `main.dart$main-1234`.
///
/// This can be combined with flutter tools `--isolate-filter` flag to debug
/// specific root isolates. For example: `flutter attach --isolate-filter=[name]`.
/// Note that this does not rename any child isolates of the root. ¿ àP¿ àX¿ àW   ¿ àÄó¿ àÙ¿ àÙ  ¿ â	¿ â¿ â  ¿ à¿ àÄ¿ àÜ¿ àú¿ àå¿ àá¿ àî¿ àõ¿ àï¿ àù¿ à€¿ à§¿ àû¿ à¶¿ âÅ≈¿ äx¿ äxÅL/// Requests the Dart VM to adjusts the GC heuristics based on the requested `performance_mode`.
///
/// This operation is a no-op of web. The request to change a performance may be ignored by the
/// engine or not resolve in a predictable way.
///
/// See [DartPerformanceMode] for more information on individual performance modes. ¿ äì¿ ä®¿ äß   ¿ ä„Äù¿ ãZ¿ ãZ  ¿ ãv¿ ã{¿ ãz  ¿ ä„¿ ä‰¿ äÍ¿ ä¸¿ äÔ¿ äÎ¿ ä˜¿ ä˚¿ ä¯¿ ä˝¿ ãB¿ ã¿ ä˛¿ ã¿ ãÑÇ¿ çX¿ çXÅ∑/// The embedder can specify data that the isolate can request synchronously
/// on launch. This accessor fetches that data.
///
/// This data is persistent for the duration of the Flutter application and is
/// available even after isolate restarts. Because of this lifecycle, the size
/// of this data must be kept to a minimum.
///
/// For asynchronous communication between the embedder and isolate, a
/// platform channel may be used.   ¿ çñÄó¿ é¿ é   ¿ çñ¿ çó¿ çù¿ çØ¿ ç•¿ çû¿ ç≠¿ çÆ¿ ç∞¿ çÛ¿ ç∑¿ ç±¿ çπ¿ é1Åâ¿ èñ¿ èñÅM/// Requests that, at the next appropriate opportunity, the [onBeginFrame] and
/// [onDrawFrame] callbacks be invoked.
///
/// See also:
///
///  * [SchedulerBinding], the Flutter framework class which manages the
///    scheduling of frames.
///  * [scheduleWarmUpFrame], which should only be used to schedule warm up
///    frames.   ¿ èæz¿ ê'¿ ê'   ¿ èæ¿ èø¿ è≈¿ è’¿ èÀ¿ è∆¿ è”¿ è‘¿ è÷¿ ê¿ è›¿ è◊¿ èﬂ¿ ê<Öu¿ î´¿ î´Ñ=/// Schedule a frame to run as soon as possible, rather than waiting for the
/// engine to request a frame in response to a system "Vsync" signal.
///
/// The application can call this method as soon as it starts up so that the
/// first frame (which is likely to be quite expensive) can start a few extra
/// milliseconds earlier. Using it in other situations might lead to
/// unintended results, such as screen tearing. Depending on platforms and
/// situations, the warm up frame might or might not be actually rendered onto
/// the screen.
///
/// For more introduction to the warm up frame, see
/// [SchedulerBinding.scheduleWarmUpFrame].
///
/// This method uses the provided callbacks as the begin frame callback and
/// the draw frame callback instead of [onBeginFrame] and [onDrawFrame].
///
/// See also:
///
///  * [SchedulerBinding.scheduleWarmUpFrame], which uses this method, and
///    introduces the warm up frame in more details.
///  * [scheduleFrame], which schedules the frame at the next appropriate
///    opportunity and should be used to render regular frames. ¿ î¿ ¿ î◊¿ î÷  ¿ î‚¿ î˘¿ î¯   ¿ ïµ|¿ ñ¿ ñ   ¿ ïµ¿ ï∂¿ ïº¿ ïÃ¿ ï¬¿ ïΩ¿ ï ¿ ïÀ¿ ïÕ¿ ñ¿ ï‘¿ ïŒ¿ ï÷¿ ô6Ç"¿ ô;¿ ô;  ¿ ôX
¿ ô]¿ ô\   ¿ õ\Éc¿ ûI¿ ûIÅj/// Change the retained semantics data about this platform dispatcher.
///
/// If [semanticsEnabled] is true, the user has requested that this function
/// be called whenever the semantic content of this platform dispatcher
/// changes.
///
/// In either case, this function disposes the given update, which means the
/// semantics update cannot be used further. ¿ ûY¿ ûj¿ ûi  ¿ ú◊¿ úÿ¿ ú‚¿ û@¿ ú„¿ û√Äƒ¿ üK¿ üK  ¿ ü\
¿ üa¿ ü`  ¿ üh¿ üÄ¿ ü  ¿ û√¿ ûƒ¿ û ¿ ûÓ¿ û–¿ ûÀ¿ ûÿ¿ ûÌ¿ ûŸ¿ û‡¿ ûÁ¿ ûÏ¿ ûË¿ ûÔ¿ ü2¿ û˚¿ ûı¿ û˝¿ §¶ÉÍ¿ •Ù¿ •ÙÅ5/// Performs the platform-native locale resolution.
///
/// Each platform may return different results.
///
/// If the platform fails to resolve a locale, then this will return null.
///
/// This method returns synchronously and is a direct call to
/// platform specific APIs without invoking method channels. ¿ ¶¿ ¶ ¿ ¶   ¿ ®îÄè¿ ®°¿ ®°  ¿ ®¿"¿ ®œ¿ ®Œ   ¿ ©'Ä÷¿ ©π¿ ©π  ¿ ©Ÿ"¿ ©Ë¿ ©Á  ¿ ©'¿ ©(¿ ©.¿ ©F¿ ©6¿ ©/¿ ©>¿ ©E¿ ©?¿ ©G¿ ©ò¿ ©S¿ ©M¿ ©U¿ ¨oÑ“¿ ¨t¿ ¨t  ¿ ¨É¿ ¨ë¿ ¨ê   ¿ ±q-¿ ±x¿ ±x    ¿ ¥gÄ˙¿ ¥l¿ ¥l  ¿ ¥â¿ ¥ë¿ ¥ê   ¿ ≈ﬁã•¿ ≈„¿ ≈„  ¿ ≈˚¿ ∆¿ ∆   ¿ ‘ÃÅ¥¿ ‘—¿ ‘—  ¿ ‘È¿ ‘Ô¿ ‘Ó   ¿ ŸÑÅ¿ Ÿâ¿ Ÿâ  ¿ Ÿö¿ Ÿü¿ Ÿû   ¿ ‹ÆÅc¿ ‹≥¿ ‹≥  ¿ ‹Ã
¿ ‹—¿ ‹–  ¿ ‹ÿ
¿ ‹›¿ ‹‹  ¿ ‹‰
¿ ‹È¿ ‹Ë  ¿ ‹¿ ‹˚¿ ‹˙   ¿ ‚>Åÿ¿ ‚C¿ ‚C  ¿ ‚R¿ ‚Z¿ ‚Y  ¿ ‚`¿ ‚l¿ ‚k   ¿ ÍÄÑ¿ Íä¿ Íä   ¿ Í¿ Í¿ Í!¿ Í3¿ Í)¿ Í"¿ Í1¿ Í2¿ Í4¿ Ío¿ Í;¿ Í5¿ Í=¿ Í¢á[¿ Ój¿ ÓjÉû/// Computes the scaled font size from the given `unscaledFontSize`, according
/// to the user's platform preferences.
///
/// Many platforms allow users to scale text globally for better readability.
/// Given the font size the app developer specified in logical pixels, this
/// method converts it to the preferred font size (also in logical pixels) that
/// accounts for platform-wide text scaling. The return value is always
/// non-negative.
///
/// The scaled value of the same font size input may change if the user changes
/// the text scaling preference (in system settings for example). The
/// [onTextScaleFactorChanged] callback can be used to monitor such changes.
///
/// Instead of directly calling this method, applications should typically use
/// [MediaQuery.textScalerOf] to retrive the scaled font size in a widget tree,
/// so text in the app resizes properly when the text scaling preference
/// changes. ¿ Óx¿ ÓÄ¿ Ó   ¿ ÚüÑá¿ Úß¿ Úß  ¿ Ú∏¿ ÚΩ¿ Úº   ¿ ˚◊ÄΩ¿ ¸S¿ ¸S  ¿ ¸f¿ ¸n¿ ¸m  ¿ ¸¿ ¸Ñ¿ ¸É  ¿ ˚◊¿ ˚ÿ¿ ˚ﬁ¿ ˚˚¿ ˚Ê¿ ˚ﬂ¿ ˚Ó¿ ˚˙¿ ˚Ô¿ ˚˜¿ ˚¸¿ ¸8¿ ¸¿ ˚˝¿ ¸ ¿ ¸òè¿ ¸ò¿ZÜµ/// A color specified in the operating system UI color palette.
///
/// As of the current release, system colors are supported on web only. To check
/// if the current platform supports system colors, use the static
/// [platformProvidesSystemColors] field. If the field is `false`, other
/// functions in this class will throw [UnsupportedError].
///
/// This class is typically used in conjunction with
/// [AccessibilityFeatures.highContrast]. In particular, on Windows, when a user
/// enables high-contrast mode, they may also pick specific colors that should
/// be used by application user interfaces. While it is common for applications
/// to use custom color themes and design languages, in high-contrast mode it is
/// recommended that widgets use system-specified colors to make content more
/// legible for users.
///
/// The "light" system colors are available through [SystemColor.light], and the "dark" system
/// colors are available through [SystemColor.dark].
///
/// Example:
///
/// ```dart
/// import 'dart:ui';
///
/// Color getSystemAccentColor() {
///   Color? systemAccentColor;
///   if (SystemColor.platformProvidesSystemColors) {
///     if (PlatformDispatcher.instance.platformBrightness == Brightness.light) {
///       systemAccentColor = SystemColor.light.accentColor.value;
///     } else {
///       systemAccentColor = SystemColor.dark.accentColor.value;
///     }
///   }
///
///   return systemAccentColor ?? const Color(0xFF007AFF);
/// }
/// ```
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors
///   * https://developer.mozilla.org/en-US/docs/Web/CSS/system-color
///   * https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors ¿jÅ˜¿3 ¿3¿> Å≤/// Creates an instance of a system color.
///
/// [name] is the name of the color. System colors provided by [SystemColorPalette], such as
/// [SystemColorPalette.accentColor] and [SystemColorPalette.buttonText], use standard names
/// defined by the [W3C CSS specification](https://drafts.csswg.org/css-color/#css-system-colors).
///
/// [value] is the color value, if this color name is supported, and null if
/// it's unsupported.¿@¿O¿N  ¿T
¿Z¿Y   ¿eÇ¿g¿gÅﬁ/// Standard system color name, as defined by W3C CSS specification.
///
/// System color names in Flutter are case-sensitive. This is so that color
/// names can be easily used as [Map] keys. This is in contrast to CSS, where
/// system color names are not case-sensitive. That is, specifying
/// `background-color: aCcEnTcOlOr` is equivalent to specifying
/// `background-color: AccentColor`.
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors ¿pÄÃ¿7¿7Ä±/// The color value used for the color named [name], if supported.
///
/// If [isSupported] is false, the [value] is null. If [isSupported] is true,
/// the [value] is not null. ¿
ó¿
Ë¿
Ë./// A palette of system colors for light mode.¿
¿¿¿¿¿¿¿¿|¿k¿k-/// A palette of system colors for dark mode.¿r¿Ñ¿Ö¿Ü¿ñ¿á¿ë¿í¿AÅ¿	?¿	?ÄÊ/// Returns true if the current platform provides the system color with the
/// given [name].
///
/// See also:
///
///   * [platformProvidesSystemColors], which returns whether the current
///     platform provides system colors.   ¿	`Å3¿
m¿
mÄÓ/// Returns true if the current platform provides system colors.
///
/// As of the current release, system colors are supported on web only.
///
/// See also:
///
///   * [isSupported], which returns whether a specific color is supported.      ¿úëÛ¿ú¿–Å'/// A palette of system colors specified in the operating system for a given [brightness].
///
/// The getters in this class, such as [accentColor] and [buttonText], provide standard system
/// colors defined by the [W3C CSS specification](https://drafts.csswg.org/css-color/#css-system-colors). ¿Á&¿Á¿˘¿˙¿˚¿˙ ¿¸¿¿   ¿X¿_¿_:/// The brightness mode for which this palette is defined. ¿Ä–¿ù¿ùÄÅ/// Returns system color named "AccentColor".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿’Äÿ¿u¿uÄÖ/// Returns system color named "AccentColorText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿±ÄŒ¿L¿LÄÄ/// Returns system color named "ActiveText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿ÉÄ“¿ ¿ ÄÇ/// Returns system color named "ButtonBorder".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿YÄŒ¿Ù¿ÙÄÄ/// Returns system color named "ButtonFace".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿+ÄŒ¿∆¿∆ÄÄ/// Returns system color named "ButtonText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿˝Ä∆¿î¿î|/// Returns system color named "Canvas".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿«ÄŒ¿b¿bÄÄ/// Returns system color named "CanvasText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿ôÄƒ¿/¿/{/// Returns system color named "Field".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿aÄÃ¿˚¿˚/// Returns system color named "FieldText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿1Ä ¿ ¿ ~/// Returns system color named "GrayText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿ˇÄÃ¿ô¿ô/// Returns system color named "Highlight".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿œÄ‘¿m¿mÄÉ/// Returns system color named "HighlightText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿ßÄ ¿@¿@~/// Returns system color named "LinkText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿uÄ¬¿
¿
z/// Returns system color named "Mark".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿;Ä ¿‘¿‘~/// Returns system color named "MarkText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿	Ä“¿¶¿¶ÄÇ/// Returns system color named "SelectedItem".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿ﬂÄ⁄¿Ä¿ÄÄÜ/// Returns system color named "SelectedItemText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors   ¿ΩÄ–¿Y¿YÄÅ/// Returns system color named "VisitedText".
///
/// See also:
///
///   * https://drafts.csswg.org/css-color/#css-system-colors    ¿nÄè¿Ü¿Ü     ¿ëç[¿ë¿¯`/// Configuration of the platform.
///
/// Immutable class (but can't use @immutable in dart:ui) ¿Åw¿ ¿¿/  	¿6=¿<¿;  ¿y"¿¿~  ¿°¿ß¿¶  ¿ƒ*¿ ¿…  ¿Ù¿˙¿˘  ¿¿¿  ¿9¿?¿>  ¿T¿Z¿Y  ¿o¿u¿t  ¿S¿Y¿n¿o¿p¿r¿q¿ñ¿π¿ﬁ¿Ë¿È¿¿#¿1¿2¿)¿0¿*	¿#g~¿#–¿#–J/// Additional accessibility features that may be enabled by the platform. ¿#Í~¿$S¿$SY/// The setting indicating whether time should always be shown in the 24-hour
/// format. ¿$mÄì¿$¿$s/// Whether the user has requested that updateSemantics be called when the
/// semantic contents of a view changes. ¿%Ä÷¿%…¿%…Ä¨/// The setting indicating the current brightness mode of the host platform.
/// If the platform has no preference, [platformBrightness] defaults to
/// [Brightness.light]. ¿%‡B¿&¿&#/// The system-reported text scale. ¿&'Z¿&z¿&z=/// The full system-reported supported locales of the device. ¿&Ü{¿&Ò¿&ÒX/// The route or path that the embedder requested when the application was
/// launched. ¿'M¿'C¿'C,/// The system-reported default font family. ¿'XÉë¿*⁄¿*⁄ÉZ/// A unique identifier for this [_PlatformConfiguration].
///
/// This unique identifier is optionally assigned by the platform embedder.
/// Dart code that runs on the Flutter UI thread and synchronously invokes
/// platform APIs can use this identifier to tell the embedder to use the
/// configuration that matches the current [_PlatformConfiguration] in
/// dart:ui. See the [_getScaledFontSize] function for an example.
///
/// This field's nullability also indicates whether the platform supports
/// nonlinear text scaling (as it's the only feature that requires synchronous
/// invocation of platform APIs). This field is always null if the platform
/// does not use nonlinear text scaling, or when dart:ui has not received any
/// configuration updates from the embedder yet. The _getScaledFontSize
/// function should not be called in either case.   ¿éÉ’¿•¿•  	¿¥,¿Ã¿À  ¿Ê¿Ì¿Ï  ¿ ¿ ¿   ¿ #¿ 0¿ /  ¿ G¿ P¿ O  ¿ d¿ s¿ r  ¿ ¿ à¿ á  ¿ ù¿ ¶¿ •  ¿ ª¿ ¡¿ ¿    ¿*Óê⁄¿*Ó¿+$/// An immutable view configuration. ¿+0ÅÑ¿+6 ¿+6¿+H  	¿+O¿+U¿+T  ¿+p¿+v¿+u  ¿+ã"¿+ë¿+ê  ¿+≥#¿+π¿+∏  ¿+‹+¿+‚¿+·  ¿,¿,¿,  ¿,2.¿,8¿,7  ¿,f/¿,l¿,k  ¿,õ¿,°¿,†  ¿+g¿+|¿+Ä¿+Å¿+ù¿+®¿+©¿+∆¿+—¿+“¿+˜¿,¿,¿,¿,'¿,(¿,I¿,O¿,^¿,_¿,}¿,ì¿,î¿,É¿,í¿,Ñ¿,¨	¿,∏n¿-¿-V/// The identifier for a display for this view, in
/// [PlatformDispatcher._displays]. ¿-+L¿-g¿-g,/// The pixel density of the output surface. ¿-|I¿-¡¿-¡7/// The size requested for the view in physical pixels. ¿- Å™¿/j¿/jÅÅ/// The number of physical pixels on each side of the display rectangle into
/// which the view can render, but over which the operating system will likely
/// place system UI, such as the keyboard, that fully obscures any content.
///
/// The relationship between this [viewInsets], [viewPadding], and [padding]
/// are described in more detail in the documentation for [FlutterView]. ¿/yÇÁ¿2U¿2UÇ±/// The number of physical pixels on each side of the display rectangle into
/// which the view can render, but which may be partially obscured by system
/// UI (such as the system notification area), or physical intrusions in
/// the display (e.g. overscan regions on television screens or phone sensor
/// housings).
///
/// Unlike [padding], this value does not change relative to [viewInsets].
/// For example, on an iPhone X, it will not change in response to the soft
/// keyboard being visible or hidden, whereas [padding] will.
///
/// The relationship between this [viewInsets], [viewPadding], and [padding]
/// are described in more detail in the documentation for [FlutterView]. ¿2eÅ–¿4"¿4"Åú/// The number of physical pixels on each side of the display rectangle into
/// which the view can render, but where the operating system will consume
/// input gestures for the sake of system navigation.
///
/// For example, an operating system might use the vertical edges of the
/// screen, where swiping inwards from the edges takes users backward
/// through the history of screens they previously visited. ¿4:Ç¿65¿65Åÿ/// The number of physical pixels on each side of the display rectangle into
/// which the view can render, but which may be partially obscured by system
/// UI (such as the system notification area), or physical intrusions in
/// the display (e.g. overscan regions on television screens or phone sensor
/// housings).
///
/// The relationship between this [viewInsets], [viewPadding], and [padding]
/// are described in more detail in the documentation for [FlutterView]. ¿6AÅ&¿7X¿7XÄˆ/// Additional configuration for touch gestures performed on this view.
///
/// For example, the touch slop defined in physical pixels may be provided
/// by the gesture settings and should be preferred over the framework
/// touch slop constant. ¿7lÑ
¿;g¿;gÉø/// Areas of the display that are obstructed by hardware features.
///
/// This list is populated only on Android. If the device has no display
/// features, this list is empty.
///
/// The coordinate space in which the [DisplayFeature.bounds] are defined spans
/// across the screens currently in use. This means that the space between the screens
/// is virtually part of the Flutter view space, with the [DisplayFeature.bounds]
/// of the display feature as an obstructed area. The [DisplayFeature.type] can
/// be used to determine if this display feature obstructs the screen or not.
/// For example, [DisplayFeatureType.hinge] and [DisplayFeatureType.cutout] both
/// obstruct the display, while [DisplayFeatureType.fold] is a crease in the display.
///
/// Folding [DisplayFeature]s like the [DisplayFeatureType.hinge] and
/// [DisplayFeatureType.fold] also have a [DisplayFeature.state] which can be
/// used to determine the posture the device is in.   ¿;{K¿;é¿;é   ¿;{¿;| ¿Aêô¡¿Aê¿DZÇ√/// Time-related performance metrics of a frame.
///
/// If you're using the whole Flutter framework, please use
/// [SchedulerBinding.addTimingsCallback] to get this. It's preferred over using
/// [PlatformDispatcher.onReportTimings] directly because
/// [SchedulerBinding.addTimingsCallback] allows multiple callbacks. If
/// [SchedulerBinding] is unavailable, then see [PlatformDispatcher.onReportTimings]
/// for how to get this.
///
/// The metrics in debug mode (`flutter run` without any flags) may be very
/// different from those in profile and release modes due to the debug overhead.
/// Therefore it's recommended to only monitor and analyze performance metrics
/// in profile and release modes. ¿DjÉü¿Eé ¿Eé¿Eô Å/// Construct [FrameTiming] with raw timestamps in microseconds.
///
/// This constructor is used for unit test only. Real [FrameTiming]s should
/// be retrieved from [PlatformDispatcher.onReportTimings].
///
/// If the [frameNumber] is not provided, it defaults to `-1`.¿E†¿EÆ¿E≠  ¿EΩ¿EÀ¿E   ¿E⁄¿EË¿EÁ  ¿E¯¿F¿F  ¿F¿F$¿F#  ¿F5!¿FC¿FB  ¿F\¿Fa¿F`  ¿Fy¿F~¿F}  ¿Fñ¿Fõ¿Fö  ¿Fµ¿F∫¿Fπ  ¿F‘¿FŸ¿Fÿ  ¿Fr¿Fè¿FÆ¿FÕ¿FÊ¿FÁ¿HÅë¿I^¿Ii¿Ij¿Ik¿IjÅB/// Construct [FrameTiming] with raw timestamps in microseconds.
///
/// List [timestamps] must have the same number of elements as
/// [FramePhase.values].
///
/// This constructor is usually only called by the Flutter engine, or a test.
/// To get the [FrameTiming] of your app, see [PlatformDispatcher.onReportTimings].¿Il
¿Ir¿Iq  ¿Iz¿IÄ¿Iú¿Ié¿IÅ¿IÜ¿Iá¿Ië¿I¢X¿I≥¿I≥ ¿I⁄¿I¡¿IÀ¿IÃ¿I“¿I”¿I‹¿IÏ¿IÌ¿IÛ¿IÙ¿X≤¿X¬¿X¬  ¿KìÉ2¿Nc¿NcÇ¢/// The duration to build the frame on the UI thread.
///
/// The build starts approximately when [PlatformDispatcher.onBeginFrame] is
/// called. The [Duration] in the [PlatformDispatcher.onBeginFrame] callback
/// is exactly the `Duration(microseconds:
/// timestampInMicroseconds(FramePhase.buildStart))`.
///
/// The build finishes when [FlutterView.render] is called.
///
/// {@template dart.ui.FrameTiming.fps_smoothness_milliseconds}
/// To ensure smooth animations of X fps, this should not exceed 1000/X
/// milliseconds.
/// {@endtemplate}
/// {@template dart.ui.FrameTiming.fps_milliseconds}
/// That's about 16ms for 60fps, and 8ms for 120fps.
/// {@endtemplate}   ¿N…Å+¿Oè¿OèÄ∞/// The duration to rasterize the frame on the raster thread.
///
/// {@macro dart.ui.FrameTiming.fps_smoothness_milliseconds}
/// {@macro dart.ui.FrameTiming.fps_milliseconds}   ¿O¯ÄÀ¿Pb¿PbX/// The duration between receiving the vsync signal and starting building the
/// frame.   ¿P«Åó¿Qˇ¿QˇÅ/// The timespan between vsync start and raster finish.
///
/// To achieve the lowest latency on an X fps display, this should not exceed
/// 1000/X milliseconds.
/// {@macro dart.ui.FrameTiming.fps_milliseconds}
///
/// See also [vsyncOverhead], [buildDuration] and [rasterDuration].   ¿RbÄ„¿S¿SÄñ/// The number of layers stored in the raster cache during the frame.
///
/// See also [layerCacheBytes], [pictureCacheCount] and [pictureCacheBytes].   ¿SIÅ¿T¿TÄ¥/// The number of bytes of image data used to cache layers during the frame.
///
/// See also [layerCacheCount], [layerCacheMegabytes], [pictureCacheCount] and [pictureCacheBytes].   ¿TNÄˇ¿U¿UÄ¥/// The number of megabytes of image data used to cache layers during the frame.
///
/// See also [layerCacheCount], [layerCacheBytes], [pictureCacheCount] and [pictureCacheBytes].   ¿UQÄÁ¿Uˆ¿UˆÄñ/// The number of pictures stored in the raster cache during the frame.
///
/// See also [layerCacheCount], [layerCacheBytes] and [pictureCacheBytes].   ¿V<Å¿W¿WÄ∂/// The number of bytes of image data used to cache pictures during the frame.
///
/// See also [layerCacheCount], [layerCacheBytes], [pictureCacheCount] and [pictureCacheMegabytes].   ¿WGÅ¿X¿XÄ∂/// The number of megabytes of image data used to cache pictures during the frame.
///
/// See also [layerCacheCount], [layerCacheBytes], [pictureCacheCount] and [pictureCacheBytes].   ¿XP^¿Xî¿Xî9/// The frame key associated with this frame measurement.    ¿IˇÄﬁ¿Jù¿JùÄï/// This is a raw timestamp in microseconds from some epoch. The epoch in all
/// [FrameTiming] is the same, but it may not match [DateTime]'s epoch. ¿Jµ¿J¡¿J¿   ¿J·V¿JÍ¿JÍ  ¿J˜¿K¿K   ¿K;T¿K?¿K?  ¿KH¿KZ¿KY   ¿YN¿Y¿Y  ¿Y¿Y(¿Y'   ¿Y_Å¿Yr¿Yr   ¿Y_¿Y` ¿|`ÜL¿|`¿YÇÚ/// A representation of distances for each of the four edges of a rectangle,
/// used to encode the view insets and padding that applications should place
/// around their user interface, as exposed by [FlutterView.viewInsets] and
/// [FlutterView.padding]. View insets and padding are preferably read via
/// [MediaQuery.of].
///
/// For a generic class that represents distances around a rectangle, see the
/// [EdgeInsets] class.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a widgets layer mechanism to receive
///    notifications when the padding changes.
///  * [MediaQuery.of], for the preferred mechanism for accessing these values.
///  * [Scaffold], which automatically applies the padding in material design
///    applications. ¿i}¿o¿z¿{¿|¿{ ¿É¿í¿ë  ¿õ¿™¿©  ¿≤¿¡¿¿  ¿À¿⁄¿Ÿ   ¿Íh¿ÄN¿ÄNT/// The distance from the left edge to the first unpadded pixel, in physical pixels. ¿ÄWf¿Ä∫¿Ä∫S/// The distance from the top edge to the first unpadded pixel, in physical pixels. ¿Ä¬j¿Å'¿Å'U/// The distance from the right edge to the first unpadded pixel, in physical pixels. ¿Å1l¿Åó¿ÅóV/// The distance from the bottom edge to the first unpadded pixel, in physical pixels. ¿Å¢Äé¿ÅÓ¿ÅÓ0/// A view padding that has zeros for each edge.¿Åı¿Ç ¿Ç¿Ç¿Ç/¿Ç¿Ç¿Ç	¿Ç¿Ç¿Ç¿Ç¿Ç¿Ç¿Ç*¿Ç$¿Ç,  ¿Ç5u¿ÇH¿ÇH   ¿Ç5¿Ç6 ¿ÉúçZ¿Éú¿Ü*Çá/// Immutable layout constraints for [FlutterView]s.
///
/// Similar to [BoxConstraints], a [Size] respects a [ViewConstraints] if, and
/// only if, all of the following relations hold:
///
/// * [minWidth] <= [Size.width] <= [maxWidth]
/// * [minHeight] <= [Size.height] <= [maxHeight]
///
/// The constraints themselves must satisfy these relations:
///
/// * 0.0 <= [minWidth] <= [maxWidth] <= [double.infinity]
/// * 0.0 <= [minHeight] <= [maxHeight] <= [double.infinity]
///
/// For each constraint, [double.infinity] is a legal value.
///
/// For a generic class that represents these kind of constraints, see the
/// [BoxConstraints] class. ¿Ü>Ä÷¿Ü ¿Ü¿Üé 8/// Creates view constraints with the given constraints.¿Üï¿Üõ¿Üö  ¿ÜÆ¿Ü¥¿Ü≥  ¿Ü”¿ÜŸ¿Üÿ  ¿ÜÌ ¿ÜÛ¿ÜÚ  ¿Ü•¿Üæ¿Üƒ¿Ü≈¿Ü‰¿Ü˛¿á¿á¿áÄ·¿áa¿áp¿áq¿áv¿áqF/// Creates view constraints that is respected only by the given size.¿áw	¿á}¿á|  ¿áë¿áà¿áì¿áó¿áò¿áÆ¿á•¿á∞¿á¥¿áµ¿áÃ¿á¬¿áŒ¿á“¿á”¿áÎ¿á·¿áÌ¿áÒ¿áÚ¿á˝M¿àB¿àB5/// The minimum width that satisfies the constraints. ¿àOu¿àº¿àºY/// The maximum width that satisfies the constraints.
///
/// Might be [double.infinity]. ¿à…O¿â¿â6/// The minimum height that satisfies the constraints. ¿âw¿âã¿âãZ/// The maximum height that satisfies the constraints.
///
/// Might be [double.infinity]. ¿äçÄã¿äﬁ¿äﬁE/// Whether there is exactly one size that satisfies the constraints.   ¿ç√V¿ç◊¿ç◊   ¿ç√¿çƒ ¿âôÄ¿â÷¿â÷5/// Whether the given size satisfies the constraints. ¿â‰	¿âÍ¿âÈ   ¿ãÅ-¿ãÄ¿ãÄH/// Scales each constraint parameter by the inverse of the given factor. ¿ãÇ¿ãä¿ãâ   ¿åMÅr¿åg¿åg  ¿åj¿år¿åq  ¿åM¿åN¿éÇ◊¿é0¿é0   ¿é¿é ¿ê¯åì¿ê¯¿ñwÖx/// Area of the display that may be obstructed by a hardware feature.
///
/// This is populated only on Android.
///
/// The [bounds] are measured in logical pixels. On devices with two screens the
/// coordinate system starts with (0,0) in the top-left corner of the left or top screen
/// and expands to include both screens and the visual space between them.
///
/// The [type] describes the behaviour and if [DisplayFeature] obstructs the display.
/// For example, [DisplayFeatureType.hinge] and [DisplayFeatureType.cutout] both obstruct the display,
/// while [DisplayFeatureType.fold] does not.
///
/// ![Device with a hinge display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_hinge.png)
///
/// ![Device with a fold display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_fold.png)
///
/// ![Device with a cutout display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_cutout.png)
///
/// The [state] contains information about the posture for foldable features
/// ([DisplayFeatureType.hinge] and [DisplayFeatureType.fold]). The posture is
/// the shape of the display, for example [DisplayFeatureState.postureFlat] or
/// [DisplayFeatureState.postureHalfOpened]. For [DisplayFeatureType.cutout],
/// the state is not used and has the [DisplayFeatureState.unknown] value. ¿óÄﬁ¿ó! ¿ó!¿ó/  ¿ó1¿ó@¿ó?  ¿óG¿óV¿óU  ¿ó[¿ój¿ói  ¿ów¿ó}¿ó˜¿ó≥¿óá¿óà¿óë¿ó±¿óí¿óò¿ó™¿ó´¿ó¬¿óÀ¿óÓ¿óÃ¿ó”¿óÊ¿óÁ¿ó˝Çê¿öá¿öáÇh/// The area of the flutter view occupied by this display feature, measured in logical pixels.
///
/// On devices with two screens, the Flutter view spans from the top-left corner
/// of the left or top screen to the bottom-right corner of the right or bottom screen,
/// including the visual area occupied by any display feature. Bounds of display
/// features are reported in this coordinate system.
///
/// For example, on a dual screen device in portrait mode:
///
/// * [Rect.left] gives you the size of left screen, in logical pixels.
/// * [Rect.right] gives you the size of the left screen + the hinge width. ¿öíV¿ö‰¿ö‰6/// Type of display feature, e.g. hinge, fold, cutout. ¿öÌÄÆ¿õñ¿õñÄà/// Posture of display feature, which is populated only for folds and hinges.
///
/// For cutouts, this is [DisplayFeatureState.unknown] ¿úŸA¿úÌ¿úÌ   ¿úŸ¿ú⁄ ¿õ†Å5¿õ∫¿õ∫  ¿õΩ¿õ≈¿õƒ  ¿õ†¿õ°¿ùk¿ù1¿ù1   ¿ù¿ù ¿ßŸ¥ï¿ßŸ¿´É-/// An identifier used to select a user's language and formatting preferences.
///
/// This represents a [Unicode Language
/// Identifier](https://www.unicode.org/reports/tr35/#Unicode_language_identifier)
/// (i.e. without Locale extensions), except variants are not supported.
///
/// Locales are canonicalized according to the "preferred value" entries in the
/// [IANA Language Subtag
/// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
/// For example, `const Locale('he')` and `const Locale('iw')` are equal and
/// both have the [languageCode] `he`, because `iw` is a deprecated language
/// subtag that was replaced by the subtag `he`.
///
/// See also:
///
///  * [PlatformDispatcher.locale], which specifies the system's currently selected
///    [Locale]. ¿´ÖÓ¿∞õ ¿∞õ¿∞° Ö</// Creates a new Locale object. The first argument is the
/// primary language subtag, the second is the region (also
/// referred to as 'country') subtag.
///
/// For example:
///
/// ```dart
/// const Locale swissFrench = Locale('fr', 'CH');
/// const Locale canadianFrench = Locale('fr', 'CA');
/// ```
///
/// The primary language subtag must not be null. The region subtag is
/// optional. When there is no region/country subtag, the parameter should
/// be omitted or passed `null` instead of an empty-string.
///
/// The subtag values are _case sensitive_ and must be one of the valid
/// subtags according to CLDR supplemental data:
/// [language](https://github.com/unicode-org/cldr/blob/master/common/validity/language.xml),
/// [region](https://github.com/unicode-org/cldr/blob/master/common/validity/region.xml). The
/// primary language subtag must be at least two and at most eight lowercase
/// letters, but not four letters. The region subtag must be two
/// uppercase letters or three digits. See the [Unicode Language
/// Identifier](https://www.unicode.org/reports/tr35/#Unicode_language_identifier)
/// specification.
///
/// Validity is not checked by default, but some methods may throw away
/// invalid data.
///
/// See also:
///
///  * [Locale.fromSubtags], which also allows a [scriptCode] to be
///    specified.¿∞¢¿∞®¿∞ß  ¿∞∑¿∞Ω¿∞º  	¿∞—¿∞◊¿∞Î¿∞Ê¿∞ÿ¿∞È¿∞ˇ¿∞Ù¿±¿±
Ö:¿µD¿µJ¿µK¿µV¿µKÑ/// Creates a new Locale object.
///
/// The keyword arguments specify the subtags of the Locale.
///
/// The subtag values are _case sensitive_ and must be valid subtags according
/// to CLDR supplemental data:
/// [language](https://github.com/unicode-org/cldr/blob/master/common/validity/language.xml),
/// [script](https://github.com/unicode-org/cldr/blob/master/common/validity/script.xml) and
/// [region](https://github.com/unicode-org/cldr/blob/master/common/validity/region.xml) for
/// each of languageCode, scriptCode and countryCode respectively.
///
/// The [languageCode] subtag is optional. When there is no language subtag,
/// the parameter should be omitted or set to "und". When not supplied, the
/// [languageCode] defaults to "und", an undefined language code.
///
/// The [countryCode] subtag is optional. When there is no country subtag,
/// the parameter should be omitted or passed `null` instead of an empty-string.
///
/// Validity is not checked by default, but some methods may throw away
/// invalid data.¿µX¿µ`¿µ_  ¿µu¿µ{¿µz  ¿µÜ¿µè¿µé  ¿µn¿µ¢¿µ®¿µª¿µ∂¿µ©¿µπ¿µ“¿µƒ¿µ‘¿µË¿µÓ¿µˇ¿µ˙¿µÔ¿µ˝¿∂¿∂¿∂ ¿∂¿∂¿∂¿∂6¿∂)¿∂8¿∫‰¿∫Ò¿∫Ò  ¿ªàê∑¿ª©¿ª© Ä¿ªÿ¿Ã>¿ª»¿ª◊¿ª…¿ª—¿ª‚¿ªﬁ¿ª‰¿º¿º¿º¿ºH¿ºD¿ºJ¿ºz¿ºv¿º|¿º≠¿º©¿ºØ¿ºÏ¿ºÁ¿ºÓ¿Ω!¿Ω¿Ω#¿ΩQ¿ΩL¿ΩS¿Ωâ¿ΩÑ¿Ωã¿Ω¡¿Ωº¿Ω√¿Ω˙¿Ωı¿Ω¸¿æ1¿æ,¿æ3¿æg¿æb¿æi¿æù¿æò¿æü¿æÿ¿æ”¿æ⁄¿ø¿ø¿ø¿øA¿ø<¿øC¿ø}¿øx¿ø¿ø±¿ø¨¿ø≥¿øÂ¿ø‡¿øÁ¿¿¿¿¿¿¿¿[¿¿V¿¿]¿¿ñ¿¿ë¿¿ò¿¿À¿¿∆¿¿Õ¿¿˚¿¿ˆ¿¿˝¿¡.¿¡)¿¡0¿¡`¿¡[¿¡b¿¡í¿¡ç¿¡î¿¡√¿¡æ¿¡≈¿¡˜¿¡Ú¿¡˘¿¬9¿¬4¿¬;¿¬p¿¬k¿¬r¿¬°¿¬ú¿¬£¿¬·¿¬‹¿¬„¿√¿√¿√¿√G¿√B¿√I¿√{¿√v¿√}¿√∑¿√≤¿√π¿√Ú¿√Ì¿√Ù¿ƒ'¿ƒ"¿ƒ)¿ƒY¿ƒT¿ƒ[¿ƒâ¿ƒÑ¿ƒã¿ƒ«¿ƒ¬¿ƒ…¿ƒ˙¿ƒı¿ƒ¸¿≈5¿≈0¿≈7¿≈j¿≈e¿≈l¿≈û¿≈ô¿≈†¿≈–¿≈À¿≈“¿∆¿∆¿∆	¿∆:¿∆5¿∆<¿∆m¿∆h¿∆o¿∆¢¿∆ù¿∆§¿∆›¿∆ÿ¿∆ﬂ¿«¿«¿«¿«>¿«9¿«@¿«q¿«l¿«s¿«®¿«£¿«™¿«⁄¿«’¿«‹¿»
¿»¿»¿»E¿»@¿»G¿»¿»z¿»Å¿»Ø¿»™¿»±¿»‚¿»›¿»‰¿…¿…¿…¿…M¿…H¿…O¿…Ç¿…}¿…Ñ¿…Ω¿…∏¿…ø¿…Û¿…Ó¿…ı¿ 3¿ .¿ 5¿ e¿ `¿ g¿ †¿ õ¿ ¢¿ ‘¿ œ¿ ÷¿À¿À¿À¿À=¿À8¿À?¿Àq¿Àl¿Às¿À§¿Àü¿À¶¿À‰¿Àﬂ¿ÀÊ¿Ã¿Ã¿Ã¿ÃDÅË¿Œ"¿Œ"Å∑/// The script subtag for the locale.
///
/// This may be null, indicating that there is no specified script subtag.
///
/// This must be a valid Unicode Language Identifier script subtag as listed
/// in [Unicode CLDR supplemental
/// data](https://github.com/unicode-org/cldr/blob/master/common/validity/script.xml).
///
/// See also:
///
///  * [Locale.fromSubtags], which describes the conventions for creating
///    [Locale] objects. ¿“	¿“¿“  ¿“≠Å¶¿“Œ¿“Œ ¿“˚¿‘R¿“Î¿“˙¿“Ï¿“Ù¿”¿”¿”¿”5¿”1¿”7¿”z¿”v¿”|¿”∏¿”¥¿”∫¿”Ì¿”È¿”Ô¿‘(¿‘$¿‘*¿◊í¿◊°¿◊°  ¿◊≤"¿◊¡¿◊¡  ¿∂HÑô¿∫î¿∫îÑ/// The primary language subtag for the locale.
///
/// This must not be null. It may be 'und', representing 'undefined'.
///
/// This is expected to be string registered in the [IANA Language Subtag
/// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
/// with the type "language". The string specified must match the case of the
/// string in the registry.
///
/// Language subtags that are deprecated in the registry and have a preferred
/// code are changed to their preferred code. For example, `const
/// Locale('he')` and `const Locale('iw')` are equal, and both have the
/// [languageCode] `he`, because `iw` is a deprecated language subtag that was
/// replaced by the subtag `he`.
///
/// This must be a valid Unicode Language subtag as listed in [Unicode CLDR
/// supplemental
/// data](https://github.com/unicode-org/cldr/blob/master/common/validity/language.xml).
///
/// See also:
///
///  * [Locale.fromSubtags], which describes the conventions for creating
///    [Locale] objects.   ¿Œ1É’¿—æ¿—æÉZ/// The region subtag for the locale.
///
/// This may be null, indicating that there is no specified region subtag.
///
/// This is expected to be string registered in the [IANA Language Subtag
/// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
/// with the type "region". The string specified must match the case of the
/// string in the registry.
///
/// Region subtags that are deprecated in the registry and have a preferred
/// code are changed to their preferred code. For example, `const Locale('de',
/// 'DE')` and `const Locale('de', 'DD')` are equal, and both have the
/// [countryCode] `DE`, because `DD` is a deprecated language subtag that was
/// replaced by the subtag `DE`.
///
/// See also:
///
///  * [Locale.fromSubtags], which describes the conventions for creating
///    [Locale] objects.   ¿◊ n¿◊4¿◊4   ¿◊ ¿◊! ¿‘XÇƒ¿‘r¿‘r  ¿‘u¿‘}¿‘|  ¿‘X¿‘Y¿◊ŸÅÍ¿Ÿ¿ŸÅ/// Returns a string representing the locale.
///
/// This identifier happens to be a valid Unicode Locale Identifier using
/// underscores as separator, however it is intended to be used for debugging
/// purposes only. For parsable results, use [toLanguageTag] instead.  ¿ÿÛ¿ÿÙ¿Ÿ¿Ÿ¿Ÿ«Å¿⁄Ω¿⁄ΩÄ‰/// Returns a syntactically valid Unicode BCP47 Locale Identifier.
///
/// Some examples of such identifiers: "en", "es-419", "hi-Deva-IN" and
/// "zh-Hans-CN". See http://www.unicode.org/reports/tr35/ for technical
/// details.   ¿⁄ÊÅÜ¿⁄Ì¿⁄Ì  ¿⁄˙¿€¿€    ¿‡Ö9¿‡¿·ÄÈ/// An event to request a [SemanticsAction] of [type] to be performed on the
/// [SemanticsNode] identified by [nodeId] owned by the [FlutterView] identified
/// by [viewId].
///
/// Used by [SemanticsBinding.performSemanticsAction]. ¿· Ä™¿·N ¿·N¿·b %/// Creates a [SemanticsActionEvent].¿·i¿·x¿·w  ¿·Å¿·ê¿·è  ¿·õ¿·™¿·©  ¿·µ¿·ª¿·∫   ¿·ŒD¿‚¿‚'/// The type of action to be performed. ¿‚w¿‚à¿‚àb/// The id of the [FlutterView] the [SemanticsNode] identified by [nodeId] is
/// associated with. ¿‚ì\¿‚È¿‚ÈI/// The id of the [SemanticsNode] on which the action is to be performed. ¿‚Ù@¿„+¿„+&/// Optional arguments for the action. ¿„95¿„M¿„M ¿„f¿„l¿„m  ¿„sÅ€¿„Ë¿„Ë[/// Create a clone of the [SemanticsActionEvent] but with provided parameters
/// replaced. ¿„˜¿‰	¿‰  ¿‰¿‰¿‰  ¿‰#¿‰)¿‰(  ¿‰4*¿‰=¿‰<  ¿‰H ¿Â›Ç≤¿Â›¿ÊõÄ±/// An event for the engine to communicate view focus changes to the app.
///
/// This value will be typically passed to the [PlatformDispatcher.onViewFocusChange]
/// callback. ¿ÊÆ~¿Ê◊ ¿Ê◊¿ÊÂ  /// Creates a [ViewFocusChange].¿ÊÁ¿Êˆ¿Êı  ¿Ê˝¿Á¿Á  ¿Á¿Á!¿Á    ¿Á0S¿Á}¿Á}@/// The ID of the [FlutterView] that experienced a focus change. ¿Áà<¿Áø¿Áø/// The state focus changed to. ¿Á…H¿Ë¿Ë#/// The direction focus changed to.   ¿Ëw¿Ë)¿Ë)   ¿Ë¿Ë  
¿; É˜¿; ¿<_Äè/// Various important time points in the lifetime of a frame.
///
/// [FrameTiming] records a timestamp of each phase for performance analysis.  ¿<nÄÉ¿<Á¿<Ár/// The timestamp of the vsync signal given by the operating system.
///
/// See also [FrameTiming.vsyncOverhead]. ¿<ˆn¿=Z¿=Z]/// When the UI thread starts building a frame.
///
/// See also [FrameTiming.buildDuration]. ¿=iq¿=œ¿=œ_/// When the UI thread finishes building a frame.
///
/// See also [FrameTiming.buildDuration]. ¿=ﬂw¿>K¿>Ke/// When the raster thread starts rasterizing a frame.
///
/// See also [FrameTiming.rasterDuration]. ¿>[z¿>…¿>…g/// When the raster thread finishes rasterizing a frame.
///
/// See also [FrameTiming.rasterDuration]. ¿>⁄Ä‰¿?™¿?™Ä«/// When the raster thread finished rasterizing a frame in wall-time.
///
/// This is useful for correlating time raster finish time with the system
/// clock to integrate with other profiling tools.     ¿?√ÅÀ¿?√¿?»   ¿?›^¿@,¿@,L/// The number of engine layers cached in the raster cache during the frame. ¿@@W¿@à¿@àE/// The number of bytes used to cache engine layers during the frame. ¿@úa¿@Ï¿@ÏM/// The number of picture layers cached in the raster cache during the frame. ¿AT¿AE¿AE@/// The number of bytes used to cache pictures during the frame. ¿A[0¿AÄ¿AÄ"/// The frame number of the frame.     ¿[Sõw¿[S¿eâΩ/// States that an application can be in once it is running.
///
/// States not supported on a platform will be synthesized by the framework when
/// transitioning between states which are supported, so that all
/// implementations share the same state machine.
///
/// The initial value for the state is the [detached] state, updated to the
/// current state (usually [resumed]) as soon as the first lifecycle update is
/// received from the platform.
///
/// For historical and name collision reasons, Flutter's application state names
/// do not correspond one to one with the state names on all platforms. On
/// Android, for instance, when the OS calls
/// [`Activity.onPause`](https://developer.android.com/reference/android/app/Activity#onPause()),
/// Flutter will enter the [inactive] state, but when Android calls
/// [`Activity.onStop`](https://developer.android.com/reference/android/app/Activity#onStop()),
/// Flutter enters the [paused] state. See the individual state's documentation
/// for descriptions of what they mean on each platform.
///
/// The current application state can be obtained from
/// [SchedulerBinding.instance.lifecycleState], and changes to the state can be
/// observed by creating an [AppLifecycleListener], or by using a
/// [WidgetsBindingObserver] by overriding the
/// [WidgetsBindingObserver.didChangeAppLifecycleState] method.
///
/// Applications should not rely on always receiving all possible notifications.
///
/// For example, if the application is killed with a task manager, a kill
/// signal, the user pulls the power from the device, or there is a rapid
/// unscheduled disassembly of the device, no notification will be sent before
/// the application is suddenly terminated, and some states may be skipped.
///
/// See also:
///
/// * [AppLifecycleListener], an object used observe the lifecycle state that
///   provides state transition callbacks.
/// * [WidgetsBindingObserver], for a mechanism to observe the lifecycle state
///   from the widgets layer.
/// * iOS's [UIKit activity
///   lifecycle](https://developer.apple.com/documentation/uikit/app_and_environment/managing_your_app_s_life_cycle?language=objc)
///   documentation.
/// * Android's [activity
///   lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle)
///   documentation.
/// * macOS's [AppKit activity
///   lifecycle](https://developer.apple.com/documentation/appkit/nsapplicationdelegate?language=objc)
///   documentation.  ¿e,Ç%¿gI¿gIÇ/// The application is still hosted by a Flutter engine but is detached from
/// any host views.
///
/// The application defaults to this state before it initializes, and can be
/// in this state (applicable on Android, iOS, and web) after all views have been
/// detached.
///
/// When the application is in this state, the engine is running without a
/// view.
///
/// This state is only entered on iOS, Android, and web, although on all platforms
/// it is the default state before the application begins running. ¿gVÑQ¿k†¿k†Ñ%/// On all platforms, this state indicates that the application is in the
/// default running mode for a running application that has input focus and is
/// visible.
///
/// On Android, this state corresponds to the Flutter host view having focus
/// ([`Activity.onWindowFocusChanged`](https://developer.android.com/reference/android/app/Activity#onWindowFocusChanged(boolean))
/// was called with true) while in Android's "resumed" state. It is possible
/// for the Flutter app to be in the [inactive] state while still being in
/// Android's
/// ["onResume"](https://developer.android.com/guide/components/activities/activity-lifecycle)
/// state if the app has lost focus
/// ([`Activity.onWindowFocusChanged`](https://developer.android.com/reference/android/app/Activity#onWindowFocusChanged(boolean))
/// was called with false), but hasn't had
/// [`Activity.onPause`](https://developer.android.com/reference/android/app/Activity#onPause())
/// called on it.
///
/// On iOS and macOS, this corresponds to the app running in the foreground
/// active state. ¿k¨Ü—¿ru¿ruÜé/// At least one view of the application is visible, but none have input
/// focus. The application is otherwise running normally.
///
/// On non-web desktop platforms, this corresponds to an application that is
/// not in the foreground, but still has visible windows.
///
/// On the web, this corresponds to an application that is running in a
/// window or tab that does not have input focus.
///
/// On iOS and macOS, this state corresponds to the Flutter host view running in the
/// foreground inactive state. Apps transition to this state when in a phone
/// call, when responding to a TouchID request, when entering the app switcher
/// or the control center, or when the UIViewController hosting the Flutter
/// app is transitioning.
///
/// On Android, this corresponds to the Flutter host view running in Android's
/// paused state (i.e.
/// [`Activity.onPause`](https://developer.android.com/reference/android/app/Activity#onPause())
/// has been called), or in Android's "resumed" state (i.e.
/// [`Activity.onResume`](https://developer.android.com/reference/android/app/Activity#onResume())
/// has been called) but does not have window focus. Examples of when apps
/// transition to this state include when the app is partially obscured or
/// another activity is focused, a app running in a split screen that isn't
/// the current app, an app interrupted by a phone call, a picture-in-picture
/// app, a system dialog, another view. It will also be inactive when the
/// notification window shade is down, or the application switcher is visible.
///
/// On Android and iOS, apps in this state should assume that they may be
/// [hidden] and [paused] at any time. ¿rÇÇÌ¿ui¿uiÇ–/// All views of an application are hidden, either because the application is
/// about to be paused (on iOS and Android), or because it has been minimized
/// or placed on a desktop that is no longer visible (on non-web desktop), or
/// is running in a window or tab that is no longer visible (on the web).
///
/// On iOS and Android, in order to keep the state machine the same on all
/// platforms, a transition to this state is synthesized before the [paused]
/// state is entered when coming from [inactive], and before the [inactive]
/// state is entered when coming from [paused]. This allows cross-platform
/// implementations that want to know when an app is conceptually "hidden" to
/// only write one handler. ¿utÅS¿v¡¿v¡Å</// The application is not currently visible to the user, and not responding
/// to user input.
///
/// When the application is in this state, the engine will not call the
/// [PlatformDispatcher.onBeginFrame] and [PlatformDispatcher.onDrawFrame]
/// callbacks.
///
/// This state is only entered on iOS and Android.     ¿vÃÅ¶¿vÃ¿wÌÅ/// The possible responses to a request to exit the application.
///
/// The request is typically responded to by creating an [AppLifecycleListener]
/// and supplying an [AppLifecycleListener.onExitRequested] callback, or by
/// overriding [WidgetsBindingObserver.didRequestAppExit].  ¿x/¿x,¿x,(/// Exiting the application can proceed. ¿x5:¿xi¿xi1/// Cancel the exit: do not exit the application.     ¿xtÉÍ¿xt¿xŸ_/// The type of application exit to perform when calling
/// [ServicesBinding.exitApplication].  ¿xÈÅå¿zk¿zkÅw/// Requests that the application start an orderly exit, sending a request
/// back to the framework through the [WidgetsBinding]. If that responds
/// with [AppExitResponse.exit], then proceed with the same steps as a
/// [required] exit. If that responds with [AppExitResponse.cancel], then the
/// exit request is canceled and the application continues executing normally. ¿zzÅ·¿|S¿|SÅ»/// A non-cancelable orderly exit request. The engine will shut down the
/// engine and call the native UI toolkit's exit API.
///
/// If you need an even faster and more dangerous exit, then call `dart:io`'s
/// `exit()` directly, and even the native toolkit's exit API won't be called.
/// This is quite dangerous, though, since it's possible that the engine will
/// crash because it hasn't been properly shut down, causing the app to crash
/// on exit.     ¿ùçÖı¿ùç¿°∆Ñ3/// Type of [DisplayFeature], describing the [DisplayFeature] behaviour and if
/// it obstructs the display.
///
/// Some types of [DisplayFeature], like [DisplayFeatureType.fold], can be
/// reported without actually impeding drawing on the screen. They are useful
/// for knowing where the display is bent or has a crease. The
/// [DisplayFeature.bounds] can be 0-width in such cases.
///
/// The shape formed by the screens for types [DisplayFeatureType.fold] and
/// [DisplayFeatureType.hinge] is called the posture and is exposed in
/// [DisplayFeature.state]. For example, the [DisplayFeatureState.postureFlat] posture
/// means the screens form a flat surface.
///
/// ![Device with a hinge display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_hinge.png)
///
/// ![Device with a fold display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_fold.png)
///
/// ![Device with a cutout display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_cutout.png)  ¿°›H¿¢¿¢>/// [DisplayFeature] type is new and not yet known to Flutter. ¿¢*Ä†¿¢∆¿¢∆Äï/// A fold in the flexible screen without a physical gap.
///
/// The bounds for this display feature type indicate where the display makes a crease. ¿¢œV¿£ ¿£ N/// A physical separation with a hinge that allows two display panels to fold. ¿£*U¿£y¿£yL/// A non-displaying area of the screen, usually housing cameras or sensors.     ¿£ÑÑS¿£Ñ¿•µÇ+/// State of the display feature, which contains information about the posture
/// for foldable features.
///
/// The posture is the shape made by the parts of the flexible screen or
/// physical screen panels. They are inspired by and similar to
/// [Android Postures](https://developer.android.com/guide/topics/ui/foldables#postures).
///
/// * For [DisplayFeatureType.fold]s & [DisplayFeatureType.hinge]s, the state is
///   the posture.
/// * For [DisplayFeatureType.cutout]s, the state is not used and has the
/// [DisplayFeatureState.unknown] value.  ¿•Õ{¿¶A¿¶Ao/// The display feature is a [DisplayFeatureType.cutout] or this state is new
/// and not yet known to Flutter. ¿¶M}¿¶ø¿¶øk/// The foldable device is completely open.
///
/// The screen space that is presented to the user is flat. ¿¶œÅ¿ß√¿ß√ÄÎ/// Fold angle is in an intermediate position between opened and closed state.
///
/// There is a non-flat angle between parts of the flexible screen or between
/// physical screen panels such that the screens start to face each other.     ¿‹pÉ•¿‹p¿›}Å/// Various performance modes for tuning the Dart VM's GC performance.
///
/// For the editor of this enum, please keep the order in sync with `Dart_PerformanceMode`
/// in [dart_api.h](https://github.com/dart-lang/sdk/blob/main/runtime/include/dart_api.h#L1302).  ¿›ï?¿›Ã¿›Ã4/// This is the default mode that the Dart VM is in. ¿›ŸÅ¿ﬁ‚¿ﬁ‚Å /// Optimize for low latency, at the expense of throughput and memory overhead
/// by performing work in smaller batches (requiring more overhead) or by
/// delaying work (requiring more memory). An embedder should not remain in
/// this mode indefinitely. ¿ﬁÓÄ•¿ﬂâ¿ﬂâÄñ/// Optimize for high throughput, at the expense of latency and memory overhead
/// by performing work in larger batches with more intervening growth. ¿ﬂòz¿‡¿‡o/// Optimize for low memory, at the expensive of throughput and latency by more
/// frequently performing work.     ¿ËëÇ„¿Ëë¿ÍﬂÇH/// Represents the focus state of a given [FlutterView].
///
/// When focus is lost, the view's focus state changes to [ViewFocusState.unfocused].
///
/// When focus is gained, the view's focus state changes to [ViewFocusState.focused].
///
/// Valid transitions within a view are:
///
/// - [ViewFocusState.focused] to [ViewFocusState.unfocused].
/// - [ViewFocusState.unfocused] to [ViewFocusState.focused].
///
/// See also:
///
///   * [ViewFocusDirection], that specifies the focus direction.
///   * [ViewFocusEvent], that conveys information about a [FlutterView] focus change.  ¿ÍÚC¿Î,¿Î,7/// Specifies that a view does not have platform focus. ¿Î:7¿Îj¿Îj-/// Specifies that a view has platform focus.     ¿ÎvÉ%¿Îv¿ÏëÅ/// Represents the direction in which the focus transitioned across [FlutterView]s.
///
/// See also:
///
///   * [ViewFocusState], that specifies the current focus state of a [FlutterView].
///   * [ViewFocusEvent], that conveys information about a [FlutterView] focus change.  ¿Ï®Ä∫¿ÌY¿ÌYÄ®/// Indicates the focus transition did not have a direction.
///
/// This is typically associated with focus being programmatically requested or
/// when focus is lost. ¿ÌgÄë¿ÌÒ¿ÌÒÄÉ/// Indicates the focus transition was performed in a forward direction.
///
/// This is typically result of the user pressing tab. ¿Ì˝Äõ¿Óê¿ÓêÄå/// Indicates the focus transition was performed in a backward direction.
///
/// This is typically result of the user pressing shift + tab.         é*té*éN  éhésér  é*é+é1éBé2 Ä∂mÄ∂ÅE/// Signature of callbacks that have no arguments and return no data.    Å%ÇÅ%ÉÅ„/// Signature for [PlatformDispatcher.onBeginFrame].
///
/// The `duration` argument is the point at which the current frame interval
/// began, expressed as a duration since some epoch. The epoch in all
/// frames will be the same, but it may not match [DateTime]'s epoch.
///
/// For any two frames `a` and `b` such that the frame number of `a` is less
/// than the frame number of `b`, the duration argument for `a` will be less
/// than or equal to the duration argument for `b`.  É/É9É8   ÉDÇ˚ÉDÜÇ∑/// Signature for [PlatformDispatcher.onReportTimings].
///
/// {@template dart.ui.TimingsCallback.list}
/// The callback takes a list of [FrameTiming] because it may not be
/// immediately triggered after each frame. Instead, Flutter tries to batch
/// frames together and send all their timings at once to decrease the
/// overhead (as this is available in the release mode). The list is sorted in
/// ascending order of time (earliest frame first). The timing of any frame
/// will be sent within about 1 second (100ms if in the profile/debug mode)
/// even if there are no later frames to batch. The timing of the first frame
/// will be sent immediately without batching.
/// {@endtemplate}  Ü$Ü7Ü6   ÜAÄàÜAÜÖ;/// Signature for [PlatformDispatcher.onPointerDataPacket].  ÜØÜ¬Ü¡   ÜÀÄÌÜÀáäÄ∂/// Signature for [PlatformDispatcher.onKeyData].
///
/// The callback should return true if the key event has been handled by the
/// framework and should not be propagated further.  á™á≥á≤   á∫Äëá∫à>/// Signature for [PlatformDispatcher.onSemanticsActionEvent].  à.àDàC   àMÄÚàMàˇÄ©/// Signature for responses to platform messages.
///
/// Used as a parameter to [PlatformDispatcher.sendPlatformMessage] and
/// [PlatformDispatcher.onPlatformMessage].  â/â:â9   âAÅwâAäD~/// Deprecated. Migrate to [ChannelBuffers.setListener] instead.
///
/// Signature for [PlatformDispatcher.onPlatformMessage].  äpäxäw  ä}äàäá  äç)äØäÆ  â¿â¡âÀä:âœää„?ä„äÎ   ã
ãã   ã$Å—ã$åÆÅÅ/// Signature for [PlatformDispatcher.onError].
///
/// If this method returns false, the engine may use some fallback method to
/// provide information about the error.
///
/// After calling this method, the process or the VM may terminate. Some severe
/// unhandled errors may not be able to call this method either, such as Dart
/// compilation errors or process terminating errors.  åÃå‘å”  åﬁåÍåÈ   ¿ÇÆÄÏ¿ÇÆ¿É~b/// Deprecated. Will be removed in a future version of Flutter.
///
/// Use [ViewPadding] instead.   ¿É¿É¿É¿Ét¿É ¿É>¿ÂRÄâ¿ÂR¿Âî9/// Signature for [PlatformDispatcher.onViewFocusChange].  ¿Âº¿ÂÃ¿ÂÀ    çD)çQçQ çiçjçÔ8ç¸ç¸ é  å <ÄÜÄ§ÄµÄ∂Ä¸Å$Å%ÅZÅ^Å´ÅÒÇ7Ç;ÇàÇ’É	ÉCÉDÉ|ÉÄÉ≠ÉÚÑ>ÑÖÑ‘Ö ÖlÖ∫ÖÈÖ¸Ü@ÜAÜ}Ü ÜÀÜ˝ááNáÇáπá∫á˘àLàMààÉàÀà˜â@âAâÇâÜâ¿âÕää:ä<ä^äπä∫ä„ã#ã$ãTãXã•ãŒã“å"åpå¶åˆå˜çDçoçpç´çÆçÔé)é*éDéüé†éÃéÂèè	èWèkèlèºêê9êhê¢ê©ê™ëë4ë6ë7ë`ëdë´ëØë˚íííkíöíûí‚ììì\ì•ìıîBîQîlî∑îÏïïBïFïGïqïwïªññXñ^ñØñ˝óKóïóÊòòòcò¥ò‡ô0ô~ôóôŒööö_ö`öñöúöÍö˘õPõÅõπõ¯ú(ú`údúeúâúèúﬂúÂù.ù4ùÑù“ùÏùÚû<ûãû‹ü-üNü™üÚ†(†`†a†Ø†∆†Ã°°P°ç°é°⁄°Î¢!¢"¢n¢•¢´¢¯£C£Å£á£—§§b§à§é§’• •n•º¶¶Y¶û¶§¶¥¶∫¶Ìß:ßSßußÆßÌß˘®.®N®¨®˜®˛©,©<©h©x©≠©Ÿ™™!™0™Y™à™ê™£™≠™¿™ƒ™≈™Ï´´´l´É´â´Ÿ¨¨=¨C¨ë¨†¨¶¨Ó≠≠	≠≠≠i≠°≠‹ÆÆ:ÆdÆïÆ∑Æ·ÆÂÆÊØØØRØWØ£ØŒ∞∞R∞è∞≈∞…∞ ∞ˆ∞˚±± ±m±ï±≤≤≤$≤2≤8≤{≤í≤»≤Ã≤Õ≥ ≥P≥T≥U≥®≥ﬁ¥¥<¥=¥O¥P¥}¥Ç¥ß¥ÿ¥ÔµµDµJµÄµÑµÖµ±µ∂µ∂@∂à∂ƒ∂˙∂˛∂ˇ∑[∑a∑±∏∏[∏™∏˚ππ%πwπ≈∫∫a∫g∫∫ªªwªﬁºº
º\ºpºvº¬º˚ΩΩOΩUΩeΩkΩ‰æ(æoæøøø6øòø√¿ @ ¿ @#¿ @N¿ @R¿ @S¿ @ò¿ @û¿ @Ù¿ AR¿ Az¿ AÄ¿ Aœ¿ A¯¿ A˛¿ BN¿ B~¿ BÑ¿ Bî¿ Bö¿ BÌ¿ C¿ C&¿ CI¿ Ct¿ C{¿ Cæ¿ C¬¿ C√¿ CÚ¿ D8¿ D<¿ Dí¿ Dì¿ D ¿ D–¿ E¿ Eh¿ Eã¿ Eë¿ E‚¿ F#¿ Fp¿ Fë¿ F≈¿ FÂ¿ G¿ G9¿ GW¿ G}¿ GÅ¿ GÇ¿ GÆ¿ G’¿ H4¿ H8¿ H9¿ HÇ¿ H¬¿ H»¿ I¿ I]¿ Ié¿ I¨¿ I—¿ I˝¿ J¿ J?¿ JC¿ JD¿ Jp¿ JÜ¿ J≤¿ J∂¿ J∑¿ J¯¿ J˛¿ KO¿ K^¿ Kd¿ Kt¿ Kz¿ K«¿ Kÿ¿ L&¿ LY¿ LÜ¿ L«¿ LÏ¿ M¿ M¿ M¿ MJ¿ M¿ M¶¿ M…¿ MÊ¿ N¿ N2¿ N;¿ NA¿ NE¿ NF¿ Në¿ N‡¿ O¿ O¿ OY¿ Oå¿ O‘¿ P¿ P\¿ Pê¿ P∑¿ PÁ¿ P˜¿ Q¿ QU¿ Q¢¿ R¿ Re¿ R∆¿ R‹¿ S;¿ SÑ¿ Sÿ¿ T&¿ Tt¿ T«¿ U¿ Ud¿ U¥¿ V¿ VT¿ V§¿ VÙ¿ WA¿ Wë¿ W⁄¿ X*¿ Xz¿ X»¿ Y¿ Yf¿ YØ¿ Y˛¿ ZO¿ Z†¿ ZÈ¿ [2¿ [Ä¿ [Œ¿ \¿ \e¿ \Æ¿ \π¿ \¬¿ \˝¿ ]¿ ]-¿ ]1¿ ]2¿ ]Ö¿ ] ¿ ]Â¿ ^¿ ^8¿ ^m¿ ^ò¿ ^Ã¿ ^Ÿ¿ ^È¿ _¿ _¿ _ ¿ _!¿ _^¿ _d¿ _µ¿ _ƒ¿ _ ¿ `¿ `O¿ `¿ `û¿ `À¿ `Ê¿ a¿ ag¿ at¿ a±¿ a∑¿ aª¿ aº¿ b	¿ b¿ b6¿ ba¿ bç¿ bé¿ bÕ¿ c ¿ c3¿ c4¿ cH¿ cù¿ cÕ¿ c‹¿ c¸¿ d[¿ dh¿ di¿ dé¿ dÔ¿ eG¿ eè¿ e÷¿ eÚ¿ fB¿ fI¿ fJ¿ f^¿ fb¿ fc¿ f¨¿ f≈¿ fÀ¿ g¿ gh¿ gâ¿ gè¿ g€¿ h(¿ h[¿ ha¿ h≤¿ hˇ¿ i@¿ iF¿ ir¿ ix¿ i≈¿ j¿ j_¿ jå¿ j»¿ jÌ¿ k¿ kI¿ kÖ¿ kµ¿ kª¿ k‹¿ l¿ l	¿ l
¿ lD¿ lE¿ lû¿ lü¿ lˇ¿ mA¿ mB¿ mn¿ mô¿ m‘¿ n¿ nX¿ n∞¿ n∂¿ n˘¿ n˝¿ n˛¿ o3¿ o9¿ oÜ¿ o—¿ p¿ pX¿ p^¿ pØ¿ pΩ¿ q"¿ qR¿ q^¿ qï¿ q°¿ q®¿ q¡¿ qﬂ¿ qÂ¿ qÈ¿ qÍ¿ r
¿ r¿ rJ¿ r^¿ rí¿ rì¿ r«¿ s
¿ s¿ s?¿ sP¿ s¿ sì¿ sò¿ sô¿ sﬂ¿ sÂ¿ t5¿ tÖ¿ t÷¿ u%¿ ur¿ uë¿ uÓ¿ vK¿ vd¿ vÇ¿ và¿ vå¿ vç¿ vÍ¿ w)¿ w*¿ wf¿ w≠¿ w±¿ wÊ¿ w˜¿ x¿ x¿ x-¿ x2¿ x3¿ x¿ x»¿ x‚¿ y¿ yK¿ yz¿ y~¿ y¿ y‰¿ z+¿ z,¿ zo¿ zu¿ zæ¿ zﬁ¿ z‰¿ {4¿ {Ç¿ {ò¿ {û¿ {Ô¿ |>¿ |R¿ |X¿ |©¿ |∏¿ |«¿ |˝¿ }8¿ }<¿ }Ñ¿ }≥¿ }ﬁ¿ }Ì¿ ~#¿ ~^¿ ~b¿ ~ü¿ ~¬¿ ~Ì¿ ~Ò¿ ~Ú¿ ¿ b¿ ñ¿ ó¿ ¡¿ Ä	¿ Ä¿ Ä`¿ Äa¿ Ä¨¿ Ä¿ ÅA¿ Åp¿ Åv¿ Åí¿ Å•¿ Å´¿ Å¨¿ ÅÌ¿ Ç¿ Ç¿ Ç<¿ Çt¿ Ç{¿ Ç¿ ÇÄ¿ Ç¬¿ Ç»¿ É	¿ ÉR¿ Ék¿ É∫¿ É¿ É¸¿ Ñ)¿ Ñ;¿ Ñp¿ Ñx¿ Ñ§¿ ÑË¿ Ö¿ Ö#¿ Ö1¿ Ö?¿ Öb¿ Ö°¿ Ö¨¿ Öµ¿ Ö¬¿ Ü¿ Ü@¿ ÜJ¿ ÜP¿ ÜT¿ ÜU¿ Üû¿ Ü≠¿ Ü≥¿ á¿ áF¿ áL¿ áõ¿ á¿ à5¿ à|¿ à}¿ à›¿ â¿ â¿ â{¿ âÅ¿ â„¿ ä¿ ä¿ äq¿ äØ¿ ä‹¿ ä‡¿ ä·¿ ãD¿ ãÅ¿ ãÇ¿ ã—¿ å¿ å	¿ åZ¿ å´¿ åŸ¿ åﬂ¿ ç(¿ çL¿ çì¿ çî¿ çı¿ é.¿ é/¿ éÄ¿ é™¿ é∞¿ é¿¿ é∆¿ è¿ è0¿ è~¿ èè¿ èª¿ èº¿ ê¿ ê9¿ ê:¿ êâ¿ ê—¿ ê◊¿ ë&¿ ëv¿ ëΩ¿ í
¿ í[¿ ím¿ ís¿ í©¿ í◊¿ í›¿ ì+¿ ìv¿ ì|¿ ìå¿ ìí¿ ìﬂ¿ î¿ îb¿ î§¿ ï¿ ïL¿ ïg¿ ïz¿ ïç¿ ï¶¿ ïÆ¿ ï≤¿ ï≥¿ ñ¿ ñ2¿ ñ3¿ ñÄ¿ ñ€¿ ñ‹¿ ó'¿ ó6¿ ó<¿ óç¿ óú¿ óÛ¿ ò$¿ ò\¿ òõ¿ òÀ¿ ô¿ ô¿ ô¿ ô4¿ ôf¿ ôµ¿ ô˛¿ öD¿ öR¿ öX¿ ö±¿ õ¿ õU¿ õY¿ õZ¿ õ£¿ õ©¿ õ¯¿ úB¿ úQ¿ úW¿ ú¶¿ ú’¿ úÁ¿ ù5¿ ù¿ ùÄ¿ ùœ¿ û¿ û;¿ ûB¿ ût¿ û¿¿ û¡¿ ûÒ¿ ü0¿ ü4¿ üà¿ üâ¿ ü¡¿ ü«¿ †¿ †V¿ †\¿ †™¿ †‚¿ †Ë¿ °4¿ °Ñ¿ °≠¿ ¢¿ ¢¿ ¢C¿ ¢I¿ ¢ô¿ ¢ÿ¿ ¢ﬁ¿ £/¿ £z¿ £ä¿ £ê¿ £‹¿ £‚¿ £Ú¿ £¯¿ §C¿ §m¿ §£¿ §§¿ §⁄¿ §‡¿ •¿ •¿ •e¿ •k¿ •´¿ •Í¿ ¶3¿ ¶o¿ ¶£¿ ¶ÿ¿ ß¿ ß?¿ ßE¿ ßF¿ ßú¿ ßù¿ ß∫¿ ß€¿ ß¸¿ ®5¿ ®m¿ ®v¿ ®|¿ ®ç¿ ®ë¿ ®í¿ ®Á¿ ©$¿ ©%¿ ©I¿ ©ñ¿ ©ö¿ ©˛¿ ©ˇ¿ ™A¿ ™G¿ ™ò¿ ™ß¿ ™≠¿ ™Ω¿ ™√¿ ´¿ ´>¿ ´w¿ ´ô¿ ´¬¿ ´Ú¿ ¨¿ ¨<¿ ¨@¿ ¨A¿ ¨m¿ ¨õ¿ ¨ø¿ ¨˛¿ ≠G¿ ≠w¿ ≠ƒ¿ Æ¿ Æ[¿ Æ®¿ Æ©¿ Æø¿ Æ€¿ Ø¿ Ø]¿ Øõ¿ Ø¶¿ ØØ¿ ∞¿ ∞2¿ ∞:¿ ∞@¿ ∞Z¿ ∞h¿ ∞n¿ ∞∏¿ ±
¿ ±>¿ ±B¿ ±C¿ ±o¿ ±ü¿ ±†¿ ±È¿ ±Ô¿ ≤1¿ ≤7¿ ≤à¿ ≤≥¿ ≤ÿ¿ ≥¿ ≥&¿ ≥*¿ ≥+¿ ≥Q¿ ≥R¿ ≥£¿ ≥Ò¿ ¥	¿ ¥8¿ ¥9¿ ¥e¿ ¥ô¿ ¥Ï¿ µ¿ µ2¿ µX¿ µ^¿ µb¿ µc¿ µ≥¿ µ¡¿ µ«¿ µˆ¿ ∂@¿ ∂A¿ ∂g¿ ∂m¿ ∂∏¿ ∂Ï¿ ∂Ú¿ ∑>¿ ∑M¿ ∑S¿ ∑c¿ ∑i¿ ∑¥¿ ∑ﬁ¿ ∏¿ ∏¿ ∏j¿ ∏p¿ ∏¡¿ ∏–¿ ∏÷¿ ∏Ê¿ ∏Ï¿ π7¿ πg¿ π≤¿ π›¿ ∫¿ ∫H¿ ∫r¿ ∫§¿ ∫®¿ ∫©¿ ∫ı¿ ∫˚¿ ª:¿ ª}¿ ªë¿ ªﬂ¿ º¿ º¿ º`¿ ºf¿ º¥¿ Ω¿ Ω¿ Ωc¿ Ωï¿ Ωñ¿ Ω„¿ æ¿ æ¿ æ%¿ æ+¿ æy¿ æí¿ æ ¿ æÓ¿ æÔ¿ ø>¿ øà¿ ø¢¿ øÏ¿ øÌ¿ ¿;¿ ¿A¿ ¿í¿ ¿°¿ ¿ß¿ ¿∑¿ ¿Ω¿ ¡¿ ¡8¿ ¡â¿ ¡∑¿ ¡Ï¿ ¬(¿ ¬U¿ ¬ä¿ ¬é¿ ¬è¿ ¬⁄¿ √¿ √¿ √j¿ √p¿ √¡¿ √–¿ √÷¿ √Ê¿ √Ï¿ ƒ7¿ ƒg¿ ƒ¥¿ ƒ‡¿ ≈¿ ≈M¿ ≈x¿ ≈´¿ ≈Ø¿ ≈∞¿ ≈‹¿ ∆¿ ∆c¿ ∆{¿ ∆â¿ ∆è¿ ∆ê¿ ∆·¿ «0¿ «í¿ «ƒ¿ »¿ »¿ »H¿ »N¿ »O¿ »Ç¿ »Ω¿ »Ò¿ …=¿ …J¿ …{¿ …Å¿ …Ç¿ …°¿ …Ì¿  ¿  F¿  L¿  ú¿  Ω¿  ‡¿ À<¿ ÀC¿ Àç¿ Àœ¿ Ã¿ ÃC¿ Ãã¿ ÃÌ¿ Õ¿ Õi¿ ÕŒ¿ ÕÙ¿ Œ¿ Œ@¿ Œd¿ Œá¿ Œï¿ Œõ¿ Œ–¿ Œ¯¿ œ,¿ œZ¿ œÑ¿ œ¨¿ œ≥¿ –¿ –'¿ –F¿ –é¿ –î¿ –π¿ —¿ —¿ —0¿ —z¿ —Ä¿ —Ñ¿ —Ö¿ —“¿ —˝¿ “¿ “P¿ “_¿ “ü¿ “†¿ “Ô¿ “ı¿ ”=¿ ”U¿ ”¢¿ ”Œ¿ ‘¿ ‘;¿ ‘f¿ ‘ô¿ ‘ù¿ ‘û¿ ‘ ¿ ‘˘¿ ’B¿ ’¿ ’ç¿ ’ì¿ ’„¿ ÷5¿ ÷}¿ ÷Å¿ ÷Ç¿ ÷Œ¿ ÷Û¿ ÷˘¿ ◊E¿ ◊å¿ ◊í¿ ◊⁄¿ ◊Ú¿ ÿI¿ ÿÇ¿ ÿ≤¿ ÿ˘¿ Ÿ!¿ ŸQ¿ ŸU¿ ŸV¿ ŸÇ¿ Ÿ≠¿ Ÿÿ¿ ⁄¿ ⁄¿ ⁄¿ ⁄S¿ ⁄ç¿ ⁄ë¿ ⁄í¿ ⁄∆¿ ⁄Ô¿ €¿ €¿ €h¿ €ß¿ €Ã¿ €¯¿ ‹+¿ ‹O¿ ‹{¿ ‹¿ ‹Ä¿ ‹¨¿ ›¿ ›&¿ ›D¿ ›g¿ ›É¿ ›µ¿ ›Õ¿ ›Â¿ ›˛¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ.¿ ﬁD¿ ﬁE¿ ﬁë¿ ﬁ†¿ ﬁ¶¿ ﬁı¿ ﬂF¿ ﬂè¿ ﬂø¿ ﬂ≈¿ ‡¿ ‡e¿ ‡µ¿ ‡ƒ¿ ‡ ¿ ·¿ ·i¿ ·™¿ ·‘¿ ·˝¿ ‚¿ ‚7¿ ‚;¿ ‚<¿ ‚y¿ ‚ï¿ ‚©¿ ‚Ø¿ ‚—¿ ‚“¿ „¿ „.¿ „;¿ „G¿ „ß¿ „æ¿ „Ô¿ ‰¿ ‰¿ ‰¿ ‰¿ ‰¿ ‰e¿ ‰u¿ ‰{¿ ‰≈¿ ‰À¿ ‰‹¿ ‰‚¿ ‰¸¿ Âo¿ Â¿¿ Ê¿ ÊZ¿ Ê†¿ ÊÈ¿ ÁT¿ ÁZ¿ Ág¿ Ám¿ ÁÉ¿ Ë¿ Ë\¿ Ë¨¿ Ë˙¿ È!¿ È'¿ È7¿ È=¿ Èr¿ Èº¿ È·¿ Í¿ Í¿ Íq¿ Íü¿ Í†¿ ÍÒ¿ Î¿ Î!¿ Îq¿ Îø¿ Ï¿ Ï[¿ Ïo¿ Ïu¿ Ï«¿ Ì¿ Ì^¿ Ìd¿ Ìµ¿ Ó¿ ÓR¿ Óa¿ Óì¿ Ó∂¿ Ó›¿ Óﬁ¿ Ô ¿ Ô¿ Ô%¿ Ô&¿ Ô^¿ Ôî¿ ÔΩ¿ Ôˇ¿ S¿ Y¿ e¿ é¿ ◊¿ ﬁ¿ ﬂ¿ Ò7¿ Ò{¿ Ò≠¿ ÒÛ¿ Ò˙¿ Ò˛¿ Òˇ¿ Ú=¿ Úc¿ Úù¿ Ú–¿ Û¿ Û4¿ ÛÄ¿ Ûú¿ ÛØ¿ Ûµ¿ Û˙¿ Ù¿ Ù9¿ ÙS¿ ÙY¿ ÙZ¿ Ù°¿ Ù‰¿ ı¿ ı¿ ı ¿ ı9¿ ıã¿ ıë¿ ı©¿ ı∏¿ ˆ¿ ˆ?¿ ˆñ¿ ˆπ¿ ˜¿ ˜¿ ˜#¿ ˜'¿ ˜(¿ ˜q¿ ˜ä¿ ˜è¿ ˜÷¿ ¯"¿ ¯p¿ ¯¬¿ ˘¿ ˘_¿ ˘Ø¿ ˘Ï¿ ˙;¿ ˙X¿ ˙]¿ ˙≠¿ ˙˝¿ ˚N¿ ˚û¿ ˚’¿ ¸:¿ ¸ï¿ ¸ó¿ ¸ò¿ ¸ÿ¿ ¸‹¿ ˝-¿ ˝p¿ ˝π¿ ˝Ù¿ ˝¯¿ ˛-¿ ˛~¿ ˛Õ¿ ˇ¿ ˇn¿ ˇº¿ ˇ”¿ ˇ◊¿ 6¿ k¿ o¿ |¿ Ä¿ å¿ ¢¿ ¶¿ …¿ È¿¿q¿¥¿≈¿¿¿¿¿X¿^¿f¿j¿x¿|¿∫¿ ¿N¿h¿ï¿õ¿˙¿Y¿æ¿ƒ¿¿+¿b¿c¿™¿∞¿˛¿N¿ì¿’¿¸¿¿¿¿X¿m¿n¿≥¿π¿	¿(¿>¿?¿ç¿°¿ß¿∑¿Ω¿		¿	4¿	]¿	^¿	°¿	ß¿	Ò¿	˜¿
¿
¿
[¿
î¿
ï¿
∆¿¿¿I¿ô¿õ¿ú¿˜¿˚¿Z¿ƒ¿Â¿¿¿L¿k¿l¿ß¿˙¿˛¿ˇ¿/¿5¿E¿K¿ã¿“¿”¿¿¿¿#¿c¿Æ¿Ø¿ﬁ¿‰¿Ù¿˙¿:¿Ä¿Å¿≤¿∏¿»¿Œ¿¿V¿W¿Ü¿å¿ú¿¢¿‚¿(¿)¿X¿^¿n¿t¿¥¿˙¿˚¿&¿,¿<¿B¿Ç¿ƒ¿≈¿Ù¿˙¿
¿¿P¿ñ¿ó¿¡¿«¿◊¿›¿¿^¿_¿ç¿ì¿£¿©¿È¿.¿/¿\¿b¿r¿x¿∏¿¸¿˝¿+¿1¿A¿G¿á¿Ã¿Õ¿ˇ¿¿¿¿[¿§¿•¿“¿ÿ¿Ë¿Ó¿.¿r¿s¿ú¿¢¿≤¿∏¿¯¿8¿9¿f¿l¿|¿Ç¿¬¿¿¿8¿>¿N¿T¿î¿‹¿›¿¿¿(¿.¿n¿∫¿ª¿Î¿Ò¿¿¿G¿é¿ê¿ë¿¥¿∏¿Ú¿¿2¿u¿ù¿¿¿¿¿5¿P¿k¿Ö¿ã¿å¿∞¿‚¿ ¿ ¿ C¿ `¿ {¿ ô¿ ∑¿ —¿ ÿ¿ ˚¿!M¿!ü¿!‚¿"+¿"k¿"ì¿"÷¿#¿#Y¿#`¿#d¿#e¿#≤¿#Á¿#Ë¿$8¿$F¿$j¿$k¿$∏¿$„¿%¿%¿%R¿%ú¿%∂¿%›¿%ﬁ¿&¿&$¿&%¿&e¿&É¿&Ñ¿&—¿&·¿'¿'¿'3¿'U¿'V¿'ì¿'ô¿'Á¿(4¿(Ä¿(…¿)¿)¿)`¿)±¿)ˇ¿*O¿*ô¿*Õ¿*Î¿*Ì¿*Ó¿+¿+.¿+K¿+l¿+á¿+Ø¿+ÿ¿,	¿,.¿,b¿,ó¿,Ø¿,µ¿,∂¿,Î¿-¿-(¿-)¿-X¿-y¿-z¿-¥¿-«¿-»¿.¿.h¿.∂¿.º¿/¿/V¿/v¿/w¿/∆¿0¿0`¿0Ø¿0¿¿0∆¿1¿1a¿1°¿1ß¿1ˆ¿2A¿2b¿2c¿2≤¿2ˇ¿37¿3=¿3à¿3–¿4¿47¿48¿4á¿4÷¿5!¿5p¿5Å¿5á¿5÷¿6!¿6>¿6?¿6â¿6è¿6‹¿7%¿7@¿7i¿7j¿7Ø¿7µ¿8 ¿8$¿8*¿8|¿8’¿9)¿9{¿9À¿:¿:v¿:|¿:ƒ¿;¿;J¿;x¿;y¿;Ö¿;õ¿;√¿;«¿;…¿; ¿<¿<¿<Z¿<l¿<≥¿<π¿<Â¿<Û¿<Ù¿=&¿=,¿=X¿=f¿=g¿=õ¿=°¿=Õ¿=‹¿=›¿>¿>¿>I¿>X¿>Y¿>î¿>ö¿>«¿>◊¿>ÿ¿? ¿?&¿?s¿?®¿?¿¿?¬¿?√¿?€¿@*¿@=¿@>¿@Ü¿@ô¿@ö¿@Í¿@ˇ¿A ¿AC¿AX¿AY¿A~¿Aç¿Aè¿Aê¿A¡¿A≈¿B¿BR¿Bå¿B‘¿C)¿CB¿CF¿Cí¿C„¿D2¿DT¿Dh¿D´¿D±¿Dˇ¿E=¿EC¿EÑ¿Eú¿Eπ¿E÷¿EÙ¿F¿F1¿FX¿Fu¿Fí¿F±¿F–¿FÍ¿FÒ¿G¿G#¿G5¿GH¿G[¿Go¿Gã¿G¢¿Gπ¿G“¿GÎ¿G˛¿H¿H
¿H¿HN¿HT¿Hï¿H∞¿H∂¿I¿I\¿Iü¿I†¿I¸¿I˝¿JM¿Jó¿Jﬁ¿Jﬂ¿K8¿K9¿Kê¿Kë¿K…¿Kœ¿L¿Lm¿Lö¿L“¿Lÿ¿M¿M¿M^¿M®¿Mº¿M—¿N¿N?¿NT¿Nt¿N∆¿N«¿O¿O¿OL¿OÄ¿O°¿Oı¿Oˆ¿PF¿PS¿Ps¿Pƒ¿P≈¿Pˇ¿Q¿QU¿Qp¿Q§¿Q™¿Q¿R¿R_¿R`¿R®¿RÆ¿R˝¿SF¿SG¿Sñ¿Sú¿T¿TK¿TL¿Tü¿T•¿U¿UN¿UO¿Uô¿Uü¿UÏ¿V9¿V:¿Vã¿Vë¿V˜¿WD¿WE¿Wö¿W†¿X¿XM¿XN¿Xä¿XØ¿X∞¿Y
¿Y¿Y\¿Y]¿Yi¿Y¿Y∆¿Yˇ¿Z6¿Ze¿Zì¿Z¡¿ZÛ¿[%¿[L¿[P¿[R¿[S¿[ê¿[î¿[Â¿\'¿\Y¿\]¿\©¿\¯¿]¿]¿]m¿]∏¿]Â¿^G¿^ã¿^Î¿_;¿_t¿_x¿_Ø¿_ˇ¿`A¿`p¿`∞¿`¥¿a¿a	¿aS¿aù¿aÏ¿b8¿b<¿bJ¿bN¿bú¿b«¿c¿c4¿cP¿c”¿cË¿d¿da¿dv¿dï¿d¸¿e¿e*¿ey¿eè¿eï¿e‰¿f8¿fH¿fN¿fõ¿fß¿f≠¿g¿gG¿gS¿gT¿g†¿gÒ¿h ¿h¿hU¿h⁄¿i)¿iv¿iÜ¿iÁ¿j¿jí¿jø¿k"¿k6¿k<¿kä¿kû¿k©¿k™¿kı¿l1¿l7¿lÜ¿l¬¿l»¿m¿mF¿mL¿m£¿mÚ¿nC¿në¿n≠¿n≥¿o¿o¿oÄ¿oæ¿p#¿pp¿pΩ¿q¿q[¿qß¿q¯¿q˛¿rJ¿rs¿r¿rÄ¿r–¿s ¿sp¿sº¿s¬¿t¿t^¿t¨¿t˘¿uI¿ug¿uq¿ur¿u¡¿u÷¿u‹¿v&¿vs¿vÑ¿vä¿vø¿v…¿vÀ¿vÃ¿w¿w¿wa¿w≠¿wË¿wˇ¿x*¿x2¿x3¿xg¿xq¿xs¿xt¿x≠¿x‘¿xÁ¿y4¿y¿y»¿z¿zi¿zw¿zx¿z√¿z˚¿{¿{Q¿{¢¿{Ú¿|B¿|Q¿|]¿|_¿|`¿|≠¿|˚¿}G¿}í¿}ß¿}´¿}˘¿~¿~¿~#¿~'¿~q¿~†¿~¿>¿S¿g¿¿ó¿Æ¿«¿·¿Á¿Ë¿Ä?¿ÄT¿ÄU¿Ä´¿Äø¿Ä¿¿Å¿Å.¿Å/¿Åà¿Åü¿Å†¿Å”¿Ç2¿Ç3¿Ç?¿ÇU¿Çß¿Ç´¿Ç≠¿ÇÆ¿ÇÓ¿ÇÚ¿É¿É¿É<¿Ét¿Év¿Éõ¿Éú¿É—¿É’¿Ñ$¿ÑV¿ÑZ¿Ñâ¿Ñª¿Ñø¿Ñ¸¿Ö ¿Ö;¿Öx¿Ö|¿Öπ¿ÖΩ¿Ü¿Ü$¿Ü<¿Üw¿Üë¿Ü™¿Üœ¿ÜÈ¿á¿á¿á¿á_¿áÇ¿áü¿áº¿á€¿á˙¿á˚¿à3¿àL¿àM¿àÖ¿àã¿à≠¿à∆¿à«¿â ¿â¿â¿âT¿âZ¿â|¿âñ¿âó¿âœ¿âÒ¿ä¿ä<¿äb¿äÜ¿ää¿äã¿ä”¿ã¿ã¿ãe¿ãì¿ãØ¿ã“¿ãı¿å¿å?¿åF¿åJ¿åK¿åW¿åz¿åú¿åØ¿åµ¿å·¿åı¿å˚¿ç"¿çH¿çn¿çñ¿çº¿ç¿¿ç¡¿çÕ¿é¿é¿é'¿é=¿éÑ¿é≠¿é≥¿éÃ¿éÛ¿è¿è5¿èd¿èj¿è§¿èº¿èÌ¿èı¿ê@¿êF¿êG¿êÉ¿ê¬¿êÒ¿êı¿ê˜¿ê¯¿ë>¿ëB¿ëi¿ëm¿ëæ¿í¿íb¿íf¿íº¿ì#¿ìQ¿ìU¿ìŸ¿ì›¿î_¿îc¿îÈ¿îÌ¿ï:¿ïâ¿ïÿ¿ñ&¿ñq¿ñà¿ñı¿ó¿óq¿ó¿ó∂¿óÒ¿ó˙¿ó˚¿ò\¿òb¿òµ¿ô¿ôb¿ôô¿ôü¿ô‹¿ô‚¿ö,¿öz¿öè¿öê¿ö…¿öÍ¿öÎ¿õ;¿õA¿õz¿õù¿õû¿õ™¿õÕ¿õÔ¿ú¿ú¿ú4¿úH¿úN¿út¿úñ¿ú¥¿ú“¿ú÷¿ú◊¿ú„¿ù¿ù¿ù(¿ù>¿ùÜ¿ùä¿ùå¿ùç¿ù‹¿ù˙¿ù˛¿ûI¿ûó¿û÷¿ü¿ü¿ü`¿üß¿ü˛¿†)¿†-¿†±¿†µ¿°7¿°;¿°¡¿°€¿¢¿¢'¿¢(¿¢d¿¢j¿¢ƒ¿¢Ã¿¢Õ¿£¿£'¿£(¿£w¿£Å¿£É¿£Ñ¿£”¿£Ó¿£Ú¿§;¿§{¿§’¿§Ÿ¿•*¿•=¿•á¿•∞¿•À¿¶¿¶?¿¶J¿¶K¿¶y¿¶¿¶Ω¿¶Ã¿¶Õ¿ß¿ß$¿ßt¿ß¡¿ß÷¿ßÿ¿ßŸ¿®(¿®,¿®T¿®ß¿®¿®Ù¿©D¿©^¿©¡¿™¿™[¿™å¿™ê¿™û¿™¢¿™ˆ¿´¿´¿´S¿´ë¿´π¿´ø¿´“¿´ÿ¿´Ê¿¨¿¨S¿¨]¿¨c¿¨¨¿¨˘¿≠7¿≠=¿≠á¿≠∫¿Æ¿Æz¿Æ…¿Ø¿ØO¿Ø§¿Øπ¿Øø¿∞	¿∞¿∞#¿∞3¿∞9¿∞¿∞ì¿∞À¿∞Ó¿±¿±¿±+¿±1¿±p¿±v¿±«¿±Ë¿≤H¿≤ß¿≥¿≥K¿≥Q¿≥†¿≥Ó¿¥2¿¥8¿¥Ö¿¥ÿ¿¥ﬁ¿µ(¿µ<¿µú¿µæ¿µ‚¿∂¿∂#¿∂E¿∂F¿∂x¿∂~¿∂∆¿∂Ã¿∑¿∑|¿∑Ã¿∑Í¿∑¿∏@¿∏Ñ¿∏Œ¿π¿πB¿πH¿πñ¿π©¿∫¿∫
¿∫¿∫ ¿∫l¿∫á¿∫‚¿ª ¿ª¿ª?¿ªÜ¿ª⁄¿º¿º@¿ºr¿º•¿º„¿Ω¿ΩH¿ΩÄ¿Ω∏¿ΩÒ¿æ(¿æ^¿æî¿æœ¿ø¿ø8¿øt¿ø®¿ø‹¿¿¿¿R¿¿ç¿¿¬¿¿Ú¿¡%¿¡W¿¡â¿¡∫¿¡Ó¿¬0¿¬g¿¬ò¿¬ÿ¿√¿√>¿√r¿√Æ¿√È¿ƒ¿ƒP¿ƒÄ¿ƒæ¿ƒÒ¿≈,¿≈a¿≈ï¿≈«¿≈˛¿∆1¿∆d¿∆ô¿∆‘¿«¿«5¿«h¿«ü¿«—¿»¿»<¿»v¿»¶¿»Ÿ¿…¿…D¿…y¿…¥¿…Í¿ *¿ \¿ ó¿ À¿À¿À4¿Àh¿Àõ¿À€¿Ã¿Ã<¿ÃA¿ÃB¿Ãj¿Ãp¿ÃΩ¿Ã√¿Õ¿Õ6¿Õè¿Õï¿Õ•¿Õ´¿Õ˜¿Œ¿Œ.¿Œ/¿ŒW¿Œ]¿Œ™¿Œ∞¿Œ¸¿œ`¿œÆ¿œÃ¿œ“¿– ¿–q¿–∫¿—
¿—-¿—3¿—C¿—I¿—ï¿—∞¿“¿“%¿“&¿“d¿“´¿“˝¿”-¿”r¿”∞¿”Â¿‘ ¿‘P¿‘U¿‘V¿‘b¿‘Ö¿‘ß¿‘∫¿‘¿¿‘‹¿‘¿‘ˆ¿’'¿’_¿’ê¿’¨¿’ﬁ¿’Ì¿÷¿÷I¿÷\¿÷ª¿◊¿◊¿◊¿◊*¿◊è¿◊ê¿◊∞¿◊÷¿◊◊¿ÿ¿ÿ¿ÿY¿ÿ©¿ÿÒ¿Ÿ¿Ÿ¿Ÿ#¿ŸN¿Ÿj¿Ÿô¿Ÿü¿Ÿ¿¿Ÿƒ¿Ÿ≈¿⁄
¿⁄¿⁄Z¿⁄•¿⁄¥¿⁄„¿⁄‰¿€¿€G¿€¿€©¿€Ø¿€›¿‹¿‹H¿‹N¿‹i¿‹m¿‹o¿‹p¿‹∑¿‹ª¿›¿›x¿›ì¿› ¿›÷¿›◊¿ﬁ(¿ﬁt¿ﬁ¬¿ﬁ‡¿ﬁÎ¿ﬁÏ¿ﬂ>¿ﬂá¿ﬂï¿ﬂñ¿ﬂË¿‡
¿‡¿‡¿‡¿‡d¿‡µ¿‡∆¿‡ ¿·¿·¿·F¿·e¿·}¿·ó¿·±¿·≈¿·À¿·Ã¿·ˆ¿‚¿‚¿‚e¿‚|¿‚ê¿‚ë¿‚›¿‚Ò¿‚Ú¿„¿„6¿„7¿„p¿„q¿„¡¿„—¿„Û¿‰¿‰¿‰0¿‰`¿‰g¿‰à¿‰ß¿‰Ã¿‰Ò¿ÂD¿ÂK¿ÂO¿ÂQ¿ÂR¿Âå¿Â‹¿Â›¿Ê'¿Ê+¿ÊÅ¿Êè¿Ê¨¿Êœ¿Á-¿Á.¿Áq¿ÁÖ¿ÁÜ¿Á®¿Á∆¿Á«¿ÁÌ¿Ë¿Ë¿Ë ¿Ë6¿Ëä¿Ëé¿Ëê¿Ëë¿Ë ¿ËŒ¿È$¿È(¿È~¿ÈÇ¿È´¿ÈØ¿ÈÌ¿Í+¿Í/¿Í=¿ÍA¿ÍÉ¿Í⁄¿Í¿Î*¿Î7¿Î8¿Îh¿Îs¿Îu¿Îv¿Î ¿ÎŒ¿Î‹¿Î‡¿Ï5¿Ïå¿Ï¶¿ÏÂ¿ÏÎ¿Ì=¿ÌW¿Ìd¿Ìe¿Ì∞¿Ì∂¿ÌÔ¿Ì˙¿Ì˚¿ÓG¿ÓM¿Óé¿Óö¿Óú  dart.uiÄ¨ _kUnsetGestureSetting_kFlutterKeyDataChannel_wrapUnmodifiableByteDataRootIsolateTokenPlatformDispatcherSystemColorSystemColorPalette_PlatformConfiguration_ViewConfiguration
FramePhase_FrameTimingInfoFrameTimingAppLifecycleStateAppExitResponseAppExitTypeViewPaddingViewConstraintsDisplayFeatureDisplayFeatureTypeDisplayFeatureStateLocaleDartPerformanceModeSemanticsActionEventViewFocusEventViewFocusStateViewFocusDirectiondart.ui.TimingsCallback.listÇThe callback takes a list of [FrameTiming] because it may not be
immediately triggered after each frame. Instead, Flutter tries to batch
frames together and send all their timings at once to decrease the
overhead (as this is available in the release mode). The list is sorted in
ascending order of time (earliest frame first). The timing of any frame
will be sent within about 1 second (100ms if in the profile/debug mode)
even if there are no later frames to batch. The timing of the first frame
will be sent immediately without batching./dart.ui.FrameTiming.fps_smoothness_millisecondsQTo ensure smooth animations of X fps, this should not exceed 1000/X
milliseconds.$dart.ui.FrameTiming.fps_milliseconds0That's about 16ms for 60fps, and 8ms for 120fps. ‹