ÅIdetachtoString_containerLayerestimatedBoundsrepaintCompositedChild_repaintCompositedChildupdateLayerProperties%debugInstrumentRepaintCompositedChild
paintChild_compositeChildappendLayer_isRecording_currentLayer	_recorder_canvascanvas_startRecordingaddCompositionCallbackstopRecordingIfNeededsetIsComplexHintsetWillChangeHintaddLayer	pushLayercreateChildContextpushClipRectpushClipRRectpushClipRSuperellipsepushClipPathpushColorFilterpushTransformpushOpacityisTightisNormalizeddebugAssertIsValid_ownerlistenerdisposeonNeedVisualUpdateonSemanticsOwnerCreatedonSemanticsUpdateonSemanticsOwnerDisposedrequestVisualUpdaterootNode	_rootNode_shouldMergeDirtyNodes_nodesNeedingLayoutnodesNeedingLayoutdebugDoingLayout_debugDoingLayout_debugDoingChildLayoutflushLayout#_debugAllowMutationsToDirtySubtrees_enableMutationsToDirtySubtrees"_nodesNeedingCompositingBitsUpdateflushCompositingBits_nodesNeedingPaintnodesNeedingPaintdebugDoingPaint_debugDoingPaint
flushPaintsemanticsOwner_semanticsOwner debugOutstandingSemanticsHandles_outstandingSemanticsHandlesensureSemantics_updateSemanticsOwner_didDisposeSemanticsHandle_debugDoingSemantics_nodesNeedingSemanticsflushSemanticsdebugDescribeChildrendebugFillProperties	_children	_manifold_debugParent_debugSetParent%_debugRootSuffixForTimelineEventNamesattach!_debugAllowChildListModifications
adoptChild	dropChildvisitChildrensemanticsEnabled
reassembledebugDisposed_debugDisposed
parentDatasetupParentDatadepth_depthredepthChildredepthChildrenparent_parentsemanticsParentdebugCreator_reportExceptiondebugDoingThisResize_debugDoingThisResizedebugDoingThisLayout_debugDoingThisLayoutdebugActiveLayout_debugActiveLayout_withDebugActiveLayoutCleareddebugCanParentUseSize_debugCanParentUseSize_debugMutationsLocked_debugCanPerformMutationsdebugLayoutParentownerattacheddebugNeedsLayout_needsLayout_isRelayoutBoundary debugDoingThisLayoutWithCallback_doingThisLayoutWithCallbackconstraints_constraintsdebugAssertDoesMeetConstraintsdebugCheckingIntrinsics._debugRelayoutBoundaryAlreadyMarkedNeedsLayoutmarkNeedsLayoutmarkParentNeedsLayout%markNeedsLayoutForSizedByParentChangescheduleInitialLayout_layoutWithoutResizelayoutdebugResetSizesizedByParentperformResizeperformLayoutinvokeLayoutCallbackdebugDoingThisPaint_debugDoingThisPaintdebugActivePaint_debugActivePaintisRepaintBoundary!debugRegisterRepaintBoundaryPaintalwaysNeedsCompositing_wasRepaintBoundaryupdateCompositedLayerlayer_layerHandle
debugLayer_needsCompositingBitsUpdatemarkNeedsCompositingBitsUpdate_needsCompositingneedsCompositing_updateCompositingBitsdebugNeedsPaint_needsPaintdebugNeedsCompositedLayerUpdate_needsCompositedLayerUpdatemarkNeedsPaintmarkNeedsCompositedLayerUpdate_skippedPaintingOnLayerscheduleInitialPaintreplaceRootLayer_paintWithContextpaintBounds
debugPaintpaintapplyPaintTransformpaintsChildgetTransformTodescribeApproximatePaintClipdescribeSemanticsClipscheduleInitialSemanticsdescribeSemanticsConfigurationsendSemanticsEventsemanticBoundsdebugNeedsSemanticsUpdatedebugSemanticsclearSemanticsmarkNeedsSemanticsUpdate
_semanticsvisitChildrenForSemanticsassembleSemanticsNodehandleEventtoStringShorttoStringDeeptoStringShallowshowOnScreendescribeForErrordebugValidateChild_childchild_needsRebuildlayoutCallbackrunLayoutCallbackscheduleLayoutCallbackpreviousSiblingnextSibling_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_childCount
childCount_firstChild
_lastChild_insertIntoChildListinsertaddaddAll_removeFromChildListremove	removeAllmove
firstChild	lastChildchildBefore
childAftersystemFontsDidChange'_hasPendingSystemFontsDidChangeCallBack_scheduleSystemFontsUpdateinitSemanticsAnnotations
properties_properties	container
_containerexplicitChildNodes_explicitChildNodesexcludeSemantics_excludeSemanticsblockUserActions_blockUserActionslocaleForSubtree_localeForSubtree_updateAttributedFields_effectiveAttributedLabel_effectiveAttributedValue"_effectiveAttributedIncreasedValue"_effectiveAttributedDecreasedValue_effectiveAttributedHint_attributedLabel_attributedValue_attributedIncreasedValue_attributedDecreasedValue_attributedHinttextDirection_textDirection_performTap_performLongPress_performDismiss_performScrollLeft_performScrollRight_performScrollUp_performScrollDown_performIncrease_performDecrease_performCopy_performCut_performPaste$_performMoveCursorForwardByCharacter%_performMoveCursorBackwardByCharacter_performMoveCursorForwardByWord _performMoveCursorBackwardByWord_performSetSelection_performSetText!_performDidGainAccessibilityFocus!_performDidLoseAccessibilityFocus_performFocusmergeIntoParentblocksUserActionstagsForChildrenlocaleForChildren==hashCode_renderObject_isEffectiveConfigWritable_originalConfiguration_effectiveConfigurationwasSemanticsBoundary	effectiveoriginalupdateConfig	absorbAllresetclearconfigToMergeUpmergesToSibling markSiblingConfigurationConflictrenderObject_hasSiblingConflict_blocksPreviousSibling_containsIncompleteFragmentbuiltcachedSemanticsNodesemanticsNodesmergeUpsiblingMergeGroups_producedSiblingNodesAndOwnersgeometryconfigProviderparentDataDirtycontributesToSemanticsTreeisRootshouldFormSemanticsNodedebugCheckForParentDataisBlockingPreviousSibling
shouldDropmarkNeedsBuildupdateChildren_getNonBlockedChildren_getTagsForChildren#_collectChildMergeUpAndSiblingGroup_didUpdateParentDataensureGeometry_updateChildGeometry_updateGeometryensureSemanticsNode_buildSemantics_buildSemanticsSubtree_produceSemanticsNode_createSemanticsNode_mergeSiblingGroup_updateSemanticsNodeGeometry_updateSiblingNodesGeometriesmarkNeedsUpdate_marksConflictsInMergeGroup	transformsemanticsClipRectpaintClipRectrecthiddencomputeChildGeometry_transformRect_temporaryTransformHolder_computeClipRect_intersectRects
ParentDataPaintingContextCallbackPaintingContextConstraintsRenderObjectVisitorLayoutCallback_LocalSemanticsHandlePipelineOwnerPipelineOwnerVisitorPipelineManifoldRenderObjectRenderObjectWithChildMixin#RenderObjectWithLayoutCallbackMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixinSemanticsAnnotationsMixin_SemanticsParentData_SemanticsConfigurationProvider_SemanticsFragment_IncompleteSemanticsFragment_MergeUpAndSiblingMergeGroups_RenderObjectSemantics"debugDumpRenderObjectSemanticsTree'_debugCollectRenderObjectSemanticsTrees_SemanticsGeometryClips_SemanticsGeometryDiagnosticsDebugCreatorÇüPictureRecorderDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringPropertyHitTestEntryHitTestResultsetupParentData	protectedmustCallSupervoidoverrideStringcanvasOffsetCanvasrepaintCompositedChildClipContextContainerLayerRectisRepaintBoundarybool_needsPaintdebugAlsoPaintedParent!debugRegisterRepaintBoundaryPaintincludedParentincludedChildOffsetLayer_layerHandlelayerupdateCompositedLayeroldLayerattachedoffsetremoveAllChildren	identical_needsCompositedLayerUpdatedebugCreatorruntimeTypechildContextpaintBounds_paintWithContextzerostopRecordingIfNeeded_wasRepaintBoundarycustomContextdebugOnProfilePaintcallgetSaveCountLayerremoveappendPictureLayerRendererBindinginstancecreatePictureRecordercreateCanvasCompositionCallbackaddCompositionCallbackVoidCallbackdebugRepaintRainbowEnabledPaintstylePaintingStylestrokestrokeWidthcolordebugCurrentRepaintColortoColordrawRectdeflatedebugPaintLayerBordersEnabledColorpictureendRecordingisComplexHintwillChangeHintalwaysNeedsCompositinghasChildrenchildPaintBoundsneedsCompositingClipRectLayerCliphardEdgeclipBehaviornoneshiftclipRectclipRectAndPaintClipRRectLayerRRect	antiAlias	clipRRectclipRRectAndPaintRSuperellipseClipRSuperellipseLayerclipRSuperellipseclipRSuperellipseAndPaintPathClipPathLayerclipPathclipPathAndPaintColorFilterColorFilterLayercolorFilterMatrix4TransformLayertranslationValuesdxdymultiplytranslateByDouble	transformMatrixUtilsinverseTransformRectsavestoragerestoreOpacityLayerintalphaobjectRuntimeTypehashCodeBoxConstraintsdebugAssertIsValid==toStringdebugDumpRenderTree	immutabledoublenanRenderConstrainedBoxadditionalConstraintslayoutvisitChildrenvisitChildrenForSemanticsinvokeLayoutCallbackTSemanticsHandledebugMaybeDispatchCreatedsemanticsOwneraddListenerdebugMaybeDispatchDisposedremoveListener_didDisposeSemanticsHandleDiagnosticableTreeMixinrequestVisualUpdateSemanticsUpdateFlutterViewSemanticsUpdateCallbackdetachattachList
nonVirtualIterablekReleaseModeMap#debugEnhanceLayoutTimelineArgumentslengthFlutterTimeline	startSync	arguments
isNotEmptysortadepthbiaddAllgetRange_needsLayoutowner_layoutWithoutResizechildflushLayoutisEmpty
finishSyncnode_needsCompositingBitsUpdate_updateCompositingBitsclearflushCompositingBits"debugEnhancePaintTimelineArgumentsupdateLayerProperties_skippedPaintingOnLayer
flushPaintsemanticsEnabledSemanticsOwnerSemanticsBinding debugOutstandingSemanticsHandles
DeprecatedensureSemantics_listeneronSemanticsUpdatedisposeSetscheduleInitialSemanticswhereobjecttoList
_semanticsparentDataDirtyupdateChildrendebugCheckForParentDataensureGeometryreversedensureSemanticsNodesendSemanticsUpdateflushSemanticstoDiagnosticsNodedebugFillPropertiesadddefaultValue_debugParent	drawFramecontainsforEach
adoptChild
ListenableonNeedVisualUpdateSchedulerBindingensureVisualUpdate	RenderBoxRenderObjectElementPictureImageSizesize
RenderViewhitTestmarkNeedsLayoutHitTestTargetdebugPaintSizeEnabledBindingBasereassembleApplication
reassemble
parentData_depthredepthChildrenOverlayPortalvisibleForOverriding_parentparent_isRelayoutBoundaryDebugCreatorwidgetsObject
StackTracereportErrorFlutterErrorDetails	exceptionstacklibrarycontextinformationCollector
kDebugModeDiagnosticsTreeStyletruncateChildrenpragma	fromPartserrorPropertydebugDoingLayout#_debugAllowMutationsToDirtySubtrees_doingThisLayoutWithCallback_debugMutationsLockeddebugLayoutParentdebugActiveLayoutdebugDoingThisLayoutperformLayoutconfigProvider	effectiveisSemanticBoundarybuiltRenderSliverSliverGeometry
StateError_debugDoingThisLayoutdebugPrintMarkNeedsLayoutStacksdebugPrintStacklabel_nodesNeedingLayout_debugDoingLayoutdebugPrintLayouts
debugPrintedebugProfileLayoutsEnabledtoTimelineArgumentsisAppliedConstraintcurrentsplitPatternRegExpmatchAsPrefixMatch
groupCountgrouptrimparentUsesSizeisTightcomputeDryLayoutoverlayChildLayoutBuilder	GlobalKey_enableMutationsToDirtySubtreesRepaintBoundaryLayerHandlemarkNeedsCompositingBitsUpdate"_nodesNeedingCompositingBitsUpdate_nodesNeedingPaintremoveWheretdebugDoingPaintdebugPrintMarkNeedsPaintStacksmarkNeedsPaintRenderOpacity_debugDoingPaintdebugProfilePaintsEnableddescribeForError
paintChildRenderOffstagepaintsChildrootNodeidentityindexapplyPaintTransforminvertpushClipRectSemanticsNodeRenderViewportBasecacheExtent_debugDoingSemantics_semanticsOwner_nodesNeedingSemanticsSemanticsConfigurationSemanticsEvent	sendEventcachedSemanticsNodeisMergedIntoParentsendSemanticsEventclearSemanticsmarkNeedsUpdate
updateWithconfigchildrenInInversePaintOrderPointerEventdescribeIdentityDiagnosticLevelinfodebugtoStringDeepprefixLineOneprefixOtherLinesminLevel	wrapWidthtoStringShallowjoinervalueifTrueleveltooltipmissingIfNull+isBlockingSemanticsOfPreviouslyPaintedNodesshowInViewportSingleChildScrollViewDurationCurveCurveseaseshowOnScreen
descendantrectdurationcurveshallownameSingleChildRenderObjectWidget	ChildTypeErrorSpacer_child	dropChildredepthChildlayoutCallbackscheduleLayoutCallbackOverlayOverlayEntryLayoutBuilderrunLayoutCallbackSliverLayoutBuilder_needsRebuilddebugNeedsLayoutnextSiblingpreviousSibling
firstChild	lastChildParentDataTypeRenderBoxContainerDefaultsMixinContainerBoxParentDataMultiChildRenderObjectWidget!SlottedContainerRenderObjectMixinequals_childCountafter_firstChild
_lastChild_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_insertIntoChildListinsert_removeFromChildListsystemFontsDidChangeTextPainter	ParagraphSchedulerPhasetransientCallbacksidleschedulerPhase'_hasPendingSystemFontsDidChangeCallBackscheduleFrameCallbackdebugDisposedPaintingBindingsystemFonts_scheduleSystemFontsUpdateSemanticsPropertiesLocaleTextDirection_properties
properties
_container	container_explicitChildNodesexplicitChildNodes_excludeSemanticsexcludeSemantics_blockUserActionsblockUserActions_localeForSubtreelocaleForSubtree_textDirectiontextDirection_updateAttributedFieldsmarkNeedsSemanticsUpdateExcludeSemantics	SemanticsSemanticsActiontap	longPress_attributedLabel_effectiveAttributedLabel_attributedValue_effectiveAttributedValue_attributedIncreasedValue"_effectiveAttributedIncreasedValue_attributedDecreasedValue"_effectiveAttributedDecreasedValue_attributedHint_effectiveAttributedHintAttributedStringattributedLabelattributedValueattributedIncreasedValueincreasedValueattributedDecreasedValuedecreasedValueattributedHinthintdescribeSemanticsConfigurationisBlockingUserActionsscopesRoutetoggledcheckedenabled	isEnabled	isCheckedmixedisCheckStateMixed	isToggledselected
isSelectedbuttonisButtonexpanded
isExpandedlinkisLinklinkUrlsliderisSliderkeyboardKeyisKeyboardKeyheaderisHeaderheadingLevel	textFieldisTextFieldreadOnly
isReadOnly	focusableisFocusablefocused	isFocusedinMutuallyExclusiveGroupisInMutuallyExclusiveGroupobscured
isObscured	multilineisMultilinehiddenisHiddenimageisImage
isRequired
identifierhintOverrides
namesRoute
liveRegionmaxValueLengthcurrentValueLengthsortKeytagForChildrenaddTagForChildrenrolecontrolsNodesvalidationResult	inputTypeonTap_performTaponLongPress_performLongPress	onDismiss_performDismissonScrollLeft_performScrollLeftonScrollRight_performScrollRight
onScrollUp_performScrollUponScrollDown_performScrollDown
onIncrease_performIncrease
onDecrease_performDecreaseonCopy_performCopyonCut_performCutonPaste_performPasteonMoveCursorForwardByCharacter$_performMoveCursorForwardByCharacteronMoveCursorBackwardByCharacter%_performMoveCursorBackwardByCharacteronMoveCursorForwardByWord_performMoveCursorForwardByWordonMoveCursorBackwardByWord _performMoveCursorBackwardByWordonSetSelection_performSetSelection	onSetText_performSetTextonDidGainAccessibilityFocus!_performDidGainAccessibilityFocusonDidLoseAccessibilityFocus!_performDidLoseAccessibilityFocusonFocus_performFocuscustomSemanticsActionsTextSelectionMergeSemanticsIgnorePointerAbsorbPointercontributesToSemanticsTreeshouldFormSemanticsNodeSemanticsTagmergeIntoParentblocksUserActionslocaleForChildren	setEqualstagsForChildrenhashhashAllUnorderedoriginalchildConfigurationsDelegateValueSettercopyabsorbRenderParagraphhasBeenAnnotatedsemanticsParent_getNonBlockedChildrenBlockSemanticsisBlockingPreviousSiblingisInvisible	whereType	semanticsmarkNeedsBuildresetisMergingSemanticsOfDescendants$1$2	isMergeUpmapfragmentconfigToMergeUp	absorbAllchildSemantics	_childrensiblingMergeGroupsupdateConfiglocalerenderChildtoSet$ChildSemanticsConfigurationsDelegaterenderObject_didUpdateParentDatamergeUp"ChildSemanticsConfigurationsResultsemanticBoundsrootcomputeChildGeometryparentPaintClipRectpaintClipRectparentSemanticsClipRectsemanticsClipRectparentTransform_updateGeometrynewGeometryexpandsiblingChildexplicitSiblingChildusedSemanticsIdstagsid_buildSemanticssemanticsNodesassembleSemanticsNodemergesToSiblingexplicitChildMapEntryentriesentry	intersecttransformRectexpandToIncludekeywasSemanticsBoundarygeometry_blocksPreviousSibling markSiblingConfigurationConflictisCompatibleWithjquotedrenderViews
renderViewjoinclonesetZerolastisZerodescribeApproximatePaintClipsetIdentitydescribeSemanticsClip	ClipContextSemanticsHandleDiagnosticableTreeMixin
ListenableHitTestTargetRenderObject
ParentData_SemanticsFragmentDiagnosticsPropertyâFé60*>‘¯≤o4hiÉ,ÑrDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringProperty Çˇpackage:flutter/foundation.dartÑõÑªHitTestEntryHitTestResult Ñtpackage:flutter/gestures.dart  ÑΩpackage:flutter/painting.dart 
Å∞ÅƒPictureRecorder Åö   Å™Å≠uiÅ≠dart:ui  Å»   package:flutter/animation.dart  ÅÒ   package:flutter/foundation.dart  Ç   package:flutter/gestures.dart  ÇC   package:flutter/painting.dart  Çk   package:flutter/scheduler.dart  Çî   package:flutter/semantics.dart  Çæ   binding.dart  Ç’   
debug.dart  ÇÍ   
layer.dart¿n ¿–7ôn <ÄÜÄ§Ä•ÄøÄ√ÄÚÄˆÅÅ2ÅSÅoÅèÅòÅôÅ∆Å«ÅÇÇBÇjÇìÇºÇΩÇ‘ÇÈÇ˛ÇˇÉ(É1ÉVÉoÉåÉ§É∫É‘ÉÁÉ˝ÑÑ)ÑGÑ\ÑtÑΩÑÂÑÊÖ.Ö2Ö|ÖƒÖ¯Ö¸Ü
ÜÜYÜûÜ±ÜÓÜ˚ááá á,áMáOáPáÖáâá⁄à&à*à`àπà∫à–à‘â&âkâµâ…âÕäänäæãã"ã&ãmã´ã◊ã˘ãˇåGå^åkå™å´å”å‘ç!çhçnç©çØç˚éééAéGéíéﬂè0èLèRèbèhè∏èŸê;êZêÆê≤ê≥ê⁄êÙëë@ëGëlë|ë≥ë‚íí/í8íKíUíùíªí·ììì_ì™ìıîîiîûî´îËïïïEïZïfïåïÊïÙñ!ñuñÿó#ó,óaógóñóóó‘ò	òòcòvòÄòÅò∆ò˛òˇôNôÇôøôÈôÌôÓö<öBöçö⁄õ(õcõiõyõõœõú*úlúåú∫úªùù$ù4ù^ùqù{ù”ùﬂû
û\ûΩüüü@üoüsütü¡††E†K†[†a†Æ†»†˝°°@°l°s°É°¢°±°È¢¢¢*¢4¢8¢9¢]¢c¢±£ £P£á£ó£ø£“£‹£›§ §§E§ì§‹••?•f•ì•†•Õ•”•◊•ÿ¶¶/¶T¶ë¶í¶‘ßßRß_ßéß¥ßºßŒ®®:®à®ù®©®Ø®‰©7©]©Ä©Ñ©Ö©—©‡©Ê™/™u™¢™®™ı´´´7´R´f´â´ç´é´®´‘´‰´˚¨"¨E¨f¨u¨ú¨ø¨‡¨Ë¨˚≠≠≠≠ ≠5≠T≠u≠à≠â≠≠≠≥≠˝ÆGÆfÆrÆàÆ£ÆºÆ¬ÆÂÆ˙Æ˛ÆˇØØ5ØhØ™ØÎ∞∞∞∞m∞|∞Ç∞–±±h±®±Æ±Í±≤ ≤+≤q≤Æ≤≤≤≥≤Ó≤Ù≥@≥è≥ﬁ≥Î≥Ò¥@¥ã¥ù¥™¥ª¥‹¥ıµµ	µµAµeµéµ¨µ‰∂"∂*∂U∂y∂¢∂¿∂Ì∑∑&∑9∑C∑{∑ï∑´∑ø∑√∑ƒ∏∏(∏.∏}∏∆∏’∏€π&πvπ¬π‰∫ ∫!∫:∫@∫i∫m∫n∫¡∫«ªª`ª≠ªﬂªÂº0ºÄºÃºÓΩΩ,ΩEΩKΩuΩyΩzΩØΩµææAæGæîæÊø6ø|øÇøíøòøÊøÛ¿ @¿ @/¿ @G¿ @K¿ @L¿ @ù¿ @Ï¿ A<¿ A^¿ Ad¿ A≥¿ A˜¿ B¿ B¿ BV¿ B¶¿ Bˆ¿ CD¿ Cá¿ Cú¿ C¢¿ CÛ¿ DD¿ Dë¿ D‚¿ E2¿ Ep¿ Ev¿ EÜ¿ Eå¿ E◊¿ EÎ¿ E˝¿ F¿ FA¿ FV¿ Fr¿ Fy¿ F«¿ G¿ G:¿ G`¿ Gf¿ GÉ¿ G†¿ G›¿ GÔ¿ H¿ H!¿ H"¿ HE¿ Ho¿ Hs¿ Ht¿ Hº¿ H¬¿ I¿ I¿ Id¿ Iî¿ Iò¿ Iô¿ I»¿ IŒ¿ J ¿ Jh¿ Jü¿ JÎ¿ K;¿ Ky¿ KΩ¿ K√¿ L¿ LU¿ Lj¿ Lp¿ L∏¿ M¿ MJ¿ M_¿ Me¿ M∂¿ M˛¿ N¿ N¿ Nd¿ N•¿ N´¿ NÙ¿ N˙¿ OD¿ Oë¿ O’¿ P%¿ Pu¿ PΩ¿ Q	¿ Q?¿ QT¿ Qs¿ Qé¿ Q°¿ Q¥¿ Q€¿ R¿ R¿ R&¿ RK¿ Rh¿ R{¿ RÅ¿ Rπ¿ R’¿ S¿ S ¿ SD¿ Sk¿ S∂¿ S ¿ S◊¿ T:¿ TM¿ TS¿ TW¿ TX¿ Tè¿ Tï¿ T‰¿ TÍ¿ U/¿ U5¿ UÖ¿ U»¿ UŒ¿ V¿ Vi¿ Vê¿ Vñ¿ VÁ¿ W)¿ W/¿ WÄ¿ WÜ¿ WÕ¿ WÓ¿ X	¿ X¿ X-¿ XB¿ Xi¿ Xë¿ XØ¿ X∂¿ X€¿ X¯¿ Y¿ Y¿ YE¿ YÄ¿ Yú¿ Y›¿ YÈ¿ Z¿ Z6¿ Z¿ Zì¿ Z†¿ [¿ [¿ [¿ [ ¿ [!¿ [[¿ [a¿ [∞¿ [∂¿ [˚¿ \¿ \Q¿ \î¿ \ö¿ \ı¿ ]@¿ ]g¿ ]m¿ ]∆¿ ^¿ ^¿ ^g¿ ^m¿ ^Ω¿ ^√¿ _
¿ _;¿ _V¿ _i¿ _z¿ _ü¿ _∆¿ _Ó¿ `¿ `¿ `@¿ `]¿ `p¿ `v¿ `™¿ `Ò¿ a¿ a^¿ aj¿ aî¿ aª¿ b¿ b¿ b%¿ bF¿ b[¿ bq¿ bá¿ b¨¿ bµ¿ b»¿ bŒ¿ b“¿ b”¿ b˝¿ c¿ cR¿ cX¿ cù¿ c£¿ cÛ¿ d6¿ d<¿ dã¿ d÷¿ dÚ¿ d¯¿ eH¿ eâ¿ eè¿ e”¿ eŸ¿ f ¿ f?¿ fZ¿ fm¿ f~¿ fë¿ f∏¿ f‡¿ f˝¿ g¿ g)¿ gF¿ gY¿ g_¿ gì¿ gÀ¿ gÁ¿ h&¿ h2¿ hV¿ h}¿ h∆¿ h⁄¿ hÁ¿ iH¿ i[¿ ia¿ ie¿ if¿ iò¿ iû¿ i‡¿ iÊ¿ j7¿ j]¿ jc¿ j≥¿ j˙¿ k ¿ kG¿ kM¿ kö¿ kÏ¿ l<¿ lÇ¿ l¶¿ lπ¿ l÷¿ l˝¿ m¿ m$¿ mg¿ må¿ m≥¿ m≈¿ m…¿ m ¿ m˚¿ n¿ nP¿ nV¿ nß¿ nÕ¿ n”¿ o¿ op¿ o©¿ oØ¿ p ¿ pB¿ pH¿ pè¿ p∞¿ pÀ¿ pﬁ¿ pı¿ q¿ q:¿ qA¿ qù¿ qπ¿ qÚ¿ r¿ rO¿ r{¿ rå¿ rõ¿ r¨¿ rº¿ s¿ s&¿ s:¿ sG¿ sT¿ se¿ sñ¿ s≥¿ sÀ¿ sﬁ¿ s‰¿ sË¿ sÈ¿ t¿ t!¿ tn¿ tö¿ t†¿ t¿ u9¿ uâ¿ uè¿ u‹¿ v¿ v"¿ vi¿ vo¿ vº¿ w¿ w^¿ w§¿ w¿¿ w”¿ w‚¿ x	¿ x%¿ x,¿ xg¿ xq¿ xá¿ x†¿ xÃ¿ xﬁ¿ x‚¿ x„¿ xÔ¿ y¿ yÅ¿ yÉ¿ yÑ¿ yØ¿ y≥¿ yˇ¿ z@¿ zD¿ zj¿ zn¿ zæ¿ {
¿ {.¿ {2¿ {Å¿ {—¿ |¿ |"¿ |r¿ |¿¿ }¿ }[¿ }h¿ }l¿ }¥¿ ~¿ ~M¿ ~é¿ ~ﬁ¿ .¿ |¿ ¬¿ ﬁ¿ ‚¿ Ä1¿ Ä|¿ ÄÀ¿ Å¿ ÅK¿ Åõ¿ Å≥¿ Å∑¿ Ç¿ ÇS¿ Ç¢¿ Çº¿ Ç¿¿ É¿ Éa¿ Él¿ Éâ¿ É⁄¿ Ñ"¿ Ñ9¿ Ñ:¿ ÑÑ¿ Ñò¿ Ñô¿ Ñ€¿ ÑÙ¿ Ñı¿ Ö#¿ Ö)¿ Öl¿ Ör¿ Ö¡¿ Ö›¿ Ö„¿ Ü1¿ ÜÅ¿ Ü–¿ á¿ áR¿ á£¿ áÙ¿ à¿ à¿ àY¿ à¶¿ àﬂ¿ àÂ¿ â'¿ âC¿ âi¿ âô¿ â†¿ â∫¿ â”¿ â◊¿ âŸ¿ â⁄¿ ä¿ ä#¿ äz¿ äª¿ äº¿ ä˜¿ ä˚¿ ã,¿ ãz¿ ã{¿ ã¥¿ å¿ åX¿ åt¿ å©¿ åØ¿ å≥¿ å¥¿ å“¿ å”¿ ç¿ ç=¿ ç>¿ çJ¿ ç]¿ çã¿ çß¿ çﬂ¿ çÂ¿ é¿ é¿ é¿ é¿ éL¿ éP¿ é†¿ éÒ¿ è>¿ èV¿ èZ¿ è•¿ èÏ¿ ê6¿ êb¿ ê´¿ ê˘¿ ëI¿ ëö¿ ëË¿ í0¿ ív¿ íƒ¿ ì¿ ìO¿ ìõ¿ ìÈ¿ î6¿ î:¿ îâ¿ î”¿ ï ¿ ï>¿ ïB¿ ïì¿ ï·¿ ñ0¿ ñ}¿ ñ…¿ ó¿ óX¿ ó\¿ ó®¿ óˆ¿ òF¿ òê¿ òø¿ ò˜¿ ô¿ ô¿ ôj¿ ô∑¿ ô›¿ ôÔ¿ ö¿ ö.¿ öJ¿ öm¿ öt¿ öø¿ ö√¿ öƒ¿ õ¿ õ8¿ õ>¿ õè¿ õ‹¿ ú)¿ úH¿ úN¿ úï¿ ú‚¿ ù+¿ ùU¿ ùV¿ ùú¿ ù¢¿ ùÍ¿ û ¿ û/¿ û0¿ ûá¿ ûç¿ û‚¿ ü¿ üC¿ üD¿ üå¿ üí¿ ü”¿ †¿ †¿ †J¿ †P¿ ††¿ †«¿ †Ê¿ °¿ °)¿ °6¿ °^¿ °d¿ °h¿ °i¿ °Æ¿ °Ÿ¿ °Ù¿ ¢¿ ¢8¿ ¢F¿ ¢L¿ ¢e¿ ¢|¿ ¢ô¿ ¢ù¿ ¢û¿ ¢Í¿ £5¿ £r¿ £w¿ £¿¿ §¿ §U¿ §ç¿ §í¿ §Œ¿ •¿ •l¿ •∏¿ •Õ¿ •Ù¿ ¶1¿ ¶2¿ ¶á¿ ¶≠¿ ¶≥¿ ¶¯¿ ßA¿ ßè¿ ß’¿ ß€¿ ®,¿ ®2¿ ®Ä¿ ®ç¿ ®õ¿ ®„¿ ®‰¿ ©"¿ ©(¿ ©h¿ ©n¿ ©±¿ ©Õ¿ ©ˇ¿ ™!¿ ™H¿ ™I¿ ™ã¿ ™ë¿ ™·¿ ´,¿ ´b¿ ´h¿ ´±¿ ´»¿ ´·¿ ¨¿ ¨&¿ ¨Y¿ ¨é¿ ¨ ¿ ¨¸¿ ≠	¿ ≠¿ ≠(¿ ≠4¿ ≠U¿ ≠ç¿ ≠∏¿ ≠¡¿ ≠«¿ ≠◊¿ ≠˜¿ Æ
¿ Æ¿ Æ¿ ÆM¿ Æv¿ Æπ¿ ÆÈ¿ Ø9¿ Øo¿ Øó¿ Ø√¿ Øı¿ ∞J¿ ∞_¿ ∞m¿ ∞y¿ ∞¨¿ ∞Â¿ ±¿ ±¿ ±$¿ ±o¿ ±í¿ ±∫¿ ±¬¿ ±√¿ ±’¿ ±¸¿ ≤¿ ≤¿ ≤R¿ ≤o¿ ≤w¿ ≤Ö¿ ≤™¿ ≤¿ ≤˘¿ ≥	¿ ≥/¿ ≥A¿ ≥d¿ ≥å¿ ≥°¿ ≥≠¿ ≥»¿ ≥Ó¿ ≥ˆ¿ ≥¸¿ ¥ ¿ ¥¿ ¥O¿ ¥†¿ ¥Ì¿ µ<¿ µi¿ µù¿ µû¿ µÃ¿ ∂¿ ∂+¿ ∂?¿ ∂O¿ ∂Ö¿ ∂∑¿ ∂ ¿ ∂‘¿ ∂ﬁ¿ ∂¿ ∑ ¿ ∑%¿ ∑7¿ ∑p¿ ∑Ö¿ ∑ë¿ ∑ó¿ ∑õ¿ ∑ú¿ ∑Ó¿ ∑Ô¿ ∏'¿ ∏-¿ ∏{¿ ∏è¿ ∏Ø¿ ∏»¿ π,¿ π2¿ πñ¿ π‡¿ ∫$¿ ∫K¿ ∫S¿ ∫Y¿ ∫â¿ ∫º¿ ∫‡¿ ∫Ê¿ ∫Ú¿ ª$¿ ªh¿ ªo¿ ªà¿ ª¨¿ ª≤¿ ª∂¿ ª∑¿ ªÛ¿ ªÙ¿ ºF¿ ºL¿ ºô¿ ºÓ¿ Ω6¿ Ωã¿ Ωü¿ Ω•¿ ΩÏ¿ Ω˘¿ æ¿ æM¿ æN¿ æã¿ æë¿ æ–¿ æ÷¿ ø¿ ø5¿ øe¿ øÜ¿ øá¿ øæ¿ øƒ¿ ¿¿ ¿]¿ ¿Æ¿ ¿¥¿ ¿˝¿ ¡¿ ¡,¿ ¡_¿ ¡q¿ ¡£¿ ¡ÿ¿ ¬¿ ¬D¿ ¬Q¿ ¬[¿ ¬p¿ ¬|¿ ¬ù¿ ¬‘¿ ¬ˇ¿ √¿ √¿ √¿ √*¿ √K¿ √`¿ √l¿ √¨¿ √Ÿ¿ √⁄¿ ƒ¿ ƒ=¿ ƒï¿ ƒ∆¿ ≈"¿ ≈U¿ ≈Å¿ ≈•¿ ≈·¿ ≈ˆ¿ ∆1¿ ∆?¿ ∆R¿ ∆~¿ ∆ä¿ ∆î¿ ∆ú¿ ∆—¿ ∆Ì¿ ∆ı¿ «¿ «'¿ «m¿ «v¿ «Ü¿ «ò¿ «∫¿ «œ¿ «€¿ «ˆ¿ »¿ »$¿ »*¿ ».¿ »/¿ »|¿ »Ç¿ »”¿ …#¿ …T¿ …û¿ …Ë¿  5¿  G¿  M¿  ñ¿  ≥¿  Ï¿ À¿ À¿ À"¿ À(¿ Àt¿ Àƒ¿ Ã¿ Ã¿ ÃX¿ Ãâ¿ Ãƒ¿ Ã»¿ Õ¿ Õ<¿ Õ=¿ ÕO¿ ÕU¿ Õ†¿ Õ¿ Œ)¿ Œ8¿ Œ¨¿ œ¿ œ>¿ œB¿ œÄ¿ œß¿ œƒ¿ œ¯¿ œ¸¿ œ˝¿ –¿ –t¿ –ô¿ –©¿ –Œ¿ —,¿ —7¿ —à¿ —±¿ —π¿ —„¿ “¿ “#¿ “K¿ “Q¿ “U¿ “V¿ “|¿ “°¿ “»¿ “Â¿ “È¿ “Í¿ ”¿ ”T¿ ”U¿ ”°¿ ”Ø¿ ”µ¿ ”Í¿ ‘3¿ ‘9¿ ‘Ü¿ ‘¡¿ ’ ¿ ’¿ ’O¿ ’û¿ ’π¿ ’”¿ ’ˆ¿ ÷¿ ÷
¿ ÷#¿ ÷w¿ ÷}¿ ÷¢¿ ÷≤¿ ÷’¿ ÷Ë¿ ÷Ú¿ ÷¸¿ ◊N¿ ◊ü¿ ◊Á¿ ÿ¿ ÿI¿ ÿj¿ ÿ∆¿ ÿﬁ¿ Ÿ)¿ ŸO¿ Ÿj¿ Ÿ©¿ Ÿ±¿ ŸÈ¿ ⁄¿ ⁄N¿ ⁄§¿ ⁄ˆ¿ €E¿ €d¿ €q¿ €¬¿ ‹¿ ‹'¿ ‹1¿ ‹[¿ ‹c¿ ‹~¿ ‹§¿ ‹¨¿ ‹≠¿ ‹ø¿ ‹˚¿ ›¿ ›`¿ ›j¿ ›¿ ›ã¿ ›å¿ ›ß¿ ›Ê¿ ›Ó¿ ﬁ&¿ ﬁU¿ ﬁq¿ ﬁÖ¿ ﬁè¿ ﬁπ¿ ﬁ¡¿ ﬁ‹¿ ﬂ¿ ﬂ
¿ ﬂ¿ ﬂ&¿ ﬂj¿ ﬂr¿ ﬂ≥¿ ﬂ‚¿ ﬂ˛¿ ‡¿ ‡¿ ‡K¿ ‡S¿ ‡n¿ ‡î¿ ‡ú¿ ‡ù¿ ‡À¿ · ¿ · ¿ ·(¿ ·6¿ ·^¿ ·§¿ ·≠¿ ·Ω¿ ·œ¿ ·ı¿ ‚
¿ ‚¿ ‚1¿ ‚W¿ ‚_¿ ‚e¿ ‚i¿ ‚j¿ ‚v¿ ‚®¿ ‚∆¿ „¿ „¿ „¿ „ ¿ „,¿ „q¿ „ú¿ „˝¿ ‰¿ ‰¿ ‰¿ ‰¿ ‰R¿ ‰q¿ ‰r¿ ‰ë¿ ‰÷¿ ‰˜¿ Â¿ Â¿ Â¿ Âj¿ Âk¿ Â∏¿ Âæ¿ Ê	¿ ÊX¿ Ê{¿ Ê¶¿ Ê≈¿ Êﬂ¿ Á¿ Á/¿ Á0¿ Ác¿ ÁÅ¿ Áá¿ Áã¿ Áå¿ Áπ¿ Áø¿ Ë
¿ Ë[¿ Ë}¿ Ëè¿ ËÆ¿ Ë‰¿ Ë˙¿ ÈI¿ Èö¿ È€¿ È‹¿ Í¿ Í%¿ Í+¿ Í/¿ Í0¿ Íu¿ Íº¿ Î
¿ ÎY¿ Îâ¿ Î÷¿ Î◊¿ Ï¿ Ï	¿ ÏX¿ Ï•¿ ÏÚ¿ Ì=¿ Ìä¿ ÌŸ¿ Ó*¿ ÓJ¿ ÓP¿ Óë¿ Óµ¿ Óª¿ Ô¿ Ô[¿ Ôa¿ Ôå¿ Ôµ¿ Ô›¿ ¿ ^¿ x¿ ë¿ µ¿ ª¿ ÿ¿ ¯¿ ˛¿ Ò¿ Ò¿ ÒL¿ ÒR¿ Ò£¿ Òµ¿ Òª¿ Ú
¿ ÚY¿ ÚÅ¿ Ú©¿ Ú–¿ Û)¿ ÛF¿ Û_¿ ÛÉ¿ Ûâ¿ Û¶¿ Ûº¿ Û¬¿ Û∆¿ Û«¿ Ù¿ Ù¿ Ù%¿ Ù+¿ ÙQ¿ Ùy¿ ÙÆ¿ ÙŒ¿ Ù“¿ Ù”¿ ı¿ ı¿ ıa¿ ı∞¿ ˆ¿ ˆ¿ ˆC¿ ˆV¿ ˆu¿ ˆì¿ ˆ≤¿ ˆ‘¿ ˜¿ ˜"¿ ˜>¿ ˜_¿ ˜è¿ ˜Ø¿ ˜”¿ ˜◊¿ ˜Ÿ¿ ˜⁄¿ ¯¿ ¯¿ ¯L¿ ¯è¿ ¯ê¿ ¯∏¿ ¯º¿ ¯¸¿ ˘I¿ ˘ò¿ ˘Ê¿ ˙3¿ ˙Z¿ ˙^¿ ˙Æ¿ ˙ˇ¿ ˚E¿ ˚e¿ ˚i¿ ˚∑¿ ¸¿ ¸;¿ ¸Ü¿ ¸»¿ ¸Œ¿ ˝¿ ˝`¿ ˝f¿ ˝v¿ ˝|¿ ˝√¿ ˛¿ ˛¿ ˛¿ ˛m¿ ˛ª¿ ˛‘¿ ˛⁄¿ ˇ+¿ ˇx¿ ˇ≈¿ ˇ‰¿ ˇÍ¿ 1¿ Ä¿ Œ¿ ‘¿ ‰¿ Í¿3¿u¿ì¿ï¿ñ¿∏¿º¿ ¿ ¿$¿g¿k¿∑¿¿R¿r¿v¿¡¿¿X¿®¿ı¿D¿î¿ª¿ø¿¿*¿.¿?¿C¿ê¿‡¿1¿K¿O¿õ¿È¿9¿ä¿»¿Ã¿Û¿˜¿	=¿	ã¿	ÿ¿
#¿
r¿
¿¿¿^¿¶¿ı¿B¿ç¿Œ¿“¿!¿q¿¬¿˛¿¿¿¿\¿£¿ø¿√¿¿b¿Æ¿˚¿@¿Å¿Ö¿’¿¿¿ ¿$¿o¿û¿¢¿Ô¿=¿é¿÷¿ ¿n¿ª¿‡¿‰¿¿¿g¿∏¿¿S¿§¿ª¿ø¿¿¿#¿c¿±¿¬¿∆¿¿b¿f¿ô¿ù¿Ô¿?¿é¿Ÿ¿$¿(¿v¿√¿¿^¿≠¿¸¿1¿Ç¿“¿ﬂ¿3¿e¿x¿¬¿¿4¿8¿9¿à¿◊¿"¿Q¿W¿ò¿È¿5¿T¿Z¿¶¿¨¿º¿¬¿Ô¿ ¿ ¿ B¿ X¿ x¿ °¿ ª¿ √¿ «¿ »¿ Ó¿ Ù¿!1¿!M¿!a¿!q¿!í¿!•¿!Ø¿!ƒ¿!»¿!…¿!Ë¿!È¿"!¿"'¿"r¿"¡¿#¿#K¿#î¿#‰¿#¸¿$¿$M¿$t¿$z¿$∂¿$«¿$⁄¿$˜¿%%¿%D¿%T¿%°¿%≥¿%·¿%Ù¿&¿&Ö¿&ì¿&†¿&Ω¿&–¿&⁄¿&ﬁ¿&ﬂ¿&Î¿&Ï¿'¿'"¿'o¿'æ¿(¿(L¿(R¿(ù¿(Ã¿)¿)Z¿)´¿)˜¿*C¿*~¿*ò¿*ô¿*⁄¿*‡¿+0¿+a¿+ò¿+ø¿+Í¿,¿,¿,¿,¿,V¿,\¿,¨¿,Ù¿-1¿-7¿-Ö¿-–¿. ¿.o¿.µ¿/¿/¿/S¿/£¿/¬¿/›¿/Ô¿/¿0A¿0P¿0V¿0ó¿0§¿0Œ¿0¿1¿13¿1R¿1X¿1\¿1]¿1ó¿1ù¿1Ó¿2&¿23¿2O¿2P¿2ã¿2ë¿2—¿2¯¿3¿3¿3Z¿3`¿3é¿3î¿3⁄¿3Ù¿4¿4<¿4=¿4Ö¿4ã¿4⁄¿5-¿5>¿5K¿5s¿5ñ¿5¶¿5∆¿5Í¿6¿6¿6X¿6k¿6u¿6v¿6í¿6©¿6œ¿6Ô¿7	¿7¿7:¿7@¿7Y¿7]¿7^¿7∞¿7∂¿8¿8X¿8i¿8v¿8ù¿8¿¿8Ë¿9¿98¿9`¿9f¿9Ü¿9£¿9Ω¿9—¿9Á¿9Ì¿:¿:*¿:J¿:N¿:O¿:ì¿:ô¿:È¿;¿;¿;]¿;c¿;Å¿;á¿;ó¿;ù¿;Ò¿<	¿<
¿<W¿<u¿<ê¿<Æ¿<ƒ¿<Í¿=!¿=X¿=™¿=◊¿>1¿>M¿>®¿>µ¿?¿?W¿?§¿?ﬂ¿@9¿@D¿@M¿@T¿@X¿@Y¿@§¿@™¿@˜¿A¿A>¿Ad¿Ae¿A∞¿A∂¿B¿B¿BJ¿Bp¿Bq¿B¨¿B≤¿Bˇ¿C¿CO¿Cz¿C{¿C¬¿D¿DY¿Dv¿Dï¿D≥¿D”¿E¿EB¿ER¿Eà¿E©¿Eº¿E∆¿E‰¿EÙ¿F*¿F=¿FG¿FZ¿F^¿F_¿FØ¿Fª¿F¡¿G¿G¿GM¿Gä¿G™¿G´¿G—¿G“¿H¿H¿H^¿HÆ¿H¿Hˆ¿ID¿Ik¿IÅ¿Ië¿I≠¿IÂ¿J%¿JR¿J¿Jë¿J»¿J’¿J·¿JÈ¿JÍ¿K¿Kg¿K∏¿K–¿L¿L¿L2¿L:¿L;¿Lh¿Lë¿L∆¿M¿Mt¿M™¿M˝¿NJ¿Nô¿N¡¿NË¿O8¿OQ¿Oh¿Or¿Os¿O™¿OÎ¿O¸¿P!¿P2¿P<¿PD¿PE¿Pì¿P·¿P˝¿Q¿Q|¿Qí¿Qì¿Qπ¿QÒ¿RB¿R^¿Rƒ¿R—¿R˛¿S0¿SB¿Sy¿SÜ¿S≥¿Sˇ¿T¿TU¿Tb¿Tn¿Tv¿Tw¿Tù¿T’¿U9¿Uú¿U…¿U˚¿V¿VD¿VQ¿Vf¿VÃ¿VŸ¿VÂ¿VÌ¿VÓ¿W¿W`¿Wi¿W∑¿WÏ¿XK¿XÆ¿X„¿X‰¿Y¿Y+¿YR¿Y}¿Y≠¿YΩ¿YÚ¿Y˝¿Z(¿Zõ¿Z∏¿ZÌ¿Z¯¿[¿[G¿[p¿[é¿[≈¿[“¿[Â¿\i¿\Õ¿\ÿ¿\‚¿\Ï¿\ˇ¿]¿]¿]U¿]Ç¿]à¿]Ÿ¿^&¿^o¿^u¿^¿¿^˘¿_I¿_ö¿_Ø¿_º¿_‰¿`¿`¿`1¿`D¿`N¿`g¿`k¿`l¿`©¿`Ø¿`Ô¿a¿a5¿aN¿aO¿a≠¿a≥¿aË¿aÓ¿b$¿bK¿bL¿bä¿bê¿b‹¿c¿c¿cV¿cå¿c”¿c‰¿d	¿d&¿dB¿dV¿d§¿dÎ¿e"¿eb¿eí¿eÆ¿e«¿eÕ¿eÙ¿f¿fG¿fM¿fÇ¿f¡¿f¿g¿g#¿g)¿gk¿g®¿g ¿g–¿g‘¿g’¿h¿h¿ho¿hö¿h†¿hﬁ¿i$¿iB¿iS¿ie¿iÅ¿iî¿i–¿i‘¿i’¿j¿j¿jl¿j∏¿k¿k<¿kB¿kx¿kñ¿k¨¿kº¿kŸ¿kÏ¿kˆ¿l	¿l¿l¿l*¿l+¿lk¿lq¿l¡¿m¿mb¿m£¿m©¿mÚ¿n<¿nç¿nﬂ¿o/¿oÅ¿oœ¿oﬁ¿o‰¿p6¿pÑ¿p—¿q!¿qQ¿qW¿q£¿qÒ¿r¿r¿rc¿r´¿r»¿r…¿s¿sh¿sï¿sñ¿sŸ¿sﬂ¿t ¿tF¿tS¿ts¿tì¿t¯¿t˛¿u¿u¿u¿u:¿u;¿uå¿u⁄¿v+¿vx¿v£¿v∞¿vŸ¿v⁄¿w+¿wy¿wù¿w£¿wÚ¿xD¿xñ¿xΩ¿xÏ¿xÌ¿y'¿y1¿yR¿yä¿y£¿y´¿z¿z/¿zE¿zM¿zt¿zâ¿zë¿zó¿z®¿z¨¿z≠¿z˛¿{O¿{ï¿{õ¿{Ø¿{µ¿|¿|T¿|°¿|‡¿|Ê¿}6¿}k¿}q¿}¡¿~
¿~Z¿~ß¿~Ù¿A¿{¿Å¿¬¿Ä¿ÄS¿ÄY¿Äp¿Äv¿Äø¿Å	¿ÅX¿Åó¿Å‘¿Ç%¿ÇA¿ÇG¿Çs¿Çø¿Ç⁄¿É¿É¿ÉY¿Ég¿Ém¿ÉÜ¿É€¿ÉÌ¿Ñ¿Ñd¿Ñn¿ÑÉ¿Ñè¿Ñ∫¿Ñ›¿Ñ˛¿Ö¿Ö#¿Ö'¿Ö(¿Öw¿Öâ¿Öè¿Ö”¿Ü$¿Üs¿Ü§¿Ü™¿Üÿ¿ÜÂ¿á¿á-¿áF¿ág¿áï¿áæ¿áﬁ¿áÎ¿à¿à¿à@¿àD¿àE¿àá¿à‘¿â¿â¿âb¿âh¿âñ¿â«¿âﬁ¿â˚¿âˇ¿ä ¿äL¿äR¿äü¿ä≈¿äÀ¿ã¿ã0¿ãM¿ãc¿ã¿ã¶¿ãœ¿ãÔ¿ãˇ¿å%¿å8¿åB¿ål¿åp¿åq¿åû¿åæ¿åÿ¿ç3¿ç`¿çÑ¿çØ¿ç€¿çÎ¿é¿é3¿éi¿éä¿é©¿é‚¿éÍ¿é˝¿è¿è¿è(¿èJ¿èc¿èñ¿èú¿è¨¿è‚¿ê¿ê,¿ê?¿êI¿êc¿êy¿ê}¿ê~¿êØ¿êµ¿ë¿ëS¿ë£¿ë—¿ë◊¿í%¿íu¿í∆¿ì¿ìV¿ì¶¿ì·¿ìÁ¿î4¿î¿î«¿îÕ¿ï¿ïj¿ï∑¿ï‰¿ñ¿ñY¿ñv¿ñ≠¿ñ‡¿ñÚ¿ó%¿ós¿ó}¿óí¿óû¿óÚ¿ó¯¿ò¿ò*¿òM¿òp¿ò¿¿ò‹¿ô>¿ôt¿ô∫¿ô›¿ö¿ö ¿ö.¿ö:¿ö}¿ö»¿õ*¿õV¿õ§¿õ–¿õ˝¿ú#¿úC¿úô¿úÏ¿ù!¿ùG¿ùX¿ùg¿ùs¿ùô¿ù§¿ù≠¿ù¥¿ùÿ¿ù¸¿û¿û;¿ûN¿ûX¿ûY¿ûæ¿ûˆ¿ü¿üV¿üó¿ü∆¿üˆ¿†B¿†e¿†¿†∑¿†ﬁ¿°¿°¿°&¿°_¿°Ö¿°ç¿°õ¿°°¿°¡¿°¬¿°Ê¿¢¿¢!¿¢E¿¢d¿¢x¿¢⁄¿¢Â¿¢Ì¿£ ¿£
¿£#¿£5¿£[¿£p¿£|¿£à¿£°¿£µ¿£·¿£¯¿§¿§!¿§V¿§^¿§p¿§ó¿§¨¿§∏¿§æ¿§Î¿§˚¿•¿•U¿•v¿•â¿•ì¿•ù¿•¥¿•÷¿•Ë¿¶¿¶'¿¶3¿¶L¿¶¿¶Ö¿¶ï¿¶À¿¶¿ß¿ß(¿ß2¿ßL¿ßb¿ßc¿ßö¿ßæ¿ßƒ¿ß»¿ß…¿®¿®^¿®´¿®˜¿©H¿©u¿©Ç¿©ù¿©û¿©Î¿™¿™ ¿™h¿™∑¿™˘¿™ˇ¿´O¿´û¿´Õ¿´”¿¨#¿¨i¿¨ß¿¨À¿¨ÿ¿¨˚¿¨¸¿≠;¿≠}¿≠É¿≠“¿Æ¿Æh¿Æ°¿Æß¿ÆÊ¿Æ˚¿Ø¿ØR¿Ø°¿ØÕ¿Ø⁄¿ØÚ¿ØÛ¿∞5¿∞;¿∞ä¿∞’¿± ¿±Y¿±_¿±Ø¿≤ ¿≤N¿≤ü¿≤∞¿≤∂¿≥¿≥P¿≥ï¿≥Â¿¥.¿¥f¿¥l¿¥≤¿µ¿µP¿µ°¿µÒ¿∂¿∂¿∂7¿∂8¿∂¿∂œ¿∑¿∑h¿∑Ñ¿∑ä¿∑€¿∏)¿∏z¿∏√¿∏…¿π¿πj¿πp¿π¶¿π≥¿∫¿∫'¿∫J¿∫u¿∫û¿∫®¿∫⁄¿∫˛¿ª¿ª¿ªD¿ªJ¿ªN¿ªO¿ª]¿ª^¿ª°¿ªß¿ªÙ¿º¿º9¿º^¿º_¿ºí¿ºò¿ºÂ¿ºÒ¿Ω3¿Ω]¿Ω^¿Ω§¿Ω™¿Ω˚¿æD¿æï¿æß¿æ≠¿æ˝¿øS¿øô¿øÌ¿¿¿¿¿¿n¿¿¿¿Ö¿¿›¿¡¿¡¿¡R¿¡ã¿¡ë¿¡·¿¡˛¿¬)¿¬I¿¬i¿¬q¿¬r¿¬≠¿¬≥¿√¿√P¿√z¿√Ä¿√—¿ƒ¿ƒ,¿ƒX¿ƒY¿ƒz¿ƒ{¿ƒ∫¿ƒ¿¿≈¿≈¿≈`¿≈Ø¿∆ ¿∆O¿∆ö¿∆™¿∆∞¿∆˝¿«'¿«-¿«Ä¿«—¿»¿»p¿»É¿»⁄¿…(¿…z¿…ô¿…ø¿…√¿…ƒ¿ 	¿ ¿ _¿ ¨¿ ˘¿ÀH¿Àõ¿ÀÈ¿Ã/¿Ã{¿Ã…¿Ã˛¿Õ¿ÕQ¿Õü¿ÕÈ¿Œ5¿ŒÑ¿Œ”¿ŒÚ¿Œ¯¿œG¿œî¿œ‡¿œÌ¿œ˙¿–¿–{¿–ö¿–û¿–ü¿–¨¿–‘¿–‡¿–˙¿—B¿—â¿—™¿—±¿—‘¿—ÿ¿—Ÿ¿“+¿“,¿“Ä¿“Ü¿“◊¿”*¿”:¿”@¿”m¿”ê¿”¨¿”º¿”ﬂ¿”Ú¿”¸¿‘¿‘¿‘¿‘e¿‘ß¿‘≠¿‘˝¿’M¿’Z¿’`¿’ú¿’„¿÷*¿÷q¿÷∂¿÷Î¿÷Ò¿◊6¿◊|¿◊µ¿◊ﬂ¿◊¸¿ÿ#¿ÿ1¿ÿ7¿ÿ_¿ÿç¿ÿß¿ÿ◊¿ÿÁ¿ÿÔ¿ÿ¿ŸG¿Ÿx¿Ÿà¿Ÿê¿Ÿñ¿Ÿ”¿⁄¿⁄¿⁄¿⁄R¿⁄ñ¿⁄ú¿⁄Ì¿€¿€¿€Z¿€ó¿€µ¿‹¿‹1¿‹5¿‹6¿‹X¿‹Ä¿‹é¿‹î¿‹Ã¿‹Î¿›¿›:¿›^¿›Ä¿›à¿›ê¿›«¿›Á¿›Ì¿ﬁ<¿ﬁá¿ﬁ”¿ﬂ*¿ﬂu¿ﬂ™¿ﬂ≈¿ﬂ¿‡E¿‡p¿‡à¿‡√¿‡Ó¿·¿·¿·>¿·D¿·H¿·I¿·à¿·é¿·ﬂ¿‚+¿‚x¿‚±¿‚∑¿‚Ì¿‚Û¿„?¿„é¿„”¿‰¿‰Z¿‰w¿‰ç¿‰ù¿‰π¿‰Ã¿‰÷¿‰È¿‰Ì¿‰Ó¿Â	¿Â
¿ÂI¿ÂO¿Â†¿ÂÏ¿Ê9¿Êr¿Êx¿ÊÆ¿Ê€¿ÊÒ¿Á¿Á-¿Á@¿ÁJ¿Á]¿Áa¿Áb¿Áé¿Áè¿Á÷¿Á‹¿Ë!¿Ën¿Ëæ¿È¿È%¿È+¿Èv¿È≤¿È∏¿È¯¿ÍE¿Íá¿Íç¿Íù¿Í£¿ÍÒ¿ÎC¿ÎS¿Îm¿Îä¿Î¿¿Î◊¿ÎÂ¿ÎÎ¿Ï¿ÏI¿Ïk¿Ïü¿Ï±¿Ïﬂ¿Ì&¿Ì0¿ÌE¿ÌQ¿Ìî¿Ì ¿Ì˚¿Ó¿ÓC¿Ói¿Óq¿Óí¿Ó≤¿Óø¿Ó—¿Óˇ¿Ô\¿Ôf¿Ô{¿Ôá¿Ô—¿¿_¿ù¿¶¿„¿Ò"¿ÒF¿ÒL¿ÒP¿ÒQ¿Òû¿Ò´¿Ò±¿Ú¿ÚV¿Ú°¿Ú¿Û9¿Û?¿Ûê¿Û‡¿Ù¿Ù	¿Ù¿Ù¿Ùo¿ÙÆ¿Ùÿ¿Ùı¿ı+¿ıa¿ıo¿ıu¿ıù¿ı„¿ˆ¿ˆ9¿ˆ|¿ˆ≤¿ˆ‹¿ˆ˜¿˜$¿˜J¿˜R¿˜_¿˜w¿˜}¿˜Å¿˜Ç¿˜“¿¯ ¿¯q¿¯∫¿¯Û¿˘¿˘,¿˘K¿˘É¿˘´¿˘÷¿˘˜¿˙¿˙6¿˙e¿˙º¿˙Õ¿˙◊¿˚¿˚d¿˚u¿˚¿˚†¿˚®¿˚¬¿˚»¿˚Ã¿˚Õ¿¸¿¸¿¸l¿¸î¿¸ö¿¸ﬁ¿˝¿˝6¿˝L¿˝h¿˝é¿˝≠¿˝’¿˝˘¿˛¿˛;¿˛?¿˛@¿˛Ö¿˛∆¿˛ÿ¿˛ﬁ¿ˇ#¿ˇT¿ˇq¿ˇë¿ˇß¿ˇ√¿ˇÈ¿ ¿ [¿ }¿ °¿ ∑¿ ª¿ º¿ ˇ¿¿,¿N¿Ü¿Ã¿Ë¿8¿U¿b¿~¿…¿‰¿Ò¿˝¿¿¿"¿n¿º¿
¿Y¿•¿Ú¿;¿S¿a¿g¿ù¿–¿‚¿¿b¿l¿Å¿ç¿·¿Á¿˜¿ ¿R¿p¿ò¿Œ¿Ô¿¿#¿1¿S¿è¿´¿˚¿	¿	-¿	f¿	¨¿	Ã¿
¿
q¿
µ¿
∆¿#¿3¿?¿I¿Å¿ô¿Á¿ˇ¿¿(¿y¿≠¿∫¿÷¿$¿q¿±¿æ¿¿#¿+¿>¿H¿p¿Ä¿£¿”¿Û¿3¿F¿P¿i¿í¿ø¿…¿Á¿@¿ò¿±¿‹¿‚¿Ú¿¿E¿i¿|¿Ü¿º¿‡¿Ê¿Í¿Î¿7¿Å¿á¿◊¿¿¿	¿D¿Å¿Ç¿Õ¿”¿¿d¿≤¿ˇ¿%¿+¿y¿…¿¿.¿4¿Ä¿ ¿¿K¿É¿Ñ¿‘¿Ô¿ı¿F¿ó¿¥¿∫¿¿P¿ú¿Â¿1¿j¿∏¿⁄¿ﬁ¿ﬂ¿&¿,¿|¿»¿¿2¿8¿¿Ã¿¿h¿∏¿’¿¿*¿;¿?¿@¿Ä¿À¿·¿Á¿1¿Å¿ú¿¢¿Ù¿ 5¿ ;¿ ä¿ “¿ ˚¿!¿!L¿!ê¿!∞¿!≈¿!À¿"¿"f¿"¥¿#¿#¿#F¿#\¿#¨¿#Â¿#Ï¿$=¿$N¿$p¿$æ¿$÷¿$ˆ¿$˜¿%¿%G¿%H¿%k¿%ì¿%∑¿%∏¿%⁄¿&¿&¿&u¿&≤¿&Õ¿&’¿&˜¿'¿'Ç¿'í¿'¨¿'¸¿(¿(C¿(Z¿(b¿(h¿(i¿(Ö¿(°¿(ƒ¿(Ó¿)F¿)Å¿)“¿)⁄¿)‡¿)˙¿*,¿*2¿*3¿*R¿*Ü¿*«¿+¿+¿+;¿+É¿+†¿+¶¿+È¿+Ì¿+Ó¿,5¿,w¿,∏¿,æ¿,Ù¿,˙¿-@¿-g¿-m¿-Ω¿.
¿.Z¿.î¿.‡¿.·¿/(¿/w¿/√¿0¿0`¿0¨¿0˜¿1¿1
¿1U¿1¢¿1Ó¿2	¿2¿2`¿2Æ¿2¸¿3L¿3õ¿3‡¿3Ê¿3ˆ¿3¸¿4H¿4Ñ¿4 ¿4À¿4⁄¿4€¿5"¿5G¿5M¿5î¿5´¿5±¿5˙¿6¿6;¿6Q¿6m¿6ó¿6‘¿7 ¿7-¿7O¿7S¿7T¿7•¿7´¿7ˆ¿8¿8¿8a¿8¨¿8˚¿9C¿9ì¿9⁄¿9‡¿9ˆ¿9¸¿:L¿:_¿:e¿:s¿:∫¿:Ã¿;¿;Q¿;b¿;É¿;©¿;»¿;“¿;ÿ¿;Ù¿<¿<¿<!¿<+¿<=¿<J¿<ë¿<≤¿<∂¿<∑¿=¿=¿=]¿=ò¿=û¿=Ÿ¿=ﬂ¿>+¿>f¿>è¿>ù¿>£¿>„¿?¿?=¿?^¿?ê¿?ñ¿?ö¿?õ¿?€¿@¿@ ¿@!¿@r¿@x¿@§¿@À¿@„¿@˜¿@˝¿A$¿A(¿A)¿AT¿AZ¿A®¿AÏ¿B¿B¿Bg¿Bs¿Bô¿BË¿C¿C:¿Cg¿Cm¿C~¿CÇ¿CÉ¿CÃ¿C“¿D!¿D'¿Dp¿Dº¿DÕ¿DÁ¿Dˇ¿E(¿EF¿EN¿ER¿ES¿Eõ¿E°¿EË¿F9¿Fe¿Fâ¿F¶¿F›¿G¿G"¿G(¿GJ¿GN¿GO¿Gû¿Gü¿Gÿ¿Gﬁ¿H.¿Hw¿Hâ¿Hè¿H»¿I¿IL¿Ih¿Il¿Im¿I©¿IØ¿Iﬁ¿J/¿Jy¿J…¿JÙ¿J˙¿KF¿K^¿Kd¿K±¿K¸¿L-¿LK¿Lc¿LÜ¿L¨¿L≤¿LÊ¿M_¿M¬¿M∆¿M«¿M”¿M‘¿N%¿N1¿Ny¿Nz¿Nã¿Nå¿N⁄¿O"¿O:¿O?¿Oá¿O”¿OË¿P8¿Pá¿P’¿Q¿Q=¿QD¿QI¿Qö¿QŒ¿Qœ¿Q˙¿R¿R!¿RM¿Rf¿RÇ¿R°¿R∏¿R¿¿R¡¿R÷¿R‚¿S¿SC¿S^¿Sh¿Sò¿SÆ¿Sø¿S…¿S›¿SÂ¿S¸¿T,¿T4¿TN¿Tq¿Ty¿Tí¿T¥¿Tº¿TÂ¿U¿U!¿U8¿UW¿U_¿Ue¿Ux¿U|¿U}¿Uâ¿U‚¿U„¿V ¿Vh¿Vè¿Võ¿V≥¿V“¿Vı¿W+¿WC¿WJ¿Wt¿Wî¿W∫¿WÊ¿X¿X ¿X)¿X0¿X4¿X5¿Xy¿X®¿XÆ¿X˘¿Y5¿YA¿Y¶¿Y–¿Z¿Z¿Z"¿Z#¿Z0¿Z<¿ZÅ¿Z¨¿Z¿¿[¿[&¿[:¿[^¿[q¿[á¿[£¿[…¿[“¿[Ÿ¿[Ì¿\¿\*¿\>¿\ä¿\ß¿\∞¿\∑¿\À¿]%¿],¿]ã¿]ü¿]˚¿^¿^¿^v¿^}¿^ë¿^•¿^‹¿_<¿_î¿_ù¿_§¿_∏¿_Ã¿_Í¿`1¿`V¿`_¿`f¿`j¿`k¿`w¿`ø¿`¿¿a¿a"¿a(¿as¿a∑¿aΩ¿b¿bL¿bô¿b‰¿c)¿cI¿cO¿cö¿c‹¿c‚¿cÚ¿c¯¿dD¿d}¿dì¿d±¿d¡¿dË¿e¿e¿e(¿eN¿e`¿ez¿eé¿eï¿eô¿eö¿eÎ¿f¿f¿fW¿f¶¿f‘¿f⁄¿g*¿gw¿gõ¿gÆ¿gÌ¿gÙ¿h,¿h0¿h2¿h3¿hh¿hl¿h≠¿hÌ¿hÒ¿i6¿i`¿i≥¿j¿j)¿j/¿j^¿jd¿j¿jØ¿jø¿j‡¿k¿k0¿kÅ¿k¥¿k¡¿k›¿l)¿lt¿l∆¿m¿m$¿m=¿me¿mµ¿mœ¿n¿n¿n,¿nT¿nß¿n≈¿nÂ¿o¿o)¿o5¿o=¿oP¿oZ¿ok¿oo¿op¿oÖ¿oÜ¿oÆ¿o–¿o¿p
¿p$¿p*¿p>¿pX¿ps¿py¿p}¿p~¿pä¿pØ¿p»¿p„¿pÁ¿pË¿pÙ¿q¿q¿q0¿q4¿q5¿qA¿q\¿qv¿qì¿qô¿qù¿qû¿q™¿qﬁ¿q¯¿r¿r¿r¿r¿r'¿rY¿rr¿r∑¿r÷¿r⁄¿r‹¿r›¿s,¿sw¿sï¿sô¿sÈ¿t9¿tÇ¿tœ¿u ¿um¿u∂¿v ¿vQ¿vü¿vÒ¿wA¿wT¿wX¿w£¿w‚¿wÊ¿wÙ¿w¯¿x?¿x{¿x…¿y¿yh¿yÖ¿yÜ¿y∆¿yÃ¿z¿z[¿zè¿zß¿z¿¿z¡¿z˝¿{¿{N¿{ú¿{≥¿{ƒ¿{·¿|¿|6¿|Q¿|U¿|V¿|®¿|˜¿}E¿}V¿}x¿}ë¿}±¿}ø¿}≈¿}ﬂ¿~,¿~¿~œ¿	¿3¿Ö¿¨¿…¿Õ¿œ¿–¿Ä¿Ä¿Ä]¿Äû¿Ä⁄¿Å¿ÅU¿Åå¿Å™¿Å´¿Åﬁ¿Å¯¿Å˘¿Ç¿Ç'¿Ç9¿ÇE¿Çd¿ÇÆ¿Çµ¿É¿É.¿É2¿É4¿É5¿És¿Éw¿É»¿Éﬁ¿É‚¿Ñ5¿ÑK¿ÑO¿Ñû¿ÑÍ¿Ö¿Öm¿Öq¿Öƒ¿Ü¿Ü'¿Ü+¿Üë¿Üï¿Ü£¿Üß¿Ü¿á¿á3¿áU¿áí¿áî¿á™¿á˘¿àC¿ày¿à±¿à·¿â¿â$¿â@¿âD¿âE¿âê¿â⁄¿ä¿ä@¿äl¿ä©¿äØ¿äÀ¿äœ¿ä–¿äÁ¿äË¿ã¿ã+¿ã,¿ã}¿ã¢¿ã®¿ã◊¿ã›¿ã¯¿å(¿å8¿åY¿åë¿å©¿å˙¿ç-¿ç:¿çV¿ç¢¿çÌ¿é?¿éê¿éù¿é∂¿éﬁ¿è.¿èH¿è¿èå¿è•¿èÕ¿ê ¿ê>¿ê^¿êï¿ê¢¿êÆ¿ê∂¿ê…¿ê”¿ê‰¿êË¿êÈ¿ë¿ë¿ë_¿ëØ¿ë‡¿í¿í+¿íH¿ía¿íå¿íΩ¿íﬁ¿ì>¿ìt¿ì|¿ìó¿ì≥¿ì¿¿ì„¿î¿îP¿îñ¿îË¿ï¿ïk¿ïê¿ï¡¿ïÓ¿ñ
¿ñ¿ñc¿ñí¿ñ’¿ó¿ó5¿ós¿óø¿ó˘¿òA¿ò}¿òπ¿òÔ¿ò˜¿ò˝¿ô¿ô¿ôQ¿ôW¿ôß¿ôŸ¿ö¿ö[¿ög¿ö|¿öÊ¿öÌ¿õ<¿õ^¿õ¿õñ¿õ¢¿õÃ¿ú%¿úÄ¿ú÷¿ú›¿ù¿ù¿ù¿ùS¿ùq¿ùó¿ùõ¿ùú¿ùÊ¿û¿û-¿û1¿û2¿ûa¿û±¿û˙¿ü>¿ü\¿üè¿ü≥¿ü‰¿üÒ¿†-¿†w¿†«¿†Õ¿†¸¿°¿°S¿°`¿°ò¿°ﬁ¿¢2¿¢8¿¢d¿¢å¿¢¢¿¢¶¿¢ß¿¢‘¿¢⁄¿£¿£5¿£V¿£l¿£p¿£q¿£∑¿£Ω¿£Û¿§¿§,¿§H¿§ö¿§’¿•¿•-¿•E¿•Y¿•_¿•w¿•é¿•£¿•ß¿•®¿•Ú¿•¯¿¶G¿¶ò¿¶Õ¿ß ¿ß¿ß6¿ßR¿ßt¿ßƒ¿ß¯¿®¿®¿®-¿®\¿®s¿®w¿®x¿®Ñ¿®©¿®¬¿®Ê¿©¿©¿©o¿©ö¿©†¿©§¿©•¿©±¿©√¿©◊¿©˚¿™¿™-¿™¿™™¿™∞¿™¥¿™µ¿™¡¿™‹¿´ ¿´¿´7¿´â¿´¥¿´∫¿´æ¿´ø¿´À¿´ˇ¿¨#¿¨?¿¨U¿¨ß¿¨“¿¨ÿ¿¨‹¿¨›¿≠¿≠2¿≠3¿≠[¿≠Ö¿≠Ü¿≠…¿≠ı¿Æ¿Æg¿Æì¿Æó¿Æò¿Æ÷¿Ø¿Ø#¿Øs¿Øõ¿Øü¿Ø†¿Ø¨¿Øﬁ¿∞¿∞<¿∞a¿∞v¿∞ã¿∞–¿∞Ú¿±¿±¿±!¿±u¿±£¿±´¿±±¿±∆¿± ¿±Ã¿±Õ¿≤¿≤6¿≤:¿≤á¿≤÷¿≤˚¿≥6¿≥v¿≥|¿≥Ω¿¥ ¿¥P¿¥¢¿¥®¿¥Ï¿µ¿µ¿µa¿µÄ¿µç¿µû¿µæ¿µ’¿µŸ¿µ⁄¿∂¿∂8¿∂D¿∂ã¿∂Ú¿∑6¿∑=¿∑p¿∑~¿∑Ñ¿∑∏¿∏¿∏:¿∏q¿∏¿∏¨¿π¿π¿π0¿πP¿πX¿π`¿πd¿πe¿πq¿πñ¿πØ¿π¸¿∫J¿∫ö¿∫–¿ª"¿ª&¿ª'¿ª3¿ªE¿ª{¿ª–¿ª‰¿ªË¿ªÍ¿ªÎ¿º5¿ºL¿º~¿º∫¿Ω¿Ω2¿ΩT¿ΩÅ¿Ωû¿Ωƒ¿ΩË¿æ¿æ3¿æ^¿æe¿æÉ¿æü¿æÕ¿æ˜¿ø!¿øK¿øo¿øô¿øù¿øû¿øÎ¿¿ ¿¿H¿¿v¿¿ñ¿¿§¿¿™¿¿√¿¿Ì¿¡¿¡¿¡¿¡Y¿¡ú¿¡Œ¿¡‘¿¬(¿¬w¿¬ì¿¬∑¿¬œ¿¬Ì¿√¿√¿√¿√7¿√W¿√[¿√\¿√©¿√Ï¿√Ú¿ƒB¿ƒí¿ƒß¿ƒÚ¿≈6¿≈Z¿≈`¿≈ï¿≈Â¿∆¿∆O¿∆p¿∆ó¿∆ø¿∆Õ¿∆”¿∆Ù¿«¿«¿«¿«e¿«Ä¿«Ü¿«“¿» ¿»h¿»ö¿»π¿»ﬁ¿…¿…¿…¿…7¿…W¿…[¿…\¿…†¿…¶¿…Ï¿ '¿ J¿ |¿ õ¿ ¿¿ Ê¿ Ù¿ ˙¿À¿À9¿À=¿À>¿Àl¿Àr¿Àø¿ÀÙ¿Ã¿Ã9¿Ã_¿Ãm¿Ãs¿Ãí¿Ã≤¿Ã∂¿Ã∑¿ÃÛ¿Õ,¿Õe¿Õ∞¿Õ˚¿Œ2¿Œ6¿Œ7¿ŒÇ¿ŒÂ¿ŒÈ¿ŒÍ¿œ5¿œò¿œú¿œù¿œÒ¿–¿–w¿–{¿–|¿––¿—¿—[¿—_¿—`¿—™¿“
¿“¿“¿“5¿“[¿“ä¿“π¿“ﬁ¿“ﬂ¿”/¿”<¿”B¿”à¿”¥¿”·¿‘¿‘]¿‘ì¿‘¥¿‘‡¿’¿’¿’¿’2¿’R¿’V¿’W¿’c¿’£¿’ø¿’Õ¿’”¿÷¿÷¿÷¿÷¿÷Y¿÷ã¿÷∂¿÷Í¿◊¿◊O¿◊[¿◊ü¿◊Œ¿ÿ¿ÿ¿ÿ)¿ÿt¿ÿΩ¿ÿƒ¿ÿ≈¿ÿÏ¿Ÿ¿Ÿ ¿ŸG¿Ÿu¿Ÿ{¿Ÿ†¿Ÿ‘¿Ÿ⁄¿⁄¿⁄/¿⁄5¿⁄]¿⁄é¿⁄î¿⁄∫¿⁄Á¿⁄Ì¿€¿€E¿€K¿€o¿€ò¿€û¿€≈¿€Ò¿€˜¿‹¿‹J¿‹P¿‹{¿‹≤¿‹∏¿‹ﬁ¿›¿›¿›=¿›t¿›z¿›£¿›÷¿›‹¿ﬁ¿ﬁ5¿ﬁ;¿ﬁd¿ﬁó¿ﬁù¿ﬁƒ¿ﬁÛ¿ﬁ˘¿ﬂ1¿ﬂÇ¿ﬂà¿ﬂ∞¿ﬂ·¿ﬂÁ¿‡¿‡C¿‡I¿‡o¿‡ú¿‡¢¿‡«¿‡Ú¿‡¯¿·"¿·T¿·Z¿·Ñ¿·∑¿·Ω¿··¿‚¿‚¿‚=¿‚o¿‚u¿‚¢¿‚Ê¿‚Ï¿„¿„]¿„c¿„Ü¿„∂¿„º¿„„¿‰¿‰¿‰l¿‰§¿‰™¿‰’¿Â
¿Â¿Â:¿Âm¿Âs¿Âù¿Â–¿Â÷¿Ê¿Ê>¿ÊD¿Êv¿Ê∏¿Êæ¿Êﬂ¿Á¿Á¿Á8¿Ád¿Áj¿Áò¿Á’¿Á€¿Á˛¿Ë%¿Ë+¿ËX¿Ëê¿Ëñ¿ËŸ¿È¿È¿È¿ÈG¿Èx¿È~¿È¿ÈÃ¿Í¿Í]¿ÍÇ¿Í§¿Í™¿Í’¿Î¿Î	¿Î2¿Î\¿Îb¿Îé¿Îæ¿Îƒ¿ÎÒ¿Ï#¿Ï)¿ÏS¿Ï¿ÏÖ¿Ï±¿Ï·¿ÏÁ¿Ì¿Ì=¿ÌC¿Ìm¿Ìô¿Ìü¿Ì≈¿ÌÈ¿ÌÔ¿Ó¿Ó6¿Ó<¿Óc¿Óâ¿Óè¿ÓÕ¿Ô!¿Ô'¿Ôf¿Ôº¿Ô¬¿Ô˚¿E¿K¿Ö¿—¿◊¿Ò¿Ò9¿Ò?¿Òh¿Òí¿Òò¿Ò”¿Ú!¿Ú'¿Úb¿Ú∞¿Ú∂¿Ú›¿Û¿Û	¿Û?¿Ûä¿Ûê¿Ûî¿Ûï¿Û¨¿ÛÀ¿Ûœ¿Û–¿ÛÌ¿Ù¿Ù¿Ù¿Ù2¿ÙU¿ÙY¿ÙZ¿Ùx¿Ùû¿Ù¢¿Ù£¿Ù¬¿ÙÈ¿ÙÌ¿ÙÓ¿ı
¿ı.¿ı2¿ı3¿ıQ¿ıw¿ı{¿ı|¿ıò¿ıº¿ı¿¿ı¡¿ı›¿ˆ¿ˆ¿ˆ¿ˆ¿ˆ>¿ˆB¿ˆC¿ˆZ¿ˆy¿ˆ}¿ˆ~¿ˆó¿ˆ∏¿ˆº¿ˆΩ¿˜¿˜H¿˜L¿˜M¿˜í¿˜⁄¿˜ﬁ¿˜ﬂ¿¯¿¯`¿¯d¿¯e¿¯•¿¯Ë¿¯Ï¿¯Ì¿˘$¿˘U¿˘Y¿˘Z¿˘Ä¿˘ß¿˘´¿˘¨¿˘Ÿ¿˙¿˙¿˙¿˙@¿˙u¿˙y¿˙z¿˙ì¿˙¥¿˙∏¿˙∫¿˙ª¿˚¿˚¿˚0¿˚O¿˚r¿˚ó¿˚Ω¿˚‡¿¸¿¸¿¸¿¸]¿¸¿¸Ö¿¸ ¿¸Ë¿¸È¿˝:¿˝É¿˝â¿˝œ¿˝Á¿˛¿˛¿˛9¿˛á¿˛ç¿˛≈¿ˇ ¿ˇ!¿ˇ"¿ˇX¿ˇò¿ˇƒ¿ˇ≈¿ˇË¿ˇÈ¿ˇı¿ ¿ D¿ x¿ ∞¿ Í¿"¿k¿o¿p¿|¿ë¿©¿¿¿Ÿ¿Û¿¿V¿]¿a¿c¿d¿¥¿Õ¿—¿"¿n¿~¿Ç¿–¿¿q¿{¿¿µ¿¿Q¿x¿†¿◊¿ÿ¿¿/¿0¿[¿ç¿¿¿¡¿¿¿g¿ê¿¿¿ƒ¿≈¿
¿¿\¿≠¿¸¿	¿	C¿	m¿	¿¿
¿
¿
R¿
õ¿¿¿¿B¿F¿G¿`¿f¿¨¿ø¿¿*¿[¿Ñ¿ä¿≤¿∂¿∑¿Á¿$¿W¿}¿Ö¿â¿ä¿∏¿…¿Ò¿¿¿¿H¿N¿ó¿Ÿ¿Í¿¿6¿Y¿]¿_¿`¿û¿¡¿≈¿¿K¿õ¿Â¿¿,¿[¿\¿Ä¿Å¿°¿¢¿⁄¿‹¿›¿¿<¿@¿è¿Õ¿¿8¿<¿l¿¨¿Ó¿Ô¿˚¿+¿,¿8¿^¿_¿k¿§¿ª¿ø¿¡¿¬¿Ï¿¿E¿H¿I¿í¿≥¿∑¿”¿◊¿¿b¿™¿˚¿3¿z¿√¿¿[¿å¿ê¿ß¿´¿˘¿J¿r¿v¿Ü¿ä¿Ÿ¿Í¿Ó¿9¿ä¿ÿ¿‚¿Ê¿ˆ¿˙¿K¿ñ¿›¿·¿¿V¿Z¿j¿n¿ú¿Ÿ¿›¿Ì¿Ò¿*¿d¿h¿µ¿¿¿f¿í¿ÿ¿Ÿ¿¿0¿1¿U¿u¿v¿≈¿‰¿È¿ 7¿ à¿ ƒ¿ ¿ Ò¿!¿!¿!?¿!E¿!é¿!€¿!Ò¿!˜¿"F¿"\¿"b¿"û¿"«¿"Ì¿"Ó¿#(¿#.¿#{¿#Ã¿$¿$¿$b¿$ì¿$”¿$‘¿%¿%`¿%a¿%∞¿%«¿&¿&¿&Q¿&´¿'¿'4¿'5¿'Y¿'y¿'z¿'≤¿'≥¿'ø¿'Î¿'Ï¿(	¿(¿(/¿(5¿(T¿(X¿(Y¿(£¿(Ê¿(Ú¿)#¿)d¿)e¿)ç¿)≈¿)Ï¿*#¿*3¿*7¿*8¿*s¿*t¿*ô¿*–¿*„¿*È¿*˚¿+¿+¿+;¿+O¿+U¿+V¿+b¿+|¿+À¿,¿,#¿,e¿,i¿,j¿,•¿,Ô¿-¿-i¿-o¿-p¿-£¿-ß¿-®¿-Ú¿.0¿.6¿.Ö¿.∏¿.ﬂ¿/	¿//¿/5¿/6¿/ô¿/ö¿/Ω¿/–¿/÷¿/◊¿0¿0"¿0(¿0)¿0k¿0±¿0Á¿1¿1¿1¿1B¿1F¿1G¿1Ç¿1É¿1ù¿1∞¿1Ë¿1ˆ¿1¸¿2C¿2•¿2Œ¿2‚¿2Ï¿3¿3n¿3Å¿3ß¿3±¿3π¿3ø¿3√¿3ƒ¿4¿4]¿4~¿4Ñ¿4“¿4Ú¿4¯¿5I¿5\¿5b¿5Ø¿6¿6,¿6X¿6^¿6±¿6˛¿7P¿7h¿7Ç¿7Ê¿8¿8H¿8w¿8â¿8¿¿8Ô¿9%¿9M¿9†¿9°¿9√¿:'¿:(¿:y¿:ü¿:Û¿:Ù¿;¿;)¿;p¿;á¿;ª¿;ˇ¿<*¿<V¿<è¿<∑¿<æ¿<ø¿=¿=,¿=3¿=R¿=|¿=}¿=Ω¿=‘¿=˙¿>7¿>v¿>w¿>Ω¿? ¿?P¿?Ä¿?Ã¿@¿@,¿@E¿@|¿@∫¿@ı¿A+¿AT¿Ae¿Aõ¿A„¿AÌ¿Aı¿Aˆ¿B9¿BS¿Bt¿B∫¿BÏ¿B¯¿C ¿C¿CQ¿Có¿C“¿Cﬁ¿CÊ¿D(¿Dn¿Dõ¿Dß¿DØ¿Dµ¿Dπ¿D∫¿DÙ¿E@¿Eà¿E∆¿Eﬁ¿EÊ¿F¿F¿F+¿F/¿F0¿F]¿FÉ¿F¬¿F»¿FÁ¿G"¿Gc¿Gi¿Gò¿G¥¿G‚¿GÒ¿H&¿H.¿H4¿HG¿HK¿HL¿Hë¿Hª¿H¡¿I¿Ib¿Ic¿Iº¿J
¿JH¿Jù¿JÍ¿K"¿K#¿Kp¿K¿¿L¿L]¿Lô¿Lº¿L√¿M¿MZ¿M†¿Mß¿Mˆ¿N7¿Np¿Næ¿Nø¿N¯¿O+¿Ob¿Oú¿O⁄¿O˝¿P7¿Pu¿P~¿Pã¿PΩ¿P√¿Q¿QP¿Qï¿Qﬂ¿R1¿RÄ¿Rû¿R‹¿S¿S/¿SP¿SZ¿Sb¿Sc¿Sõ¿SË¿T*¿Tp¿Tx¿T~¿Tß¿TÙ¿U¿Us¿Uê¿Uô¿UØ¿V ¿VI¿Vk¿Và¿Vî¿V¬¿Vˇ¿W¿W¿Wl¿Wå¿W÷¿X!¿XE¿Xd¿Xr¿X¢¿X·¿X¯¿Y¿Y¿Y¿Y¿Ye¿Y§¿Yª¿Y›¿Yﬁ¿Z4¿Zh¿Z¶¿Z÷¿Z◊¿[¿[`¿[§¿[Ï¿[ˆ¿[˛¿\¿\¿\/¿\3¿\4¿\v¿\ù¿\´¿\±¿\Ú¿]¿]¿]=¿]S¿]W¿]X¿]¢¿]¬¿]Œ¿^¿^+¿^/¿^0¿^Ä¿^ñ¿^ú¿^‰¿_¿_
¿_M¿_ö¿_¿¿_⁄¿_Ï¿`'¿`A¿`I¿`ê¿`ñ¿`¥¿`–¿`‘¿`’¿`ı¿a¿aL¿aà¿a‡¿b¿b^¿b}¿bì¿b©¿b≤¿bÎ¿bÒ¿c,¿cJ¿cù¿cŒ¿c„¿d?¿dz¿d¶¿d∑¿e¿eJ¿eç¿e¿¿e÷¿e˚¿f¿fL¿fR¿fV¿fW¿fõ¿f’¿fÒ¿g¿g*¿gO¿g}¿g»¿h¿hx¿h®¿h∏¿h¿¿h∆¿h‚¿hÊ¿hÁ¿i7¿iW¿i]¿i•¿i≈¿iÀ¿j¿jb¿j±¿j‰¿k¿kF¿kX¿kä¿kó¿k¨¿k¸¿lK¿lT¿lå¿l≈¿lÀ¿lœ¿l–¿m¿m¿mT¿mZ¿m¢¿mº¿m˚¿n ¿nG¿nñ¿n‚¿o¿o¿o_¿oâ¿o¬¿oÌ¿p	¿p¿p¿p!¿p3¿pQ¿p¿p¿¿p∆¿pŸ¿p⁄¿q'¿qu¿q≤¿qÈ¿r¿r>¿rh¿r£¿r’¿rÒ¿r˚¿s¿s	¿s¿s¿sR¿sr¿sö¿s√¿s ¿t¿tB¿to¿tπ¿u¿u5¿ud¿u™¿u ¿uÙ¿u¸¿u˝¿v>¿vk¿vq¿vr¿vß¿vÕ¿w¿wX¿we¿w≈¿wÀ¿wœ¿w–¿x¿x)¿x;¿xä¿x®¿x±¿xı¿y!¿yE¿yF¿yp¿y–¿y‘¿y’¿y˛¿z¿z1¿zh¿z¢¿z´¿z±¿z˙¿z˛¿zˇ¿{6¿{}¿{™¿{≈¿|¿|V¿|à¿|∫¿|Ê¿}¿}2¿}>¿}u¿}¿}Ø¿}⁄¿~¿~G¿~Ç¿~å¿~î¿~◊¿$¿o¿´¿≥¿Ä¿Ä+¿Äm¿Ä∂¿Ä¿¿ÄÁ¿Å"¿ÅT¿Å}¿Å¥¿Å¿¿Å ¿Ç&¿Ç\¿Ç~¿Ç¿Ç¨¿Ç“¿É-¿É;¿Ég¿É´¿É¡¿Ñ¿Ña¿Ñú¿Ñß¿ÑÚ¿Ñ˝¿Ö4¿Ö?¿Öx¿Öó¿Ö∫¿Öÿ¿ÖÎ¿Ü¿Ü¿Ü&¿Ün¿Üv¿Ü|¿Ü°¿Ü•¿Ü¶¿ÜÈ¿ÜÔ¿á?¿áU¿á}¿á≤¿áÈ¿à¿à8¿àÇ¿àã¿à¨¿à◊¿â¿âR¿âî¿âÿ¿ä¿ä¿ä¿ä¿ä¿äC¿äz¿ä¡¿äˆ¿ã¿ã'¿ãB¿ãÅ¿ã∑¿ãÀ¿ã’¿å0¿åc¿å¶¿å·¿å˘¿ç¿ç%¿çY¿çí¿çÃ¿ç›¿é¿é]¿éÅ¿é´¿é∂¿è¿èH¿è¿è•¿è‘¿è·¿ê+¿ê5¿êi¿ê†¿ê∆¿êÒ¿ê˛¿ë@¿ëJ¿ëR¿ë~¿ëâ¿ë†¿ë∂¿ëÙ¿í¿íK¿íz¿íÄ¿íÑ¿íÖ¿í√¿íﬁ¿ì$¿ìo¿ìπ¿î	¿îU¿î{¿î…¿î ¿îÊ¿ï¿ï¿ïp¿ïò¿ïÂ¿ñ¿ñ¿ñ[¿ñ´¿ñı¿ó¿ó>¿óÉ¿ó„¿óÚ¿ó˙¿ò!¿òJ¿ò¿ò—¿ô"¿ôQ¿ô{¿ô£¿ô´¿ôÀ¿ö#¿ö$¿öH¿öñ¿öﬁ¿õ,¿õd¿õm¿õø¿ú¿úX¿ú©¿úÕ¿úÚ¿ùR¿ùX¿ùº¿û¿ûQ¿û†¿ûÔ¿ü?¿üQ¿üú¿ü„¿üÈ¿†¿†=¿†M¿†ñ¿†¬¿†Õ¿°¿°F¿°P¿°X¿°^¿°b¿°c¿°«¿¢¿¢K¿¢Ñ¿¢û¿¢÷¿£¿£¿£¿£|¿£¶¿£Æ¿£—¿§¿§F¿§¢¿§Œ¿•¿•¿•¿•¿•]¿•î¿•ö¿•û¿•ü¿•Ë¿•˘¿¶¿¶,¿¶C¿¶X¿¶{¿¶§¿¶π¿¶Ÿ¿¶¿ß¿ß(¿ß,¿ß-¿ß9¿ßk¿ßè¿ßÍ¿ß˝¿®¿®¿®¿®¿®`¿®ã¿®ÿ¿®Ï¿©E¿©L¿©`¿©t¿©é¿©„¿™¿™¿™¿™;¿™c¿™v¿™π¿™Ô¿´¿´+¿´^¿´f¿´«¿´Õ¿´·¿´ı¿¨¿¨O¿¨t¿¨}¿¨Ñ¿¨ò¿¨˝¿≠¿≠K¿≠∞¿≠∂¿≠∫¿≠º¿≠Ω¿≠È¿Æ¿ÆN¿ÆP¿ÆQ¿ÆÑ¿Æ∫¿Æˆ¿Æ˙¿Ø¿Ø]¿Øâ¿Øõ¿Øù¿Øû¿Ø¿ØÒ¿∞9¿∞=¿∞ã¿∞√¿∞Œ¿∞Ô¿±2¿±O¿±p¿±ï¿±≤¿± ¿±‰¿±Í¿±Î¿≤¿≤9¿≤T¿≤s¿≤ò¿≤≠¿≤ø¿≤∆¿≤ ¿≤À¿≤ˆ¿≥¿≥¿≥K¿≥l¿≥m¿≥¢¿≥ø¿≥¿¿≥Ê¿≥˘¿≥˙¿¥B¿¥¿¥î¿¥ï¿¥»¿¥Ô¿µ¿µC¿µo¿µö¿µ°¿µÔ¿∂¿∂V¿∂ë¿∂í¿∂Í¿∂Î¿∑¿∑L¿∑Å¿∑µ¿∑∂¿∑ÿ¿∑Ë¿∏¿∏U¿∏`¿∏ó¿∏Õ¿∏’¿∏˜¿π¿π4¿πu¿πÄ¿π¬¿πË¿∫¿∫H¿∫S¿∫z¿∫Ç¿∫à¿∫â¿∫•¿∫‘¿ª¿ªu¿ª{¿ª|¿ªØ¿ªÍ¿º'¿º6¿ºS¿º[¿ºa¿ºb¿ºz¿ºì¿º∞¿ºÌ¿Ω4¿Ω_¿Ωí¿Ω…¿æ¿æN¿ær¿æö¿æ∑¿æ–¿æ€¿æ„¿æ¿ø:¿øå¿øï¿øÁ¿¿5¿¿6¿¿p¿¿ƒ¿¿‰¿¡¿¡¿¡d¿¡ù¿¡ﬁ¿¡¸¿¬$¿¬`¿¬°¿¬µ¿¬Œ¿¬Ì¿√¿√¿√5¿√?¿√G¿√M¿√N¿√^¿√©¿√‘¿√Û¿ƒ¿ƒP¿ƒâ¿ƒ§¿ƒæ¿ƒ∆¿ƒÃ¿ƒÕ¿ƒÏ¿≈¿≈,¿≈X¿≈j¿≈Ü¿≈ç¿≈ë¿≈í¿≈¿¿≈ˇ¿∆¿∆*¿∆0¿∆^¿∆v¿∆|¿∆∫¿∆æ¿∆ø¿∆ı¿∆˙¿«I¿«`¿«e¿«¥¿«˛¿»A¿»B¿»é¿»‹¿»·¿…1¿…Z¿…ç¿…¶¿…æ¿…·¿  ¿ ¿ 3¿ Ö¿ À¿ Ê¿ Ï¿À9¿Àa¿À≥¿Àı¿Àˆ¿Ã%¿Ãf¿Ãá¿Ãè¿ÃØ¿Ãﬁ¿Õ%¿Õ{¿Õ¿ÕÄ¿Õ≥¿Õ»¿Õÿ¿Õﬁ¿Õˇ¿Œ¿Œ¿Œ¿ŒZ¿Œ^¿Œµ¿œ¿œ¿œ\¿œß¿œ ¿œÚ¿–5¿–7   ÄÈ/// @docImport 'dart:ui';
///
/// @docImport 'package:flutter/widgets.dart';
///
/// @docImport 'box.dart';
/// @docImport 'paragraph.dart';
/// @docImport 'proxy_box.dart';
/// @docImport 'view.dart';
/// @docImport 'viewport.dart';
ÅôÅÆÅ≠Å∞ÅƒÅ«   Å   Ç   ÇB   Çj   Çì   ÇΩ   Ç‘   ÇÈ   ÇˇÉ,ÑrÑtÑõÑªÑΩ  ÑÊÇhÑÊÜ§Å∑/// Base class for data associated with a [RenderObject] by its parent.
///
/// Some render objects wish to store data on their children, such as the
/// children's input parameters to the parent's layout algorithm or the
/// children's position relative to other children.
///
/// See also:
///
///  * [RenderObject.setupParentData], which [RenderObject] subclasses may
///    override to attach specific types of parent data to children.     Ü≥káá:/// Called when the RenderObject is removed from the tree.  ÜÜÒÜ˝Ü˛á"*á5á5   á"á# à∫¿ p»à∫ã±Ç/// A place to paint.
///
/// Rather than holding a canvas directly, [RenderObject]s paint using a painting
/// context. The painting context has a [Canvas], which receives the
/// individual draw operations, and also has functions for painting child
/// render objects.
///
/// When painting a child render object, the canvas held by the painting context
/// can change because the draw operations issued before and after painting the
/// child might be recorded in separate compositing layers. For this reason, do
/// not hold a reference to the canvas across operations that might paint
/// child render objects.
///
/// New [PaintingContext] objects are created automatically when using
/// [PaintingContext.repaintCompositedChild] and [pushLayer]. ãŸÄ–åm åmå| ~/// Creates a painting context.
///
/// Typically only called by [PaintingContext.repaintCompositedChild]
/// and [pushLayer].å}åÉåÇ  åìåôåò  å`åaå≠$å¬å¬  å÷ÅAééÅ/// An estimate of the bounds within which the painting context's [canvas]
/// will record painting commands. This can be useful for debugging.
///
/// The canvas will allow painting outside these bounds.
///
/// The [estimatedBounds] rectangle is in the [canvas] coordinate system. ≠7≠E≠E  ≠V≠j≠j  ≠w≠≠  ´êÅé´ô´ô    ≠ãÅrÆÆÄ“/// The canvas on which to paint.
///
/// The current canvas can change whenever you paint a child using this
/// context, which means it's fragile to hold a reference to the canvas
/// returned by this getter.  ÆhÆi éÇïèÁèÁÅ®/// Repaint the given render object.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of painting. The render object's
/// layer, if any, is re-used, along with any layers in the subtree that don't
/// need to be repainted.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. è˛êê  ê#êê  ê1êµâ7ê¡ê¡  êﬁêÏêÎ  ê¯#ê˛ê˝  ë!ë3ë2  ëôÖÇõ˛õ˛ÅÎ/// Update the composited layer of [child] without repainting its children.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of a composited layer update but
/// not in need of painting. The render object's layer is re-used, and none
/// of its children are repaint or their layers updated.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. úú"ú!   üvÇ¡†÷†÷ÅC/// In debug mode, repaint the given render object using a custom painting
/// context that can record the results of the painting operation in addition
/// to performing the regular paint of the child.
///
/// See also:
///
///  * [repaintCompositedChild], for repainting a composited child without
///    instrumentation. °°°  °#°!°   °D&°^°]  °9¢;Éõ£W£WÅ/// Paint a child [RenderObject].
///
/// If the child has its own composited layer, the child will be composited
/// into the layer subtree associated with this painting context. Otherwise,
/// the child will be painted into the current PictureLayer for this context. £b£p£o  £v£~£}   •⁄É©•ﬂ•ﬂ  •Ô•˝•¸  ¶¶¶
   ©áÇ´´Åp/// Adds a layer to the recording requiring that the recording is already
/// stopped.
///
/// Do not call this function directly: call [addLayer] or [pushLayer]
/// instead. This function is called internally when all layers not
/// generated from the [canvas] are added.
///
/// Subclasses that need to customize how layers are added should override
/// this method. ´(´/´.  ´
´ØÅØØ    ∞Çì≤:≤:Åˆ/// Adds a [CompositionCallback] for the current [ContainerLayer] used by this
/// context.
///
/// Composition callbacks are called whenever the layer tree containing the
/// current layer of this painting context gets composited, or when it gets
/// detached and will not be rendered again. This happens regardless of
/// whether the layer is added via retained rendering or not.
///
/// {@macro flutter.rendering.Layer.compositionCallbacks}
///
/// See also:
///   *  [Layer.addCompositionCallback]. ≤Q≤f≤e   ≤µÖ¥¬¥¬Å’/// Stop recording to a canvas if recording has started.
///
/// Do not call this function directly: functions in this class will call
/// this method as needed. This function is called internally to ensure that
/// recording is stopped before adding layers or finalizing the results of a
/// paint.
///
/// Subclasses that need to customize how recording to a canvas is performed
/// should override this method to save the results of the custom canvas
/// recordings.  ¥ü¥†¥¨¥≠∑∆Ç¶πÎπÎÇ	/// Hints that the painting in the current layer is complex and would benefit
/// from caching.
///
/// If this hint is not set, the compositor will apply its own heuristics to
/// decide whether the current layer is complex enough to benefit from
/// caching.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   ∫pÉºıºıÇi/// Hints that the painting in the current layer is likely to change next frame.
///
/// This hint tells the compositor not to cache the current layer because the
/// cache will not be used in the future. If this hint is not set, the
/// compositor will apply its own heuristics to decide whether the current
/// layer is likely to be reused in the future.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   Ω|ÇŒø˙ø˙Ç\/// Adds a composited leaf layer to the recording.
///
/// After calling this function, the [canvas] property will change to refer to
/// a new [Canvas] that draws on top of the given layer.
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips.
///
/// See also:
///
///  * [pushLayer], for adding a layer and painting further contents within
///    it. ¿ @¿ @
¿ @	   ¿ @Nà$¿ EÚ¿ EÚÖh/// Appends the given layer to the recording, and calls the `painter` callback
/// with that layer, providing the `childPaintBounds` as the estimated paint
/// bounds of the child. The `childPaintBounds` can be used for debugging but
/// have no effect on painting.
///
/// The given layer must be an unattached orphan. (Providing a newly created
/// object, rather than reusing an existing layer, satisfies that
/// requirement.)
///
/// {@template flutter.rendering.PaintingContext.pushLayer.offset}
/// The `offset` is the offset to pass to the `painter`. In particular, it is
/// not an offset applied to the layer itself. Layers conceptually by default
/// have no position or size, though they can transform their contents. For
/// example, an [OffsetLayer] applies an offset to its children.
/// {@endtemplate}
///
/// If the `childPaintBounds` are not specified then the current layer's paint
/// bounds are used. This is appropriate if the child layer does not apply any
/// transformation or clipping to its contents. The `childPaintBounds`, if
/// specified, must be in the coordinate system of the new layer (i.e. as seen
/// by its children after it applies whatever transform to its contents), and
/// should not go outside the current layer's paint bounds.
///
/// See also:
///
///  * [addLayer], for pushing a layer without painting further contents
///    within it. ¿ F¿ F¿ F  ¿ F ¿ F9¿ F8  ¿ FE¿ FM¿ FL  ¿ FZ¿ Fa¿ F`   ¿ HvÅ!¿ I'¿ I'Äç/// Creates a painting context configured to paint into [childLayer].
///
/// The `bounds` are estimated paint bounds for debugging purposes. ¿ I:¿ IJ¿ II  ¿ IU¿ I[¿ IZ  ¿ I
¿ I¿ Iõäª¿ Qe¿ Qeáp/// Clip further painting using a rectangle.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
/// The `needsCompositing` argument specifies whether the child needs
/// compositing. Typically this matches the value of
/// [RenderObject.needsCompositing] for the caller. If false, this method
/// returns null, indicating that a layer is no longer necessary. If a render
/// object calling this method stores the `oldLayer` in its
/// [RenderObject.layer] field, it should set that field to null.
///
/// When `needsCompositing` is false, this method will use a more efficient
/// way to apply the layer effect than actually creating a layer.
/// {@endtemplate}
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.offset}
/// The `offset` argument is the offset from the origin of the canvas'
/// coordinate system to the origin of the caller's coordinate system.
/// {@endtemplate}
///
/// The `clipRect` is the rectangle (in the caller's coordinate system) to use
/// to clip the painting done by [painter]. It should not include the
/// `offset`.
///
/// The `painter` callback will be called while the `clipRect` is applied. It
/// is called synchronously during the call to [pushClipRect].
///
/// The `clipBehavior` argument controls how the rectangle is clipped.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.oldLayer}
/// For the `oldLayer` argument, specify the layer created in the previous
/// frame. This gives the engine more information for performance
/// optimizations. Typically this is the value of [RenderObject.layer] that a
/// render object creates once, then reuses for all subsequent frames until a
/// layer is no longer needed (e.g. the render object no longer needs
/// compositing) or until the render object changes the type of the layer
/// (e.g. from opacity layer to a clip rect layer).
/// {@endtemplate} ¿ Qw¿ Q}¿ Q|  ¿ Qí¿ Qö¿ Qô  ¿ Q•¿ Q´¿ Q™  ¿ Q∏¿ Q—¿ Q–  ¿ Qﬂ!¿ QÂ¿ Q‰  ¿ R¿ R¿ R  ¿ QÛ¿ Q˜¿ Q¯¿ TZÜ≈¿ Wﬂ¿ WﬂÉN/// Clip further painting using a rounded rectangle.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipRRect` argument specifies the rounded-rectangle (in the caller's
/// coordinate system) to use to clip the painting done by `painter`. It
/// should not include the `offset`.
///
/// The `painter` callback will be called while the `clipRRect` is applied. It
/// is called synchronously during the call to [pushClipRRect].
///
/// The `clipBehavior` argument controls how the rounded rectangle is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ WÚ¿ W¯¿ W˜  ¿ X¿ X¿ X  ¿ X ¿ X&¿ X%  ¿ X1¿ X8¿ X7  ¿ XF¿ X_¿ X^  ¿ Xm"¿ Xs¿ Xr  ¿ Xï¿ X¶¿ X•  ¿ XÅ¿ XÖ¿ XÜ¿ [#áÆ¿ _$¿ _$Éæ/// Clip further painting using a rounded superellipse.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipRSuperellipse` argument specifies the rounded-superellipse (in the caller's
/// coordinate system) to use to clip the painting done by `painter`. It
/// should not include the `offset`.
///
/// The `painter` callback will be called while the `clipRSuperellipse` is applied. It
/// is called synchronously during the call to [pushClipRSuperellipse].
///
/// The `clipBehavior` argument controls how the rounded rectangle is clipped.
///
/// Hit tests are performed based on the bounding box of the [RSuperellipse].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ _?¿ _E¿ _D  ¿ _Z¿ _b¿ _a  ¿ _m¿ _s¿ _r  ¿ _~¿ _ç¿ _å  ¿ _£¿ _º¿ _ª  ¿ _ "¿ _–¿ _œ  ¿ _Ú ¿ `¿ `
  ¿ _ﬁ¿ _‚¿ _„¿ b’Üè¿ f1¿ f1É&/// Clip further painting using a path.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipPath` argument specifies the [Path] (in the caller's coordinate
/// system) to use to clip the painting done by `painter`. It should not
/// include the `offset`.
///
/// The `painter` callback will be called while the `clipPath` is applied. It
/// is called synchronously during the call to [pushClipPath].
///
/// The `clipBehavior` argument controls how the path is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ fC¿ fI¿ fH  ¿ f^¿ ff¿ fe  ¿ fq¿ fw¿ fv  ¿ fÇ¿ fà¿ fá  ¿ fï¿ fÆ¿ f≠  ¿ fº"¿ f¬¿ f¡  ¿ f‰¿ fÙ¿ fÛ  ¿ f–¿ f‘¿ f’¿ ihÑ`¿ lï¿ lïÇ˚/// Blend further painting with a color filter.
///
/// {@macro flutter.rendering.PaintingContext.pushLayer.offset}
///
/// The `colorFilter` argument is the [ColorFilter] value to use when blending
/// the painting done by `painter`.
///
/// The `painter` callback will be called while the `colorFilter` is applied.
/// It is called synchronously during the call to [pushColorFilter].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ l™¿ l≤¿ l±  ¿ lΩ¿ l ¿ l…  ¿ l⁄¿ lÛ¿ lÚ  ¿ m¿ m¿ m   ¿ mÃÜ¿ p°¿ p°Ç¶/// Transform further painting using a matrix.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// The `offset` argument is the offset to pass to `painter` and the offset to
/// the origin used by `transform`.
///
/// The `transform` argument is the [Matrix4] with which to transform the
/// coordinate system while calling `painter`. It should not include `offset`.
/// It is applied effectively after applying `offset`.
///
/// The `painter` callback will be called while the `transform` is applied. It
/// is called synchronously during the call to [pushTransform].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ p¥¿ p∫¿ pπ  ¿ pœ¿ p◊¿ p÷  ¿ p‚¿ pÎ¿ pÍ  ¿ p˘¿ q¿ q  ¿ q ¿ q1¿ q0   ¿ sÎÑˆ¿ w≥¿ w≥Éñ/// Blend further painting with an alpha value.
///
/// The `offset` argument indicates an offset to apply to all the children
/// (the rendering created by `painter`).
///
/// The `alpha` argument is the alpha value to use when blending the painting
/// done by `painter`. An alpha value of 0 means the painting is fully
/// transparent and an alpha value of 255 means the painting is fully opaque.
///
/// The `painter` callback will be called while the `alpha` is applied. It
/// is called synchronously during the call to [pushOpacity].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ wƒ¿ wÃ¿ wÀ  ¿ w◊	¿ w‹¿ w€  ¿ wÊ¿ wˇ¿ w˛  ¿ x¿ x¿ x   ¿ xÂÄõ¿ x¯¿ x¯   ¿ xÂ¿ xÊ ¿ yÑêT¿ yÑ¿ É{â‹/// An abstract set of layout constraints.
///
/// Concrete layout models (such as box) will create concrete subclasses to
/// communicate layout constraints between parents and children.
///
/// ## Writing a Constraints subclass
///
/// When creating a new [RenderObject] subclass with a new layout protocol, one
/// will usually need to create a new [Constraints] subclass to express the
/// input to the layout algorithms.
///
/// A [Constraints] subclass should be immutable (all fields final). There are
/// several members to implement, in addition to whatever fields, constructors,
/// and helper methods one may find useful for a particular layout protocol:
///
/// * The [isTight] getter, which should return true if the object represents a
///   case where the [RenderObject] class has no choice for how to lay itself
///   out. For example, [BoxConstraints] returns true for [isTight] when both
///   the minimum and maximum widths and the minimum and maximum heights are
///   equal.
///
/// * The [isNormalized] getter, which should return true if the object
///   represents its data in its canonical form. Sometimes, it is possible for
///   fields to be redundant with each other, such that several different
///   representations have the same implications. For example, a
///   [BoxConstraints] instance with its minimum width greater than its maximum
///   width is equivalent to one where the maximum width is set to that minimum
///   width (`2<w<1` is equivalent to `2<w<2`, since minimum constraints have
///   priority). This getter is used by the default implementation of
///   [debugAssertIsValid].
///
/// * The [debugAssertIsValid] method, which should assert if there's anything
///   wrong with the constraints object. (We use this approach rather than
///   asserting in constructors so that our constructors can be `const` and so
///   that it is possible to create invalid constraints temporarily while
///   building valid ones.) See the implementation of
///   [BoxConstraints.debugAssertIsValid] for an example of the detailed checks
///   that can be made.
///
/// * The [==] operator and the [hashCode] getter, so that constraints can be
///   compared for equality. If a render object is given constraints that are
///   equal, then the rendering library will avoid laying the object out again
///   if it is not dirty.
///
/// * The [toString] method, which should describe the constraints so that they
///   appear in a usefully readable form in the output of [debugDumpRenderTree]. ¿ ÉãÄ≠¿ Ñ* ¿ Ñ*¿ Ñ5 Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.   ¿ Ñ<[¿ Ñè¿ ÑèG/// Whether there is exactly one size possible given these constraints.   ¿ ÑõX¿ ÑÊ¿ ÑÊ?/// Whether the constraint is expressed in a consistent manner.    ¿ Ñ˜Ñﬂ¿ â.¿ â.Ñ/// Asserts that the constraints are valid.
///
/// This might involve checks more detailed than [isNormalized].
///
/// For example, the [BoxConstraints] subclass verifies that the constraints
/// are not [double.nan].
///
/// If the `isAppliedConstraint` argument is true, then even stricter rules
/// are enforced. This argument is set to true when checking constraints that
/// are about to be applied to a [RenderObject] during layout, as opposed to
/// constraints that may be further affected by other constraints. For
/// example, the asserts for verifying the validity of
/// [RenderConstrainedBox.additionalConstraints] do not set this argument, but
/// the asserts for verifying the argument passed to the [RenderObject.layout]
/// method do.
///
/// The `informationCollector` argument takes an optional callback which is
/// called when an exception is to be thrown. The collected information is
/// then included in the message after the error line.
///
/// Returns the same as [isNormalized] if asserts are disabled. ¿ âG ¿ âM¿ âL  ¿ âm*¿ âÑ¿ âÉ  ¿ âb¿ Éa¿ Éb¿ ã{Çò¿ ã{¿ ãÅ  ¿ ã∂Ä¸¿ ã∂¿ ãÀ¿ ãÃ¿ ãÕ¿ ãÃ ¿ ãŒ¿ ã›¿ ã‹  ¿ ã„¿ ãÈ¿ ãË  ¿ ã˚¿ ãÙ¿ ã˝¿ å∂¿ å ¿ å   ¿ å’f¿ ç3¿ ç3G/// The callback that will be notified when the semantics tree updates.   ¿ ç@Ä—¿ çQ¿ çQ   ¿ ç@¿ çA ¿ é¿ i√¿ é¿ ò ä©/// The pipeline owner manages the rendering pipeline.
///
/// The pipeline owner provides an interface for driving the rendering pipeline
/// and stores the state about which render objects have requested to be visited
/// in each stage of the pipeline. To flush the pipeline, call the following
/// functions in order:
///
/// 1. [flushLayout] updates any render objects that need to compute their
///    layout. During this phase, the size and position of each render
///    object is calculated. Render objects might dirty their painting or
///    compositing state during this phase.
/// 2. [flushCompositingBits] updates any render objects that have dirty
///    compositing bits. During this phase, each render object learns whether
///    any of its children require compositing. This information is used during
///    the painting phase when selecting how to implement visual effects such as
///    clipping. If a render object has a composited child, it needs to use a
///    [Layer] to create the clip in order for the clip to apply to the
///    composited child (which will be painted into its own [Layer]).
/// 3. [flushPaint] visits any render objects that need to paint. During this
///    phase, render objects get a chance to record painting commands into
///    [PictureLayer]s and construct other composited [Layer]s.
/// 4. Finally, if semantics are enabled, [flushSemantics] will compile the
///    semantics for the render objects. This semantic information is used by
///    assistive technology to improve the accessibility of the render tree.
///
/// The [RendererBinding] holds the pipeline owner for the render objects that
/// are visible on screen. You can create other pipeline owners to manage
/// off-screen objects, which can flush their pipelines independently of the
/// on-screen render objects.
///
/// [PipelineOwner]s can be organized in a tree to manage multiple render trees,
/// where each [PipelineOwner] is responsible for one of the render trees. To
/// build or modify the tree, call [adoptChild] or [dropChild]. During each of
/// the different flush phases described above, a [PipelineOwner] will first
/// perform the phase on the nodes it manages in its own render tree before
/// calling the same flush method on its children. No assumption must be made
/// about the order in which child [PipelineOwner]s are flushed.
///
/// A [PipelineOwner] may also be [attach]ed to a [PipelineManifold], which
/// gives it access to platform functionality usually exposed by the bindings
/// without tying it to a specific binding implementation. All [PipelineOwner]s
/// in a given tree must be attached to the same [PipelineManifold]. This
/// happens automatically during [adoptChild]. ¿ ò˘Å…¿ ôﬂ ¿ ôﬂ¿ ôÏ Ä€/// Creates a pipeline owner.
///
/// Typically created by the binding (e.g., [RendererBinding]), but can be
/// created separately from the binding to drive off-screen render objects
/// through the rendering pipeline.¿ ôÛ¿ ô˘¿ ô¯  ¿ ö¿ ö¿ ö  ¿ ö2¿ ö8¿ ö7  ¿ öN¿ öT¿ öS   ¿ ö∆Çç¿ ùA¿ ùAÇP/// Called when a render object associated with this pipeline owner wishes to
/// update its visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// When the [PipelineOwner] is attached to a [PipelineManifold] and
/// [onNeedVisualUpdate] is provided, the [onNeedVisualUpdate] callback is
/// invoked instead of calling [PipelineManifold.requestVisualUpdate]. ¿ ùXÄ’¿ û¿ ûÄ°/// Called whenever this pipeline owner creates a semantics object.
///
/// Typical implementations will schedule the creation of the initial
/// semantics tree. ¿ û2Å¿ ü0¿ ü0Ä÷/// Called whenever this pipeline owner's semantics owner emits a [SemanticsUpdate].
///
/// Typical implementations will delegate the [SemanticsUpdate] to a [FlutterView]
/// that can handle the [SemanticsUpdate]. ¿ üFÄª¿ üÈ¿ üÈÄà/// Called whenever this pipeline owner disposes its semantics owner.
///
/// Typical implementations will tear down the semantics tree. ¿ °€¿ °È¿ °È  ¿ •œ#¿ •‘¿ •‘ ¿ •Ì¿ •ˆ9¿ ¶	¿ ¶	 ¿ ¶-¿ ¶.¿ ¶¿ ¶,¿ ¶ ¿ ™¿ ™¿ ™ ¿ ™¿ ™##¿ ™(¿ ™( ¿ ™A¿ µk0¿ µp¿ µp ¿ µñ¿ ∑ûN¿ ∑∑¿ ∑∑ ¿ ∑Í¿ ∑Î¿ ∑‹¿ ∑È¿ ∑›¿ ªπ8¿ ªÃ¿ ªÃ ¿ ªÔ¿ ª¿ ª·¿ ªÓ¿ ª‚¿ øg¿ øl¿ øl ¿ ø¿  Ó¿  ˛¿  ˛  ¿ Õ$¿ Õ¿ Õ ¿ Õ9¿ “Ï!¿ “Ò¿ “Ò ¿ ”¿ ”A¿ ”)¿ ”) ¿ ”P¿ ”Q¿ ”B¿ ”O¿ ”C¿ ‰6¿ ‰3¿ ‰3 ¿ ‰N¿ ‰O¿ ‰?¿ ‰M¿ ‰@¿ ‰T¿ ‰f¿ ‰f  ¿ ‰t¿ ‰É¿ ‰É  	¿ °km¿ °¬¿ °¬B/// The unique object managed by this pipeline that has no parent.   ¿ ¶4ÇÆ¿ ®∏¿ ®∏Ç7/// The [RenderObject]s representing relayout boundaries which need to be laid out
/// in the next [flushLayout] pass.
///
/// Relayout boundaries are added when they are marked for layout.
/// Subclasses of [PipelineOwner] may use them to invalidate caches or
/// otherwise make performance optimizations. Since nodes may be marked for
/// layout at any time, they are best checked during [flushLayout].
///
/// Relayout boundaries owned by child [PipelineOwner]s are not included here.
///
/// Boundaries appear in an arbitrary order, and may appear multiple times.  ¿ ®Ç¿ ®É¿ ®è¿ ®ê¿ ®ÊÅ¿ ©ÿ¿ ©ÿÄ‹/// Whether this pipeline is currently in the layout phase.
///
/// Specifically, whether [flushLayout] is currently running.
///
/// Only valid when asserts are enabled; in release builds, this
/// always returns false.   ¿ ªˆÇV¿ æ$¿ æ$ÅÂ/// The [RenderObject]s which need to be painted in the next [flushPaint] pass.
///
/// [RenderObject]s marked with [RenderObject.isRepaintBoundary] are added
/// when they are marked needing paint. Subclasses of [PipelineOwner] may use them
/// to invalidate caches or otherwise make performance optimizations.
/// Since nodes may be marked for layout at any time, they are best checked during
/// [flushPaint].
///
/// Marked children of child [PipelineOwner]s are not included here.  ¿ ΩÓ¿ ΩÔ¿ Ω˚¿ Ω¸¿ æPÅ¿ ø@¿ ø@Ä⁄/// Whether this pipeline is currently in the paint phase.
///
/// Specifically, whether [flushPaint] is currently running.
///
/// Only valid when asserts are enabled. In release builds,
/// this always returns false.   ¿ »1Ç∫¿  …¿  …Çk/// The object that is managing semantics for this pipeline owner, if any.
///
/// An owner is created by [ensureSemantics] or when the [PipelineManifold] to
/// which this owner is connected has [PipelineManifold.semanticsEnabled] set
/// to true. The owner is valid for as long as
/// [PipelineManifold.semanticsEnabled] remains true or while there are
/// outstanding [SemanticsHandle]s from calls to [ensureSemantics]. The
/// [semanticsOwner] field will revert to null once both conditions are no
/// longer met.
///
/// When [semanticsOwner] is null, the [PipelineOwner] skips all steps
/// relating to semantics.   ¿ ÀÇ¿ Ã“¿ Ã“ÄË/// Deprecated.
///
/// Use [SemanticsBinding.debugOutstandingSemanticsHandles] instead. This
/// API is broken because an outstanding semantics handle on a given pipeline
/// owner doesn't mean that semantics are actually produced.  ¿ Ã¿ Ã¿ Ã¿ Ã∆¿ Ã¿ Ã\¿ Ãç¿ ÂZ¿ Â¿ Â    ¿ Î[z¿ Îd¿ Îd    ¿ °ˆÄ¶¿ °˙¿ °˙  ¿ ¢¿ ¢¿ ¢   ¿ †Åa¿ †Œ¿ †ŒÄ∫/// Calls [onNeedVisualUpdate] if [onNeedVisualUpdate] is not null.
///
/// Used to notify the pipeline owner that an associated render object wishes
/// to update its visual appearance.   ¿ ™Kâ¥¿ ´∏¿ ´∏ÅY/// Update the layout information for all dirty render objects.
///
/// This function is one of the core stages of the rendering pipeline. Layout
/// information is cleaned prior to painting so that render objects will
/// appear on screen in their up-to-date locations.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ µŒÅÃ¿ µ”¿ µ”  ¿ µÛ¿ ∂¿ ∂    ¿ ∑ÒÉƒ¿ ∏ñ¿ ∏ñÄó/// Updates the [RenderObject.needsCompositing] bits.
///
/// Called as part of the rendering pipeline after [flushLayout] and before
/// [flushPaint].   ¿ øâà§¿ ¡¿ ¡Åg/// Update the display lists for all render objects.
///
/// This function is one of the core stages of the rendering pipeline.
/// Painting occurs after layout and before the scene is recomposited so that
/// scene is composited with up-to-date display lists for every render object.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ Õ?Çº¿ œT¿ œTÄ·/// Deprecated.
///
/// Call [SemanticsBinding.ensureSemantics] instead and optionally add a
/// listener to [PipelineOwner.semanticsOwner]. This API is broken as calling
/// it does not guarantee that semantics are produced. ¿ œe¿ œt¿ œs  ¿ Œ+¿ Œ,¿ Œ6¿ œ@¿ Œ<¿ Œ∞¿ œ¿ œˇÇU¿ –¿ –    ¿ “XÄê¿ “]¿ “]    ¿ ”Wè¿ ’¿¿ ’¿Å„/// Update the semantics for render objects marked as needing a semantics
/// update.
///
/// Initially, only the root node, as scheduled by
/// [RenderObject.scheduleInitialSemantics], needs a semantics update.
///
/// This function is one of the core stages of the rendering pipeline. The
/// semantics are compiled after painting and only after
/// [RenderObject.scheduleInitialSemantics] has been called.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ‚lÄ≤¿ ‚é¿ ‚é   ¿ ‚l¿ ‚m¿ „"Äﬁ¿ „3¿ „3  ¿ „G&¿ „d¿ „c  ¿ „"¿ „#¿ ‰ìx¿ ‰ò¿ ‰ò  ¿ ‰®¿ ‰∑¿ ‰∂  ¿ ‰Ω¿ ‰Õ¿ ‰Ã   ¿ ÂmÇ¿ ÊÇ¿ ÊÇÅ/// Mark this [PipelineOwner] as attached to the given [PipelineManifold].
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically attached to their parent's [PipelineManifold]
/// when [adoptChild] is called. ¿ Êâ¿ Êõ¿ Êö   ¿ ÁéÇ†¿ ËÑ¿ ËÑÄÊ/// Mark this [PipelineOwner] as detached.
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically detached from their parent's [PipelineManifold]
/// when [dropChild] is called.   ¿ ÎŸÖ(¿ Ôì¿ ÔìÉê/// Adds `child` to this [PipelineOwner].
///
/// During the phases of frame production (see [RendererBinding.drawFrame]),
/// the parent [PipelineOwner] will complete a phase for the nodes it owns
/// directly before invoking the flush method corresponding to the current
/// phase on its child [PipelineOwner]s. For example, during layout, the
/// parent [PipelineOwner] will first lay out its own nodes before calling
/// [flushLayout] on its children. During paint, it will first paint its own
/// nodes before calling [flushPaint] on its children. This order also applies
/// for all the other phases.
///
/// No assumptions must be made about the order in which child
/// [PipelineOwner]s are flushed.
///
/// No new children may be added after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame.
///
/// To remove a child, call [dropChild]. ¿ Ôû¿ Ô≠¿ Ô¨   ¿ ÒÇ¿¿ Ú`¿ Ú`ÅG/// Removes a child [PipelineOwner] previously added via [adoptChild].
///
/// This node will cease to call the flush methods on the `child` during frame
/// production.
///
/// No children may be removed after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame. ¿ Új¿ Úy¿ Úx   ¿ Û…Å¿ ÙÄ¿ ÙÄÄ•/// Calls `visitor` for each immediate child of this [PipelineOwner].
///
/// See also:
///
///  * [adoptChild] to add a child.
///  * [dropChild] to remove a child. ¿ Ùé¿ Ù§¿ Ù£   ¿ Ù’É¿ ˆJ¿ ˆJÅa/// Release any resources held by this pipeline owner.
///
/// Prior to calling this method the pipeline owner must be removed from the
/// pipeline owner tree, i.e. it must have neither a parent nor any children
/// (see [dropChild]). It also must be [detach]ed from any [PipelineManifold].
///
/// The object is no longer usable after calling dispose.    ¿ ¯êâ¿ ¯ê¿ ¸Ér/// Manages a tree of [PipelineOwner]s.
///
/// All [PipelineOwner]s within a tree are attached to the same
/// [PipelineManifold], which gives them access to shared functionality such
/// as requesting a visual update (by calling [requestVisualUpdate]). As such,
/// the [PipelineManifold] gives the [PipelineOwner]s access to functionality
/// usually provided by the bindings without tying the [PipelineOwner]s to a
/// particular binding implementation.
///
/// The root of the [PipelineOwner] tree is attached to a [PipelineManifold] by
/// passing the manifold to [PipelineOwner.attach]. Children are attached to the
/// same [PipelineManifold] as their parent when they are adopted via
/// [PipelineOwner.adoptChild].
///
/// [PipelineOwner]s can register listeners with the [PipelineManifold] to be
/// informed when certain values provided by the [PipelineManifold] change.   ¿ ¸=Å‡¿ ˛¿ ˛Å±/// Whether [PipelineOwner]s connected to this [PipelineManifold] should
/// collect semantics information and produce a semantics tree.
///
/// The [PipelineManifold] notifies its listeners (managed with [addListener]
/// and [removeListener]) when this property changes its value.
///
/// See also:
///
///  * [SemanticsBinding.semanticsEnabled], which [PipelineManifold]
///    implementations typically use to back this property.    ¿ ˛!Éq¿|¿|É3/// Called by a [PipelineOwner] connected to this [PipelineManifold] when a
/// [RenderObject] associated with that pipeline owner wishes to update its
/// visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// A [PipelineOwner] connected to this [PipelineManifold] will call
/// [PipelineOwner.onNeedVisualUpdate] instead of this method if it has been
/// configured with a non-null [PipelineOwner.onNeedVisualUpdate] callback.
///
/// See also:
///
///  * [SchedulerBinding.ensureVisualUpdate], which [PipelineManifold]
///    implementations typically call to implement this method.    ¿ñ¿fõ¿ñ¿ÓöH/// An object in the render tree.
///
/// The [RenderObject] class hierarchy is the core of the rendering
/// library's reason for being.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=zmbmrw07qBc}
///
/// [RenderObject]s have a [parent], and have a slot called [parentData] in
/// which the parent [RenderObject] can store child-specific data, for example,
/// the child position. The [RenderObject] class also implements the basic
/// layout and paint protocols.
///
/// The [RenderObject] class, however, does not define a child model (e.g.
/// whether a node has zero, one, or more children). It also doesn't define a
/// coordinate system (e.g. whether children are positioned in Cartesian
/// coordinates, in polar coordinates, etc) or a specific layout protocol (e.g.
/// whether the layout is width-in-height-out, or constraint-in-size-out, or
/// whether the parent sets the size and position of the child before or after
/// the child lays out, etc; or indeed whether the children are allowed to read
/// their parent's [parentData] slot).
///
/// The [RenderBox] subclass introduces the opinion that the layout
/// system uses Cartesian coordinates.
///
/// ## Lifecycle
///
/// A [RenderObject] must [dispose] when it is no longer needed. The creator
/// of the object is responsible for disposing of it. Typically, the creator is
/// a [RenderObjectElement], and that element will dispose the object it creates
/// when it is unmounted.
///
/// [RenderObject]s are responsible for cleaning up any expensive resources
/// they hold when [dispose] is called, such as [Picture] or [Image] objects.
/// This includes any [Layer]s that the render object has directly created. The
/// base implementation of dispose will nullify the [layer] property. Subclasses
/// must also nullify any other layer(s) it directly creates.
///
/// ## Writing a RenderObject subclass
///
/// In most cases, subclassing [RenderObject] itself is overkill, and
/// [RenderBox] would be a better starting point. However, if a render object
/// doesn't want to use a Cartesian coordinate system, then it should indeed
/// inherit from [RenderObject] directly. This allows it to define its own
/// layout protocol by using a new subclass of [Constraints] rather than using
/// [BoxConstraints], and by potentially using an entirely new set of objects
/// and values to represent the result of the output rather than just a [Size].
/// This increased flexibility comes at the cost of not being able to rely on
/// the features of [RenderBox]. For example, [RenderBox] implements an
/// intrinsic sizing protocol that allows you to measure a child without fully
/// laying it out, in such a way that if that child changes size, the parent
/// will be laid out again (to take into account the new dimensions of the
/// child). This is a subtle and bug-prone feature to get right.
///
/// Most aspects of writing a [RenderBox] apply to writing a [RenderObject] as
/// well, and therefore the discussion at [RenderBox] is recommended background
/// reading. The main differences are around layout and hit testing, since those
/// are the aspects that [RenderBox] primarily specializes.
///
/// ### Layout
///
/// A layout protocol begins with a subclass of [Constraints]. See the
/// discussion at [Constraints] for more information on how to write a
/// [Constraints] subclass.
///
/// The [performLayout] method should take the [constraints], and apply them.
/// The output of the layout algorithm is fields set on the object that describe
/// the geometry of the object for the purposes of the parent's layout. For
/// example, with [RenderBox] the output is the [RenderBox.size] field. This
/// output should only be read by the parent if the parent specified
/// `parentUsesSize` as true when calling [layout] on the child.
///
/// Anytime anything changes on a render object that would affect the layout of
/// that object, it should call [markNeedsLayout].
///
/// ### Hit Testing
///
/// Hit testing is even more open-ended than layout. There is no method to
/// override, you are expected to provide one.
///
/// The general behavior of your hit-testing method should be similar to the
/// behavior described for [RenderBox]. The main difference is that the input
/// need not be an [Offset]. You are also allowed to use a different subclass of
/// [HitTestEntry] when adding entries to the [HitTestResult]. When the
/// [handleEvent] method is called, the same object that was added to the
/// [HitTestResult] will be passed in, so it can be used to track information
/// like the precise coordinate of the hit, in whatever coordinate system is
/// used by the new layout protocol.
///
/// ### Adapting from one protocol to another
///
/// In general, the root of a Flutter render object tree is a [RenderView]. This
/// object has a single child, which must be a [RenderBox]. Thus, if you want to
/// have a custom [RenderObject] subclass in the render tree, you have two
/// choices: you either need to replace the [RenderView] itself, or you need to
/// have a [RenderBox] that has your class as its child. (The latter is the much
/// more common case.)
///
/// This [RenderBox] subclass converts from the box protocol to the protocol of
/// your class.
///
/// In particular, this means that for hit testing it overrides
/// [RenderBox.hitTest], and calls whatever method you have in your class for
/// hit testing.
///
/// Similarly, it overrides [performLayout] to create a [Constraints] object
/// appropriate for your class and passes that to the child's [layout] method.
///
/// ### Layout interactions between render objects
///
/// In general, the layout of a render object should only depend on the output of
/// its child's layout, and then only if `parentUsesSize` is set to true in the
/// [layout] call. Furthermore, if it is set to true, the parent must call the
/// child's [layout] if the child is to be rendered, because otherwise the
/// parent will not be notified when the child changes its layout outputs.
///
/// It is possible to set up render object protocols that transfer additional
/// information. For example, in the [RenderBox] protocol you can query your
/// children's intrinsic dimensions and baseline geometry. However, if this is
/// done then it is imperative that the child call [markNeedsLayout] on the
/// parent any time that additional information changes, if the parent used it
/// in the last layout phase. For an example of how to implement this, see the
/// [RenderBox.markNeedsLayout] method. It overrides
/// [RenderObject.markNeedsLayout] so that if a parent has queried the intrinsic
/// or baseline information, it gets marked dirty whenever the child's geometry
/// changes. ¿5Å¿g ¿g¿s //// Initializes internal fields for subclasses.  ¿!À¿!–¿!– ¿!·¿&ÓÉ®¿*å¿*åÉs/// Data for use by the parent render object.
///
/// The parent data is used by the render object that lays out this object
/// (typically this object's parent in the render tree) to store information
/// relevant to itself and to any other nodes who happen to know exactly what
/// the data means. The parent data is opaque to the child.
///
///  * The parent data field must not be directly set, except by calling
///    [setupParentData] on the parent node.
///  * The parent data can be set before the child is added to the parent, by
///    calling [setupParentData] on the future parent node.
///  * The conventions for using the parent data depend on the layout protocol
///    used between the parent and child. For example, in box layout, the
///    parent data is completely opaque but in sector layout the child is
///    permitted to read some fields of the parent data. ¿/ﬂ¿/„¿/„ ¿/Ï¿2˙¿3¿3  ¿;!ÄÊ¿;˚¿;˚Ä√/// The object responsible for creating this render object.
///
/// Used in debug messages.
///
/// See also:
///
///  * [DebugCreator], which the [widgets] library uses as values for this field. ¿A@"¿AE¿AE ¿A]¿BL"¿BQ¿BQ ¿Bi¿CQ'¿Cf¿Cf  ¿Gå¿Gí¿Gí  ¿G≠"¿G≤¿G≤ ¿G ¿a7¿aF¿aF  ¿l¿l¿l ¿l$¿l-Üô¿r≥¿r≥ÜG/// Whether this [RenderObject] is a known relayout boundary.
///
/// A relayout boundary is a [RenderObject] whose parent does not rely on the
/// child [RenderObject]'s size in its own layout algorithm. In other words,
/// if a [RenderObject]'s [performLayout] implementation does not ask the child
/// for its size at all, **the child** is a relayout boundary.
///
/// The type of "size" is typically defined by the coordinate system a
/// [RenderObject] subclass uses. For instance, [RenderSliver]s produce
/// [SliverGeometry] and [RenderBox]es produce [Size]. A parent [RenderObject]
/// may not read the child's size but still depend on the child's layout (using
/// a [RenderBox] child's baseline location, for example), this flag does not
/// reflect such dependencies and the [RenderObject] subclass must handle those
/// cases in its own implementation. See [RenderBox.markNeedsLayout] for an
/// example.
///
/// Relayout boundaries enable an important layout optimization: the parent not
/// depending on the size of a child means the child changing size does not
/// affect the layout of the parent. When a relayout boundary is marked as
/// needing layout, its parent does not have to be marked as dirty, hence the
/// name. For details, see [markNeedsLayout].
///
/// This flag is typically set in [RenderObject.layout], and consulted by
/// [markNeedsLayout] in deciding whether to recursively mark the parent as
/// also needing layout.
///
/// The flag is initially set to `null` when [layout] has yet been called, and
/// reset to `null` when the parent drops this child via [dropChild]. ¿sj)¿so¿so ¿sé¿u¿u,¿u,  ¿v‹Ç¿xÀ¿xÀÅ“/// When true, a debug method ([debugAssertDoesMeetConstraints], for instance)
/// is currently executing asserts for verifying the consistent behavior of
/// intrinsic dimensions methods.
///
/// This is typically set by framework debug methods. It is read by tests to
/// selectively ignore custom layout callbacks. It should not be set outside of
/// intrinsic-checking debug methods, and should not be checked in release mode
/// (where it will always be false).¿xÂ¿º;!¿º@¿º@ ¿ºW¿Ω5&¿ΩJ¿ΩJ  ¿ƒ[¿ƒe¿ƒe  ¿—€N¿—˝¿—˝ ¿“¿“¿“&¿“¿“'¿“(¿‘(¿‘¿‘ ¿‘9¿⁄¿⁄¿⁄  ¿‰¿‰ı¿‰ı ¿Â¿Ád(¿Ái¿Ái ¿Áá¿GQK¿Gs¿Gs ¿GÄ¿Gñ¿Gõ¿Gó¿  Ä˝¿!=¿!=b/// Whether this has been disposed.
///
/// If asserts are disabled, this property is always null.   ¿,Éæ¿/Ã¿/ÃÉÖ/// The depth of this render object in the render tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree: a node always has a [depth] greater than its ancestors.
/// There's no guarantee regarding depth between siblings.
///
/// The [depth] of a child can be more than one greater than the [depth] of
/// the parent, because the [depth] values are never decreased: all that
/// matters is that it's greater than the parent. Consider a tree with a root
/// node A, a child B, and a grandchild C. Initially, A will have [depth] 0,
/// B [depth] 1, and C [depth] 2. If C is moved to be a child of A,
/// sibling of B, then the numbers won't change. C's [depth] will still be 2.
///
/// The depth of a node is used to ensure that nodes are processed in
/// depth order.  The [depth] is automatically maintained by the [adoptChild]
/// and [dropChild] methods.   ¿2RÄ•¿2Â¿2Âz/// The parent of this render object in the render tree.
///
/// The [parent] of the root node in the render tree is null.   ¿3Å'¿4 ¿4 Ä’/// The semantics parent of this render object in the semantics tree.
///
/// This is typically the same as [parent].
///
/// [OverlayPortal] overrides this field to change how it forms its
/// semantics sub-tree.  ¿3ˆ¿3˜¿@[Ä‚¿A¿AÄ¢/// Whether [performResize] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿AgÄ‚¿B¿BÄ¢/// Whether [performLayout] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿BsÄ€¿C&¿C&Äë/// The render object that is actively computing layout.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿FaÅ(¿GX¿GXÄ·/// Whether the parent render object is permitted to use this render object's
/// size.
///
/// Determined by the `parentUsesSize` parameter to [layout].
///
/// Only valid when asserts are enabled. In release builds, throws.   ¿G‘ï.¿IO¿IOÅc/// Whether tree mutations are currently permitted.
///
/// This is only useful during layout. One should also not mutate the tree at
/// other times (e.g. during paint or while assembling the semantic tree) but
/// this function does not currently enforce those conventions.
///
/// Only valid when asserts are enabled. This will throw in release builds.   ¿]Éd¿_–¿_–Çí/// The [RenderObject] that's expected to call [layout] on this [RenderObject]
/// in its [performLayout] implementation.
///
/// This method is used to implement an assert that ensures the render subtree
/// actively performing layout can not get accidentally mutated. It's only
/// implemented in debug mode and always returns null in release mode.
///
/// The default implementation returns [parent] and overriding is rarely
/// needed. A [RenderObject] subclass that expects its
/// [RenderObject.performLayout] to be called from a different [RenderObject]
/// that's not its [parent] should override this property to return the actual
/// layout parent.  ¿_±¿_≤¿`nÄ∆¿a$¿a$Äö/// The owner for this render object (null if unattached).
///
/// The entire render tree that this render object belongs to
/// will have the same owner.   ¿aQÄ˘¿b/¿b/Ä /// Whether the render tree this render object belongs to is attached to a [PipelineOwner].
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿i◊Ç5¿kÉ¿kÉÅí/// Whether this render object's layout information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. In release builds, this throws.
///
/// It is intended to be used by tests and asserts.   ¿rÀÄú¿s&¿s&O/// Whether [invokeLayoutCallback] for this render object is currently running.   ¿sòÅÉ¿te¿teÄß/// The layout constraints most recently supplied by the parent.
///
/// If layout has not yet happened, accessing this getter will
/// throw a [StateError] exception.  ¿tH¿tI¿©†ÉZ¿¨„¿¨„É/// Whether the constraints are the only input to the sizing algorithm (in
/// particular, child nodes have no impact).
///
/// Returning false is always correct, but returning true can be more
/// efficient when computing the size of this render object because we don't
/// need to recompute the size if the constraints don't change.
///
/// Typically, subclasses will always return the same value. If the value can
/// change, then, when it does change, the subclass should make sure to call
/// [markNeedsLayoutForSizedByParentChange].
///
/// Subclasses that return true must not change the dimensions of this render
/// object in [performLayout]. Instead, that work should be done by
/// [performResize] or - for subclasses of [RenderBox] - in
/// [RenderBox.computeDryLayout].  ¿¨Õ¿¨Œ¿ª`Äÿ¿º¿ºÄö/// Whether [paint] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿ºaÄ—¿Ω¿ΩÄâ/// The render object that is actively painting.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿Ω`É£¿¿Ë¿¿ËÉ\/// Whether this render object repaints separately from its parent.
///
/// Override this in subclasses to indicate that instances of your class ought
/// to repaint independently. For example, render objects that repaint
/// frequently might want to repaint themselves without requiring their parent
/// to repaint.
///
/// If this getter returns true, the [paintBounds] are applied to this object
/// and all descendants. The framework invokes [RenderObject.updateCompositedLayer]
/// to create an [OffsetLayer] and assigns it to the [layer] field.
/// Render objects that declare themselves as repaint boundaries must not replace
/// the layer created by the framework.
///
/// If the value of this getter changes, [markNeedsCompositingBitsUpdate] must
/// be called.
///
/// See [RepaintBoundary] for more information about how repaint boundaries function.   ¿¬tÅ„¿ƒ7¿ƒ7Åú/// Whether this render object always needs compositing.
///
/// Override this in subclasses to indicate that your paint function always
/// creates at least one composited layer. For example, videos should return
/// true if they use hardware decoders.
///
/// You must call [markNeedsCompositingBitsUpdate] if the value of this getter
/// changes. (This is implied when [adoptChild] or [dropChild] are called.)  ¿ƒ!¿ƒ"¿…∆Ü◊¿–¿–Öˆ/// The compositing layer that this render object uses to repaint.
///
/// If this render object is not a repaint boundary, it is the responsibility
/// of the [paint] method to populate this field. If [needsCompositing] is
/// true, this field may be populated with the root-most layer used by the
/// render object implementation. When repainting, instead of creating a new
/// layer the render object may update the layer stored in this field for better
/// performance. It is also OK to leave this field as null and create a new
/// layer on every repaint, but without the performance benefit. If
/// [needsCompositing] is false, this field must be set to null either by
/// never populating this field, or by setting it to null when the value of
/// [needsCompositing] changes from true to false.
///
/// If a new layer is created and stored in some other field on the render
/// object, the render object must use a [LayerHandle] to store it. A layer
/// handle will prevent the layer from being disposed before the render
/// object is finished with it, and it will also make sure that the layer
/// gets appropriately disposed when the render object creates a replacement
/// or nulls it out. The render object must null out the [LayerHandle.layer]
/// in its [dispose] method.
///
/// If this render object is a repaint boundary, the framework automatically
/// creates an [OffsetLayer] and populates this field prior to calling the
/// [paint] method. The [paint] method must not replace the value of this
/// field.  ¿œÔ¿œ¿“.Å‰¿”É¿”ÉÅ2/// In debug mode, the compositing layer that this render object uses to repaint.
///
/// This getter is intended for debugging purposes only. In release builds, it
/// always returns null. In debug builds, it returns the layer even if the layer
/// is dirty.
///
/// For production code, consider [layer].   ¿⁄TÅ‡¿€¢¿€¢Å6/// Whether we or one of our descendants has a compositing layer.
///
/// If this node needs compositing as indicated by this bit, then all ancestor
/// nodes will also need compositing.
///
/// Only legal to call after [PipelineOwner.flushLayout] and
/// [PipelineOwner.flushCompositingBits] have been called.   ¿·KÉ°¿‰e¿‰eÇÙ/// Whether this render object's paint information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.
///
/// It is possible (and indeed, quite common) for [debugNeedsPaint] to be
/// false and [debugNeedsLayout] to be true. The render object will still be
/// repainted in the next frame when this is the case, because the
/// [markNeedsPaint] method is implicitly called by the framework after a
/// render object is laid out, prior to the paint phase.   ¿ÂÇT¿Êπ¿ÊπÅì/// Whether this render object's layer information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.   ¿ÌÅ¿˚¿˚Ä˙/// An estimate of the bounds within which this render object will paint.
/// Useful for debugging flags such as [debugPaintLayerBordersEnabled].
///
/// These are also the bounds used by [showOnScreen] to make a [RenderObject]
/// visible on screen.   ¿?ùÄÇ¿@¿@e/// The bounding box, in the local coordinate system, of this
/// object, for accessibility purposes.   ¿@#Å¿@Ø¿@Ø|/// Whether the semantics of this render object is dirty and await the update.
///
/// Always returns false in release mode.   ¿A+ÇV¿Bà¿BàÅ9/// The semantics of this render object.
///
/// Exposed only for testing and debugging. To learn about the semantics of
/// render objects in production, obtain a [SemanticsHandle] from
/// [PipelineOwner.ensureSemantics].
///
/// Only valid in debug and profile mode. In release builds, always returns
/// null.   ¿–°Å6¿–≤¿–≤  ¿–∏¿–…¿–»  ¿–°¿–¢9¿;Éã¿ˆ¿ˆÇó/// Cause the entire subtree rooted at the given [RenderObject] to be marked
/// dirty for layout, paint, etc, so that the effects of a hot reload can be
/// seen, or so that the effect of changing a global debug flag (such as
/// [debugPaintSizeEnabled]) can be applied.
///
/// This is called by the [RendererBinding] in response to the
/// `ext.flutter.reassemble` hook, which is used by development tools when the
/// application code has changed, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development.
///
/// See also:
///
///  * [BindingBase.reassembleApplication]   ¿!ÎÑÚ¿$Œ¿$ŒÇ∞/// Release any resources held by this render object.
///
/// The object that creates a RenderObject is in charge of disposing it.
/// If this render object has created any children directly, it must dispose
/// of those children in this method as well. It must not dispose of any
/// children that were created by some other object, such as
/// a [RenderObjectElement]. Those children will be disposed when that
/// element unmounts, which may be delayed if the element is moved to another
/// part of the tree.
///
/// Implementations of this method must end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// The object is no longer usable after calling dispose.  ¿$∏¿$π¿*õÅ¿+h¿+hÄø/// Override to setup parent data correctly for your children.
///
/// You can call this function to set up the parent data for child before the
/// child is added to the parent's child list. ¿+x¿+ê¿+è   ¿/ÚÅi¿0´¿0´Äû/// Adjust the [depth] of the given [child] to be greater than this node's own
/// [depth].
///
/// Only call this method from overrides of [redepthChildren]. ¿0∏¿0∆¿0≈  ¿0ô¿0ö¿1_ÄÔ¿2:¿2:Ä¿/// Adjust the [depth] of this node's children, if any.
///
/// Override this method in subclasses with child nodes to call [redepthChild]
/// for each child. Do not call this method directly.  ¿2(¿2)¿4?É¿5R¿5RÄÁ/// Called by subclasses when they decide a render object is a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿5]¿5k¿5j  ¿5/¿50¿5@¿5A¿7`ÇÌ¿8}¿8}ÄÒ/// Called by subclasses when they decide a render object is no longer a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿8á¿8ï¿8î  ¿8Z¿8[¿8k¿8l¿:QÄÃ¿:¿:Äì/// Calls visitor for each immediate child of this render object.
///
/// Override in subclasses with children and call the visitor for each child. ¿:˛¿;¿;   ¿<ÑK¿<¿<  ¿<"¿<*¿<)  ¿<1¿<9¿<8  ¿<C¿<O¿<N   ¿C}Ç‡¿Dﬁ¿DﬁÄÚ/// Set [debugActiveLayout] to null when [inner] callback is called.
/// This is useful when you have to temporarily clear that variable to
/// disable some false-positive checks, such as when computing toStringDeep
/// or using custom trees.¿D¸¿D¸¿D¸¿Dˇ¿E¿E  ¿Dx¿Dy¿D¿Dì¿DÄ¿Dó¿Dò¿Dû¿D±¿Dü¿Dµ¿D∂¿Dº¿D—¿DΩ¿bNÖÖ¿cÎ¿cÎÅv/// Mark this render object as attached to the given owner.
///
/// Typically called only from the [parent]'s [attach] method, and by the
/// [owner] to mark the root of a tree as attached.
///
/// Subclasses with children should override this method to
/// [attach] all their children to the same [owner]
/// after calling the inherited method, as in `super.attach(owner)`. ¿cÚ¿d¿d   ¿c’¿c÷¿g◊Å¸¿iZ¿iZÅ\/// Mark this render object as detached from its [PipelineOwner].
///
/// Typically called only from the [parent]'s [detach], and by the [owner] to
/// mark the root of a tree as detached.
///
/// Subclasses with children should override this method to
/// [detach] all their children after calling the inherited method,
/// as in `super.detach()`.  ¿iD¿iE¿u=Åõ¿v∑¿v∑Å]/// Verify that the object's constraints are being met. Override this function
/// in a subclass to verify that your state matches the constraints object.
/// This function is only called when asserts are enabled (i.e. in debug mode)
/// and only when needsLayout is false. If the constraints are not met, it
/// should assert or throw an exception.  ¿v•¿v¶¿xÔÅº¿xÙ¿xÙ    ¿zØäw¿Ç∆¿Ç∆á≈/// Mark this render object's layout information as dirty, and either register
/// this object with its [PipelineOwner], or defer to the parent, depending on
/// whether this object is a relayout boundary or not respectively.
///
/// ## Background
///
/// Rather than eagerly updating layout information in response to writes into
/// a render object, we instead mark the layout information as dirty, which
/// schedules a visual update. As part of the visual update, the rendering
/// pipeline updates the render object's layout information.
///
/// This mechanism batches the layout work so that multiple sequential writes
/// are coalesced, removing redundant computation.
///
/// If a render object's parent indicates that it uses the size of one of its
/// render object children when computing its layout information, this
/// function, when called for the child, will also mark the parent as needing
/// layout. In that case, since both the parent and the child need to have
/// their layout recomputed, the pipeline owner is only notified about the
/// parent; when the parent is laid out, it will call the child's [layout]
/// method and thus the child will be laid out as well.
///
/// Once [markNeedsLayout] has been called on a render object,
/// [debugNeedsLayout] returns true for that render object until just after
/// the pipeline owner has called [layout] on the render object.
///
/// ## Special cases
///
/// Some subclasses of [RenderObject], notably [RenderBox], have other
/// situations in which the parent needs to be notified if the child is
/// dirtied (e.g., if the child's intrinsic dimensions or baseline changes).
/// Such subclasses override markNeedsLayout and either call
/// `super.markNeedsLayout()`, in the normal case, or call
/// [markParentNeedsLayout], in the case where the parent needs to be laid out
/// as well as the child.
///
/// If [sizedByParent] has changed, calls
/// [markNeedsLayoutForSizedByParentChange] instead of [markNeedsLayout].   ¿Ö*É¿ÜÏ¿ÜÏÅù/// Mark this render object's layout information as dirty, and then defer to
/// the parent.
///
/// This function should only be called from [markNeedsLayout] or
/// [markNeedsLayoutForSizedByParentChange] implementations of subclasses that
/// introduce more reasons for deferring the handling of dirty layout to the
/// parent. See [markNeedsLayout] for details.
///
/// Only call this if [parent] is not null.  ¿Ü⁄¿Ü€¿àGÅ∑¿âù¿âùÅB/// Mark this render object's layout information as dirty (like
/// [markNeedsLayout]), and additionally also handle any necessary work to
/// handle the case where [sizedByParent] has changed value.
///
/// This should be called whenever [sizedByParent] might have changed.
///
/// Only call this if [parent] is not null.   ¿äÇm¿ã¿ãÅ/// Bootstrap the rendering pipeline by scheduling the very first layout.
///
/// Requires this render object to be attached and that this render object
/// is the root of the render tree.
///
/// See [RenderView] for an example of how this function is used.   ¿åsÑ	¿å•¿å•   ¿ås¿åt¿åz¿åú¿å{¿êÄóG¿ñ¿ñÖ7/// Compute the layout for this render object.
///
/// This method is the main entry point for parents to ask their children to
/// update their layout information. The parent passes a constraints object,
/// which informs the child as to which layouts are permissible. The child is
/// required to obey the given constraints.
///
/// If the parent reads information computed during the child's layout, the
/// parent must pass true for `parentUsesSize`. In that case, the parent will
/// be marked as needing layout whenever the child is marked as needing layout
/// because the parent's layout information depends on the child's layout
/// information. If the parent uses the default value (false) for
/// `parentUsesSize`, the child can change its layout information (subject to
/// the given constraints) without informing the parent.
///
/// Subclasses should not override [layout] directly. Instead, they should
/// override [performResize] and/or [performLayout]. The [layout] method
/// delegates the actual work to [performResize] and [performLayout].
///
/// The parent's [performLayout] method should call the [layout] of all its
/// children unconditionally. It is the [layout] method's responsibility (as
/// implemented here) to return early if the child does not need to do any
/// work to update its layout information. ¿ñ¿ñ,¿ñ+  ¿ñ9¿ñ?¿ñ>  ¿ïÊ¿ïÁ¿ïÌ¿ñ¿ïÓ¿ñO¿ßÀÅ—¿©â¿©âÅü/// If a subclass has a "size" (the state controlled by `parentUsesSize`,
/// whatever it is in the subclass, e.g. the actual `size` property of
/// [RenderBox]), and the subclass verifies that in debug mode this "size"
/// property isn't used when [debugCanParentUseSize] isn't set, then that
/// subclass should override [debugResetSize] to reapply the current values of
/// [debugCanParentUseSize] to that state.  ¿©w¿©x¿¨˛ÇÛ¿Ø·¿Ø·Ç¥/// {@template flutter.rendering.RenderObject.performResize}
/// Updates the render objects size using only the constraints.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// This function is called only if [sizedByParent] is true.
/// {@endtemplate}
///
/// Subclasses that set [sizedByParent] to true should override this method to
/// compute their size. Subclasses of [RenderBox] should consider overriding
/// [RenderBox.computeDryLayout] instead.  ¿Øœ¿Ø–¿ØıÜA¿∂&¿∂&ÖÍ/// Do the work of computing the layout for this render object.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// If [sizedByParent] is true, then this function should not actually change
/// the dimensions of this render object. Instead, that work should be done by
/// [performResize]. If [sizedByParent] is false, then this function should
/// both change the dimensions of this render object and instruct its children
/// to layout.
///
/// In implementing this function, you must call [layout] on each of your
/// children, passing true for parentUsesSize if your layout information is
/// dependent on your child's layout information. Passing true for
/// parentUsesSize ensures that this render object will undergo layout if the
/// child undergoes layout. Otherwise, the child can change its layout
/// information without informing this render object.
///
/// Some special [RenderObject] subclasses (such as the one used by
/// [OverlayPortal.overlayChildLayoutBuilder]) call [applyPaintTransform] in
/// their [performLayout] implementation. To ensure such [RenderObject]s get
/// the up-to-date paint transform, [RenderObject] subclasses should typically
/// update the paint transform (as reported by [applyPaintTransform]) in this
/// method instead of [paint].  ¿∂¿∂¿∂:Ö¿π∫¿π∫ÉO/// Allows mutations to be made to this object's child list (and any
/// descendants) as well as to any other dirty nodes in the render tree owned
/// by the same [PipelineOwner] as this object. The `callback` argument is
/// invoked synchronously, and the mutations are allowed only during that
/// callback's execution.
///
/// This exists to allow child lists to be built on-demand during layout (e.g.
/// based on the object's size), and to enable nodes to be moved around the
/// tree as this happens (e.g. to handle [GlobalKey] reparenting), while still
/// ensuring that any particular node is only laid out once per frame.
///
/// Calling this function disables a number of assertions that are intended to
/// catch likely bugs. As such, using this function is generally discouraged.
///
/// This function can only be called during layout.¿πœ¿πœ¿πœ¿πÊ¿π˘¿π¯  ¿π®¿π©¿¡Åi¿¬¿¬ÄÓ/// Called, in debug mode, if [isRepaintBoundary] is true, when either the
/// this render object or its parent attempt to paint.
///
/// This can be used to record metrics about whether the node should actually
/// be a repaint boundary. ¿¬-¿¬3¿¬2  ¿¬M¿¬S¿¬R  ¿¬C¿¬b¿ƒ}ÖE¿…6¿…6É·/// Update the composited layer owned by this render object.
///
/// This method is called by the framework when [isRepaintBoundary] is true.
///
/// If [oldLayer] is `null`, this method must return a new [OffsetLayer]
/// (or subtype thereof). If [oldLayer] is not `null`, then this method must
/// reuse the layer instance that is provided - it is an error to create a new
/// layer in this instance. The layer will be disposed by the framework when
/// either the render object is disposed or if it is no longer a repaint
/// boundary.
///
/// The [OffsetLayer.offset] property will be managed by the framework and
/// must not be updated by this method.
///
/// If a property of the composited layer needs to be updated, the render object
/// must call [markNeedsCompositedLayerUpdate] which will schedule this method
/// to be called without repainting children. If this widget was marked as
/// needing to paint and needing a composited layer update, this method is only
/// called once. ¿…V¿…n¿…m   ¿‘gÖ®¿◊º¿◊ºÉ//// Mark the compositing state for this render object as dirty.
///
/// This is called to indicate that the value for [needsCompositing] needs to
/// be recomputed during the next [PipelineOwner.flushCompositingBits] engine
/// phase.
///
/// When the subtree is mutated, we need to recompute our
/// [needsCompositing] bit, and some of our ancestors need to do the
/// same (in case ours changed in a way that will change theirs). To
/// this end, [adoptChild] and [dropChild] call this method, and, as
/// necessary, this method calls the parent's, etc, walking up the
/// tree to mark all the nodes that need updating.
///
/// This method does not schedule a rendering frame, because since
/// it cannot be the case that _only_ the compositing bits changed,
/// something else will have scheduled a frame for us.   ¿‹8Ö¿‹=¿‹=    ¿Áëâæ¿ÎZ¿ÎZÉõ/// Mark this render object as having changed its visual appearance.
///
/// Rather than eagerly updating this render object's display list
/// in response to writes, we instead mark the render object as needing to
/// paint, which schedules a visual update. As part of the visual update, the
/// rendering pipeline will give this render object an opportunity to update
/// its display list.
///
/// This mechanism batches the painting work so that multiple sequential
/// writes are coalesced, removing redundant computation.
///
/// Once [markNeedsPaint] has been called on a render object,
/// [debugNeedsPaint] returns true for that render object until just after
/// the pipeline owner has called [paint] on the render object.
///
/// See also:
///
///  * [RepaintBoundary], to scope a subtree of render objects to their own
///    layer, thus limiting the number of nodes that [markNeedsPaint] must mark
///    dirty.   ¿ÒSÜ-¿Ùµ¿ÙµÉ:/// Mark this render object as having changed a property on its composited
/// layer.
///
/// Render objects that have a composited layer have [isRepaintBoundary] equal
/// to true may update the properties of that composited layer without repainting
/// their children. If this render object is a repaint boundary but does
/// not yet have a composited layer created for it, this method will instead
/// mark the nearest repaint boundary parent as needing to be painted.
///
/// If this method is called on a render object that is not a repaint boundary
/// or is a repaint boundary but hasn't been composited yet, it is equivalent
/// to calling [markNeedsPaint].
///
/// See also:
///
///  * [RenderOpacity], which uses this method when its opacity is updated to
///    update the layer opacity without repainting children.   ¿¯ıÇ÷¿¯˙¿¯˙    ¿˚œÇo¿¸Â¿¸ÂÅ/// Bootstrap the rendering pipeline by scheduling the very first paint.
///
/// Requires that this render object is attached, is the root of the render
/// tree, and has a composited layer.
///
/// See [RenderView] for an example of how this function is used. ¿¸˙¿˝
¿˝	   ¿˛BÇx¿ˇ*¿ˇ*Äÿ/// Replace the layer. This is only valid for the root of a render
/// object subtree (whatever object [scheduleInitialPaint] was
/// called on).
///
/// This might be called if, e.g., the device pixel ratio changed. ¿ˇ;¿ˇH¿ˇG   ¿ æë+¿ √¿ √  ¿ ’¿ Ê¿ Â  ¿ Ó¿ ˆ¿ ı   ¿u¿K¿K8/// Override this method to paint debugging information. ¿V¿g¿f  ¿o¿w¿v   ¿ÑÉ˛¿R¿RÉ¶/// Paint this render object into the given context at the given offset.
///
/// Subclasses should override this method to provide a visual appearance
/// for themselves. The render object's local coordinate system is
/// axis-aligned with the coordinate system of the context's canvas and the
/// render object's local origin (i.e, x=0 and y=0) is placed at the given
/// offset in the context's canvas.
///
/// Do not call this function directly. If you wish to paint yourself, call
/// [markNeedsPaint] instead to schedule a call to this function. If you wish
/// to paint one of your children, call [PaintingContext.paintChild] on the
/// given `context`.
///
/// When painting one of your children (via a paint child function on the
/// given context), the current canvas held by the context might change
/// because draw operations before and after painting children might need to
/// be recorded on separate compositing layers. ¿X¿i¿h  ¿q¿y¿x   ¿ÜÉW¿q¿qÇÀ/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Used by coordinate conversion functions ([getTransformTo], for example) to
/// translate coordinates local to one render object into coordinates local to
/// another render object.
///
/// Some RenderObjects will provide a zeroed out matrix in this method,
/// indicating that the child should not paint anything or respond to hit
/// tests currently. A parent may supply a non-zero matrix even though it
/// does not paint its child currently, for example if the parent is a
/// [RenderOffstage] with `offstage` set to true. In both of these cases,
/// the parent must return `false` from [paintsChild]. ¿Ö¿ù¿ú  ¿£¿¨¿´   ¿·É]¿‹¿‹Ç€/// Whether the given child would be painted if [paint] were called.
///
/// Some RenderObjects skip painting their children if they are configured to
/// not produce any visible effects. For example, a [RenderOffstage] with
/// its `offstage` property set to true, or a [RenderOpacity] with its opacity
/// value set to zero.
///
/// In these cases, the parent may still supply a non-zero matrix in
/// [applyPaintTransform] to inform callers about where it would paint the
/// child if the child were painted at all. Alternatively, the parent may
/// supply a zeroed out matrix if it would not otherwise be able to determine
/// a valid matrix for the child and thus cannot meaningfully determine where
/// the child would paint. ¿Ë¿ ¿ˇ   ¿Bç™¿#¿#Ñ¢/// {@template flutter.rendering.RenderObject.getTransformTo}
/// Applies the paint transform from this [RenderObject] to the `target`
/// [RenderObject].
///
/// Returns a matrix that maps the local paint coordinate system to the
/// coordinate system of `target`, or a [Matrix4.zero] if the paint transform
/// can not be computed.
///
/// This method throws an exception when the `target` is not in the same render
/// tree as this [RenderObject], as the behavior is undefined.
///
/// This method ignores [RenderObject.paintsChild]. This means it will still
/// try to compute the paint transform even if this [RenderObject] or
/// `target` is currently not visible.
///
/// If `target` is null, this method returns a matrix that maps from the
/// local paint coordinate system to the coordinate system of the
/// [PipelineOwner.rootNode].
/// {@endtemplate}
///
/// For the render tree owned by the [RendererBinding] (i.e. for the main
/// render tree displayed on the device) this means that this method maps to
/// the global coordinate system in logical pixels. To get physical pixels,
/// use [applyPaintTransform] from the [RenderView] to further transform the
/// coordinate. ¿#.¿#=¿#<   ¿+ÇÔ¿.ú¿.úÇã/// Returns a rect in this object's coordinate system that describes
/// the approximate bounding box of the clip rect that would be
/// applied to the given child during the paint phase, if any.
///
/// Returns null if the child would not be clipped.
///
/// This is used in the semantics phase to avoid including children
/// that are not physically visible.
///
/// RenderObjects that respect a [Clip] behavior when painting _must_ respect
/// that same behavior when describing this value. For example, if passing
/// [Clip.none] to [PaintingContext.pushClipRect] as the `clipBehavior`, then
/// the implementation of this method must return null. ¿.π¿.—¿.–   ¿.„ÖÊ¿4å¿4åÖp/// Returns a rect in this object's coordinate system that describes
/// which [SemanticsNode]s produced by the `child` should be included in the
/// semantics tree. [SemanticsNode]s from the `child` that are positioned
/// outside of this rect will be dropped. Child [SemanticsNode]s that are
/// positioned inside this rect, but outside of [describeApproximatePaintClip]
/// will be included in the tree marked as hidden. Child [SemanticsNode]s
/// that are inside of both rect will be included in the tree as regular
/// nodes.
///
/// This method only returns a non-null value if the semantics clip rect
/// is different from the rect returned by [describeApproximatePaintClip].
/// If the semantics clip rect and the paint clip rect are the same, this
/// method returns null.
///
/// A viewport would typically implement this method to include semantic nodes
/// in the semantics tree that are currently hidden just before the leading
/// or just after the trailing edge. These nodes have to be included in the
/// semantics tree to implement implicit accessibility scrolling on iOS where
/// the viewport scrolls implicitly when moving the accessibility focus from
/// the last visible node in the viewport to the first hidden one.
///
/// See also:
///
/// * [RenderViewportBase.cacheExtent], used by viewports to extend their
///   semantics clip beyond their approximate paint clip. ¿4¢¿4ª¿4∫   ¿4›Çu¿6¿6Å/// Bootstrap the semantics reporting mechanism by marking this node
/// as needing a semantics update.
///
/// Requires that this render object is attached, and is the root of
/// the render tree.
///
/// See [RendererBinding] for an example of how this function is used.   ¿7VÖ_¿<Q¿<QÑ§/// Report the semantics of this node, for example for accessibility purposes.
///
/// This method should be overridden by subclasses that have interesting
/// semantic information.
///
/// The given [SemanticsConfiguration] object is mutable and should be
/// annotated in a manner that describes the current state. No reference
/// should be kept to that object; mutating it outside of the context of the
/// [describeSemanticsConfiguration] call (for example as a result of
/// asynchronous computation) will at best have no useful effect and at worse
/// will cause crashes as the data will be in an inconsistent state.
///
/// {@tool snippet}
///
/// The following snippet will describe the node as a button that responds to
/// tap actions.
///
/// ```dart
/// abstract class SemanticButtonRenderObject extends RenderObject {
///   @override
///   void describeSemanticsConfiguration(SemanticsConfiguration config) {
///     super.describeSemanticsConfiguration(config);
///     config
///       ..onTap = _handleTap
///       ..label = 'I am a button'
///       ..isButton = true;
///   }
///
///   void _handleTap() {
///     // Do something.
///   }
/// }
/// ```
/// {@end-tool} ¿<p¿<à¿<á  ¿<?¿<@¿<πÇ‡¿>2¿>2Åc/// Sends a [SemanticsEvent] associated with this render object's [SemanticsNode].
///
/// If this render object has no semantics information, the first parent
/// render object with a non-null semantic node is used.
///
/// If semantics are disabled, no events are dispatched.
///
/// See [SemanticsNode.sendEvent] for a full description of the behavior. ¿>E¿>U¿>T   ¿CÖÅÃ¿D‘¿D‘Å,/// Removes all semantics from this render object and its descendants.
///
/// Should only be called on objects whose [parent] is not a [RenderObject].
///
/// Override this method if you instantiate new [SemanticsNode]s in an
/// overridden [assembleSemanticsNode] method, to dispose of those nodes.  ¿Dæ¿Dø¿EUÅ¯¿Fl¿FlÅ/// Mark this node as needing an update to its semantics description.
///
/// This must be called whenever the semantics configuration of this
/// [RenderObject] as annotated by [describeSemanticsConfiguration] changes in
/// any way to update the semantics tree.   ¿G°Å ¿I¿IÅ\/// Called when collecting the semantics of this node.
///
/// The implementation has to return the children in paint order skipping all
/// children that are not semantically relevant (e.g. because they are
/// invisible).
///
/// The default implementation mirrors the behavior of
/// [visitChildren] (which is supposed to walk all the children). ¿I-¿IB¿IA   ¿IoÑV¿L4¿L4Ç£/// Assemble the [SemanticsNode] for this [RenderObject].
///
/// If [describeSemanticsConfiguration] sets
/// [SemanticsConfiguration.isSemanticBoundary] to true, this method is called
/// with the `node` created for this [RenderObject], the `config` to be
/// applied to that node and the `children` [SemanticsNode]s that descendants
/// of this RenderObject have generated.
///
/// By default, the method will annotate `node` with `config` and add the
/// `children` to it.
///
/// Subclasses can override this method to add additional [SemanticsNode]s
/// to the tree. If new [SemanticsNode]s are instantiated in this method
/// they must be disposed in [clearSemantics]. ¿LO¿L^¿L]  ¿Lg¿L¿L~  ¿Lä ¿L£¿L¢   ¿M÷Ä¢¿N8¿N8N/// Override this method to handle pointer events that hit this render object. ¿ND¿NR¿NQ  ¿NX¿Np¿No  ¿N'¿N(¿Q—É™¿R¿R(/// Returns a human understandable name.  ¿Q¸¿Q˝¿Ub¿Uí¿Uí  ¿Uú/¿U≠¿U¨  ¿U¿UÄ¿U∑¿U∆¿U«¿UÂÇN¿V§¿V§Ä•/// Returns a description of the tree rooted at this node.
/// If the prefix argument is provided, then every line in the output
/// will be prefixed by that string. ¿V∑¿Vø¿Væ  ¿V÷¿Vﬂ¿Vﬁ  ¿V˘0¿W
¿W	  ¿W/¿W4¿W3  ¿Vë¿Ví¿VŒ¿VÒ¿W¿W#¿W$¿W?¿X7ÅÍ¿YJ¿YJÄı/// Returns a one-line detailed description of the render object.
/// This description is often somewhat long.
///
/// This includes the same information for this RenderObject as given by
/// [toStringDeep], but does not recurse to any children. ¿Y[¿Yc¿Yb  ¿Yq0¿YÇ¿YÅ  ¿Y7¿Y8¿Yk¿Yå¿Yõ¿Yú¿Z%ÜD¿ZC¿ZC  ¿ZW&¿Zt¿Zs  ¿Z%¿Z&¿Z2¿Z3¿`mQ¿`è¿`è   ¿`m¿`n¿`¬Ñ÷¿dÑ¿dÑÉî/// Attempt to make (a portion of) this or a descendant [RenderObject] visible
/// on screen.
///
/// If `descendant` is provided, that [RenderObject] is made visible. If
/// `descendant` is omitted, this [RenderObject] is made visible.
///
/// The optional `rect` parameter describes which area of that [RenderObject]
/// should be shown on screen. If `rect` is null, the entire
/// [RenderObject] (as defined by its [paintBounds]) will be revealed. The
/// `rect` parameter is interpreted relative to the coordinate system of
/// `descendant` if that argument is provided and relative to this
/// [RenderObject] otherwise.
///
/// The `duration` parameter can be set to a non-zero value to bring the
/// target object on screen in an animation defined by `curve`.
///
/// See also:
///
/// * [RenderViewportBase.showInViewport], which [RenderViewportBase] and
///   [SingleChildScrollView] delegate this method to. ¿dó¿d¶¿d•  ¿dµ
¿dº¿dª  ¿d≈!¿dœ¿dŒ  ¿dÏ¿dÛ¿dÚ  ¿dŸ¿d·¿d‚¿d˙¿e ¿e¿eúÇì¿gâ¿gâÅ /// Adds a debug representation of a [RenderObject] optimized for including in
/// error messages.
///
/// The default [style] of [DiagnosticsTreeStyle.shallow] ensures that all of
/// the properties of the render object are included in the error output but
/// none of the children of the object are.
///
/// You should always include a RenderObject in an error message if it is the
/// [RenderObject] causing the failure or contract violation of the error. ¿gü¿gß¿g¶  ¿g≤9¿g»¿g«  ¿gœ¿g„¿g‰ ¿˙ªáß¿˙ª¿˚F/// Properties of _RenderObjectSemantics that are imposed from parent. ¿˚2Äÿ¿˚8 ¿˚8¿˚L  ¿˚S¿˚b¿˚a  ¿˚v¿˚Ö¿˚Ñ  ¿˚õ ¿˚™¿˚©  ¿˚¡¿˚–¿˚œ  ¿˚‰¿˚Û¿˚Ú   ¿¸Äÿ¿¸◊¿¸◊Äµ/// Whether [SemanticsNode]s created from this render object semantics subtree
/// will be merged into parent.
///
/// This is imposed by render objects of parent [MergeSemantics]s. ¿¸ÎÅ¿˝Ù¿˝ÙÄÛ/// Whether [SemanticsNode]s created from this render object semantics subtree
/// ignores user action such as [SemanticsAction.tap] and its friends.
///
/// This is imposed by render objects of parent [IgnorePointer]s or
/// [AbsorbPointer]s. ¿˛
Å¿ˇ¿ˇÄÌ/// Any immediate render object semantics that
/// [_RenderObjectSemantics.contributesToSemanticsTree] should forms a node
///
/// This is imposed by parent render objects that set
/// [SemanticsConfiguration.explicitChildNodes] to true. ¿ˇ$Äû¿ˇ≥¿ˇ≥q/// Tags for immediate render object semantics that
/// [_RenderObjectSemantics.shouldFormSemanticsNode] is true. ¿ˇ«¿ˇ’¿ˇ’  ¿rÄÓ¿Ü¿Ü   ¿r¿s ¿ˇÎÅÉ¿ ¿   ¿ ¿ ¿   ¿ˇÎ¿ˇÏ¿˚¿˚¿då˙¿d¿~É/// A wrapper class that handles the life cycle of the [SemanticsConfiguration]
/// of a [RenderObject].
///
/// Typically, this class calls [RenderObject.describeSemanticsConfiguration] to
/// update the config and owner of this object does not directly mutate the
/// the config.
///
/// In some cases during [PipelineOwner.flushSemantics], the config has to be
/// mutated due to [_SemanticsParentData] update to propagate updated property
/// to semantics node. One should use [updateConfig] to update the config in this
/// case.
///
/// To access the config stored in this wrapper, uses
/// [_SemanticsConfigurationProvider.effective] to access the latest config.
/// Uses [_SemanticsConfigurationProvider.original] if one wants to access the
/// raw config without post mutations. ¿¢4¿¢ ¿¢¿¡  ¿¬¿»¿«   ¿⁄S¿ ¿ 0/// The owning rendering object for this object. ¿2'¿7¿7 ¿T¿].¿u¿u  ¿è/¿ß¿ß  ¿√U¿Ã¿Ã    ¿Äß¿Ñ¿ÑJ/// The latest config that reflect any change done through [updateConfig].   ¿«É~¿	8¿	8ÅI/// The original config without any change through [updateConfig].
///
/// This is typically use to recalculate certain properties when mutating
/// [effective] since [effective] may contain stale data from previous update.
/// An example is [SemanticsConfiguration.isBlockingUserActions]. Otherwise,
/// use [effective] instead.    ¿IÅl¿∆¿∆o/// Mutates the config
///
/// This does not change the [original], and the change reflects in
/// [effective]. ¿”,¿¯¿˜   ¿πÄœ¿Ó¿Ó-/// Absorb a list of config into [effective]. ¿¯(¿¿   ¿åÄê¿ø¿ø+/// Reset any post mutation to [effective].   ¿ Å<¿‡¿‡Ä≤/// Remove every cache in this wrapper.
///
/// This cause the [RenderObject.describeSemanticsConfiguration] to be
/// re-evaluated next time [effective] or [original] is called.    ¿`Ç{¿`¿Åß/// A convenient abstract interface used for constructing the
/// [_RenderObjectSemantics] tree.
///
/// The _SemanticsFragment can be an [_IncompleteSemanticsFragment] or a
/// [_RenderObjectSemantics]. This interface is used so that
/// [_RenderObjectSemantics] can handle semantics configuration merging without
/// knowing whether the child fragment is backed by a render object or an
/// incomplete semantics fragment.  ¿É¿à¿à ¿ö¿.,¿J¿J    ¿^!¿y¿y     ¿§5¿©¿©  ¿ ¿–¿œ    ¿›Ç„¿›¿rÅé/// A fragment that is generated from
/// [SemanticsConfiguration.childConfigurationsDelegate]
///
/// A render object can choose to add additional semantics config to be merged
/// upward besides itself. These configs can be added through
/// [SemanticsConfiguration.childConfigurationsDelegate] and will form
/// `_IncompleteSemanticsFragment`s
///
/// See [RenderParagraph] for an example usage. ¿Æ?¿Æ ¿Æ¿   ¿À¿—¿–  ¿·
¿Á¿Ê   ¿Ò8¿¿ ¿Ò¿Ú¿..¿W¿W ¿.¿/  ¿a]¿r¿r  ¿ì¿ô¿ò  ¿a¿b ¿I¿ òr¿I¿à≈/// A wrapper class for a [RenderObject] that provides semantics related
/// properties and compilations.
///
/// ## A high level summary
///
/// The [PipelineOwner.flushSemantics] calls the [updateChildren] to
/// build/update a tree of [_RenderObjectSemantics] by querying dirty
/// RenderObjects about their [SemanticsConfiguration] and updating the
/// _RenderObjectSemantics of the render objects according to these information.
/// While doing that, [updateChildren] also decide what
/// _RenderObjectSemantics will have their own SemanticsNode later on.
/// After that, [PipelineOwner.flushSemantics] calls [ensureGeometry] to
/// calculate the geometries for these _RenderObjectSemantics. Finally,
/// [ensureSemanticsNode] compiles these _RenderObjectSemantics into the actual
/// SemanticsNodes that form the semantics tree.
///
/// ## Steps Breakdown
///
/// The _RenderObjectSemantics tree is compiled in four phases. Phase 1 and 2
/// are done in [updateChildren], Phase 3 is done in [ensureGeometry], and phase
/// 4 is done in [ensureSemanticsNode].
///
/// ### Phase 1
///
/// Gather all the merge up _RenderObjectSemantics(s) by walking the rendering
/// object tree.
///
/// They are stored in [mergeUp] and [siblingMergeGroups] and should mimic
/// rendering object tree closely but only contain [_RenderObjectSemantics] that
/// contributes to semantics tree. i.e. where [contributesToSemanticsTree] is
/// true.
///
/// ### Phase 2
///
/// Merge all fragments from [mergeUp] and decide which [_RenderObjectSemantics]
/// should form a node, i.e. [shouldFormSemanticsNode] is true. Stores the
/// [_RenderObjectSemantics] that should form a node into [_children].
///
/// At this point, walking the [_children] forms a tree
/// that exactly resemble the resulting semantics node tree.
///
/// ### Phase 3
///
/// Walks the [_children] and calculate their
/// [_SemanticsGeometry] based on renderObject relationship.
///
/// ### Phase 4
///
/// Walks the [_children] and produce semantics node for
/// each [_RenderObjectSemantics] plus the sibling nodes.
///
/// Phase 2, 3, 4 each depends on previous step to finished updating the the
/// entire _RenderObjectSemantics tree. All three of them require separate tree
/// walk. ¿ho¿h ¿h¿~  ¿¿Ö¿Ñ  ¿ß¿ò¿©¿»¿’¿…¿€S¿"¿"1/// The owning rendering object for this wrapper. ¿3 ¿8¿8 ¿N¿W¿]¿]  ¿ ∆(¿ À¿ À ¿ È¿ Û¿ ¯¿ ¯ ¿! ¿!
Å·¿"ÿ¿"ÿÅ®/// The cached node created directly by this Object.
///
/// This cache is filled after the this object is compiled (usually by
/// calling [ensureSemanticsNode] on this object or ancestors) and forms a
/// semantics node.
///
/// Caching the semantics node ensures the id is consistent in the life time
/// of this object.
///
/// `_RenderSemanticsObject` only forms semantics node if
/// `shouldFormSemanticsNode` is true. ¿"Å·¿$Ø¿$ØÅî/// The semantics nodes produced by this render object.
///
/// This is filled after [ensureSemanticsNode] is called on this object or
/// ancestors when [shouldFormSemanticsNode] is true. In most cases, this only
/// contains one semantics node equals to [cachedSemanticsNode].
///
/// If there are [siblingMergeGroups], the nodes produced from the sibling
/// merge groups are also stored in this list.¿$œ¿$–¿$¿¿$Œ¿$¡¿$÷Äà¿%>¿%>F/// Fragments that will merge up to parent rendering object semantics.¿%\¿%]¿%H¿%[¿%I¿%cÄØ¿%Ï¿%Ïa/// A list to store immediate child [_RenderObjectSemantics]s that will form
/// semantics nodes.¿&¿&¿%¯¿&¿%˘¿&Äí¿&x¿&x9/// Merge groups that will form additional sibling nodes.¿&ß¿&®¿&ç¿&¶¿&é¿&í¿&•¿&ì¿&≠ÄÖ¿&‡¿&‡ 	¿'0¿'1¿'¿'/¿'¿'¿'¿'.¿'¿'7 ¿'M¿'M  ¿'[¿'o¿'o  ¿'|4¿'¢¿'¢  ¿'µ5¿'‹¿'‹   ¿'µ¿'∂¿'Ói¿'˜¿'˜    ¿([Å¿)¿)Äà/// If this forms a semantics node, all of the properties in config are
/// used in creating the node. There is nothing to be merged up.  ¿(Ë¿(È¿)gÄœ¿)p¿)p    ¿*:8¿*C¿*C    ¿*vÅÚ¿*¿*    ¿-™Éõ¿.√¿.√Å/// Whether this render object semantics will block other render object
/// semantics behind it in render object order from parent.
///
/// The [BlockSemantics] widget will cause this property to be true and hide
/// any sibling widget behind it from semantics.    ¿,lÅ:¿,x¿,x  ¿,ê¿,û¿,ù   ¿1I8¿1N¿1N  ¿1Y¿1h¿1g   ¿1ÖÇ=¿1ä¿1ä    ¿3∆êÚ¿7o¿7oÉ}/// Updates the [parentData] for the [_RenderObjectSemantics]s in the
/// rendering subtree and forms a [_RenderObjectSemantics] tree where children
/// are stored in [_children].
///
/// This method does the the phase 1 and 2 of the four phases documented on
/// [_RenderObjectSemantics].
///
/// Gather all the merge up _RenderObjectSemantics(s) by walking the rendering
/// object tree.
///
/// They are stored in [mergeUp] and [siblingMergeGroups] and should mimic
/// rendering object tree closely but only contain [_RenderObjectSemantics] that
/// contributes to semantics tree. i.e.
/// [contributesToSemanticsTree] is true.
///
/// Merge all fragments from [mergeUp] and decide which [_RenderObjectSemantics]
/// should form a node. i.e. [shouldFormSemanticsNode] is true. Stores the
/// [_RenderObjectSemantics] that should form a node with elevation adjustments
/// into [_children].   ¿DºÅr¿DŸ¿DŸ    ¿F2Ç¿FE¿FE    ¿HNì‰¿Hl¿Hl  ¿Hï$¿H´¿H™   ¿\6Å ¿\;¿\;  ¿\P"¿\f¿\e   ¿]ZÄ‘¿]’¿]’e/// Makes whether this fragment has a sibling fragment with conflicting
/// [SemanticsConfiguration]. ¿]ˆ¿]¸¿]˚  ¿]ƒ¿]≈¿^2Ç°¿_«¿_«Å}/// Updates the [geometry] for this [_RenderObjectSemantics]s and its subtree
/// in [_children].
///
/// This method does the the phase 3 of the four phases documented on
/// [_RenderObjectSemantics].
///
/// This method is short-circuited if the subtree geometry won't
/// be affect after the update. (e.g. the size doesn't change, or new clip
/// rect doesn't clip the content).   ¿`◊Ö~¿`‹¿`‹    ¿fYÇå¿f^¿f^  ¿fo'¿få¿fã   ¿hÈÉÂ¿jÎ¿jÎÅË/// Ensures the semantics nodes from this render object semantics subtree are
/// generated and up to date.
///
/// This method does the the phase 4 of the four phases documented on
/// [_RenderObjectSemantics].
///
/// This can only be called if the owning rendering object is a semantics
/// boundary. For non boundary rendering objects, they require semantics
/// information from both their parent and child rendering objects to update
/// its cache, so it can't update by themselves.   ¿l“Ü:¿m√¿m√Äﬂ/// Builds the semantics node and its semantics node subtree.
///
/// This method will in turn call [_buildSemanticsSubtree].
///
/// This method will short-circuit itself if [cachedSemanticsNode] is
/// already up-to-date. ¿m‘"¿mÁ¿mÊ   ¿sÑæ¿sY¿sYA/// Builds the semantics subtree under the [cachedSemanticsNode]. ¿sv"¿sâ¿sà  ¿sû#¿s¥¿s≥   ¿w“Ç¿w◊¿w◊  ¿wÓ"¿x¿x    ¿y◊Å&¿yÂ¿yÂ    ¿{ã£¿{¿{  ¿{¿{#¿{"   ¿Ü®Ép¿á\¿á\Ä¶/// Updates the semantics geometry of the cached semantics node.
///
/// Returns true if geometry changes that may result in children's geometries
/// change as well.   ¿äàg¿ä!¿ä!    ¿íáé⁄¿í ¿í ;/// The [renderObject]'s semantics information has changed.   ¿°eÑ8¿°j¿°j  ¿°Ü#¿°†¿°ü  ¿°¨¿°≤¿°±  ¿°Ω¿•°Åä¿•Ô¿•ÔF/// Removes any cache stored in this object as if it is newly created.   ¿ß/Ä—¿ßQ¿ßQ   ¿ß/¿ß0¿®Öµ¿®"¿®"  ¿®6&¿®S¿®R  ¿®¿®¿®¿® ¿ØÒû¿ØÒ¿∞⁄Ä—/// Helper class that keeps track of the geometry of a [SemanticsNode].
///
/// It is used to annotate a [SemanticsNode] with the current information for
/// [SemanticsNode.rect] and [SemanticsNode.transform]. ¿∞ÒÄ¯¿±: ¿±:¿±L @/// The `paintClipRect` may be null if no clip is to be applied.¿±S¿±b¿±a  ¿±t¿±É¿±Ç  ¿±ô¿±®¿±ß  ¿±∂¿±≈¿±ƒ  ¿±Œ¿±›¿±‹   ¿±ÌÄ‹¿±ı¿≤¿≤¿≤¿≤ ¿≤	¿≤¿≤   ¿≤ÕB¿≥¿≥(/// Value for [SemanticsNode.transform]. ¿≥V¿≥Y¿≥Y6/// Value for [SemanticsNode.parentSemanticsClipRect]. ¿≥oN¿≥∞¿≥∞2/// Value for [SemanticsNode.parentPaintClipRect]. ¿≥¬5¿≥Û¿≥Û#/// Value for [SemanticsNode.rect]. ¿≥¸Äñ¿¥å¿¥åÄÄ/// Whether the semantics node is completely clipped from ui, i.e. by
/// paintClipRect, but is still present in semantics tree. ¿» ?¿»¿» ¿»1¿»8¿»9¿»=¿»>  ¿¥óê˘¿¥±¿¥±  ¿¥Ã!¿¥ﬂ¿¥ﬁ  ¿¥Û"¿µ¿µ  ¿µ&¿µ+¿µ*  ¿µG&¿µh¿µg  ¿µs%¿µî¿µì   ¿≈îÅ)¿≈œ¿≈œ+/// From parent to child coordinate system. ¿≈ﬁ
¿≈Â¿≈‰  ¿≈Í¿≈Û¿≈Ú   ¿…\Ñ"¿…{¿…{  ¿…ë¿…ü¿…û  ¿…™¿…∏¿…∑  ¿…¬¿……¿…»  ¿…Â¿…Ï¿…Î   ¿ÕÇÄÄ¿Õè¿Õè  ¿Õü¿Õ¶¿Õ•  ¿Õ®¿ÕØ¿ÕÆ   ¿∞√¿∞ƒ¿ŒÇ0¿Œ¿œÅ/// A class that creates [DiagnosticsNode] by wrapping [RenderObject.debugCreator].
///
/// Attach a [DiagnosticsDebugCreator] into [FlutterErrorDetails.informationCollector]
/// when a [RenderObject.debugCreator] is available. This will lead to improved
/// error message. ¿œ^Ä÷¿œÃ ¿œÃ¿œ„ i/// Create a [DiagnosticsProperty] with its [value] initialized to input
/// [RenderObject.debugCreator].¿œ‰¿œÏ¿œÎ  
¿œ¯¿œ˝¿–2¿œ˛¿–¿–¿–¿–¿–+¿–,           ¿≠ΩÄí¿≠Ω¿≠Ó+/// Dumps the render object semantics tree.   ¿ÆQÅK¿ÆQ¿ÆX     áPÅháPàhÅ/// Signature for painting into a [PaintingContext].
///
/// The `offset` argument is the offset from the origin of the coordinate system
/// of the [PaintingContext.canvas] to the coordinate system of the callee.
///
/// Used by many of the methods of [PaintingContext].  àêà°à†  à©à±à∞   ¿ â⁄Ä‡¿ â⁄¿ äÇÄü/// Signature for a function that is called for each [RenderObject].
///
/// Used by [RenderObject.visitChildren] and [RenderObject.visitChildrenForSemantics].  ¿ ä¶¿ ä¥¿ ä≥   ¿ äºÄΩ¿ äº¿ ã4o/// Signature for a function that is called during layout.
///
/// Used by [RenderObject.invokeLayoutCallback].¿ ãC¿ ãC¿ ãC ¿ ãj¿ ãm¿ ãl   ¿ ˜⁄Ä¥¿ ˜⁄¿ ¯Tq/// Signature for the callback to [PipelineOwner.visitChildren].
///
/// The argument is the child being visited.  ¿ ¯y¿ ¯à¿ ¯á   ¿¬ÄÖ¿¬¿      ¿ØûQ¿Øû¿Ø¶     ¿h3ä®¿h3¿ifÅ,/// Generic mixin for render objects with one child.
///
/// Provides a child model for a render object subclass that has
/// a unique child, which is accessible via the [child] getter.
///
/// This mixin is typically used to implement render objects created
/// in a [SingleChildRenderObjectWidget].¿iÅ¿iÅ¿iÅ ¿or¿o}¿o}  ¿oàG¿oø¿oø%/// The render object's unique child.   ¿o“Ä™¿o÷¿o÷  ¿o‹¿oË¿oÁ   ¿iµÖπ¿jÜ¿jÜÄø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿jô¿jß¿j¶   ¿pÄf¿pë¿pë  ¿pò¿pß¿p¶  ¿pÄ¿pÅ¿pÍI¿p˚¿p˚   ¿pÍ¿pÎ¿q7e¿qH¿qH   ¿q7¿q8¿q†y¿q±¿q±  ¿qø¿q‘¿q”  ¿q†¿q°¿rÄº¿r?¿r?   ¿r¿r ¿r›åÒ¿r›¿xEÖa/// A mixin for managing [RenderObject] with a [layoutCallback], which will be
/// invoked during this [RenderObject]'s layout process if scheduled using
/// [scheduleLayoutCallback].
///
/// A layout callback is typically a callback that mutates the [RenderObject]'s
/// render subtree during the [RenderObject]'s layout process. When an ancestor
/// [RenderObject] chooses to skip laying out this [RenderObject] in its
/// [performLayout] implementation (for example, for performance reasons, an
/// [Overlay] may skip laying out an offstage [OverlayEntry] while keeping it in
/// the tree), normally the [layoutCallback] will not be invoked because the
/// [layout] method will not be called. This can be undesirable when the
/// [layoutCallback] involves rebuilding dirty widgets (most notably, the
/// [LayoutBuilder] widget). Unlike render subtrees, typically all dirty widgets
/// (even off-screen ones) in a widget tree must be rebuilt. This mixin makes
/// sure once scheduled, the [layoutCallback] method will be invoked even if it's
/// skipped by an ancestor [RenderObject], unless this [RenderObject] has never
/// been laid out.
///
/// Subclasses must not invoke the layout callback directly. Instead, call
/// [runLayoutCallback] in the [performLayout] implementation.
///
/// See also:
///
///  * [LayoutBuilder] and [SliverLayoutBuilder], which use the mixin.  ¿yj¿yo¿yo ¿y  ¿yàÅ7¿zÆ¿zÆÄ˛/// The layout callback to be invoked during [performLayout].
///
/// This method should not be invoked directly. Instead, call
/// [runLayoutCallback] in the [performLayout] implementation. This callback
/// will be invoked using [invokeLayoutCallback].  ¿zë¿zí¿z√Åë¿{À¿{ÀÄÁ/// Invokes [layoutCallback] with [invokeLayoutCallback].
///
/// This method must be called in [performLayout], typically as early as
/// possible before any layout work is done, to avoid re-dirtying any child
/// [RenderObject]s.  ¿{µ¿{∂¿|XÉt¿}]¿}]ÄË/// Informs the framework that the layout callback has been updated and must be
/// invoked again when this [RenderObject] is ready for layout, even when an
/// ancestor [RenderObject] chooses to skip laying out this render subtree.  ¿}G¿}H ¿–Éc¿–¿ÅÅ5/// Parent data to support a doubly-linked list of children.
///
/// The children can be traversed using [nextSibling] or [previousSibling],
/// which can be called on the parent data of the render objects
/// obtained via [ContainerRenderObjectMixin.firstChild] or
/// [ContainerRenderObjectMixin.lastChild].¿Å%¿Å%¿Å% ¿ÅWQ¿Åô¿Åô4/// The previous sibling in the parent's child list. ¿Å≠I¿ÅÎ¿ÅÎ0/// The next sibling in the parent's child list.   ¿Å˚Å6¿Ç.¿Ç./// Clear the sibling pointers.  ¿Ç¿Ç ¿É5Æñ¿É5¿áÉ€/// Generic mixin for render objects with a list of children.
///
/// Provides a child model for a render object subclass that has a doubly-linked
/// list of children.
///
/// The [ChildType] specifies the type of the children (extending [RenderObject]),
/// e.g. [RenderBox].
///
/// [ParentDataType] stores parent container data on its child render objects.
/// It must extend [ContainerParentDataMixin], which provides the interface
/// for visiting children. This data is populated by
/// [RenderObject.setupParentData] implemented by the class using this mixin.
///
/// When using [RenderBox] as the child type, you will usually want to make use of
/// [RenderBoxContainerDefaultsMixin] and extend [ContainerBoxParentData] for the
/// parent data.
///
/// Moreover, this is a required mixin for render objects returned to [MultiChildRenderObjectWidget].
///
/// See also:
///
///  * [SlottedContainerRenderObjectMixin], which organizes its children
///    in different named slots.¿á5¿á5¿á5¿áW:¿áW¿áW ¿ä“¿ä÷¿ä÷ ¿ä‰¿êÎ¿êˆ¿êˆ  ¿ë¿ë¿ë  ¿äÍ@¿ã¿ã/// The number of children.   ¿¨ﬂR¿≠¿≠&/// The first child in the child list.   ¿≠5O¿≠l¿≠l%/// The last child in the child list.    ¿á¨Åó¿á±¿á±  ¿á—¿á‹¿á€  ¿á„¿áÔ¿áÓ   ¿âGÅá¿âL¿âL  ¿âh¿âs¿âr  ¿âz¿âÜ¿âÖ   ¿ã.Öπ¿ãˇ¿ãˇÄø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿å¿å ¿å   ¿ëá‚¿ë#¿ë#  ¿ë8¿ëC¿ëB  ¿ëJ¿ëV¿ëU   ¿ôÑ¿ô‡¿ô‡ÄŒ/// Insert child into this render object's child list after the given child.
///
/// If `after` is null, then this inserts the child at the start of the list,
/// and the child becomes the new [firstChild]. ¿ôÁ¿ôÚ¿ôÒ  ¿ô˘¿ö¿ö   ¿ùÄá¿ùZ¿ùZ?/// Append child to the end of this render object's child list. ¿ù^¿ùi¿ùh   ¿ùûÄí¿ùÌ¿ùÌG/// Add all the children to the end of this render object's child list. ¿ùÙ¿û¿û   ¿û4Ñq¿û9¿û9  ¿ûN¿ûY¿ûX   ¿¢©Ä∆¿£¿£f/// Remove this child from the child list.
///
/// Requires the child to be present in the child list. ¿£"¿£-¿£,   ¿£sÇ3¿£˙¿£˙{/// Remove all their children from this render object's child list.
///
/// More efficient than removing them individually.   ¿•™ÇÃ¿¶‘¿¶‘Å/// Move the given `child` in the child list to be after another child.
///
/// More efficient than removing and re-adding the child. Requires the child
/// to already be in the child list at some position. Pass null for `after` to
/// move the child to the start of the child list. ¿¶Ÿ¿¶‰¿¶„  ¿¶Î¿¶˜¿¶ˆ   ¿®zÅ)¿®ã¿®ã  ¿®í¿®°¿®†  ¿®z¿®{¿©ßÅ¿©∏¿©∏   ¿©ß¿©®¿™∑Å¿™»¿™»   ¿™∑¿™∏¿´¡Å¿´“¿´“  ¿´‡¿´ı¿´Ù  ¿´¡¿´¬¿≠àÅ¿≠÷¿≠÷@/// The previous child before the given child in the child list. ¿≠‚¿≠Ì¿≠Ï   ¿ÆöÅ¿Æ„¿Æ„;/// The next child after the given child in the child list. ¿ÆÓ¿Æ˘¿Æ¯   ¿Ø¢Ç'¿Øƒ¿Øƒ   ¿Ø¢¿Ø£ ¿±Õä¿±Õ¿≥Å-/// Mixin for [RenderObject] that will call [systemFontsDidChange] whenever the
/// system fonts change.
///
/// System fonts can change when the OS installs or removes a font. Use this
/// mixin if the [RenderObject] uses [TextPainter] or [Paragraph] to correctly
/// update the text when it happens.  ¿µ‹4¿µ·¿µ· ¿∂  ¿≥8Ç†¿µ•¿µ•Ç1/// A callback that is called when system fonts have changed.
///
/// The framework defers the invocation of the callback to the
/// [SchedulerPhase.transientCallbacks] phase to ensure that the
/// [RenderObject]'s text layout is still valid when user interactions are in
/// progress (which usually take place during the [SchedulerPhase.idle] phase).
///
/// By default, [markNeedsLayout] is called on the [RenderObject]
/// implementing this mixin.
///
/// Subclass should override this method to clear any extra cache that depend
/// on font-related metrics.  ¿µÇ¿µÉ¿µè¿µê¿∂ÉO¿∂¿∂    ¿πgÅæ¿πx¿πx  ¿π¿πé¿πç  ¿πg¿πh¿ª)Äæ¿ª:¿ª:   ¿ª)¿ª* ¿ªÎæŒ¿ªÎ¿ºR`/// A mixin for [RenderObject]s that want to annotate the [SemanticsNode]
/// for their subtree.  ¿¿"$¿¿;¿¿;  ¿¬π¿¬√¿¬√  ¿∆Q¿∆[¿∆[  ¿»ú¿»¶¿»¶  ¿ ~¿ à¿ à  ¿Àˆ¿À˛¿À˛  ¿“"¿“#¿“#  ¿“7"¿“I¿“I  ¿“]+¿“o¿“o  ¿“å+¿“û¿“û  ¿“ª!¿“Õ¿“Õ  ¿‘ï¿‘§¿‘§  ¿ø†¿¿¿¿J/// All of the [SemanticsProperties] for this [SemanticsAnnotationsMixin].   ¿¡Å¢¿¬û¿¬ûÅr/// If 'container' is true, this [RenderObject] will introduce a new
/// node in the semantics tree. Otherwise, the semantics will be
/// merged with the semantics of any ancestors.
///
/// Whether descendants of this [RenderObject] can add their semantic information
/// to the [SemanticsNode] introduced by this configuration is controlled by
/// [explicitChildNodes].   ¿√^Ç¿∆$¿∆$Ç¢/// Whether descendants of this [RenderObject] are allowed to add semantic
/// information to the [SemanticsNode] annotated by this widget.
///
/// When set to false descendants are allowed to annotate [SemanticsNode]s of
/// their parent with the semantic information they want to contribute to the
/// semantic tree.
/// When set to true the only way for descendants to contribute semantic
/// information to the semantic tree is to introduce new explicit
/// [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with
/// [SemanticsConfiguration.isSemanticBoundary] to create semantic boundaries
/// that are either writable or not for children.   ¿«Å~¿»s¿»sÅB/// Whether descendants of this [RenderObject] should have their semantic
/// information ignored.
///
/// When this flag is set to true, all child semantics nodes are ignored.
/// This can be used as a convenience for cases where a child is wrapped in
/// an [ExcludeSemantics] widget and then another [Semantics] widget.   ¿…^Å¿ U¿ UÄ„/// Whether to block user interactions for the semantics subtree.
///
/// Setting this true prevents user from activating pointer related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or
/// [SemanticsAction.longPress].   ¿À@Ä≥¿ÀÕ¿ÀÕz/// The [Locale] for the semantics subtree.
///
/// Setting this to null will inherit locale from ancestor semantics node.   ¿“·Å±¿‘r¿‘rÅm/// If non-null, sets the [SemanticsNode.textDirection] semantic to the given
/// value.
///
/// This must not be null if [SemanticsProperties.attributedLabel],
/// [SemanticsProperties.attributedHint],
/// [SemanticsProperties.attributedValue],
/// [SemanticsProperties.attributedIncreasedValue], or
/// [SemanticsProperties.attributedDecreasedValue] are not null.   ¿¿JÄ∆¿¿N¿¿N  ¿¿Y¿¿n¿¿m   ¿¬—Äâ¿¬’¿¬’  ¿¬ﬂ
¿¬Â¿¬‰   ¿∆rÄ•¿∆v¿∆v  ¿∆â
¿∆è¿∆é   ¿»ªÄü¿»ø¿»ø  ¿»–
¿»÷¿»’   ¿ ùÄü¿ °¿ °  ¿ ≤
¿ ∏¿ ∑   ¿ÃÄ¢¿Ã¿Ã  ¿Ã(¿Ã1¿Ã0   ¿‘∂Äü¿‘∫¿‘∫  ¿‘»¿‘ÿ¿‘◊   ¿ºÄÉ¿Ω9¿Ω99/// Initializes the semantics annotations for this mixin. ¿ΩX'¿Ωv¿Ωu  ¿ΩÖ¿Ωî¿Ωì  ¿Ω¢ ¿Ω±¿Ω∞  ¿Ω»¿Ω◊¿Ω÷  ¿ΩÏ¿Ω˚¿Ω˙  ¿æ!¿æ"¿æ!  ¿æ7%¿æP¿æO   ¿ÃπÅ|¿Ãæ¿Ãæ  ¿Ã÷¿ÃÎ¿ÃÍ   ¿Œ9ÄØ¿ŒK¿ŒK  ¿Œe¿Œz¿Œy   ¿ŒÏÄØ¿Œ˛¿Œ˛  ¿œ¿œ-¿œ,   ¿œüÄ€¿œ±¿œ±  ¿œ‘¿œÈ¿œË   ¿–~Ä‡¿–ê¿–ê  ¿–≥¿–»¿–«   ¿—bÄ´¿—t¿—t  ¿—ç¿—¢¿—°   ¿’YÄ´¿’j¿’j  ¿’Ñ¿’ô¿’ò  ¿’Y¿’Z¿÷ùã¿÷¿÷  ¿÷8¿÷P¿÷O  ¿÷¿÷	¿Ûó7¿Ûú¿Ûú    ¿Û“C¿Û◊¿Û◊    ¿Ù?¿Ù¿Ù    ¿Ù\E¿Ùa¿Ùa    ¿Ù•G¿Ù™¿Ù™    ¿ÙA¿Ùı¿Ùı    ¿ı5E¿ı:¿ı:    ¿ı~A¿ıÉ¿ıÉ    ¿ı√A¿ı»¿ı»    ¿ˆ9¿ˆ¿ˆ    ¿ˆE7¿ˆJ¿ˆJ    ¿ˆÄ;¿ˆÖ¿ˆÖ    ¿ˆøÄå¿ˆƒ¿ˆƒ  ¿ˆÈ¿ˆÔ¿ˆÓ   ¿˜OÄé¿˜T¿˜T  ¿˜z¿˜Ä¿˜   ¿˜·ÄÇ¿˜Ê¿˜Ê  ¿¯¿¯¿¯   ¿¯gÄÑ¿¯l¿¯l  ¿¯ç¿¯ì¿¯í   ¿¯Ôi¿¯Ù¿¯Ù  ¿˘	¿˘¿˘   ¿˘\N¿˘a¿˘a  ¿˘q¿˘y¿˘x   ¿˘Æc¿˘≥¿˘≥    ¿˙c¿˙¿˙    ¿˙|;¿˙Å¿˙Å         ÄÆ  dart:ui  ÄÃ  package:flutter/widgets.dart  Äˇ  box.dart  Å  paragraph.dart  Å;  proxy_box.dart  Å\  	view.dart  Åx  viewport.dart ôn <ÄÜÄ§Ä•ÄøÄ√ÄÚÄˆÅÅ2ÅSÅoÅèÅòÅôÅ∆Å«ÅÇÇBÇjÇìÇºÇΩÇ‘ÇÈÇ˛ÇˇÉ(É1ÉVÉoÉåÉ§É∫É‘ÉÁÉ˝ÑÑ)ÑGÑ\ÑtÑΩÑÂÑÊÖ.Ö2Ö|ÖƒÖ¯Ö¸Ü
ÜÜYÜûÜ±ÜÓÜ˚ááá á,áMáOáPáÖáâá⁄à&à*à`àπà∫à–à‘â&âkâµâ…âÕäänäæãã"ã&ãmã´ã◊ã˘ãˇåGå^åkå™å´å”å‘ç!çhçnç©çØç˚éééAéGéíéﬂè0èLèRèbèhè∏èŸê;êZêÆê≤ê≥ê⁄êÙëë@ëGëlë|ë≥ë‚íí/í8íKíUíùíªí·ììì_ì™ìıîîiîûî´îËïïïEïZïfïåïÊïÙñ!ñuñÿó#ó,óaógóñóóó‘ò	òòcòvòÄòÅò∆ò˛òˇôNôÇôøôÈôÌôÓö<öBöçö⁄õ(õcõiõyõõœõú*úlúåú∫úªùù$ù4ù^ùqù{ù”ùﬂû
û\ûΩüüü@üoüsütü¡††E†K†[†a†Æ†»†˝°°@°l°s°É°¢°±°È¢¢¢*¢4¢8¢9¢]¢c¢±£ £P£á£ó£ø£“£‹£›§ §§E§ì§‹••?•f•ì•†•Õ•”•◊•ÿ¶¶/¶T¶ë¶í¶‘ßßRß_ßéß¥ßºßŒ®®:®à®ù®©®Ø®‰©7©]©Ä©Ñ©Ö©—©‡©Ê™/™u™¢™®™ı´´´7´R´f´â´ç´é´®´‘´‰´˚¨"¨E¨f¨u¨ú¨ø¨‡¨Ë¨˚≠≠≠≠ ≠5≠T≠u≠à≠â≠≠≠≥≠˝ÆGÆfÆrÆàÆ£ÆºÆ¬ÆÂÆ˙Æ˛ÆˇØØ5ØhØ™ØÎ∞∞∞∞m∞|∞Ç∞–±±h±®±Æ±Í±≤ ≤+≤q≤Æ≤≤≤≥≤Ó≤Ù≥@≥è≥ﬁ≥Î≥Ò¥@¥ã¥ù¥™¥ª¥‹¥ıµµ	µµAµeµéµ¨µ‰∂"∂*∂U∂y∂¢∂¿∂Ì∑∑&∑9∑C∑{∑ï∑´∑ø∑√∑ƒ∏∏(∏.∏}∏∆∏’∏€π&πvπ¬π‰∫ ∫!∫:∫@∫i∫m∫n∫¡∫«ªª`ª≠ªﬂªÂº0ºÄºÃºÓΩΩ,ΩEΩKΩuΩyΩzΩØΩµææAæGæîæÊø6ø|øÇøíøòøÊøÛ¿ @¿ @/¿ @G¿ @K¿ @L¿ @ù¿ @Ï¿ A<¿ A^¿ Ad¿ A≥¿ A˜¿ B¿ B¿ BV¿ B¶¿ Bˆ¿ CD¿ Cá¿ Cú¿ C¢¿ CÛ¿ DD¿ Dë¿ D‚¿ E2¿ Ep¿ Ev¿ EÜ¿ Eå¿ E◊¿ EÎ¿ E˝¿ F¿ FA¿ FV¿ Fr¿ Fy¿ F«¿ G¿ G:¿ G`¿ Gf¿ GÉ¿ G†¿ G›¿ GÔ¿ H¿ H!¿ H"¿ HE¿ Ho¿ Hs¿ Ht¿ Hº¿ H¬¿ I¿ I¿ Id¿ Iî¿ Iò¿ Iô¿ I»¿ IŒ¿ J ¿ Jh¿ Jü¿ JÎ¿ K;¿ Ky¿ KΩ¿ K√¿ L¿ LU¿ Lj¿ Lp¿ L∏¿ M¿ MJ¿ M_¿ Me¿ M∂¿ M˛¿ N¿ N¿ Nd¿ N•¿ N´¿ NÙ¿ N˙¿ OD¿ Oë¿ O’¿ P%¿ Pu¿ PΩ¿ Q	¿ Q?¿ QT¿ Qs¿ Qé¿ Q°¿ Q¥¿ Q€¿ R¿ R¿ R&¿ RK¿ Rh¿ R{¿ RÅ¿ Rπ¿ R’¿ S¿ S ¿ SD¿ Sk¿ S∂¿ S ¿ S◊¿ T:¿ TM¿ TS¿ TW¿ TX¿ Tè¿ Tï¿ T‰¿ TÍ¿ U/¿ U5¿ UÖ¿ U»¿ UŒ¿ V¿ Vi¿ Vê¿ Vñ¿ VÁ¿ W)¿ W/¿ WÄ¿ WÜ¿ WÕ¿ WÓ¿ X	¿ X¿ X-¿ XB¿ Xi¿ Xë¿ XØ¿ X∂¿ X€¿ X¯¿ Y¿ Y¿ YE¿ YÄ¿ Yú¿ Y›¿ YÈ¿ Z¿ Z6¿ Z¿ Zì¿ Z†¿ [¿ [¿ [¿ [ ¿ [!¿ [[¿ [a¿ [∞¿ [∂¿ [˚¿ \¿ \Q¿ \î¿ \ö¿ \ı¿ ]@¿ ]g¿ ]m¿ ]∆¿ ^¿ ^¿ ^g¿ ^m¿ ^Ω¿ ^√¿ _
¿ _;¿ _V¿ _i¿ _z¿ _ü¿ _∆¿ _Ó¿ `¿ `¿ `@¿ `]¿ `p¿ `v¿ `™¿ `Ò¿ a¿ a^¿ aj¿ aî¿ aª¿ b¿ b¿ b%¿ bF¿ b[¿ bq¿ bá¿ b¨¿ bµ¿ b»¿ bŒ¿ b“¿ b”¿ b˝¿ c¿ cR¿ cX¿ cù¿ c£¿ cÛ¿ d6¿ d<¿ dã¿ d÷¿ dÚ¿ d¯¿ eH¿ eâ¿ eè¿ e”¿ eŸ¿ f ¿ f?¿ fZ¿ fm¿ f~¿ fë¿ f∏¿ f‡¿ f˝¿ g¿ g)¿ gF¿ gY¿ g_¿ gì¿ gÀ¿ gÁ¿ h&¿ h2¿ hV¿ h}¿ h∆¿ h⁄¿ hÁ¿ iH¿ i[¿ ia¿ ie¿ if¿ iò¿ iû¿ i‡¿ iÊ¿ j7¿ j]¿ jc¿ j≥¿ j˙¿ k ¿ kG¿ kM¿ kö¿ kÏ¿ l<¿ lÇ¿ l¶¿ lπ¿ l÷¿ l˝¿ m¿ m$¿ mg¿ må¿ m≥¿ m≈¿ m…¿ m ¿ m˚¿ n¿ nP¿ nV¿ nß¿ nÕ¿ n”¿ o¿ op¿ o©¿ oØ¿ p ¿ pB¿ pH¿ pè¿ p∞¿ pÀ¿ pﬁ¿ pı¿ q¿ q:¿ qA¿ qù¿ qπ¿ qÚ¿ r¿ rO¿ r{¿ rå¿ rõ¿ r¨¿ rº¿ s¿ s&¿ s:¿ sG¿ sT¿ se¿ sñ¿ s≥¿ sÀ¿ sﬁ¿ s‰¿ sË¿ sÈ¿ t¿ t!¿ tn¿ tö¿ t†¿ t¿ u9¿ uâ¿ uè¿ u‹¿ v¿ v"¿ vi¿ vo¿ vº¿ w¿ w^¿ w§¿ w¿¿ w”¿ w‚¿ x	¿ x%¿ x,¿ xg¿ xq¿ xá¿ x†¿ xÃ¿ xﬁ¿ x‚¿ x„¿ xÔ¿ y¿ yÅ¿ yÉ¿ yÑ¿ yØ¿ y≥¿ yˇ¿ z@¿ zD¿ zj¿ zn¿ zæ¿ {
¿ {.¿ {2¿ {Å¿ {—¿ |¿ |"¿ |r¿ |¿¿ }¿ }[¿ }h¿ }l¿ }¥¿ ~¿ ~M¿ ~é¿ ~ﬁ¿ .¿ |¿ ¬¿ ﬁ¿ ‚¿ Ä1¿ Ä|¿ ÄÀ¿ Å¿ ÅK¿ Åõ¿ Å≥¿ Å∑¿ Ç¿ ÇS¿ Ç¢¿ Çº¿ Ç¿¿ É¿ Éa¿ Él¿ Éâ¿ É⁄¿ Ñ"¿ Ñ9¿ Ñ:¿ ÑÑ¿ Ñò¿ Ñô¿ Ñ€¿ ÑÙ¿ Ñı¿ Ö#¿ Ö)¿ Öl¿ Ör¿ Ö¡¿ Ö›¿ Ö„¿ Ü1¿ ÜÅ¿ Ü–¿ á¿ áR¿ á£¿ áÙ¿ à¿ à¿ àY¿ à¶¿ àﬂ¿ àÂ¿ â'¿ âC¿ âi¿ âô¿ â†¿ â∫¿ â”¿ â◊¿ âŸ¿ â⁄¿ ä¿ ä#¿ äz¿ äª¿ äº¿ ä˜¿ ä˚¿ ã,¿ ãz¿ ã{¿ ã¥¿ å¿ åX¿ åt¿ å©¿ åØ¿ å≥¿ å¥¿ å“¿ å”¿ ç¿ ç=¿ ç>¿ çJ¿ ç]¿ çã¿ çß¿ çﬂ¿ çÂ¿ é¿ é¿ é¿ é¿ éL¿ éP¿ é†¿ éÒ¿ è>¿ èV¿ èZ¿ è•¿ èÏ¿ ê6¿ êb¿ ê´¿ ê˘¿ ëI¿ ëö¿ ëË¿ í0¿ ív¿ íƒ¿ ì¿ ìO¿ ìõ¿ ìÈ¿ î6¿ î:¿ îâ¿ î”¿ ï ¿ ï>¿ ïB¿ ïì¿ ï·¿ ñ0¿ ñ}¿ ñ…¿ ó¿ óX¿ ó\¿ ó®¿ óˆ¿ òF¿ òê¿ òø¿ ò˜¿ ô¿ ô¿ ôj¿ ô∑¿ ô›¿ ôÔ¿ ö¿ ö.¿ öJ¿ öm¿ öt¿ öø¿ ö√¿ öƒ¿ õ¿ õ8¿ õ>¿ õè¿ õ‹¿ ú)¿ úH¿ úN¿ úï¿ ú‚¿ ù+¿ ùU¿ ùV¿ ùú¿ ù¢¿ ùÍ¿ û ¿ û/¿ û0¿ ûá¿ ûç¿ û‚¿ ü¿ üC¿ üD¿ üå¿ üí¿ ü”¿ †¿ †¿ †J¿ †P¿ ††¿ †«¿ †Ê¿ °¿ °)¿ °6¿ °^¿ °d¿ °h¿ °i¿ °Æ¿ °Ÿ¿ °Ù¿ ¢¿ ¢8¿ ¢F¿ ¢L¿ ¢e¿ ¢|¿ ¢ô¿ ¢ù¿ ¢û¿ ¢Í¿ £5¿ £r¿ £w¿ £¿¿ §¿ §U¿ §ç¿ §í¿ §Œ¿ •¿ •l¿ •∏¿ •Õ¿ •Ù¿ ¶1¿ ¶2¿ ¶á¿ ¶≠¿ ¶≥¿ ¶¯¿ ßA¿ ßè¿ ß’¿ ß€¿ ®,¿ ®2¿ ®Ä¿ ®ç¿ ®õ¿ ®„¿ ®‰¿ ©"¿ ©(¿ ©h¿ ©n¿ ©±¿ ©Õ¿ ©ˇ¿ ™!¿ ™H¿ ™I¿ ™ã¿ ™ë¿ ™·¿ ´,¿ ´b¿ ´h¿ ´±¿ ´»¿ ´·¿ ¨¿ ¨&¿ ¨Y¿ ¨é¿ ¨ ¿ ¨¸¿ ≠	¿ ≠¿ ≠(¿ ≠4¿ ≠U¿ ≠ç¿ ≠∏¿ ≠¡¿ ≠«¿ ≠◊¿ ≠˜¿ Æ
¿ Æ¿ Æ¿ ÆM¿ Æv¿ Æπ¿ ÆÈ¿ Ø9¿ Øo¿ Øó¿ Ø√¿ Øı¿ ∞J¿ ∞_¿ ∞m¿ ∞y¿ ∞¨¿ ∞Â¿ ±¿ ±¿ ±$¿ ±o¿ ±í¿ ±∫¿ ±¬¿ ±√¿ ±’¿ ±¸¿ ≤¿ ≤¿ ≤R¿ ≤o¿ ≤w¿ ≤Ö¿ ≤™¿ ≤¿ ≤˘¿ ≥	¿ ≥/¿ ≥A¿ ≥d¿ ≥å¿ ≥°¿ ≥≠¿ ≥»¿ ≥Ó¿ ≥ˆ¿ ≥¸¿ ¥ ¿ ¥¿ ¥O¿ ¥†¿ ¥Ì¿ µ<¿ µi¿ µù¿ µû¿ µÃ¿ ∂¿ ∂+¿ ∂?¿ ∂O¿ ∂Ö¿ ∂∑¿ ∂ ¿ ∂‘¿ ∂ﬁ¿ ∂¿ ∑ ¿ ∑%¿ ∑7¿ ∑p¿ ∑Ö¿ ∑ë¿ ∑ó¿ ∑õ¿ ∑ú¿ ∑Ó¿ ∑Ô¿ ∏'¿ ∏-¿ ∏{¿ ∏è¿ ∏Ø¿ ∏»¿ π,¿ π2¿ πñ¿ π‡¿ ∫$¿ ∫K¿ ∫S¿ ∫Y¿ ∫â¿ ∫º¿ ∫‡¿ ∫Ê¿ ∫Ú¿ ª$¿ ªh¿ ªo¿ ªà¿ ª¨¿ ª≤¿ ª∂¿ ª∑¿ ªÛ¿ ªÙ¿ ºF¿ ºL¿ ºô¿ ºÓ¿ Ω6¿ Ωã¿ Ωü¿ Ω•¿ ΩÏ¿ Ω˘¿ æ¿ æM¿ æN¿ æã¿ æë¿ æ–¿ æ÷¿ ø¿ ø5¿ øe¿ øÜ¿ øá¿ øæ¿ øƒ¿ ¿¿ ¿]¿ ¿Æ¿ ¿¥¿ ¿˝¿ ¡¿ ¡,¿ ¡_¿ ¡q¿ ¡£¿ ¡ÿ¿ ¬¿ ¬D¿ ¬Q¿ ¬[¿ ¬p¿ ¬|¿ ¬ù¿ ¬‘¿ ¬ˇ¿ √¿ √¿ √¿ √*¿ √K¿ √`¿ √l¿ √¨¿ √Ÿ¿ √⁄¿ ƒ¿ ƒ=¿ ƒï¿ ƒ∆¿ ≈"¿ ≈U¿ ≈Å¿ ≈•¿ ≈·¿ ≈ˆ¿ ∆1¿ ∆?¿ ∆R¿ ∆~¿ ∆ä¿ ∆î¿ ∆ú¿ ∆—¿ ∆Ì¿ ∆ı¿ «¿ «'¿ «m¿ «v¿ «Ü¿ «ò¿ «∫¿ «œ¿ «€¿ «ˆ¿ »¿ »$¿ »*¿ ».¿ »/¿ »|¿ »Ç¿ »”¿ …#¿ …T¿ …û¿ …Ë¿  5¿  G¿  M¿  ñ¿  ≥¿  Ï¿ À¿ À¿ À"¿ À(¿ Àt¿ Àƒ¿ Ã¿ Ã¿ ÃX¿ Ãâ¿ Ãƒ¿ Ã»¿ Õ¿ Õ<¿ Õ=¿ ÕO¿ ÕU¿ Õ†¿ Õ¿ Œ)¿ Œ8¿ Œ¨¿ œ¿ œ>¿ œB¿ œÄ¿ œß¿ œƒ¿ œ¯¿ œ¸¿ œ˝¿ –¿ –t¿ –ô¿ –©¿ –Œ¿ —,¿ —7¿ —à¿ —±¿ —π¿ —„¿ “¿ “#¿ “K¿ “Q¿ “U¿ “V¿ “|¿ “°¿ “»¿ “Â¿ “È¿ “Í¿ ”¿ ”T¿ ”U¿ ”°¿ ”Ø¿ ”µ¿ ”Í¿ ‘3¿ ‘9¿ ‘Ü¿ ‘¡¿ ’ ¿ ’¿ ’O¿ ’û¿ ’π¿ ’”¿ ’ˆ¿ ÷¿ ÷
¿ ÷#¿ ÷w¿ ÷}¿ ÷¢¿ ÷≤¿ ÷’¿ ÷Ë¿ ÷Ú¿ ÷¸¿ ◊N¿ ◊ü¿ ◊Á¿ ÿ¿ ÿI¿ ÿj¿ ÿ∆¿ ÿﬁ¿ Ÿ)¿ ŸO¿ Ÿj¿ Ÿ©¿ Ÿ±¿ ŸÈ¿ ⁄¿ ⁄N¿ ⁄§¿ ⁄ˆ¿ €E¿ €d¿ €q¿ €¬¿ ‹¿ ‹'¿ ‹1¿ ‹[¿ ‹c¿ ‹~¿ ‹§¿ ‹¨¿ ‹≠¿ ‹ø¿ ‹˚¿ ›¿ ›`¿ ›j¿ ›¿ ›ã¿ ›å¿ ›ß¿ ›Ê¿ ›Ó¿ ﬁ&¿ ﬁU¿ ﬁq¿ ﬁÖ¿ ﬁè¿ ﬁπ¿ ﬁ¡¿ ﬁ‹¿ ﬂ¿ ﬂ
¿ ﬂ¿ ﬂ&¿ ﬂj¿ ﬂr¿ ﬂ≥¿ ﬂ‚¿ ﬂ˛¿ ‡¿ ‡¿ ‡K¿ ‡S¿ ‡n¿ ‡î¿ ‡ú¿ ‡ù¿ ‡À¿ · ¿ · ¿ ·(¿ ·6¿ ·^¿ ·§¿ ·≠¿ ·Ω¿ ·œ¿ ·ı¿ ‚
¿ ‚¿ ‚1¿ ‚W¿ ‚_¿ ‚e¿ ‚i¿ ‚j¿ ‚v¿ ‚®¿ ‚∆¿ „¿ „¿ „¿ „ ¿ „,¿ „q¿ „ú¿ „˝¿ ‰¿ ‰¿ ‰¿ ‰¿ ‰R¿ ‰q¿ ‰r¿ ‰ë¿ ‰÷¿ ‰˜¿ Â¿ Â¿ Â¿ Âj¿ Âk¿ Â∏¿ Âæ¿ Ê	¿ ÊX¿ Ê{¿ Ê¶¿ Ê≈¿ Êﬂ¿ Á¿ Á/¿ Á0¿ Ác¿ ÁÅ¿ Áá¿ Áã¿ Áå¿ Áπ¿ Áø¿ Ë
¿ Ë[¿ Ë}¿ Ëè¿ ËÆ¿ Ë‰¿ Ë˙¿ ÈI¿ Èö¿ È€¿ È‹¿ Í¿ Í%¿ Í+¿ Í/¿ Í0¿ Íu¿ Íº¿ Î
¿ ÎY¿ Îâ¿ Î÷¿ Î◊¿ Ï¿ Ï	¿ ÏX¿ Ï•¿ ÏÚ¿ Ì=¿ Ìä¿ ÌŸ¿ Ó*¿ ÓJ¿ ÓP¿ Óë¿ Óµ¿ Óª¿ Ô¿ Ô[¿ Ôa¿ Ôå¿ Ôµ¿ Ô›¿ ¿ ^¿ x¿ ë¿ µ¿ ª¿ ÿ¿ ¯¿ ˛¿ Ò¿ Ò¿ ÒL¿ ÒR¿ Ò£¿ Òµ¿ Òª¿ Ú
¿ ÚY¿ ÚÅ¿ Ú©¿ Ú–¿ Û)¿ ÛF¿ Û_¿ ÛÉ¿ Ûâ¿ Û¶¿ Ûº¿ Û¬¿ Û∆¿ Û«¿ Ù¿ Ù¿ Ù%¿ Ù+¿ ÙQ¿ Ùy¿ ÙÆ¿ ÙŒ¿ Ù“¿ Ù”¿ ı¿ ı¿ ıa¿ ı∞¿ ˆ¿ ˆ¿ ˆC¿ ˆV¿ ˆu¿ ˆì¿ ˆ≤¿ ˆ‘¿ ˜¿ ˜"¿ ˜>¿ ˜_¿ ˜è¿ ˜Ø¿ ˜”¿ ˜◊¿ ˜Ÿ¿ ˜⁄¿ ¯¿ ¯¿ ¯L¿ ¯è¿ ¯ê¿ ¯∏¿ ¯º¿ ¯¸¿ ˘I¿ ˘ò¿ ˘Ê¿ ˙3¿ ˙Z¿ ˙^¿ ˙Æ¿ ˙ˇ¿ ˚E¿ ˚e¿ ˚i¿ ˚∑¿ ¸¿ ¸;¿ ¸Ü¿ ¸»¿ ¸Œ¿ ˝¿ ˝`¿ ˝f¿ ˝v¿ ˝|¿ ˝√¿ ˛¿ ˛¿ ˛¿ ˛m¿ ˛ª¿ ˛‘¿ ˛⁄¿ ˇ+¿ ˇx¿ ˇ≈¿ ˇ‰¿ ˇÍ¿ 1¿ Ä¿ Œ¿ ‘¿ ‰¿ Í¿3¿u¿ì¿ï¿ñ¿∏¿º¿ ¿ ¿$¿g¿k¿∑¿¿R¿r¿v¿¡¿¿X¿®¿ı¿D¿î¿ª¿ø¿¿*¿.¿?¿C¿ê¿‡¿1¿K¿O¿õ¿È¿9¿ä¿»¿Ã¿Û¿˜¿	=¿	ã¿	ÿ¿
#¿
r¿
¿¿¿^¿¶¿ı¿B¿ç¿Œ¿“¿!¿q¿¬¿˛¿¿¿¿\¿£¿ø¿√¿¿b¿Æ¿˚¿@¿Å¿Ö¿’¿¿¿ ¿$¿o¿û¿¢¿Ô¿=¿é¿÷¿ ¿n¿ª¿‡¿‰¿¿¿g¿∏¿¿S¿§¿ª¿ø¿¿¿#¿c¿±¿¬¿∆¿¿b¿f¿ô¿ù¿Ô¿?¿é¿Ÿ¿$¿(¿v¿√¿¿^¿≠¿¸¿1¿Ç¿“¿ﬂ¿3¿e¿x¿¬¿¿4¿8¿9¿à¿◊¿"¿Q¿W¿ò¿È¿5¿T¿Z¿¶¿¨¿º¿¬¿Ô¿ ¿ ¿ B¿ X¿ x¿ °¿ ª¿ √¿ «¿ »¿ Ó¿ Ù¿!1¿!M¿!a¿!q¿!í¿!•¿!Ø¿!ƒ¿!»¿!…¿!Ë¿!È¿"!¿"'¿"r¿"¡¿#¿#K¿#î¿#‰¿#¸¿$¿$M¿$t¿$z¿$∂¿$«¿$⁄¿$˜¿%%¿%D¿%T¿%°¿%≥¿%·¿%Ù¿&¿&Ö¿&ì¿&†¿&Ω¿&–¿&⁄¿&ﬁ¿&ﬂ¿&Î¿&Ï¿'¿'"¿'o¿'æ¿(¿(L¿(R¿(ù¿(Ã¿)¿)Z¿)´¿)˜¿*C¿*~¿*ò¿*ô¿*⁄¿*‡¿+0¿+a¿+ò¿+ø¿+Í¿,¿,¿,¿,¿,V¿,\¿,¨¿,Ù¿-1¿-7¿-Ö¿-–¿. ¿.o¿.µ¿/¿/¿/S¿/£¿/¬¿/›¿/Ô¿/¿0A¿0P¿0V¿0ó¿0§¿0Œ¿0¿1¿13¿1R¿1X¿1\¿1]¿1ó¿1ù¿1Ó¿2&¿23¿2O¿2P¿2ã¿2ë¿2—¿2¯¿3¿3¿3Z¿3`¿3é¿3î¿3⁄¿3Ù¿4¿4<¿4=¿4Ö¿4ã¿4⁄¿5-¿5>¿5K¿5s¿5ñ¿5¶¿5∆¿5Í¿6¿6¿6X¿6k¿6u¿6v¿6í¿6©¿6œ¿6Ô¿7	¿7¿7:¿7@¿7Y¿7]¿7^¿7∞¿7∂¿8¿8X¿8i¿8v¿8ù¿8¿¿8Ë¿9¿98¿9`¿9f¿9Ü¿9£¿9Ω¿9—¿9Á¿9Ì¿:¿:*¿:J¿:N¿:O¿:ì¿:ô¿:È¿;¿;¿;]¿;c¿;Å¿;á¿;ó¿;ù¿;Ò¿<	¿<
¿<W¿<u¿<ê¿<Æ¿<ƒ¿<Í¿=!¿=X¿=™¿=◊¿>1¿>M¿>®¿>µ¿?¿?W¿?§¿?ﬂ¿@9¿@D¿@M¿@T¿@X¿@Y¿@§¿@™¿@˜¿A¿A>¿Ad¿Ae¿A∞¿A∂¿B¿B¿BJ¿Bp¿Bq¿B¨¿B≤¿Bˇ¿C¿CO¿Cz¿C{¿C¬¿D¿DY¿Dv¿Dï¿D≥¿D”¿E¿EB¿ER¿Eà¿E©¿Eº¿E∆¿E‰¿EÙ¿F*¿F=¿FG¿FZ¿F^¿F_¿FØ¿Fª¿F¡¿G¿G¿GM¿Gä¿G™¿G´¿G—¿G“¿H¿H¿H^¿HÆ¿H¿Hˆ¿ID¿Ik¿IÅ¿Ië¿I≠¿IÂ¿J%¿JR¿J¿Jë¿J»¿J’¿J·¿JÈ¿JÍ¿K¿Kg¿K∏¿K–¿L¿L¿L2¿L:¿L;¿Lh¿Lë¿L∆¿M¿Mt¿M™¿M˝¿NJ¿Nô¿N¡¿NË¿O8¿OQ¿Oh¿Or¿Os¿O™¿OÎ¿O¸¿P!¿P2¿P<¿PD¿PE¿Pì¿P·¿P˝¿Q¿Q|¿Qí¿Qì¿Qπ¿QÒ¿RB¿R^¿Rƒ¿R—¿R˛¿S0¿SB¿Sy¿SÜ¿S≥¿Sˇ¿T¿TU¿Tb¿Tn¿Tv¿Tw¿Tù¿T’¿U9¿Uú¿U…¿U˚¿V¿VD¿VQ¿Vf¿VÃ¿VŸ¿VÂ¿VÌ¿VÓ¿W¿W`¿Wi¿W∑¿WÏ¿XK¿XÆ¿X„¿X‰¿Y¿Y+¿YR¿Y}¿Y≠¿YΩ¿YÚ¿Y˝¿Z(¿Zõ¿Z∏¿ZÌ¿Z¯¿[¿[G¿[p¿[é¿[≈¿[“¿[Â¿\i¿\Õ¿\ÿ¿\‚¿\Ï¿\ˇ¿]¿]¿]U¿]Ç¿]à¿]Ÿ¿^&¿^o¿^u¿^¿¿^˘¿_I¿_ö¿_Ø¿_º¿_‰¿`¿`¿`1¿`D¿`N¿`g¿`k¿`l¿`©¿`Ø¿`Ô¿a¿a5¿aN¿aO¿a≠¿a≥¿aË¿aÓ¿b$¿bK¿bL¿bä¿bê¿b‹¿c¿c¿cV¿cå¿c”¿c‰¿d	¿d&¿dB¿dV¿d§¿dÎ¿e"¿eb¿eí¿eÆ¿e«¿eÕ¿eÙ¿f¿fG¿fM¿fÇ¿f¡¿f¿g¿g#¿g)¿gk¿g®¿g ¿g–¿g‘¿g’¿h¿h¿ho¿hö¿h†¿hﬁ¿i$¿iB¿iS¿ie¿iÅ¿iî¿i–¿i‘¿i’¿j¿j¿jl¿j∏¿k¿k<¿kB¿kx¿kñ¿k¨¿kº¿kŸ¿kÏ¿kˆ¿l	¿l¿l¿l*¿l+¿lk¿lq¿l¡¿m¿mb¿m£¿m©¿mÚ¿n<¿nç¿nﬂ¿o/¿oÅ¿oœ¿oﬁ¿o‰¿p6¿pÑ¿p—¿q!¿qQ¿qW¿q£¿qÒ¿r¿r¿rc¿r´¿r»¿r…¿s¿sh¿sï¿sñ¿sŸ¿sﬂ¿t ¿tF¿tS¿ts¿tì¿t¯¿t˛¿u¿u¿u¿u:¿u;¿uå¿u⁄¿v+¿vx¿v£¿v∞¿vŸ¿v⁄¿w+¿wy¿wù¿w£¿wÚ¿xD¿xñ¿xΩ¿xÏ¿xÌ¿y'¿y1¿yR¿yä¿y£¿y´¿z¿z/¿zE¿zM¿zt¿zâ¿zë¿zó¿z®¿z¨¿z≠¿z˛¿{O¿{ï¿{õ¿{Ø¿{µ¿|¿|T¿|°¿|‡¿|Ê¿}6¿}k¿}q¿}¡¿~
¿~Z¿~ß¿~Ù¿A¿{¿Å¿¬¿Ä¿ÄS¿ÄY¿Äp¿Äv¿Äø¿Å	¿ÅX¿Åó¿Å‘¿Ç%¿ÇA¿ÇG¿Çs¿Çø¿Ç⁄¿É¿É¿ÉY¿Ég¿Ém¿ÉÜ¿É€¿ÉÌ¿Ñ¿Ñd¿Ñn¿ÑÉ¿Ñè¿Ñ∫¿Ñ›¿Ñ˛¿Ö¿Ö#¿Ö'¿Ö(¿Öw¿Öâ¿Öè¿Ö”¿Ü$¿Üs¿Ü§¿Ü™¿Üÿ¿ÜÂ¿á¿á-¿áF¿ág¿áï¿áæ¿áﬁ¿áÎ¿à¿à¿à@¿àD¿àE¿àá¿à‘¿â¿â¿âb¿âh¿âñ¿â«¿âﬁ¿â˚¿âˇ¿ä ¿äL¿äR¿äü¿ä≈¿äÀ¿ã¿ã0¿ãM¿ãc¿ã¿ã¶¿ãœ¿ãÔ¿ãˇ¿å%¿å8¿åB¿ål¿åp¿åq¿åû¿åæ¿åÿ¿ç3¿ç`¿çÑ¿çØ¿ç€¿çÎ¿é¿é3¿éi¿éä¿é©¿é‚¿éÍ¿é˝¿è¿è¿è(¿èJ¿èc¿èñ¿èú¿è¨¿è‚¿ê¿ê,¿ê?¿êI¿êc¿êy¿ê}¿ê~¿êØ¿êµ¿ë¿ëS¿ë£¿ë—¿ë◊¿í%¿íu¿í∆¿ì¿ìV¿ì¶¿ì·¿ìÁ¿î4¿î¿î«¿îÕ¿ï¿ïj¿ï∑¿ï‰¿ñ¿ñY¿ñv¿ñ≠¿ñ‡¿ñÚ¿ó%¿ós¿ó}¿óí¿óû¿óÚ¿ó¯¿ò¿ò*¿òM¿òp¿ò¿¿ò‹¿ô>¿ôt¿ô∫¿ô›¿ö¿ö ¿ö.¿ö:¿ö}¿ö»¿õ*¿õV¿õ§¿õ–¿õ˝¿ú#¿úC¿úô¿úÏ¿ù!¿ùG¿ùX¿ùg¿ùs¿ùô¿ù§¿ù≠¿ù¥¿ùÿ¿ù¸¿û¿û;¿ûN¿ûX¿ûY¿ûæ¿ûˆ¿ü¿üV¿üó¿ü∆¿üˆ¿†B¿†e¿†¿†∑¿†ﬁ¿°¿°¿°&¿°_¿°Ö¿°ç¿°õ¿°°¿°¡¿°¬¿°Ê¿¢¿¢!¿¢E¿¢d¿¢x¿¢⁄¿¢Â¿¢Ì¿£ ¿£
¿£#¿£5¿£[¿£p¿£|¿£à¿£°¿£µ¿£·¿£¯¿§¿§!¿§V¿§^¿§p¿§ó¿§¨¿§∏¿§æ¿§Î¿§˚¿•¿•U¿•v¿•â¿•ì¿•ù¿•¥¿•÷¿•Ë¿¶¿¶'¿¶3¿¶L¿¶¿¶Ö¿¶ï¿¶À¿¶¿ß¿ß(¿ß2¿ßL¿ßb¿ßc¿ßö¿ßæ¿ßƒ¿ß»¿ß…¿®¿®^¿®´¿®˜¿©H¿©u¿©Ç¿©ù¿©û¿©Î¿™¿™ ¿™h¿™∑¿™˘¿™ˇ¿´O¿´û¿´Õ¿´”¿¨#¿¨i¿¨ß¿¨À¿¨ÿ¿¨˚¿¨¸¿≠;¿≠}¿≠É¿≠“¿Æ¿Æh¿Æ°¿Æß¿ÆÊ¿Æ˚¿Ø¿ØR¿Ø°¿ØÕ¿Ø⁄¿ØÚ¿ØÛ¿∞5¿∞;¿∞ä¿∞’¿± ¿±Y¿±_¿±Ø¿≤ ¿≤N¿≤ü¿≤∞¿≤∂¿≥¿≥P¿≥ï¿≥Â¿¥.¿¥f¿¥l¿¥≤¿µ¿µP¿µ°¿µÒ¿∂¿∂¿∂7¿∂8¿∂¿∂œ¿∑¿∑h¿∑Ñ¿∑ä¿∑€¿∏)¿∏z¿∏√¿∏…¿π¿πj¿πp¿π¶¿π≥¿∫¿∫'¿∫J¿∫u¿∫û¿∫®¿∫⁄¿∫˛¿ª¿ª¿ªD¿ªJ¿ªN¿ªO¿ª]¿ª^¿ª°¿ªß¿ªÙ¿º¿º9¿º^¿º_¿ºí¿ºò¿ºÂ¿ºÒ¿Ω3¿Ω]¿Ω^¿Ω§¿Ω™¿Ω˚¿æD¿æï¿æß¿æ≠¿æ˝¿øS¿øô¿øÌ¿¿¿¿¿¿n¿¿¿¿Ö¿¿›¿¡¿¡¿¡R¿¡ã¿¡ë¿¡·¿¡˛¿¬)¿¬I¿¬i¿¬q¿¬r¿¬≠¿¬≥¿√¿√P¿√z¿√Ä¿√—¿ƒ¿ƒ,¿ƒX¿ƒY¿ƒz¿ƒ{¿ƒ∫¿ƒ¿¿≈¿≈¿≈`¿≈Ø¿∆ ¿∆O¿∆ö¿∆™¿∆∞¿∆˝¿«'¿«-¿«Ä¿«—¿»¿»p¿»É¿»⁄¿…(¿…z¿…ô¿…ø¿…√¿…ƒ¿ 	¿ ¿ _¿ ¨¿ ˘¿ÀH¿Àõ¿ÀÈ¿Ã/¿Ã{¿Ã…¿Ã˛¿Õ¿ÕQ¿Õü¿ÕÈ¿Œ5¿ŒÑ¿Œ”¿ŒÚ¿Œ¯¿œG¿œî¿œ‡¿œÌ¿œ˙¿–¿–{¿–ö¿–û¿–ü¿–¨¿–‘¿–‡¿–˙¿—B¿—â¿—™¿—±¿—‘¿—ÿ¿—Ÿ¿“+¿“,¿“Ä¿“Ü¿“◊¿”*¿”:¿”@¿”m¿”ê¿”¨¿”º¿”ﬂ¿”Ú¿”¸¿‘¿‘¿‘¿‘e¿‘ß¿‘≠¿‘˝¿’M¿’Z¿’`¿’ú¿’„¿÷*¿÷q¿÷∂¿÷Î¿÷Ò¿◊6¿◊|¿◊µ¿◊ﬂ¿◊¸¿ÿ#¿ÿ1¿ÿ7¿ÿ_¿ÿç¿ÿß¿ÿ◊¿ÿÁ¿ÿÔ¿ÿ¿ŸG¿Ÿx¿Ÿà¿Ÿê¿Ÿñ¿Ÿ”¿⁄¿⁄¿⁄¿⁄R¿⁄ñ¿⁄ú¿⁄Ì¿€¿€¿€Z¿€ó¿€µ¿‹¿‹1¿‹5¿‹6¿‹X¿‹Ä¿‹é¿‹î¿‹Ã¿‹Î¿›¿›:¿›^¿›Ä¿›à¿›ê¿›«¿›Á¿›Ì¿ﬁ<¿ﬁá¿ﬁ”¿ﬂ*¿ﬂu¿ﬂ™¿ﬂ≈¿ﬂ¿‡E¿‡p¿‡à¿‡√¿‡Ó¿·¿·¿·>¿·D¿·H¿·I¿·à¿·é¿·ﬂ¿‚+¿‚x¿‚±¿‚∑¿‚Ì¿‚Û¿„?¿„é¿„”¿‰¿‰Z¿‰w¿‰ç¿‰ù¿‰π¿‰Ã¿‰÷¿‰È¿‰Ì¿‰Ó¿Â	¿Â
¿ÂI¿ÂO¿Â†¿ÂÏ¿Ê9¿Êr¿Êx¿ÊÆ¿Ê€¿ÊÒ¿Á¿Á-¿Á@¿ÁJ¿Á]¿Áa¿Áb¿Áé¿Áè¿Á÷¿Á‹¿Ë!¿Ën¿Ëæ¿È¿È%¿È+¿Èv¿È≤¿È∏¿È¯¿ÍE¿Íá¿Íç¿Íù¿Í£¿ÍÒ¿ÎC¿ÎS¿Îm¿Îä¿Î¿¿Î◊¿ÎÂ¿ÎÎ¿Ï¿ÏI¿Ïk¿Ïü¿Ï±¿Ïﬂ¿Ì&¿Ì0¿ÌE¿ÌQ¿Ìî¿Ì ¿Ì˚¿Ó¿ÓC¿Ói¿Óq¿Óí¿Ó≤¿Óø¿Ó—¿Óˇ¿Ô\¿Ôf¿Ô{¿Ôá¿Ô—¿¿_¿ù¿¶¿„¿Ò"¿ÒF¿ÒL¿ÒP¿ÒQ¿Òû¿Ò´¿Ò±¿Ú¿ÚV¿Ú°¿Ú¿Û9¿Û?¿Ûê¿Û‡¿Ù¿Ù	¿Ù¿Ù¿Ùo¿ÙÆ¿Ùÿ¿Ùı¿ı+¿ıa¿ıo¿ıu¿ıù¿ı„¿ˆ¿ˆ9¿ˆ|¿ˆ≤¿ˆ‹¿ˆ˜¿˜$¿˜J¿˜R¿˜_¿˜w¿˜}¿˜Å¿˜Ç¿˜“¿¯ ¿¯q¿¯∫¿¯Û¿˘¿˘,¿˘K¿˘É¿˘´¿˘÷¿˘˜¿˙¿˙6¿˙e¿˙º¿˙Õ¿˙◊¿˚¿˚d¿˚u¿˚¿˚†¿˚®¿˚¬¿˚»¿˚Ã¿˚Õ¿¸¿¸¿¸l¿¸î¿¸ö¿¸ﬁ¿˝¿˝6¿˝L¿˝h¿˝é¿˝≠¿˝’¿˝˘¿˛¿˛;¿˛?¿˛@¿˛Ö¿˛∆¿˛ÿ¿˛ﬁ¿ˇ#¿ˇT¿ˇq¿ˇë¿ˇß¿ˇ√¿ˇÈ¿ ¿ [¿ }¿ °¿ ∑¿ ª¿ º¿ ˇ¿¿,¿N¿Ü¿Ã¿Ë¿8¿U¿b¿~¿…¿‰¿Ò¿˝¿¿¿"¿n¿º¿
¿Y¿•¿Ú¿;¿S¿a¿g¿ù¿–¿‚¿¿b¿l¿Å¿ç¿·¿Á¿˜¿ ¿R¿p¿ò¿Œ¿Ô¿¿#¿1¿S¿è¿´¿˚¿	¿	-¿	f¿	¨¿	Ã¿
¿
q¿
µ¿
∆¿#¿3¿?¿I¿Å¿ô¿Á¿ˇ¿¿(¿y¿≠¿∫¿÷¿$¿q¿±¿æ¿¿#¿+¿>¿H¿p¿Ä¿£¿”¿Û¿3¿F¿P¿i¿í¿ø¿…¿Á¿@¿ò¿±¿‹¿‚¿Ú¿¿E¿i¿|¿Ü¿º¿‡¿Ê¿Í¿Î¿7¿Å¿á¿◊¿¿¿	¿D¿Å¿Ç¿Õ¿”¿¿d¿≤¿ˇ¿%¿+¿y¿…¿¿.¿4¿Ä¿ ¿¿K¿É¿Ñ¿‘¿Ô¿ı¿F¿ó¿¥¿∫¿¿P¿ú¿Â¿1¿j¿∏¿⁄¿ﬁ¿ﬂ¿&¿,¿|¿»¿¿2¿8¿¿Ã¿¿h¿∏¿’¿¿*¿;¿?¿@¿Ä¿À¿·¿Á¿1¿Å¿ú¿¢¿Ù¿ 5¿ ;¿ ä¿ “¿ ˚¿!¿!L¿!ê¿!∞¿!≈¿!À¿"¿"f¿"¥¿#¿#¿#F¿#\¿#¨¿#Â¿#Ï¿$=¿$N¿$p¿$æ¿$÷¿$ˆ¿$˜¿%¿%G¿%H¿%k¿%ì¿%∑¿%∏¿%⁄¿&¿&¿&u¿&≤¿&Õ¿&’¿&˜¿'¿'Ç¿'í¿'¨¿'¸¿(¿(C¿(Z¿(b¿(h¿(i¿(Ö¿(°¿(ƒ¿(Ó¿)F¿)Å¿)“¿)⁄¿)‡¿)˙¿*,¿*2¿*3¿*R¿*Ü¿*«¿+¿+¿+;¿+É¿+†¿+¶¿+È¿+Ì¿+Ó¿,5¿,w¿,∏¿,æ¿,Ù¿,˙¿-@¿-g¿-m¿-Ω¿.
¿.Z¿.î¿.‡¿.·¿/(¿/w¿/√¿0¿0`¿0¨¿0˜¿1¿1
¿1U¿1¢¿1Ó¿2	¿2¿2`¿2Æ¿2¸¿3L¿3õ¿3‡¿3Ê¿3ˆ¿3¸¿4H¿4Ñ¿4 ¿4À¿4⁄¿4€¿5"¿5G¿5M¿5î¿5´¿5±¿5˙¿6¿6;¿6Q¿6m¿6ó¿6‘¿7 ¿7-¿7O¿7S¿7T¿7•¿7´¿7ˆ¿8¿8¿8a¿8¨¿8˚¿9C¿9ì¿9⁄¿9‡¿9ˆ¿9¸¿:L¿:_¿:e¿:s¿:∫¿:Ã¿;¿;Q¿;b¿;É¿;©¿;»¿;“¿;ÿ¿;Ù¿<¿<¿<!¿<+¿<=¿<J¿<ë¿<≤¿<∂¿<∑¿=¿=¿=]¿=ò¿=û¿=Ÿ¿=ﬂ¿>+¿>f¿>è¿>ù¿>£¿>„¿?¿?=¿?^¿?ê¿?ñ¿?ö¿?õ¿?€¿@¿@ ¿@!¿@r¿@x¿@§¿@À¿@„¿@˜¿@˝¿A$¿A(¿A)¿AT¿AZ¿A®¿AÏ¿B¿B¿Bg¿Bs¿Bô¿BË¿C¿C:¿Cg¿Cm¿C~¿CÇ¿CÉ¿CÃ¿C“¿D!¿D'¿Dp¿Dº¿DÕ¿DÁ¿Dˇ¿E(¿EF¿EN¿ER¿ES¿Eõ¿E°¿EË¿F9¿Fe¿Fâ¿F¶¿F›¿G¿G"¿G(¿GJ¿GN¿GO¿Gû¿Gü¿Gÿ¿Gﬁ¿H.¿Hw¿Hâ¿Hè¿H»¿I¿IL¿Ih¿Il¿Im¿I©¿IØ¿Iﬁ¿J/¿Jy¿J…¿JÙ¿J˙¿KF¿K^¿Kd¿K±¿K¸¿L-¿LK¿Lc¿LÜ¿L¨¿L≤¿LÊ¿M_¿M¬¿M∆¿M«¿M”¿M‘¿N%¿N1¿Ny¿Nz¿Nã¿Nå¿N⁄¿O"¿O:¿O?¿Oá¿O”¿OË¿P8¿Pá¿P’¿Q¿Q=¿QD¿QI¿Qö¿QŒ¿Qœ¿Q˙¿R¿R!¿RM¿Rf¿RÇ¿R°¿R∏¿R¿¿R¡¿R÷¿R‚¿S¿SC¿S^¿Sh¿Sò¿SÆ¿Sø¿S…¿S›¿SÂ¿S¸¿T,¿T4¿TN¿Tq¿Ty¿Tí¿T¥¿Tº¿TÂ¿U¿U!¿U8¿UW¿U_¿Ue¿Ux¿U|¿U}¿Uâ¿U‚¿U„¿V ¿Vh¿Vè¿Võ¿V≥¿V“¿Vı¿W+¿WC¿WJ¿Wt¿Wî¿W∫¿WÊ¿X¿X ¿X)¿X0¿X4¿X5¿Xy¿X®¿XÆ¿X˘¿Y5¿YA¿Y¶¿Y–¿Z¿Z¿Z"¿Z#¿Z0¿Z<¿ZÅ¿Z¨¿Z¿¿[¿[&¿[:¿[^¿[q¿[á¿[£¿[…¿[“¿[Ÿ¿[Ì¿\¿\*¿\>¿\ä¿\ß¿\∞¿\∑¿\À¿]%¿],¿]ã¿]ü¿]˚¿^¿^¿^v¿^}¿^ë¿^•¿^‹¿_<¿_î¿_ù¿_§¿_∏¿_Ã¿_Í¿`1¿`V¿`_¿`f¿`j¿`k¿`w¿`ø¿`¿¿a¿a"¿a(¿as¿a∑¿aΩ¿b¿bL¿bô¿b‰¿c)¿cI¿cO¿cö¿c‹¿c‚¿cÚ¿c¯¿dD¿d}¿dì¿d±¿d¡¿dË¿e¿e¿e(¿eN¿e`¿ez¿eé¿eï¿eô¿eö¿eÎ¿f¿f¿fW¿f¶¿f‘¿f⁄¿g*¿gw¿gõ¿gÆ¿gÌ¿gÙ¿h,¿h0¿h2¿h3¿hh¿hl¿h≠¿hÌ¿hÒ¿i6¿i`¿i≥¿j¿j)¿j/¿j^¿jd¿j¿jØ¿jø¿j‡¿k¿k0¿kÅ¿k¥¿k¡¿k›¿l)¿lt¿l∆¿m¿m$¿m=¿me¿mµ¿mœ¿n¿n¿n,¿nT¿nß¿n≈¿nÂ¿o¿o)¿o5¿o=¿oP¿oZ¿ok¿oo¿op¿oÖ¿oÜ¿oÆ¿o–¿o¿p
¿p$¿p*¿p>¿pX¿ps¿py¿p}¿p~¿pä¿pØ¿p»¿p„¿pÁ¿pË¿pÙ¿q¿q¿q0¿q4¿q5¿qA¿q\¿qv¿qì¿qô¿qù¿qû¿q™¿qﬁ¿q¯¿r¿r¿r¿r¿r'¿rY¿rr¿r∑¿r÷¿r⁄¿r‹¿r›¿s,¿sw¿sï¿sô¿sÈ¿t9¿tÇ¿tœ¿u ¿um¿u∂¿v ¿vQ¿vü¿vÒ¿wA¿wT¿wX¿w£¿w‚¿wÊ¿wÙ¿w¯¿x?¿x{¿x…¿y¿yh¿yÖ¿yÜ¿y∆¿yÃ¿z¿z[¿zè¿zß¿z¿¿z¡¿z˝¿{¿{N¿{ú¿{≥¿{ƒ¿{·¿|¿|6¿|Q¿|U¿|V¿|®¿|˜¿}E¿}V¿}x¿}ë¿}±¿}ø¿}≈¿}ﬂ¿~,¿~¿~œ¿	¿3¿Ö¿¨¿…¿Õ¿œ¿–¿Ä¿Ä¿Ä]¿Äû¿Ä⁄¿Å¿ÅU¿Åå¿Å™¿Å´¿Åﬁ¿Å¯¿Å˘¿Ç¿Ç'¿Ç9¿ÇE¿Çd¿ÇÆ¿Çµ¿É¿É.¿É2¿É4¿É5¿És¿Éw¿É»¿Éﬁ¿É‚¿Ñ5¿ÑK¿ÑO¿Ñû¿ÑÍ¿Ö¿Öm¿Öq¿Öƒ¿Ü¿Ü'¿Ü+¿Üë¿Üï¿Ü£¿Üß¿Ü¿á¿á3¿áU¿áí¿áî¿á™¿á˘¿àC¿ày¿à±¿à·¿â¿â$¿â@¿âD¿âE¿âê¿â⁄¿ä¿ä@¿äl¿ä©¿äØ¿äÀ¿äœ¿ä–¿äÁ¿äË¿ã¿ã+¿ã,¿ã}¿ã¢¿ã®¿ã◊¿ã›¿ã¯¿å(¿å8¿åY¿åë¿å©¿å˙¿ç-¿ç:¿çV¿ç¢¿çÌ¿é?¿éê¿éù¿é∂¿éﬁ¿è.¿èH¿è¿èå¿è•¿èÕ¿ê ¿ê>¿ê^¿êï¿ê¢¿êÆ¿ê∂¿ê…¿ê”¿ê‰¿êË¿êÈ¿ë¿ë¿ë_¿ëØ¿ë‡¿í¿í+¿íH¿ía¿íå¿íΩ¿íﬁ¿ì>¿ìt¿ì|¿ìó¿ì≥¿ì¿¿ì„¿î¿îP¿îñ¿îË¿ï¿ïk¿ïê¿ï¡¿ïÓ¿ñ
¿ñ¿ñc¿ñí¿ñ’¿ó¿ó5¿ós¿óø¿ó˘¿òA¿ò}¿òπ¿òÔ¿ò˜¿ò˝¿ô¿ô¿ôQ¿ôW¿ôß¿ôŸ¿ö¿ö[¿ög¿ö|¿öÊ¿öÌ¿õ<¿õ^¿õ¿õñ¿õ¢¿õÃ¿ú%¿úÄ¿ú÷¿ú›¿ù¿ù¿ù¿ùS¿ùq¿ùó¿ùõ¿ùú¿ùÊ¿û¿û-¿û1¿û2¿ûa¿û±¿û˙¿ü>¿ü\¿üè¿ü≥¿ü‰¿üÒ¿†-¿†w¿†«¿†Õ¿†¸¿°¿°S¿°`¿°ò¿°ﬁ¿¢2¿¢8¿¢d¿¢å¿¢¢¿¢¶¿¢ß¿¢‘¿¢⁄¿£¿£5¿£V¿£l¿£p¿£q¿£∑¿£Ω¿£Û¿§¿§,¿§H¿§ö¿§’¿•¿•-¿•E¿•Y¿•_¿•w¿•é¿•£¿•ß¿•®¿•Ú¿•¯¿¶G¿¶ò¿¶Õ¿ß ¿ß¿ß6¿ßR¿ßt¿ßƒ¿ß¯¿®¿®¿®-¿®\¿®s¿®w¿®x¿®Ñ¿®©¿®¬¿®Ê¿©¿©¿©o¿©ö¿©†¿©§¿©•¿©±¿©√¿©◊¿©˚¿™¿™-¿™¿™™¿™∞¿™¥¿™µ¿™¡¿™‹¿´ ¿´¿´7¿´â¿´¥¿´∫¿´æ¿´ø¿´À¿´ˇ¿¨#¿¨?¿¨U¿¨ß¿¨“¿¨ÿ¿¨‹¿¨›¿≠¿≠2¿≠3¿≠[¿≠Ö¿≠Ü¿≠…¿≠ı¿Æ¿Æg¿Æì¿Æó¿Æò¿Æ÷¿Ø¿Ø#¿Øs¿Øõ¿Øü¿Ø†¿Ø¨¿Øﬁ¿∞¿∞<¿∞a¿∞v¿∞ã¿∞–¿∞Ú¿±¿±¿±!¿±u¿±£¿±´¿±±¿±∆¿± ¿±Ã¿±Õ¿≤¿≤6¿≤:¿≤á¿≤÷¿≤˚¿≥6¿≥v¿≥|¿≥Ω¿¥ ¿¥P¿¥¢¿¥®¿¥Ï¿µ¿µ¿µa¿µÄ¿µç¿µû¿µæ¿µ’¿µŸ¿µ⁄¿∂¿∂8¿∂D¿∂ã¿∂Ú¿∑6¿∑=¿∑p¿∑~¿∑Ñ¿∑∏¿∏¿∏:¿∏q¿∏¿∏¨¿π¿π¿π0¿πP¿πX¿π`¿πd¿πe¿πq¿πñ¿πØ¿π¸¿∫J¿∫ö¿∫–¿ª"¿ª&¿ª'¿ª3¿ªE¿ª{¿ª–¿ª‰¿ªË¿ªÍ¿ªÎ¿º5¿ºL¿º~¿º∫¿Ω¿Ω2¿ΩT¿ΩÅ¿Ωû¿Ωƒ¿ΩË¿æ¿æ3¿æ^¿æe¿æÉ¿æü¿æÕ¿æ˜¿ø!¿øK¿øo¿øô¿øù¿øû¿øÎ¿¿ ¿¿H¿¿v¿¿ñ¿¿§¿¿™¿¿√¿¿Ì¿¡¿¡¿¡¿¡Y¿¡ú¿¡Œ¿¡‘¿¬(¿¬w¿¬ì¿¬∑¿¬œ¿¬Ì¿√¿√¿√¿√7¿√W¿√[¿√\¿√©¿√Ï¿√Ú¿ƒB¿ƒí¿ƒß¿ƒÚ¿≈6¿≈Z¿≈`¿≈ï¿≈Â¿∆¿∆O¿∆p¿∆ó¿∆ø¿∆Õ¿∆”¿∆Ù¿«¿«¿«¿«e¿«Ä¿«Ü¿«“¿» ¿»h¿»ö¿»π¿»ﬁ¿…¿…¿…¿…7¿…W¿…[¿…\¿…†¿…¶¿…Ï¿ '¿ J¿ |¿ õ¿ ¿¿ Ê¿ Ù¿ ˙¿À¿À9¿À=¿À>¿Àl¿Àr¿Àø¿ÀÙ¿Ã¿Ã9¿Ã_¿Ãm¿Ãs¿Ãí¿Ã≤¿Ã∂¿Ã∑¿ÃÛ¿Õ,¿Õe¿Õ∞¿Õ˚¿Œ2¿Œ6¿Œ7¿ŒÇ¿ŒÂ¿ŒÈ¿ŒÍ¿œ5¿œò¿œú¿œù¿œÒ¿–¿–w¿–{¿–|¿––¿—¿—[¿—_¿—`¿—™¿“
¿“¿“¿“5¿“[¿“ä¿“π¿“ﬁ¿“ﬂ¿”/¿”<¿”B¿”à¿”¥¿”·¿‘¿‘]¿‘ì¿‘¥¿‘‡¿’¿’¿’¿’2¿’R¿’V¿’W¿’c¿’£¿’ø¿’Õ¿’”¿÷¿÷¿÷¿÷¿÷Y¿÷ã¿÷∂¿÷Í¿◊¿◊O¿◊[¿◊ü¿◊Œ¿ÿ¿ÿ¿ÿ)¿ÿt¿ÿΩ¿ÿƒ¿ÿ≈¿ÿÏ¿Ÿ¿Ÿ ¿ŸG¿Ÿu¿Ÿ{¿Ÿ†¿Ÿ‘¿Ÿ⁄¿⁄¿⁄/¿⁄5¿⁄]¿⁄é¿⁄î¿⁄∫¿⁄Á¿⁄Ì¿€¿€E¿€K¿€o¿€ò¿€û¿€≈¿€Ò¿€˜¿‹¿‹J¿‹P¿‹{¿‹≤¿‹∏¿‹ﬁ¿›¿›¿›=¿›t¿›z¿›£¿›÷¿›‹¿ﬁ¿ﬁ5¿ﬁ;¿ﬁd¿ﬁó¿ﬁù¿ﬁƒ¿ﬁÛ¿ﬁ˘¿ﬂ1¿ﬂÇ¿ﬂà¿ﬂ∞¿ﬂ·¿ﬂÁ¿‡¿‡C¿‡I¿‡o¿‡ú¿‡¢¿‡«¿‡Ú¿‡¯¿·"¿·T¿·Z¿·Ñ¿·∑¿·Ω¿··¿‚¿‚¿‚=¿‚o¿‚u¿‚¢¿‚Ê¿‚Ï¿„¿„]¿„c¿„Ü¿„∂¿„º¿„„¿‰¿‰¿‰l¿‰§¿‰™¿‰’¿Â
¿Â¿Â:¿Âm¿Âs¿Âù¿Â–¿Â÷¿Ê¿Ê>¿ÊD¿Êv¿Ê∏¿Êæ¿Êﬂ¿Á¿Á¿Á8¿Ád¿Áj¿Áò¿Á’¿Á€¿Á˛¿Ë%¿Ë+¿ËX¿Ëê¿Ëñ¿ËŸ¿È¿È¿È¿ÈG¿Èx¿È~¿È¿ÈÃ¿Í¿Í]¿ÍÇ¿Í§¿Í™¿Í’¿Î¿Î	¿Î2¿Î\¿Îb¿Îé¿Îæ¿Îƒ¿ÎÒ¿Ï#¿Ï)¿ÏS¿Ï¿ÏÖ¿Ï±¿Ï·¿ÏÁ¿Ì¿Ì=¿ÌC¿Ìm¿Ìô¿Ìü¿Ì≈¿ÌÈ¿ÌÔ¿Ó¿Ó6¿Ó<¿Óc¿Óâ¿Óè¿ÓÕ¿Ô!¿Ô'¿Ôf¿Ôº¿Ô¬¿Ô˚¿E¿K¿Ö¿—¿◊¿Ò¿Ò9¿Ò?¿Òh¿Òí¿Òò¿Ò”¿Ú!¿Ú'¿Úb¿Ú∞¿Ú∂¿Ú›¿Û¿Û	¿Û?¿Ûä¿Ûê¿Ûî¿Ûï¿Û¨¿ÛÀ¿Ûœ¿Û–¿ÛÌ¿Ù¿Ù¿Ù¿Ù2¿ÙU¿ÙY¿ÙZ¿Ùx¿Ùû¿Ù¢¿Ù£¿Ù¬¿ÙÈ¿ÙÌ¿ÙÓ¿ı
¿ı.¿ı2¿ı3¿ıQ¿ıw¿ı{¿ı|¿ıò¿ıº¿ı¿¿ı¡¿ı›¿ˆ¿ˆ¿ˆ¿ˆ¿ˆ>¿ˆB¿ˆC¿ˆZ¿ˆy¿ˆ}¿ˆ~¿ˆó¿ˆ∏¿ˆº¿ˆΩ¿˜¿˜H¿˜L¿˜M¿˜í¿˜⁄¿˜ﬁ¿˜ﬂ¿¯¿¯`¿¯d¿¯e¿¯•¿¯Ë¿¯Ï¿¯Ì¿˘$¿˘U¿˘Y¿˘Z¿˘Ä¿˘ß¿˘´¿˘¨¿˘Ÿ¿˙¿˙¿˙¿˙@¿˙u¿˙y¿˙z¿˙ì¿˙¥¿˙∏¿˙∫¿˙ª¿˚¿˚¿˚0¿˚O¿˚r¿˚ó¿˚Ω¿˚‡¿¸¿¸¿¸¿¸]¿¸¿¸Ö¿¸ ¿¸Ë¿¸È¿˝:¿˝É¿˝â¿˝œ¿˝Á¿˛¿˛¿˛9¿˛á¿˛ç¿˛≈¿ˇ ¿ˇ!¿ˇ"¿ˇX¿ˇò¿ˇƒ¿ˇ≈¿ˇË¿ˇÈ¿ˇı¿ ¿ D¿ x¿ ∞¿ Í¿"¿k¿o¿p¿|¿ë¿©¿¿¿Ÿ¿Û¿¿V¿]¿a¿c¿d¿¥¿Õ¿—¿"¿n¿~¿Ç¿–¿¿q¿{¿¿µ¿¿Q¿x¿†¿◊¿ÿ¿¿/¿0¿[¿ç¿¿¿¡¿¿¿g¿ê¿¿¿ƒ¿≈¿
¿¿\¿≠¿¸¿	¿	C¿	m¿	¿¿
¿
¿
R¿
õ¿¿¿¿B¿F¿G¿`¿f¿¨¿ø¿¿*¿[¿Ñ¿ä¿≤¿∂¿∑¿Á¿$¿W¿}¿Ö¿â¿ä¿∏¿…¿Ò¿¿¿¿H¿N¿ó¿Ÿ¿Í¿¿6¿Y¿]¿_¿`¿û¿¡¿≈¿¿K¿õ¿Â¿¿,¿[¿\¿Ä¿Å¿°¿¢¿⁄¿‹¿›¿¿<¿@¿è¿Õ¿¿8¿<¿l¿¨¿Ó¿Ô¿˚¿+¿,¿8¿^¿_¿k¿§¿ª¿ø¿¡¿¬¿Ï¿¿E¿H¿I¿í¿≥¿∑¿”¿◊¿¿b¿™¿˚¿3¿z¿√¿¿[¿å¿ê¿ß¿´¿˘¿J¿r¿v¿Ü¿ä¿Ÿ¿Í¿Ó¿9¿ä¿ÿ¿‚¿Ê¿ˆ¿˙¿K¿ñ¿›¿·¿¿V¿Z¿j¿n¿ú¿Ÿ¿›¿Ì¿Ò¿*¿d¿h¿µ¿¿¿f¿í¿ÿ¿Ÿ¿¿0¿1¿U¿u¿v¿≈¿‰¿È¿ 7¿ à¿ ƒ¿ ¿ Ò¿!¿!¿!?¿!E¿!é¿!€¿!Ò¿!˜¿"F¿"\¿"b¿"û¿"«¿"Ì¿"Ó¿#(¿#.¿#{¿#Ã¿$¿$¿$b¿$ì¿$”¿$‘¿%¿%`¿%a¿%∞¿%«¿&¿&¿&Q¿&´¿'¿'4¿'5¿'Y¿'y¿'z¿'≤¿'≥¿'ø¿'Î¿'Ï¿(	¿(¿(/¿(5¿(T¿(X¿(Y¿(£¿(Ê¿(Ú¿)#¿)d¿)e¿)ç¿)≈¿)Ï¿*#¿*3¿*7¿*8¿*s¿*t¿*ô¿*–¿*„¿*È¿*˚¿+¿+¿+;¿+O¿+U¿+V¿+b¿+|¿+À¿,¿,#¿,e¿,i¿,j¿,•¿,Ô¿-¿-i¿-o¿-p¿-£¿-ß¿-®¿-Ú¿.0¿.6¿.Ö¿.∏¿.ﬂ¿/	¿//¿/5¿/6¿/ô¿/ö¿/Ω¿/–¿/÷¿/◊¿0¿0"¿0(¿0)¿0k¿0±¿0Á¿1¿1¿1¿1B¿1F¿1G¿1Ç¿1É¿1ù¿1∞¿1Ë¿1ˆ¿1¸¿2C¿2•¿2Œ¿2‚¿2Ï¿3¿3n¿3Å¿3ß¿3±¿3π¿3ø¿3√¿3ƒ¿4¿4]¿4~¿4Ñ¿4“¿4Ú¿4¯¿5I¿5\¿5b¿5Ø¿6¿6,¿6X¿6^¿6±¿6˛¿7P¿7h¿7Ç¿7Ê¿8¿8H¿8w¿8â¿8¿¿8Ô¿9%¿9M¿9†¿9°¿9√¿:'¿:(¿:y¿:ü¿:Û¿:Ù¿;¿;)¿;p¿;á¿;ª¿;ˇ¿<*¿<V¿<è¿<∑¿<æ¿<ø¿=¿=,¿=3¿=R¿=|¿=}¿=Ω¿=‘¿=˙¿>7¿>v¿>w¿>Ω¿? ¿?P¿?Ä¿?Ã¿@¿@,¿@E¿@|¿@∫¿@ı¿A+¿AT¿Ae¿Aõ¿A„¿AÌ¿Aı¿Aˆ¿B9¿BS¿Bt¿B∫¿BÏ¿B¯¿C ¿C¿CQ¿Có¿C“¿Cﬁ¿CÊ¿D(¿Dn¿Dõ¿Dß¿DØ¿Dµ¿Dπ¿D∫¿DÙ¿E@¿Eà¿E∆¿Eﬁ¿EÊ¿F¿F¿F+¿F/¿F0¿F]¿FÉ¿F¬¿F»¿FÁ¿G"¿Gc¿Gi¿Gò¿G¥¿G‚¿GÒ¿H&¿H.¿H4¿HG¿HK¿HL¿Hë¿Hª¿H¡¿I¿Ib¿Ic¿Iº¿J
¿JH¿Jù¿JÍ¿K"¿K#¿Kp¿K¿¿L¿L]¿Lô¿Lº¿L√¿M¿MZ¿M†¿Mß¿Mˆ¿N7¿Np¿Næ¿Nø¿N¯¿O+¿Ob¿Oú¿O⁄¿O˝¿P7¿Pu¿P~¿Pã¿PΩ¿P√¿Q¿QP¿Qï¿Qﬂ¿R1¿RÄ¿Rû¿R‹¿S¿S/¿SP¿SZ¿Sb¿Sc¿Sõ¿SË¿T*¿Tp¿Tx¿T~¿Tß¿TÙ¿U¿Us¿Uê¿Uô¿UØ¿V ¿VI¿Vk¿Và¿Vî¿V¬¿Vˇ¿W¿W¿Wl¿Wå¿W÷¿X!¿XE¿Xd¿Xr¿X¢¿X·¿X¯¿Y¿Y¿Y¿Y¿Ye¿Y§¿Yª¿Y›¿Yﬁ¿Z4¿Zh¿Z¶¿Z÷¿Z◊¿[¿[`¿[§¿[Ï¿[ˆ¿[˛¿\¿\¿\/¿\3¿\4¿\v¿\ù¿\´¿\±¿\Ú¿]¿]¿]=¿]S¿]W¿]X¿]¢¿]¬¿]Œ¿^¿^+¿^/¿^0¿^Ä¿^ñ¿^ú¿^‰¿_¿_
¿_M¿_ö¿_¿¿_⁄¿_Ï¿`'¿`A¿`I¿`ê¿`ñ¿`¥¿`–¿`‘¿`’¿`ı¿a¿aL¿aà¿a‡¿b¿b^¿b}¿bì¿b©¿b≤¿bÎ¿bÒ¿c,¿cJ¿cù¿cŒ¿c„¿d?¿dz¿d¶¿d∑¿e¿eJ¿eç¿e¿¿e÷¿e˚¿f¿fL¿fR¿fV¿fW¿fõ¿f’¿fÒ¿g¿g*¿gO¿g}¿g»¿h¿hx¿h®¿h∏¿h¿¿h∆¿h‚¿hÊ¿hÁ¿i7¿iW¿i]¿i•¿i≈¿iÀ¿j¿jb¿j±¿j‰¿k¿kF¿kX¿kä¿kó¿k¨¿k¸¿lK¿lT¿lå¿l≈¿lÀ¿lœ¿l–¿m¿m¿mT¿mZ¿m¢¿mº¿m˚¿n ¿nG¿nñ¿n‚¿o¿o¿o_¿oâ¿o¬¿oÌ¿p	¿p¿p¿p!¿p3¿pQ¿p¿p¿¿p∆¿pŸ¿p⁄¿q'¿qu¿q≤¿qÈ¿r¿r>¿rh¿r£¿r’¿rÒ¿r˚¿s¿s	¿s¿s¿sR¿sr¿sö¿s√¿s ¿t¿tB¿to¿tπ¿u¿u5¿ud¿u™¿u ¿uÙ¿u¸¿u˝¿v>¿vk¿vq¿vr¿vß¿vÕ¿w¿wX¿we¿w≈¿wÀ¿wœ¿w–¿x¿x)¿x;¿xä¿x®¿x±¿xı¿y!¿yE¿yF¿yp¿y–¿y‘¿y’¿y˛¿z¿z1¿zh¿z¢¿z´¿z±¿z˙¿z˛¿zˇ¿{6¿{}¿{™¿{≈¿|¿|V¿|à¿|∫¿|Ê¿}¿}2¿}>¿}u¿}¿}Ø¿}⁄¿~¿~G¿~Ç¿~å¿~î¿~◊¿$¿o¿´¿≥¿Ä¿Ä+¿Äm¿Ä∂¿Ä¿¿ÄÁ¿Å"¿ÅT¿Å}¿Å¥¿Å¿¿Å ¿Ç&¿Ç\¿Ç~¿Ç¿Ç¨¿Ç“¿É-¿É;¿Ég¿É´¿É¡¿Ñ¿Ña¿Ñú¿Ñß¿ÑÚ¿Ñ˝¿Ö4¿Ö?¿Öx¿Öó¿Ö∫¿Öÿ¿ÖÎ¿Ü¿Ü¿Ü&¿Ün¿Üv¿Ü|¿Ü°¿Ü•¿Ü¶¿ÜÈ¿ÜÔ¿á?¿áU¿á}¿á≤¿áÈ¿à¿à8¿àÇ¿àã¿à¨¿à◊¿â¿âR¿âî¿âÿ¿ä¿ä¿ä¿ä¿ä¿äC¿äz¿ä¡¿äˆ¿ã¿ã'¿ãB¿ãÅ¿ã∑¿ãÀ¿ã’¿å0¿åc¿å¶¿å·¿å˘¿ç¿ç%¿çY¿çí¿çÃ¿ç›¿é¿é]¿éÅ¿é´¿é∂¿è¿èH¿è¿è•¿è‘¿è·¿ê+¿ê5¿êi¿ê†¿ê∆¿êÒ¿ê˛¿ë@¿ëJ¿ëR¿ë~¿ëâ¿ë†¿ë∂¿ëÙ¿í¿íK¿íz¿íÄ¿íÑ¿íÖ¿í√¿íﬁ¿ì$¿ìo¿ìπ¿î	¿îU¿î{¿î…¿î ¿îÊ¿ï¿ï¿ïp¿ïò¿ïÂ¿ñ¿ñ¿ñ[¿ñ´¿ñı¿ó¿ó>¿óÉ¿ó„¿óÚ¿ó˙¿ò!¿òJ¿ò¿ò—¿ô"¿ôQ¿ô{¿ô£¿ô´¿ôÀ¿ö#¿ö$¿öH¿öñ¿öﬁ¿õ,¿õd¿õm¿õø¿ú¿úX¿ú©¿úÕ¿úÚ¿ùR¿ùX¿ùº¿û¿ûQ¿û†¿ûÔ¿ü?¿üQ¿üú¿ü„¿üÈ¿†¿†=¿†M¿†ñ¿†¬¿†Õ¿°¿°F¿°P¿°X¿°^¿°b¿°c¿°«¿¢¿¢K¿¢Ñ¿¢û¿¢÷¿£¿£¿£¿£|¿£¶¿£Æ¿£—¿§¿§F¿§¢¿§Œ¿•¿•¿•¿•¿•]¿•î¿•ö¿•û¿•ü¿•Ë¿•˘¿¶¿¶,¿¶C¿¶X¿¶{¿¶§¿¶π¿¶Ÿ¿¶¿ß¿ß(¿ß,¿ß-¿ß9¿ßk¿ßè¿ßÍ¿ß˝¿®¿®¿®¿®¿®`¿®ã¿®ÿ¿®Ï¿©E¿©L¿©`¿©t¿©é¿©„¿™¿™¿™¿™;¿™c¿™v¿™π¿™Ô¿´¿´+¿´^¿´f¿´«¿´Õ¿´·¿´ı¿¨¿¨O¿¨t¿¨}¿¨Ñ¿¨ò¿¨˝¿≠¿≠K¿≠∞¿≠∂¿≠∫¿≠º¿≠Ω¿≠È¿Æ¿ÆN¿ÆP¿ÆQ¿ÆÑ¿Æ∫¿Æˆ¿Æ˙¿Ø¿Ø]¿Øâ¿Øõ¿Øù¿Øû¿Ø¿ØÒ¿∞9¿∞=¿∞ã¿∞√¿∞Œ¿∞Ô¿±2¿±O¿±p¿±ï¿±≤¿± ¿±‰¿±Í¿±Î¿≤¿≤9¿≤T¿≤s¿≤ò¿≤≠¿≤ø¿≤∆¿≤ ¿≤À¿≤ˆ¿≥¿≥¿≥K¿≥l¿≥m¿≥¢¿≥ø¿≥¿¿≥Ê¿≥˘¿≥˙¿¥B¿¥¿¥î¿¥ï¿¥»¿¥Ô¿µ¿µC¿µo¿µö¿µ°¿µÔ¿∂¿∂V¿∂ë¿∂í¿∂Í¿∂Î¿∑¿∑L¿∑Å¿∑µ¿∑∂¿∑ÿ¿∑Ë¿∏¿∏U¿∏`¿∏ó¿∏Õ¿∏’¿∏˜¿π¿π4¿πu¿πÄ¿π¬¿πË¿∫¿∫H¿∫S¿∫z¿∫Ç¿∫à¿∫â¿∫•¿∫‘¿ª¿ªu¿ª{¿ª|¿ªØ¿ªÍ¿º'¿º6¿ºS¿º[¿ºa¿ºb¿ºz¿ºì¿º∞¿ºÌ¿Ω4¿Ω_¿Ωí¿Ω…¿æ¿æN¿ær¿æö¿æ∑¿æ–¿æ€¿æ„¿æ¿ø:¿øå¿øï¿øÁ¿¿5¿¿6¿¿p¿¿ƒ¿¿‰¿¡¿¡¿¡d¿¡ù¿¡ﬁ¿¡¸¿¬$¿¬`¿¬°¿¬µ¿¬Œ¿¬Ì¿√¿√¿√5¿√?¿√G¿√M¿√N¿√^¿√©¿√‘¿√Û¿ƒ¿ƒP¿ƒâ¿ƒ§¿ƒæ¿ƒ∆¿ƒÃ¿ƒÕ¿ƒÏ¿≈¿≈,¿≈X¿≈j¿≈Ü¿≈ç¿≈ë¿≈í¿≈¿¿≈ˇ¿∆¿∆*¿∆0¿∆^¿∆v¿∆|¿∆∫¿∆æ¿∆ø¿∆ı¿∆˙¿«I¿«`¿«e¿«¥¿«˛¿»A¿»B¿»é¿»‹¿»·¿…1¿…Z¿…ç¿…¶¿…æ¿…·¿  ¿ ¿ 3¿ Ö¿ À¿ Ê¿ Ï¿À9¿Àa¿À≥¿Àı¿Àˆ¿Ã%¿Ãf¿Ãá¿Ãè¿ÃØ¿Ãﬁ¿Õ%¿Õ{¿Õ¿ÕÄ¿Õ≥¿Õ»¿Õÿ¿Õﬁ¿Õˇ¿Œ¿Œ¿Œ¿ŒZ¿Œ^¿Œµ¿œ¿œ¿œ\¿œß¿œ ¿œÚ¿–5¿–7   
ParentDataPaintingContextConstraints_LocalSemanticsHandlePipelineOwnerPipelineManifoldRenderObjectRenderObjectWithChildMixin#RenderObjectWithLayoutCallbackMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixinSemanticsAnnotationsMixin_SemanticsParentData_SemanticsConfigurationProvider_SemanticsFragment_IncompleteSemanticsFragment_RenderObjectSemantics"debugDumpRenderObjectSemanticsTree'_debugCollectRenderObjectSemanticsTrees_SemanticsGeometryDiagnosticsDebugCreator2flutter.rendering.PaintingContext.pushLayer.offsetÅThe `offset` is the offset to pass to the `painter`. In particular, it is
not an offset applied to the layer itself. Layers conceptually by default
have no position or size, though they can transform their contents. For
example, an [OffsetLayer] applies an offset to its children.?flutter.rendering.PaintingContext.pushClipRect.needsCompositingÅˇThe `needsCompositing` argument specifies whether the child needs
compositing. Typically this matches the value of
[RenderObject.needsCompositing] for the caller. If false, this method
returns null, indicating that a layer is no longer necessary. If a render
object calling this method stores the `oldLayer` in its
[RenderObject.layer] field, it should set that field to null.

When `needsCompositing` is false, this method will use a more efficient
way to apply the layer effect than actually creating a layer.5flutter.rendering.PaintingContext.pushClipRect.offsetÄÖThe `offset` argument is the offset from the origin of the canvas'
coordinate system to the origin of the caller's coordinate system.7flutter.rendering.PaintingContext.pushClipRect.oldLayerÅ–For the `oldLayer` argument, specify the layer created in the previous
frame. This gives the engine more information for performance
optimizations. Typically this is the value of [RenderObject.layer] that a
render object creates once, then reuses for all subsequent frames until a
layer is no longer needed (e.g. the render object no longer needs
compositing) or until the render object changes the type of the layer
(e.g. from opacity layer to a clip rect layer).,flutter.rendering.RenderObject.performResizeÅ|Updates the render objects size using only the constraints.

Do not call this function directly: call [layout] instead. This function
is called by [layout] when there is actually work to be done by this
render object during layout. The layout constraints provided by your
parent are available via the [constraints] getter.

This function is called only if [sizedByParent] is true.-flutter.rendering.RenderObject.getTransformToÇÕApplies the paint transform from this [RenderObject] to the `target`
[RenderObject].

Returns a matrix that maps the local paint coordinate system to the
coordinate system of `target`, or a [Matrix4.zero] if the paint transform
can not be computed.

This method throws an exception when the `target` is not in the same render
tree as this [RenderObject], as the behavior is undefined.

This method ignores [RenderObject.paintsChild]. This means it will still
try to compute the paint transform even if this [RenderObject] or
`target` is currently not visible.

If `target` is null, this method returns a matrix that maps from the
local paint coordinate system to the coordinate system of the
[PipelineOwner.rootNode]. „§