ÅU_checkSemanticsData_unimplemented_noCheckRequired_semanticsTab_semanticsTabBar_semanticsTable_semanticsRow_semanticsCell_semanticsColumnHeader_semanticsRadioGroup_semanticsMenu_semanticsMenuBar_semanticsMenuItem_semanticsMenuItemCheckbox_semanticsMenuItemRadio_noLiveRegion_semanticsListItem_isLandmarkRole_isSameRoleExisted_semanticsComplementary_semanticsContentInfo_semanticsMain_semanticsNavigation_semanticsRegionnametoStringmergeUpsiblingMergeGroups_mergeUp_siblingMergeGroupsmarkAsMergeUpmarkAsSiblingMergeGroupbuildlabelhintactionhashCode==_nextId_actions_idsgetIdentifier	getActionresetForTestsstring
attributes+showWhenEmptyisInterestingvalueToString	separatortextDirection_partsaddPartisEmptylengthclearflagsflagsCollectionactions
identifierattributedLabelvalueattributedValueincreasedValueattributedIncreasedValuedecreasedValueattributedDecreasedValueattributedHinttooltipheadingLeveltextSelectionscrollChildCountscrollIndexscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLengthlinkUrlrecttags	transformcustomSemanticsActionIdsrolecontrolsNodesvalidationResult	inputTypelocalehasFlag	hasActiontoStringShortdebugFillProperties_sortedListsEqual
childOrdergetChildren	onTapHintonLongPressHint
isNotEmptyenabledcheckedmixedexpandedtoggledselectedbuttonlinkheader	textFieldsliderkeyboardKeyreadOnly	focusablefocusedinMutuallyExclusiveGrouphiddenobscured	multilinescopesRoute
namesRouteimage
liveRegion
isRequiredhintOverridessortKeytagForChildrenonTaponLongPressonScrollLeftonScrollRight
onScrollUponScrollDown
onIncrease
onDecreaseonCopyonCutonPasteonMoveCursorForwardByCharacteronMoveCursorBackwardByCharacteronMoveCursorForwardByWordonMoveCursorBackwardByWordonSetSelection	onSetTextonDidGainAccessibilityFocusonDidLoseAccessibilityFocusonFocus	onDismisscustomSemanticsActions$_maxFrameworkAccessibilityIdentifier_lastIdentifier_generateNewIdkeyid_id_showOnScreen
_transform_rectparentSemanticsClipRectparentPaintClipRectindexInParentisInvisibleisMergedIntoParent_isMergedIntoParentareUserActionsBlocked_areUserActionsBlockedisPartOfNodeMergingmergeAllDescendantsIntoThisNode _mergeAllDescendantsIntoThisNode	_children_debugPreviousSnapshot_replaceChildrenhasChildren_deadchildrenCountvisitChildren_visitDescendantsowner_ownerattachedparent_parentdepth_depth_locale_redepthChild_redepthChildren _updateChildMergeFlagRecursively_updateChildrenMergeFlags_adoptChild
_dropChildattachdetach_dirty
_markDirtydebugIsDirty)_isDifferentFromCurrentSemanticAnnotation_customSemanticsActions_effectiveActionsAsBits_actionsAsBitsisTagged_flags_flagsBitMask_identifier_attributedLabel_attributedValue_attributedIncreasedValue_attributedDecreasedValue_attributedHint_tooltip_hintOverrides_textDirection_sortKey_textSelectionisMultiline_isMultiline_scrollChildCount_scrollIndex_scrollPosition_scrollExtentMax_scrollExtentMin_platformViewId_maxValueLength_currentValueLength_headingLevel_linkUrl_role_controlsNodes_validationResult
_inputType_canPerformAction_kEmptyConfig
updateWithgetSemanticsData_initIdentityTransform_kEmptyChildList!_kEmptyCustomSemanticsActionsList_kIdentityTransform_addToUpdate_childrenInTraversalOrder	sendEvent_debugIsActionBlockedtoStringDeeptoDiagnosticsNodedebugDescribeChildrendebugListChildrenInOrderisLeadingEdgeoffsetnode	compareTostartOffsetnodessortedWithinVerticalGroupsortedWithinKnotpositiononSemanticsUpdate_dirtyNodes_nodes_detachedNodesrootSemanticsNodedisposesendSemanticsUpdate_getSemanticsActionHandlerForIdperformAction%_getSemanticsActionHandlerForPositionperformActionAtisSemanticBoundary_isSemanticBoundarylocaleForSubtree_localeForSubtreeisBlockingUserActionsexplicitChildNodes+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotated_hasBeenAnnotated
_addAction_addArgumentlessAction_onTap_onLongPress_onScrollLeft
_onDismiss_onScrollRight_onScrollUp_onScrollDownonScrollToOffset_onScrollToOffset_onIncrease_onDecrease_onCopy_onCut_onPasteonShowOnScreen_onShowOnScreen_onMoveCursorForwardByCharacter _onMoveCursorBackwardByCharacter_onMoveCursorForwardByWord_onMoveCursorBackwardByWord_onSetSelection
_onSetText_onDidGainAccessibilityFocus_onDidLoseAccessibilityFocus_onFocuschildConfigurationsDelegate_childConfigurationsDelegategetActionHandler_indexInParentisMergingSemanticsOfDescendants _isMergingSemanticsOfDescendants_onCustomSemanticsActionisImage
isSelected
isExpanded	isEnabled	isCheckedisCheckStateMixed	isToggledisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKeyisHiddenisTextField
isReadOnly
isObscuredhasImplicitScrollingtagsForChildrentagsChildrenWith_tagsForChildrenaddTagForChildren_hasExplicitRoleisCompatibleWithabsorbcopyinverseHitTesttraversalOrder	doCompareorder%SemanticsNodeVisitorMoveCursorHandlerSetSelectionHandlerSetTextHandlerScrollToOffsetHandlerSemanticsActionHandlerSemanticsUpdateCallback$ChildSemanticsConfigurationsDelegate_kUnblockedUserActions_DebugSemanticsRoleChecksSemanticsTag"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuilderCustomSemanticsActionAttributedStringAttributedStringProperty
_LabelPartSemanticsLabelBuilderSemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKey_mergeHeadingLevels
_toBitMaskÅÙLocaleOffsetRectSemanticsActionSemanticsFlagSemanticsFlagsSemanticsInputTypeSemanticsRoleSemanticsUpdateSemanticsUpdateBuilderSemanticsValidationResultStringAttributeTextDirectionMatrixUtilsTransformPropertySemanticsBindingVoidCallbackDiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfigurationTextSelectionMatrix4SemanticsEventvisitChildrenboolvoidsetSelectionsetTextStringscrollToOffsetgetActionHandlerObjectonSemanticsUpdatechildConfigurationsDelegatetagsChildrenWithListintdidGainAccessibilityFocusindexdidLoseAccessibilityFocusFlutterErrorrolealertDialogdialognonetabtabBartabPaneltablecellrowcolumnHeader
radioGroupmenumenuBarmenuItemmenuItemCheckboxmenuItemRadioalertstatuslistlistItemcomplementarycontentInfomain
navigationregionform
dragHandle
spinButtoncomboBoxtooltiploadingSpinnerprogressBarhotKeygetSemanticsDataflagsCollectionhasSelectedStateareUserActionsBlockedhasEnabledState	hasActiontap	isEnabledchildrenCountchildparentisInMutuallyExclusiveGroup	isCheckedhasCheckedStateisLiveRegionidMapowner_nodeskeyslabelisEmptyRenderSemanticsGestureHandleroverrideobjectRuntimeTypePipelineOwnermergeUpaddsiblingMergeGroupsSet	flattenedconfig_	immutablehashruntimeTypehintactionvisibleForTestingclear	TextRange
isNotEmptylength	attributerangestartendstringof
attributescopy
listEqualsDiagnosticsPropertyvaluedefaultValueisInterestingparentConfigurationlineBreakProperties
replaceAllfirsttextStringBufferwrite	firstTextskippartTextDirectionpartTextrtlUnicodeRLEltrLREPDFtoStringmergeAllDescendantsIntoThisNodeDiagnosticableisLink
DeprecatedincreasedecreaseScrollPositionpixelsdoublemaxScrollExtentminScrollExtentAndroidView	UiKitViewisTextFieldUridebugFillPropertiesshowNamevaluesnamemap	getActionactionIdtoListIterablePropertyifEmpty	toStringsStringPropertyEnumPropertyisValidMessagePropertyIntPropertyDoublePropertyflagsactions
identifierattributedLabelattributedValueattributedIncreasedValueattributedDecreasedValueattributedHinttextDirectionrect	setEqualstagsscrollChildCountscrollIndextextSelectionscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLength	transformheadingLevellinkUrlvalidationResult	inputTypecustomSemanticsActionIdscontrolsNodeshashAlliDiagnosticableNodedebugDescribeChildren
childOrderDiagnosticableTree	onTapHintonLongPressHintCheckboxtristateSubmenuButtonexplicitChildNodesscopesRoute
namesRouteisImageSnackBar
liveRegion
isRequiredCommonFindersbySemanticsIdentifierDirectionalityincreasedValuedecreasedValueRenderObjectaddTagForChildren	longPress
scrollLeftscrollRightscrollUp
scrollDowncutpastemoveCursorForwardByCharactermoveCursorBackwardByCharactermoveCursorForwardByWordmoveCursorBackwardByWord	FocusNode
FocusScopeFocusManagerfocusdismisscustomActionTab
TabBarViewExpansionTile_lastIdentifierflushSemanticsDiagnosticableTreeMixinshowOnScreenmatrixEquals
isIdentityzeroisFiniteisZero
_markDirtyisMergingSemanticsOfDescendantsany_dead
_dropChildattached	identicalErrorDescriptionErrorSpacertoDiagnosticsNodestyle
singleLine	fromPartsErrorSummary	ErrorHint_visitDescendants_depth_redepthChildrenforEachisMergedIntoParent_updateChildrenMergeFlags_parentattachdetachcontainsKey_detachedNodesremovecontains_dirtyNodes_flags_sortKey_textSelection_scrollPosition_scrollExtentMax_scrollExtentMin_actionsAsBitsindexInParent_maxValueLength_currentValueLengthisBlockingUserActions_headingLevel_linkUrl_actions_customSemanticsActionschildrenInInversePaintOrderhintOverridessortKeyisMultiline_platformViewId_role_controlsNodes_validationResult
_inputTypelocalegetIdentifieroverridingActionnodemerge_effectiveActionsAsBits_textDirection_scrollChildCount_scrollIndexsourceLeveltargetLevel_identifier_attributedValue_attributedIncreasedValue_attributedDecreasedValue_tooltipaddAllthisAttributedStringthisTextDirectionotherAttributedString_attributedLabelotherTextDirection_attributedHintvalidsortFloat64Listidentitystorage	Int32List_checkSemanticsData
updateNodelabelAttributesvalueAttributesincreasedValueAttributesdecreasedValueAttributeshintAttributestextSelectionBase
baseOffsettextSelectionExtentextentOffsetscrollChildrennanchildrenInTraversalOrderchildrenInHitTestOrderadditionalActionspositionsortNodeSystemChannelsaccessibilitysendtoMapnodeIdFlagPropertyifTrueifFalselevelhiddeninfogetAsTranslationshift
getAsScaletoStringAsFixedsplittakeline	substringjoindescriptiontagisHiddendebugtraversalOrdertoStringDeepprefixLineOneprefixOtherLinesminLevel	wrapWidthsparseinverseHitTest
Comparable	compareTooffsetstartOffsetdeflateisLeadingEdgetopLeftdxbottomRightedgenodesreversedexpandsortedWithinKnot	directioncenternextNodepiabdyVector3
transform3xysortedWithinVerticalGroupensureSemanticsSemanticsHandleChangeNotifierdebugMaybeDispatchCreatedFlutterViewdebugMaybeDispatchDisposeddisposerootSemanticsNodeerrorPropertywheredepth_dirtyisPartOfNodeMerginginstancecreateSemanticsUpdateBuilder_addToUpdateupdateCustomAction
overrideIdbuildnotifyListeners_canPerformActionargs_showOnScreencopyInversetransformPointhasChildren	_childrendescribeIdentityvisitChildrenForSemanticsGestureDetectordynamiccastcopyWithListTileselected
isSelectedhasExpandedState
isExpandedExcludeSemanticsisCheckStateMixedhasToggledState	isToggledRadioisFocusable	isFocusedisButtonisHeaderisSliderisKeyboardKey
isReadOnly
isObscuredhasRequiredStateListViewTabBarhasImplicitScrollingIterableRenderViewportexcludeFromScrollingkIsWebhasBeenAnnotatedhasRepeatedFlags_hasExplicitRolekey_hintOverridesinvalid_isSemanticBoundary+isBlockingSemanticsOfPreviouslyPaintedNodes_hasBeenAnnotated _isMergingSemanticsOfDescendants_tagsForChildren_indexInParentdebugDumpSemanticsTree	protectedinfinitynegativeInfinityorderDiagnosticsPropertyDiagnosticableDiagnosticableNodeDiagnosticableTreeDiagnosticableTreeMixin
ComparableChangeNotifierSemanticsSortKeyõ√∞Ëk‰{ÑZgÂi‚tÀÑGÖ0
OffsetRectSemanticsActionSemanticsFlagSemanticsFlagsSemanticsRoleSemanticsValidationResultStringAttributeTextDirectionVoidCallback Ñ2dart:uiÖ`ÜDiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfiguration Ö3package:flutter/foundation.dartÜ-Ü?TextSelection Üpackage:flutter/services.dartÜrÜ~Matrix4 ÜA'package:vector_math/vector_math_64.dartÜüÜ≤SemanticsEvent ÜÅsemantics_event.dart
  Åh   	dart:core  Å|   ÅéÅëmathÅë	dart:mathÅ¨Ç‰LocaleOffsetRectSemanticsActionSemanticsFlagSemanticsFlagsSemanticsInputTypeSemanticsRoleSemanticsUpdateSemanticsUpdateBuilderSemanticsValidationResultStringAttributeTextDirection Åò   dart:ui  ÇË   "package:collection/collection.dart  É   package:flutter/foundation.dartÉeÉàMatrixUtilsTransformProperty É?   package:flutter/painting.dart  Éã   package:flutter/services.dart  É≥   'package:vector_math/vector_math_64.dartÉ˚ÑSemanticsBinding ÉÊ   binding.dart  Ñ   semantics_event.dart¿Lô ¿©ò— <ÄÜÄ§Ä•ÄøÄ√ÄÛÅ$Å]ÅfÅgÅ{ÅóÅ®Å±Å¡Å—ÅﬂÅ¯ÇÇ'ÇCÇZÇsÇìÇ∂ÇœÇÊÇÁÉÉ>ÉäÉ≤É‰ÉÂÑÑ1Ñ2ÑCÑLÑ\ÑjÑÉÑöÑ≤Ñ…ÑÏÖÖÖ2Ö3Ö\ÖeÖ~Ö£ÖºÖ⁄ÖÁÜÜAÜÄÜÅÜ¥ÜµÜ˚Üˇá(á,áWáôáöá’áŸà'àvà∑à∏ââCâââäâ“â˙ä/ä0ä~ä¥ä¯ä˘ã-ã1ãlã™ã´å åå4å}å~å åŒçç\ç°ç–ç‘ééoéséæé…é¯èGèHèkè°è÷è◊êê5êåêøêÌëëAëoëüëÀëıííWíçí∑íÁìì[ìóì¡ìÏîîJîÜîæîËïïLïxï¿ï˘ñ)ñYñáñ¥ñËóóEóPóQóéó›óﬁò#ò$ò_òóò…ôô	ô
ô0ôCôIôJô{ô≠ôÍôÚöKöÜöåöùö°ö¢ö‡õõ9õ?õXõáõ«úúú6ú>úPúTúUúíú´ú⁄ùùdùlùàùêù¢ù¶ùßù‚ûûUû[ûtû£û‰ü-üÜüéü™ü≤üƒü»ü…††b†∞†∂†«†À†Ã°°m°∫°¿°—°’°÷¢¢1¢S¢ç¢«¢˙£G£e£m£n£¨£‰§§
§§7§V§Æ§∆§–§§¯§˘••)•/•0•d•v•z•{•∑•Ÿ¶¶¶¶&¶*¶+¶j¶å¶≈¶À¶Ã¶›¶·¶‚ß"ßIßsß∞ß®®®6®<®å®ê®ë®Ÿ©©B©á©ç©é©µ©ﬂ™™\™q™y™¢™®´´´´K´É´¥´ˆ´¸´˝¨$¨N¨ã¨À¨‡¨Ë≠≠≠m≠q≠r≠≠≠ÂÆÆ-ÆyÆ ÆˇØØØØ#Ø$ØdØúØÀØÂ∞ ∞U∞^∞d∞≠∞Á±±F±ó±ﬂ±Ë±Ó±ˇ≤≤≤=≤s≤ß≤‘≥≥4≥5≥u≥¿≥€¥¥P¥i¥ä¥°¥´¥≥¥π¥À¥œ¥–µµCµeµ¢µø∂"∂-∂5∂]∂c∂d∂ú∂÷∂Ò∑U∑^∑d∑u∑y∑z∑Ω∑Î∏∏J∏g∏»∏”∏€ππ	π
πBπ|πóπ˘∫∫∫∫∫∫Z∫à∫™∫Áªª^ªiªqªôªüª†ªÿºº-ºàºëºóº®º¨º≠ºÔΩ'ΩaΩ|Ω›ΩÊΩÏΩ˝æææ@æxæñæ±øøøøø-ø1ø3ø4øUøYøòøÂ¿ @1¿ @5¿ @É¿ @–¿ @ﬁ¿ @‚¿ A0¿ A~¿ AÃ¿ A€¿ A¿ B¿ B¿ Bf¿ B∂¿ C¿ C¿ C8¿ C9¿ Cv¿ C|¿ C¬¿ C◊¿ Cÿ¿ C‰¿ D0¿ D2¿ D3¿ Dn¿ Dç¿ Dë¿ Dﬁ¿ E¿ Ec¿ Et¿ Ex¿ E¡¿ EÏ¿ F;¿ F<¿ Få¿ F≠¿ F≥¿ Fˇ¿ GI¿ Gã¿ Gπ¿ G∫¿ H	¿ H3¿ H9¿ HÇ¿ Hª¿ I¿ IP¿ IV¿ I§¿ I˜¿ JD¿ Jï¿ J‚¿ K¿ KZ¿ K\¿ K]¿ K™¿ Kª¿ Kø¿ K¯¿ L5¿ LÑ¿ Læ¿ L¿ M-¿ M\¿ M]¿ M©¿ N¿ N¿ N]¿ Ni¿ No¿ Nß¿ NÙ¿ OA¿ OB¿ OÖ¿ OØ¿ Oµ¿ O˜¿ PO¿ Pó¿ Pø¿ P¿¿ Q¿ Q=¿ QM¿ Qü¿ QÎ¿ R ¿ R*¿ R5¿ RE¿ Rh¿ Rµ¿ S¿ S'¿ S2¿ S:¿ SM¿ SW¿ Sß¿ S´¿ S≠¿ SÆ¿ Sﬁ¿ S‚¿ T$¿ Tl¿ T¥¿ T¸¿ UK¿ Uö¿ U®¿ U¨¿ U˚¿ V/¿ V3¿ VÇ¿ Vï¿ Vô¿ V·¿ W¿ W¿ W¿ W"¿ Ws¿ W~¿ Wú¿ W…¿ Wœ¿ WÙ¿ X0¿ XK¿ X^¿ Xs¿ Xt¿ Xƒ¿ X“¿ Xÿ¿ X¸¿ Y-¿ YL¿ Yv¿ Yë¿ Y¶¿ Yß¿ YÂ¿ Y¸¿ Y˝¿ Z9¿ ZO¿ ZP¿ Zä¿ Z´¿ Z¨¿ Z∏¿ Z¿ ZÒ¿ Z˝¿ [ ¿ [L¿ [`¿ [f¿ [ì¿ [≥¿ [—¿ [Ò¿ [ı¿ [ˆ¿ \¿ \¿ \u¿ \y¿ \z¿ \√¿ \‹¿ \ˆ¿ ]P¿ ]¶¿ ]ß¿ ]÷¿ ^¿ ^1¿ ^K¿ ^e¿ ^Ç¿ ^£¿ ^©¿ ^º¿ ^¿¿ ^¡¿ ^¿ _$¿ _=¿ _A¿ _B¿ _ì¿ _®¿ _»¿ _ÿ¿ _¿ `¿ `¿ `*¿ `4¿ `8¿ `:¿ `;¿ `s¿ `~¿ `ó¿ `∫¿ `¿¿ a¿ a¿ a!¿ ak¿ az¿ a…¿ b ¿ b¿ bP¿ bb¿ bæ¿ c¿ c¿ c¿ c2¿ c>¿ c?¿ cw¿ cé¿ cè¿ cπ¿ cø¿ d¿ d+¿ d,¿ do¿ du¿ d∆¿ e¿ eG¿ ea¿ eu¿ e{¿ eõ¿ eÆ¿ e¥¿ eµ¿ e⁄¿ f¿ fd¿ fã¿ f≥¿ fı¿ g#¿ gT¿ gÅ¿ gå¿ gﬂ¿ h¿ h¿ h¿ h^¿ hb¿ hc¿ hØ¿ hª¿ hﬁ¿ i¿ i2¿ iT¿ ió¿ iõ¿ iú¿ i®¿ iﬂ¿ i‡¿ iÏ¿ j¿ jc¿ jg¿ ji¿ jj¿ j¥¿ jÚ¿ kA¿ ká¿ kç¿ k ¿ kÊ¿ k˝¿ l¿ l$¿ lD¿ l\¿ lm¿ lÑ¿ lä¿ lã¿ lÿ¿ m¿ m¿ m>¿ mZ¿ m[¿ mg¿ mÉ¿ m‡¿ m·¿ mÌ¿ n4¿ nM¿ nb¿ nh¿ nâ¿ n‹¿ o¿ oB¿ oH¿ om¿ oÖ¿ oã¿ o¯¿ o¸¿ o˛¿ oˇ¿ pA¿ pB¿ pê¿ pπ¿ pΩ¿ q
¿ q\¿ qt¿ qx¿ qã¿ qó¿ q”¿ qÏ¿ r¿ r;¿ rC¿ rG¿ rz¿ rÜ¿ r‚¿ s¿ se¿ s¡¿ s…¿ sÌ¿ t¿ t ¿ tf¿ t¡¿ u¿ u¿ u4¿ uN¿ uO¿ uå¿ u≤¿ u≥¿ uÂ¿ uÊ¿ u˛¿ v¿ vS¿ vr¿ v±¿ vÕ¿ v˜¿ v˝¿ w¿ w¿ wB¿ wh¿ wi¿ w¢¿ w≈¿ w∆¿ x¿ x¿ x_¿ xr¿ xÖ¿ xü¿ x∞¿ x∂¿ x∑¿ x’¿ y¿ y$¿ y*¿ y+¿ yq¿ y°¿ y‡¿ y˝¿ y˛¿ zV¿ z•¿ z¶¿ z»¿ zÈ¿ zÒ¿ zÚ¿ {¿ {w¿ {º¿ {Ë¿ |¿ |¿ |f¿ |n¿ |o¿ |í¿ |ò¿ |ô¿ |∑¿ |ª¿ |º¿ } ¿ }¿ }%¿ })¿ }+¿ },¿ }d¿ }h¿ }¥¿ ~¿ ~U¿ ~g¿ ~k¿ ~©¿ ~¥¿ ~ﬁ¿ ¿ ¿ V¿ h¿ ã¿ ¶¿ ƒ¿ Á¿ Ä
¿ Ä6¿ Äb¿ ÄÑ¿ Äü¿ Ä¿¿ Äÿ¿ Ä˘¿ Å¿ Å<¿ Å^¿ ÅÅ¿ Å§¿ Å∆¿ ÅË¿ Ç¿ Ç.¿ ÇI¿ Ça¿ ÇÇ¿ Ç¶¿ Ç√¿ Ç›¿ ÇÏ¿ É ¿ É#¿ É2¿ Éc¿ É∏¿ É¬¿ É—¿ Ñ¿ Ñu¿ Ñ¿ Ñé¿ ÑŒ¿ Ö2¿ Ö<¿ ÖK¿ Öî¿ Ü
¿ Ü¿ Ü#¿ Ül¿ Ü‚¿ ÜÏ¿ Ü˚¿ á:¿ áú¿ á¶¿ à¿ à¿ àI¿ à°¿ à´¿ à¨¿ àÎ¿ à˙¿ â¿ âX¿ â\¿ âå¿ âç¿ â§¿ âÃ¿ âÕ¿ ä¿ ä#¿ ä$¿ äd¿ ä¿ äÄ¿ äø¿ ä≈¿ ä˛¿ ã¿ ã>¿ ãl¿ ãm¿ ãÆ¿ ãœ¿ ã’¿ å¿ å¿ åM¿ åw¿ åx¿ å∑¿ åΩ¿ åˆ¿ å¸¿ ç6¿ çd¿ çe¿ ç¶¿ ç«¿ çÕ¿ é¿ é¿ éE¿ éo¿ ép¿ é¨¿ é’¿ é€¿ è¿ è¿ è]¿ èù¿ èû¿ è⁄¿ ê ¿ ê&¿ ê_¿ êe¿ êß¿ ê⁄¿ ê€¿ ë¿ ë@¿ ëF¿ ë¿ ëÖ¿ ë»¿ í¿ í	¿ íE¿ íã¿ íë¿ í ¿ í–¿ ì¿ ìE¿ ìF¿ ìî¿ ìö¿ ì”¿ ìŸ¿ î¿ î>¿ î?¿ îå¿ î∞¿ î∂¿ îÔ¿ îı¿ ï-¿ ïV¿ ïW¿ ïå¿ ïí¿ ïÀ¿ ï„¿ ï‰¿ ñ¿ ñ"¿ ño¿ ñΩ¿ ñ◊¿ ñÿ¿ ó¿ óL¿ ór¿ ós¿ óƒ¿ ó¿ ò¿ ò¿ òc¿ òi¿ ò∂¿ ò¬¿ ò·¿ ò‚¿ ô(¿ ôB¿ ôC¿ ôì¿ ô•¿ ô´¿ ô˚¿ öG¿ öç¿ öì¿ ö£¿ ö©¿ öÛ¿ õ¿ õ¿ õc¿ õu¿ õ{¿ õ∂¿ õº¿ õÃ¿ õ“¿ ú%¿ úF¿ úG¿ úñ¿ ú®¿ úÆ¿ úÈ¿ úÔ¿ úˇ¿ ù¿ ùX¿ ùy¿ ùz¿ ùƒ¿ ù·¿ ùÁ¿ û5¿ û¿ ûî¿ ûö¿ û™¿ û∞¿ û¿ ü*¿ üG¿ üH¿ üî¿ ü¶¿ ü¨¿ ü˘¿ †¿ †¿ †c¿ †•¿ †¬¿ †√¿ °¿ °$¿ °*¿ °w¿ °ã¿ °ë¿ °‚¿ ¢¿ ¢.¿ ¢/¿ ¢V¿ ¢\¿ ¢l¿ ¢r¿ ¢º¿ ¢“¿ ¢”¿ £¿ £%¿ £&¿ £b¿ £É¿ £Ñ¿ £ﬁ¿ £‰¿ §+¿ §|¿ §ã¿ §ß¿ §®¿ §Û¿ •¿ •¿ •K¿ •Q¿ •a¿ •g¿ •Ø¿ •‹¿ •›¿ ¶¿ ¶-¿ ¶.¿ ¶k¿ ¶q¿ ¶¥¿ ¶ÿ¿ ¶Ÿ¿ ß¿ ßS¿ ßT¿ ßç¿ ß≥¿ ß¥¿ ßﬁ¿ ß‰¿ ®/¿ ®U¿ ®m¿ ®n¿ ®ù¿ ®¨¿ ®–¿ ©
¿ ©¿ ©O¿ ©P¿ ©É¿ ©Œ¿ ©œ¿ ©€¿ ™!¿ ™"¿ ™.¿ ™s¿ ™û¿ ™Ï¿ ´P¿ ´Å¿ ´ƒ¿ ´¸¿ ¨¿ ¨T¿ ¨Æ¿ ¨¡¿ ≠¿ ≠,¿ ≠ã¿ ≠í¿ ≠ì¿ ≠’¿ Æ(¿ Æx¿ Æ¿¿ Ø¿ Øb¿ Øº¿ ∞¿ ∞L¿ ∞±¿ ∞‹¿ ∞Ú¿ ±P¿ ±Y¿ ±_¿ ±∂¿ ≤¿ ≤l¿ ≤≈¿ ≥¿ ≥r¿ ≥Ã¿ ¥(¿ ¥x¿ ¥Œ¿ ¥Ô¿ µI¿ µO¿ µu¿ µÿ¿ µﬁ¿ ∂¿ ∂2¿ ∂c¿ ∂Å¿ ∂ù¿ ∂’¿ ∂‡¿ ∂È¿ ∂Ô¿ ∂Û¿ ∂Ù¿ ∑ ¿ ∑#¿ ∑H¿ ∑h¿ ∑å¿ ∑∂¿ ∑Í¿ ∏¿ ∏d¿ ∏™¿ ∏‹¿ π ¿ π0¿ πN¿ πu¿ π´¿ π◊¿ ∫¿ ∫9¿ ∫m¿ ∫°¿ ∫”¿ ª¿ ª?¿ ªg¿ ªï¿ ªπ¿ ª◊¿ º¿ º5¿ ºå¿ ºÀ¿ ºœ¿ º–¿ º‹¿ ºˇ¿ Ω
¿ Ω¿ Ω'¿ Ω<¿ ΩQ¿ Ωo¿ Ωç¿ Ω°¿ ΩÆ¿ Ω¡¿ ΩÀ¿ Ω’¿ ΩË¿ Ω˛¿ æ¿ æ#¿ æ8¿ æM¿ æa¿ ær¿ æà¿ æ¢¿ æ≥¿ æ«¿ æ÷¿ ø1¿ ø=¿ øU¿ øö¿ ø´¿ ø≤¿ ø∑¿ ø∏¿ ø˝¿ ¿&¿ ¿9¿ ¿?¿ ¿h¿ ¿ë¿ ¿ß¿ ¿Ø¿ ¿›¿ ¡ ¿ ¡¿ ¡"¿ ¡*¿ ¡=¿ ¡C¿ ¡U¿ ¡Y¿ ¡[¿ ¡\¿ ¡´¿ ¡Ã¿ ¡‹¿ ¡ˆ¿ ¬¿ ¬.¿ ¬4¿ ¬5¿ ¬a¿ ¬b¿ ¬n¿ ¬Ã¿ ¬Œ¿ ¬œ¿ √¿ √%¿ √)¿ √V¿ √a¿ √õ¿ √≈¿ ƒ¿ ƒ+¿ ƒP¿ ƒQ¿ ƒw¿ ƒ}¿ ƒØ¿ ƒµ¿ ƒ¸¿ ≈)¿ ≈/¿ ≈W¿ ≈r¿ ≈ç¿ ≈é¿ ≈ª¿ ≈¡¿ ≈Û¿ ≈˘¿ ∆C¿ ∆}¿ ∆É¿ ∆µ¿ ∆—¿ ∆Ú¿ ∆Û¿ «%¿ «l¿ «m¿ «y¿ «∏¿ «π¿ «≈¿ «Ë¿ »¿ »(¿ ».¿ »\¿ »Ñ¿ »∂¿ »∫¿ »ª¿ »«¿ …¿ …7¿ …á¿ …„¿ …Á¿ …È¿ …Í¿  9¿  N¿  R¿  ¢¿  ∂¿  ¡¿  ¯¿ À¿ À;¿ ÀM¿ À_¿ Ào¿ ÀÇ¿ Àï¿ Àß¿ À∏¿ À«¿ ÀŸ¿ ÀÍ¿ Ã¿ Ã¿ Ã&¿ Ã<¿ ÃO¿ Ãc¿ Ãu¿ Ãò¿ Ã©¿ Ãº¿ Ã–¿ ÃÊ¿ Ã˚¿ Õ¿ Õ ¿ Õ5¿ ÕN¿ Õk¿ ÕÄ¿ Õê¿ Õ™¿ Õ∫¿ Õ‘¿ ÕÌ¿ Œ¿ Œ)¿ ŒL¿ Œ[¿ Œm¿ ŒÜ¿ Œû¿ Œ∂¿ Œ»¿ Œ·¿ Œ¿ œ¿ œ¿ œX¿ œh¿ œ~¿ œï¿ œ≠¿ œ¬¿ œŸ¿ œÓ¿ –¿ –¿ –$¿ –6¿ –_¿ –â¿ –≠¿ –“¿ –Î¿ –ˇ¿ —%¿ —K¿ —]¿ —q¿ —í¿ —°¿ —‘¿ “¿ “"¿ “1¿ “d¿ “®¿ “≤¿ “¡¿ ”¿ ”\¿ ”f¿ ”u¿ ”∫¿ ‘¿ ‘¿ ‘)¿ ‘Z¿ ‘ú¿ ‘¶¿ ‘µ¿ ‘ˇ¿ ’1¿ ’;¿ ’ö¿ ’õ¿ ’Î¿ ÷¿ ÷¿ ÷f¿ ÷±¿ ÷„¿ ÷˙¿ ÷˚¿ ◊@¿ ◊Ö¿ ◊ï¿ ◊õ¿ ◊€¿ ÿ¿ ÿA¿ ÿG¿ ÿÑ¿ ÿõ¿ ÿú¿ ÿ·¿ Ÿ%¿ Ÿ_¿ Ÿe¿ Ÿ£¿ Ÿ‹¿ ⁄¿ ⁄(¿ ⁄.¿ ⁄m¿ ⁄Ç¿ ⁄É¿ ⁄«¿ € ¿ €¿ €G¿ €á¿ €î¿ €¨¿ €≠¿ €˜¿ ‹8¿ ‹H¿ ‹N¿ ‹ã¿ ‹¢¿ ‹£¿ ‹Ú¿ ›:¿ ›@¿ ›ê¿ ›µ¿ ›Õ¿ ›Œ¿ ﬁ¿ ﬁ¿ ﬁe¿ ﬁw¿ ﬁç¿ ﬁé¿ ﬁ–¿ ﬁ÷¿ ﬂ&¿ ﬂp¿ ﬂ~¿ ﬂí¿ ﬂì¿ ﬂ◊¿ ﬂ›¿ ‡,¿ ‡z¿ ‡ü¿ ‡µ¿ ‡∂¿ ‡˛¿ ·¿ ·N¿ ·`¿ ·y¿ ·z¿ ·æ¿ ·ƒ¿ ‚¿ ‚$¿ ‚:¿ ‚;¿ ‚Ö¿ ‚†¿ ‚°¿ ‚ﬁ¿ ‚‰¿ „¿ „¿ „]¿ „u¿ „v¿ „∑¿ „Ω¿ ‰¿ ‰
¿ ‰\¿ ‰¶¿ ‰˜¿ Â6¿ ÂO¿ ÂP¿ Âë¿ Âó¿ ÂË¿ Ê(¿ Ê.¿ ÊÄ¿ Ê ¿ Á¿ ÁZ¿ Áq¿ Ár¿ Áø¿ Á≈¿ Ë¿ ËV¿ Ë~¿ Ë¿ Ëπ¿ Ëø¿ È¿ È_¿ Èe¿ Èµ¿ Í¿ Í¿ Í¿ Íj¿ Íâ¿ Íè¿ Í‡¿ Î.¿ Î{¿ Î≥¿ Î…¿ Î ¿ Ï¿ Ï¿ ÏT¿ Ï§¿ ÏÈ¿ Ì¿ Ì¿ ÌP¿ Ì_¿ Ìe¿ ÌØ¿ ÌÈ¿ ÌÔ¿ Ó$¿ Ó=¿ Ó>¿ Óã¿ Óπ¿ Óø¿ Ó¿ Ô>¿ Ôt¿ Ôz¿ Ôä¿ Ôê¿ Ô‹¿ Ô¯¿ ¿ ¿ a¿ g¿ w¿ }¿ Ã¿ Ê¿ Á¿ Ò ¿ Ò&¿ Ò6¿ Ò<¿ ÒÇ¿ Òó¿ Òò¿ Ò‡¿ ÒÊ¿ Ú2¿ Ú¿ Ú≤¿ Ú∏¿ Û¿ ÛT¿ Û¢¿ ÛÁ¿ Ù6¿ Ù`¿ Ùf¿ Ùv¿ Ù|¿ ÙÕ¿ ı$¿ ı>¿ ı?¿ ıÇ¿ ıà¿ ı÷¿ ˆ¿ ˆe¿ ˆk¿ ˆ∫¿ ˆ¿¿ ˜¿ ˜9¿ ˜?¿ ˜O¿ ˜U¿ ˜û¿ ˜∏¿ ˜π¿ ¯¿ ¯¿ ¯¿ ¯j¿ ¯~¿ ¯Ñ¿ ¯Œ¿ ˘¿ ˘$¿ ˘%¿ ˘t¿ ˘Ü¿ ˘å¿ ˘Ÿ¿ ˘Ì¿ ˘Û¿ ˙<¿ ˙[¿ ˙|¿ ˙}¿ ˙¿¿ ˚¿ ˚¿ ˚V¿ ˚\¿ ˚®¿ ˚ı¿ ¸/¿ ¸5¿ ¸á¿ ¸ ¿ ¸–¿ ˝¿ ˝$¿ ˝z¿ ˝®¿ ˝Ω¿ ˝Ÿ¿ ˝⁄¿ ˛¿ ˛¿ ˛c¿ ˛ú¿ ˛¢¿ ˛Ò¿ ˇ¿ ˇ¿ ˇ¿ ˇ!¿ ˇr¿ ˇñ¿ ˇÂ¿ ˇ¸¿ ˇ˝¿ P¿ V¿ †¿ Í¿ ¿?¿S¿Y¿i¿o¿ø¿Ó¿,¿W¿X¿ô¿ü¿Ó¿'¿-¿|¿ê¿ñ¿¶¿¨¿˝¿!¿p¿á¿à¿Ÿ¿Ó¿Ù¿>¿à¿é¿›¿Ò¿˜¿¿¿]¿å¿ ¿ı¿ˆ¿<¿á¿ç¿ÿ¿#¿;¿A¿z¿∂¿º¿Ã¿“¿	!¿	P¿	û¿	±¿	—¿	“¿
#¿
p¿
v¿
«¿¿9¿?¿x¿¥¿∫¿ ¿–¿ ¿X¿ü¿”¿‘¿¿e¿k¿∂¿¿¿¿X¿î¿ö¿™¿∞¿ˇ¿.¿|¿è¿Ø¿∞¿¿N¿T¿•¿Ô¿¿¿V¿û¿§¿¥¿∫¿
¿B¿â¿Ω¿æ¿¿#¿)¿w¿∞¿∂¿¿¿¿-¿3¿É¿ß¿ı¿¿¿]¿ê¿ñ¿ﬂ¿)¿/¿|¿ê¿ñ¿¶¿¨¿˚¿*¿g¿ë¿í¿–¿÷¿'¿a¿î¿ö¿‹¿&¿?¿@¿w¿}¿Ã¿“¿¿e¿Æ¿˘¿-¿H¿I¿ì¿ô¿Ô¿=¿C¿ì¿Ï¿=¿i¿o¿æ¿ƒ¿Ÿ¿Á¿¿5¿e¿å¿ò¿¢¿¿¿»¿“¿¿¿I¿m¿s¿£¿…¿ ¿ ¿ +¿ 1¿ ¿ Õ¿ Ù¿!¿!¿!`¿!f¿!±¿" ¿"!¿"'¿"q¿"¬¿#¿#¿#!¿#'¿#w¿#ï¿#ª¿#º¿#„¿#È¿$8¿$>¿$N¿$T¿$ù¿$≥¿$¥¿$·¿$Á¿%7¿%á¿%ï¿%õ¿%È¿&0¿&6¿&É¿&”¿'#¿']¿'z¿'{¿'Æ¿'¥¿(¿(?¿(E¿(ì¿(‚¿(Ù¿(˙¿)G¿)ò¿)È¿*6¿*C¿*f¿*g¿*õ¿*°¿*¿+>¿+]¿+c¿+≥¿+ˇ¿,J¿,ô¿,¨¿,–¿,—¿-¿-¿-[¿-©¿-»¿-Œ¿.¿.k¿.∏¿/¿/¿/@¿/A¿/s¿/y¿/»¿0¿03¿09¿0á¿0”¿1¿1m¿1Ä¿1¢¿1£¿1◊¿1›¿2,¿2z¿2ó¿2ù¿2Ì¿39¿3Ü¿3÷¿3È¿4¿4¿4@¿4F¿4ì¿4◊¿4›¿5#¿5p¿5v¿5¬¿6¿6*¿6L¿6M¿6¿6Ö¿6“¿7¿7¿7b¿7Ø¿7µ¿8¿8S¿8m¿8è¿8ê¿8æ¿8ƒ¿9¿9¿9a¿9ä¿9®¿9©¿9÷¿9‹¿:%¿:6¿:<¿:ã¿:¥¿:—¿:“¿;¿;¿;N¿;T¿;£¿;Ã¿;Î¿;Ï¿<2¿<8¿<Ç¿<≠¿<≥¿=¿='¿=b¿=c¿=™¿=∞¿=˙¿>&¿>,¿>|¿>¢¿>ﬁ¿>ﬂ¿? ¿?&¿?p¿?ó¿?ù¿?Ì¿@¿@I¿@J¿@å¿@í¿@‹¿A¿A	¿AY¿A¿A∂¿A∑¿AÌ¿AÛ¿BD¿Bé¿Bî¿Bﬂ¿C!¿CN¿CO¿CÄ¿CÜ¿C◊¿C˝¿D¿DR¿Do¿Dí¿Dì¿D÷¿D‹¿E*¿Eh¿E∞¿E˙¿F$¿F*¿F{¿FÃ¿G¿G ¿G0¿G6¿GÜ¿GØ¿H ¿H0¿HÇ¿Hµ¿H∂¿H˘¿Hˇ¿IG¿Iá¿I”¿J¿JG¿JM¿Jû¿JÔ¿K=¿KC¿KS¿KY¿K¶¿Kƒ¿L¿LI¿LJ¿Lä¿Lπ¿Lø¿M¿M[¿M´¿MÛ¿M˘¿NK¿Nñ¿N∂¿O¿O¿O%¿Ov¿Oƒ¿O ¿O⁄¿O‡¿P-¿PK¿P`¿P¿PÄ¿P±¿P∑¿Pˆ¿P¸¿QI¿Qò¿Q∂¿Q◊¿Qÿ¿R'¿R-¿Rw¿R∆¿S¿Se¿Sk¿S{¿SÅ¿S…¿T¿T¿TQ¿Tå¿Tí¿T·¿U,¿U2¿UÇ¿U≤¿U∏¿UÚ¿V¿V$¿V%¿Vr¿Vx¿Væ¿W¿WT¿W†¿W¿X:¿XO¿Xs¿Xt¿XΩ¿Y¿Y¿Y¿Ym¿Yµ¿Y“¿Yÿ¿Z&¿Zs¿Zy¿ZÃ¿Z·¿[¿[¿[X¿[á¿[ç¿[ÿ¿[ﬁ¿\.¿\}¿\ë¿\¶¿\Õ¿\Œ¿\⁄¿]¿]J¿]°¿]Ù¿^M¿^¶¿_¿_U¿_ù¿_±¿`	¿`¿`X¿`l¿`ƒ¿`À¿a¿a0¿aP¿at¿añ¿a≤¿aª¿a¬¿b¿b'¿bG¿bk¿bç¿b©¿b≤¿bπ¿bˇ¿cc¿cØ¿d¿dg¿d{¿d™¿d∆¿d‡¿e¿e¿e&¿eâ¿eù¿e–¿eÈ¿f ¿f¿f%¿f,¿f0¿f1¿f=¿fø¿f¡¿f¬¿g¿g¿gE¿gj¿gl¿gm¿gú¿g†¿g¿h7¿hÑ¿h°¿h‘¿hÛ¿h˘¿iI¿i[¿iì¿i±¿i’¿i÷¿j!¿j'¿j^¿j∫¿j…¿jÓ¿k¿k¿k¿kL¿kQ¿k¥¿l¿lG¿lê¿lë¿l≥¿l”¿m'¿mC¿mG¿mH¿mä¿mê¿m‡¿n¿n¿n¿n?¿nE¿né¿nﬁ¿o¿o¿oZ¿o¶¿o‡¿oı¿p ¿p¿p&¿p'¿p5¿p6¿pê¿pñ¿p›¿q.¿q=¿qe¿q|¿qû¿q÷¿r(¿r<¿rB¿rF¿rG¿rÜ¿r†¿r∫¿r”¿s&¿s@¿sU¿si¿so¿ss¿st¿sº¿s¬¿t¿t'¿t-¿t}¿tÕ¿u¿uk¿uö¿u†¿uÁ¿v#¿v)¿ve¿v¥¿v≈¿vÊ¿vÁ¿w,¿w2¿wÉ¿wó¿wù¿wÌ¿x<¿xã¿xÀ¿x—¿y¿y¿yf¿yÉ¿yÑ¿y–¿y÷¿z¿zm¿zΩ¿zÔ¿{¿{¿{+¿{1¿{Ä¿{Œ¿|¿|0¿|6¿|É¿|—¿|Ú¿}U¿}V¿}c¿}d¿}≥¿}π¿}˝¿~2¿~h¿~å¿~≥¿~€¿~È¿~Ô¿¿*¿.¿/¿}¿É¿œ¿Ä¿ÄW¿Äz¿Ä∂¿Ä›¿Å¿Å2¿Å@¿ÅF¿Åj¿Å|¿ÅÄ¿ÅÅ¿ÅÃ¿Å“¿Ç#¿ÇS¿ÇY¿Çi¿Ço¿Çç¿Ç∏¿É¿É¿Én¿Éæ¿Ñ¿Ñ¿Ñ&¿Ñ'¿Ñq¿Ñì¿Ñî¿Ñ„¿Ö2¿ÖE¿Öx¿Öy¿Ö¥¿Ö˙¿Ü
¿ÜK¿ÜÇ¿Ü´¿Üœ¿Ü‚¿ÜÏ¿ÜÌ¿á%¿áB¿áx¿áî¿áú¿á¢¿á◊¿áÚ¿á¯¿à¿à1¿àg¿àÇ¿à®¿àÌ¿â%¿âD¿âP¿âl¿âv¿â~¿âÑ¿âπ¿â€¿âˇ¿äK¿äî¿ä⁄¿ã"¿ãZ¿ãÖ¿ãè¿ã∞¿ãÃ¿ãÊ¿ãÓ¿ãÙ¿åA¿åT¿åd¿åì¿å›¿ç ¿ç>¿ç\¿ç±¿ç‹¿çÎ¿ç¯¿é	¿éB¿éã¿é∫¿éÌ¿é˝¿è\¿è~¿èª¿èÂ¿ê¿ê2¿êC¿êe¿êó¿êº¿êˆ¿ë	¿ë¿ë(¿ë4¿ë>¿ëg¿ë°¿ëª¿í&¿í5¿íL¿íø¿íŒ¿í˛¿ì¿ì+¿ì5¿ì=¿ìÅ¿ìÇ¿ìß¿ìÿ¿ì˝¿î¿îQ¿îd¿în¿îo¿îö¿î—¿î¿ï$¿ïY¿ïu¿ïÜ¿ïê¿ïò¿ïû¿ïª¿ï–¿ï‰¿ïÍ¿ïÓ¿ïÔ¿ñ*¿ñd¿ñz¿ñ{¿ñß¿ñÁ¿ñË¿ó¿ó ¿óq¿ó~¿ó≥¿ó–¿ò¿ò%¿ò7¿òA¿òI¿òO¿òS¿òT¿òÇ¿òà¿ò◊¿ô ¿ôN¿ôá¿ô§¿ô⁄¿ö¿ö6¿ö@¿öH¿öN¿ö_¿öc¿öd¿öò¿öû¿öÚ¿õ¿õ3¿õ4¿õç¿õì¿õ»¿õŒ¿ú¿ú+¿ú,¿úa¿úg¿ú™¿ú“¿úÏ¿úÌ¿ù!¿ù'¿ùw¿ùø¿ù≈¿û¿û+¿û=¿û>¿û]¿ûc¿û∞¿û–¿û„¿û‰¿ü¿ü2¿üT¿üu¿üï¿üõ¿üü¿ü†¿üº¿ü„¿üÁ¿üË¿†'¿†I¿†à¿†â¿†…¿†◊¿†›¿†ﬁ¿°¿°¿°I¿°ö¿°ß¿°–¿°÷¿°⁄¿°€¿¢ ¿¢:¿¢>¿¢?¿¢i¿¢å¿¢ú¿¢Ω¿¢·¿¢˛¿£¿£O¿£b¿£l¿£Ü¿£ö¿£∑¿£Ω¿£◊¿§%¿§t¿§∫¿• ¿•2¿•_¿•c¿•d¿•ç¿•∞¿•ÿ¿•Ú¿¶¿¶¿¶"¿¶&¿¶'¿¶\¿¶q¿¶ó¿¶≥¿¶«¿¶Ú¿ßC¿ßá¿ß•¿ß´¿ß»¿ßÔ¿®¿®¿®+¿®1¿®N¿®Ñ¿®°¿®©¿®Ø¿®≥¿®¥¿®Â¿®˙¿©¿©(¿©S¿©Ü¿©§¿©…¿©‹¿™¿™5¿™k¿™∏¿™Ë¿´¿´&¿´0¿´8¿´>¿´Ç¿´√¿´Â¿´˜¿´˚¿´¸¿¨¿¨¿¨*¿¨@¿¨R¿¨`¿¨f¿¨y¿¨ç¿¨¬¿¨Ê¿¨Ï¿¨¿¨Ò¿≠:¿≠@¿≠_¿≠e¿≠∂¿≠’¿≠Í¿Æ¿Æ¿Æ(¿Æ@¿ÆS¿Æ]¿Æq¿Æu¿Æv¿Æ»¿Ø¿Ø5¿Øk¿Ø≥¿Ø˚¿∞!¿∞D¿∞v¿∞ù¿∞–¿±¿±<¿±s¿±¶¿±◊¿≤
¿≤?¿≤|¿≤“¿≥¿≥E¿≥l¿≥å¿≥¬¿≥∆¿≥«¿≥‚¿≥„¿¥5¿¥z¿¥ß¿¥®¿¥Õ¿µ&¿µ[¿µ\¿µê¿µñ¿µÊ¿∂¿∂"¿∂#¿∂Q¿∂õ¿∂ú¿∂À¿∂Ã¿∂„¿∑¿∑¿∑L¿∑M¿∑å¿∑õ¿∑ø¿∑˘¿∑˝¿∏F¿∏G¿∏á¿∏Ø¿∏‡¿∏·¿π¿π¿πJ¿πP¿πä¿ππ¿π∫¿∫¿∫¿∫@¿∫F¿∫¿∫ª¿ª ¿ª¿ª@¿ªF¿ª¿ªÖ¿ªø¿ªÓ¿ªÔ¿º0¿ºQ¿ºW¿ºê¿ºñ¿ºœ¿Ω¿ΩP¿ΩQ¿Ω¢¿Ωº¿Ω¬¿æ¿æ.¿æ4¿æm¿æs¿æ∂¿æ˜¿æ¯¿øG¿øï¿øõ¿øÈ¿¿¿¿¿¿F¿¿L¿¿é¿¿‹¿¡3¿¡4¿¡Ö¿¡ü¿¡•¿¡Û¿¬¿¬¿¬P¿¬V¿¬ô¿¬⁄¿¬€¿√*¿√x¿√~¿√Ã¿√Í¿√¿ƒ)¿ƒ/¿ƒq¿ƒø¿≈¿≈¿≈e¿≈k¿≈§¿≈™¿≈„¿∆¿∆¿∆^¿∆Ç¿∆à¿∆¡¿∆«¿∆ˇ¿«9¿«|¿«}¿«≤¿«∏¿«Ò¿»¿»>¿»?¿»à¿»ô¿»ÿ¿…¿…¿…S¿…k¿…°¿…‡¿…·¿ 0¿ B¿ H¿ ñ¿ ‰¿À¿À8¿ÀV¿ÀW¿À®¿À‘¿Ã
¿Ã+¿Ã,¿Ã{¿Ãô¿Ã¬¿Ãÿ¿ÃŸ¿Õ%¿Õ+¿Õx¿ÕÑ¿Õ∂¿Õ–¿Õ—¿Œ¿Œ?¿ŒT¿ŒU¿Œ•¿Œ∑¿ŒΩ¿œ¿œY¿œü¿œ•¿œµ¿œª¿–¿–6¿–Q¿–R¿–°¿–≥¿–π¿–Ù¿–˙¿—
¿—¿—c¿—ñ¿—≤¿—≥¿“¿“¿“¿“U¿“[¿“k¿“q¿“√¿“ˆ¿”¿”¿”]¿”z¿”Ä¿”Œ¿‘¿‘-¿‘3¿‘C¿‘I¿‘â¿‘√¿‘Ò¿’	¿’
¿’V¿’h¿’n¿’ª¿’œ¿’’¿÷%¿÷g¿÷ï¿÷≠¿÷Æ¿÷˝¿◊¿◊¿◊b¿◊v¿◊|¿◊À¿◊Û¿ÿ)¿ÿE¿ÿF¿ÿë¿ÿ›¿Ÿ ¿ŸI¿Ÿ|¿Ÿ}¿Ÿ§¿Ÿƒ¿ŸÓ¿ŸÔ¿⁄&¿⁄J¿⁄P¿⁄õ¿⁄Ÿ¿⁄ﬂ¿€¿€-¿€P¿€|¿€}¿€Ω¿‹¿‹¿‹"¿‹e¿‹ô¿‹÷¿‹◊¿›¿›d¿›¥¿›µ¿›Ò¿ﬁ¿ﬁ$¿ﬁm¿ﬁs¿ﬁ√¿ﬂ¿ﬂ&¿ﬂ;¿ﬂm¿ﬂ®¿ﬂ©¿ﬂ˚¿ﬂ¸¿‡L¿‡M¿‡ú¿‡„¿·¿·¿·d¿·í¿·ò¿·È¿‚7¿‚K¿‚x¿‚Æ¿‚µ¿‚”¿„¿„$¿„*¿„+¿„7¿„^¿„è¿„æ¿‰¿‰¿‰¿‰L¿‰†¿‰°¿‰∆¿‰ı¿Â$¿Âe¿Â¶¿Â”¿ÂÚ¿Ê¿Ê9¿Êd¿ÊÉ¿Ê‘¿Á¿ÁE¿ÁL¿Áx¿Á§¿ÁÀ¿Á˘¿Ë)¿ËY¿Ë®¿ËŸ¿È ¿È*¿ÈX¿ÈÜ¿Èº¿È˜¿Í!¿ÍA¿Í[¿Íá¿Íπ¿Í›¿Í˙¿Í˚¿ÎI¿ÎJ¿ÎÅ¿Î§¿Î™¿Î´¿Î∑¿Ï¿Ïï¿Ïú¿Ï®¿Ì¿ÌÜ¿Ìç¿Ìë¿Ìí¿Ì ¿Ì–¿Ó!¿Óm¿Ó†¿Ó≈¿ÓË¿Ô4¿Ôo¿Ôë¿Ô∂¿ÔÔ¿(¿s¿æ¿ı¿Ò¿ÒG¿Òû¿Ò—¿Ú ¿Ú%¿ÚS¿ÚÉ¿Ú≥¿Úﬁ¿Û	¿Û<¿Ûb¿Û¿Ûü¿Û–¿Ù¿ÙC¿Ùg¿Ùû¿ÙÌ¿ı>¿ıD¿ıe¿ıì¿ıË¿ˆ¿ˆ:¿ˆE¿ˆò¿ˆ†¿ˆ‘¿˜)¿˜Z¿˜á¿˜í¿˜Â¿˜Ì¿˜Û¿˜Ù¿¯¿¯N¿¯w¿¯°¿¯“¿˘¿˘0¿˘e¿˘ê¿˘¡¿˘Ù¿˙'¿˙X¿˙â¿˙¬¿˙Â¿˚¿˚<¿˚a¿˚l¿˚m¿˚ç¿˚∂¿˚¿¿˚Ï¿¸¿¸)¿¸^¿¸£¿¸≠¿¸‚¿˝'¿˝1¿˝[¿˝x¿˝Ç¿˝∂¿˝›¿˝Á¿˛¿˛'¿˛1¿˛R¿˛}¿˛ß¿˛±¿ˇ	¿ˇ^¿ˇh¿ˇí¿ˇ…¿ "¿ V¿ Å¿ ê¿ Á¿ Û¿0¿â¿√¿Ù¿¿Z¿f¿p¿£¿‘¿ ¿8¿k¿v¿®¿ÿ¿¿;¿n¿y¿z¿ü¿Œ¿ ¿P¿Z¿[¿ù¿“¿¿i¿ß¿Ò¿<¿s¿¿â¿ä¿ü¿©¿Ø¿∞¿ ¿Ë¿<¿Z¿Ç¿™¿‰¿	¿	D¿	\¿	Ä¿	í¿	Æ¿	∆¿	Í¿
¿
4¿
Z¿
Ç¿
™¿
–¿
ˆ¿$¿o¿ë¿©¿ª¿ﬂ¿	¿%¿;¿B¿F¿G¿w¿û¿¢¿£¿›¿(¿s¿t¿”¿Á¿¿*¿Å¿ú¿±¿π¿Ã¿÷¿¿0¿k¿û¿œ¿‹¿¿Z¿í¿¬¿˛¿¿W¿g¿ù¿“¿¿!¿'¿P¿é¿·¿)¿r¿¡¿…¿œ¿Á¿ı¿¿5¿L¿o¿ô¿—¿˚¿3¿o¿π¿ı¿?¿g¿ù¿∫¿„¿>¿ù¿Œ¿ˇ¿8¿j¿î¿Õ¿¿C¿Ñ¿æ¿Ù¿L¿s¿¢¿π¿Ï¿¿<¿W¿^¿r¿v¿w¿«¿˚¿6¿\¿ù¿‘¿ˆ¿¸¿˝¿.¿X¿¥¿¡¿¿-¿3¿4¿É¿“¿¿f¿¥¿˚¿ ¿ u¿ π¿ ¿!H¿!{¿!ñ¿!“¿"¿"^¿"Æ¿"Œ¿"Ò¿#¿#¿#C¿#^¿#f¿#g¿#√¿#…¿# ¿$¿$2¿$Q¿$i¿$o¿$ó¿$ò¿$¥¿% ¿%¿%¿%¿%]¿%c¿%¨¿%˝¿&&¿&;¿&I¿&O¿&è¿&ì¿&î¿&À¿&‰¿&Ù¿'2¿'E¿'O¿'b¿'f¿'g¿'s¿'¬¿'√¿'œ¿(¿(?¿(Z¿(l¿(¿¿(÷¿)4¿)=¿)]¿)c¿)w¿)¢¿)≥¿)¬¿*¿*¿*¿*0¿*ç¿*î¿*®¿*º¿*Á¿+¿+<¿+E¿+L¿+g¿+´¿+±¿,¿,+¿,â¿,ñ¿,Ò¿-¿-'¿-m¿-∫¿-‚¿-˙¿.¿.(¿.e¿.~¿.∂¿.æ¿.‘¿/0¿/9¿/?¿/S¿/s¿/É¿/∂¿/“¿/€¿/‚¿0¿0¿03¿0]¿0Æ¿0º¿0“¿0Ê¿14¿1z¿1ç¿1ﬁ¿1Ú¿2K¿2R¿2S¿2∂¿3¿3q¿3¬¿4¿4T¿4Ø¿5
¿5Q¿5ú¿5∞¿6¿6¿66¿6x¿6~¿6·¿7¿7#¿7Ñ¿7ç¿7ì¿7Í¿8A¿8†¿8˘¿9J¿9¶¿: ¿:\¿:±¿;¿;3¿;Ñ¿;ä¿;é¿;è¿;◊¿;›¿<-¿<]¿<i¿<Å¿<†¿<æ¿<Ù¿=E¿=]¿=d¿=ß¿=À¿=ı¿>¿>+¿>2¿>6¿>7¿>C¿>i¿>{¿>∫¿?¿?¿?;¿?M¿?`¿?t¿?í¿?ô¿?ù¿?û¿?™¿?⁄¿@+¿@2¿@b¿@Å¿@”¿@›¿@¿@Ù¿@ı¿AD¿Aô¿A∂¿A‹¿A‚¿A„¿B¿B@¿Bç¿Bî¿Bò¿Bö¿Bõ¿BÂ¿C#¿C'¿Cw¿Cƒ¿D¿Dm¿D∏¿DÈ¿E=¿E\¿E]¿E¶¿EÃ¿E“¿EÚ¿E¯¿FL¿Fû¿FÓ¿G¿G¿G¿Gi¿Gã¿G¢¿G£¿G ¿GÊ¿GÁ¿GÛ¿H¿H@¿HD¿HF¿HG¿Hñ¿HÃ¿H–¿I¿I`¿I±¿I≤¿I¸¿J¿J$¿Jp¿Jï¿J±¿J≤¿J◊¿Jÿ¿K
¿KA¿KB¿KN¿K{¿K∞¿K¥¿Kµ¿L¿L¿LY¿Lâ¿LΩ¿LÏ¿M¿Mi¿Mü¿M∞¿M¬¿M·¿N+¿NB¿NM¿NV¿Ng¿Ny¿Nô¿NÁ¿N˛¿O	¿O¿O¿O*¿O+¿Ou¿Oï¿O®¿O—¿OÒ¿P¿Pd¿Pà¿Pó¿P´¿P≥¿PÀ¿PÒ¿Q¿Q¿Q¿Q2¿Q3¿Qa¿Qû¿Q§¿Q•¿Q¡¿R
¿R¿R!¿R"¿Rn¿Rt¿R√¿R‰¿RÍ¿S8¿SÖ¿S’¿S¸¿T¿TM¿Tù¿TÎ¿U:¿Uf¿Uë¿UÆ¿U‘¿UË¿UÓ¿V2¿V`¿Vé¿V≠¿V¸¿W0¿Wz¿W∆¿WÎ¿Wˇ¿X	¿X
¿Xg¿Xü¿X”¿Y¿Y0¿Yb¿Yä¿Y≥¿Yÿ¿Z
¿ZU¿Zá¿ZØ¿Zπ¿Z¡¿Z«¿Z»¿ZÒ¿[¿[T¿[Ü¿[‘¿\"¿\g¿\à¿\®¿\≤¿\Ê¿\¿\Ò¿]¿]0¿]@¿]H¿]b¿]Ö¿]°¿]©¿]¬¿]»¿]…¿^¿^q¿^u¿^w¿^x¿^π¿^˛¿_¿_0¿_4¿_o¿_ï¿_∫¿_º¿_Ω¿`¿`¿`¿`m¿`æ¿`¯¿`¸¿a.¿ac¿ag¿aΩ¿aÍ¿b
¿b)¿b-¿bZ¿bä¿b´¿b˜¿c+¿c:¿cJ¿cg¿cØ¿cƒ¿cÕ¿c‘¿c„¿cÛ¿d¿d]¿dr¿d{¿dÇ¿dÜ¿dñ¿dó¿d„¿e¿e¿e9¿eW¿ei¿e∆¿eË¿eı¿f¿f¿f#¿fE¿fY¿f_¿fc¿f|¿f}¿fï¿fÂ¿fˆ¿f¯¿f˘¿g@¿gu¿gy¿g√¿g«¿h¿h^¿h£¿hı¿hˆ¿i/¿iK¿iL¿iã¿ië¿i–¿i‚¿j¿j¿jS¿j`¿jv¿jw¿jÉ¿jØ¿j„¿k¿k¿k@¿kD¿kF¿kG¿kë¿k¨¿k∞¿kˇ¿lL¿lx¿l¶¿l˙¿m0¿m|¿mÄ¿mÅ¿m”¿n"¿n:¿n@¿nê¿n‰¿o¿o;¿ow¿o∏¿o˜¿o¯¿p+¿p1¿pe¿pö¿põ¿pß¿p∫¿pË¿q¿q¿q1¿qF¿qJ¿qK¿qÅ¿q†¿qÁ¿q˜¿r;¿rå¿r’¿r˚¿s/¿sP¿st¿s∞¿s‚¿sÏ¿t¿t	¿t
¿tQ¿tx¿t≈¿u¿uK¿uî¿u”¿u›¿uÂ¿uÊ¿v
¿v¿v'¿v(¿vq¿v≠¿vœ¿w%¿wJ¿wÅ¿wº¿wœ¿x¿x'¿x/¿x0¿xf¿xπ¿y¿yF¿yY¿y√¿z¿z¿z0¿zÜ¿zŸ¿{¿{¿{$¿{Å¿{›¿|.¿|9¿|C¿|M¿|N¿|m¿|{¿|Å¿|∏¿|¯¿}¿}[¿}§¿}π¿}‘¿}Ú¿~G¿~s¿~≠¿~ ¿/¿W¿¶¿Ä¿ÄM¿Äü¿Å¿Å¿Å¿Å"¿Å(¿Åx¿Å›¿Ç¿Ço¿Ç±¿Çˆ¿É<¿É}¿É°¿É‚¿Ñ%¿Ñk¿ÑØ¿Ñƒ¿ÑÓ¿Ö,¿Ö4¿Ö:¿ÖS¿Öé¿ÖÂ¿Ü¿Ü¿Ü:¿ÜU¿ÜÖ¿Üé¿Üî¿Üº¿Ü”¿Ü◊¿Üÿ¿á4¿á\¿áπ¿áÔ¿à¿à6¿àh¿àr¿àò¿à¢¿à®¿àË¿à˚¿â¿â&¿â*¿â+¿ây¿â¿âŒ¿â¿âˆ¿äC¿ä_¿ä¶¿äˇ¿ã¿ã/¿ã=¿ãC¿ãD¿ãy¿ã–¿ãÙ¿ã˙¿ã˛¿ãˇ¿å@¿åX¿åm¿åâ¿åè¿å±¿å„¿ç¿ç1¿ç9¿çy¿ç¿ç®¿çª¿ç¡¿çÒ¿é¿éC¿éK¿éh¿éù¿éÃ¿éÊ¿é˛¿è¿è¿è'¿èN¿èT¿èp¿è¥¿ê¿ê¿ê0¿êB¿êM¿êl¿êÜ¿êê¿êò¿êû¿ê¿¿êƒ¿ê≈¿ë¿ë¿ël¿ëé¿ëî¿ë·¿ë˝¿íO¿íÇ¿íö¿í®¿íÆ¿ì¿ì¿ì¿ì+¿ì2¿ìM¿ìb¿ìh¿ìl¿ìm¿ìy¿ì®¿ì™¿ì´¿ìÌ¿î¿î¿îO¿îc¿îÇ¿î¢¿î£¿îÒ¿ï¿ï¿ïa¿ï∞¿ï¸¿ñ¿ñ¿ñi¿ñ≥¿ñ‡¿ñÊ¿ó3¿ói¿óç¿ó¥¿óÎ¿ò¿ò¿ò¿ò>¿òs¿òê¿ò∏¿òƒ¿ò¿ô@¿ôS¿ôZ¿ôy¿ô}¿ô~¿ôÃ¿ô◊¿ô›¿ö%¿ö]¿öc¿ö±¿ö√¿öƒ¿õ¿õ¿õa¿õÆ¿õ˙¿ú ¿úM¿úç¿úŸ¿úË¿úÓ¿ù<¿ùã¿ùµ¿ù€¿ù‹¿û-¿û|¿ûØ¿ûµ¿ü¿üP¿üÑ¿ü“¿† ¿†Q¿†W¿†§¿†Û¿°¿°¿°f¿°¥¿°ƒ¿° ¿¢¿¢e¿¢¥¿¢ﬂ¿¢Â¿£5¿£É¿£ ¿£–¿§ ¿§[¿§ó¿§ò¿§≤¿§Ï¿•¿•¿•8¿•>¿•å¿•Ω¿•Ô¿¶¿¶¿¶^¿¶î¿¶ö¿¶™¿¶∞¿¶ÿ¿ß¿ßK¿ßL¿ßq¿ß…¿ß„¿ß‰¿®¿®¿®`¿®p¿®º¿®‹¿© ¿©¿©"¿©#¿©q¿©Ü¿©å¿©‘¿©‰¿™2¿™Z¿™v¿™á¿™è¿™ì¿™î¿™¡¿™«¿´¿´g¿´u¿´{¿´«¿¨¿¨¿¨_¿¨≠¿¨˛¿≠L¿≠ú¿≠Ì¿Æ8¿ÆÜ¿ÆŒ¿Ø¿Ø_¿ØÑ¿Øú¿Øø¿Ø¯¿∞¿∞¿∞¿∞D¿∞J¿∞ö¿∞’¿∞€¿±'¿±v¿±à¿±π¿±◊¿≤ ¿≤?¿≤Y¿≤]¿≤^¿≤í¿≤ò¿≤Á¿≥5¿≥T¿≥Z¿≥™¿≥ˆ¿¥A¿¥ê¿¥£¿¥÷¿¥ı¿µ¿µ_¿µz¿µ~¿µ¿µ∞¿µ∂¿µı¿µ˚¿∂H¿∂ó¿∂µ¿∂‚¿∂˛¿∑%¿∑b¿∑z¿∑~¿∑¿∑¥¿∑∫¿∏	¿∏W¿∏v¿∏|¿∏Õ¿π¿πf¿π∂¿π…¿π˛¿∫¿∫I¿∫ä¿∫¶¿∫™¿∫´¿∫›¿∫„¿ª2¿ªÄ¿ªù¿ª£¿ªÒ¿º=¿ºà¿º◊¿ºÍ¿Ω¿Ω6¿Ω^¿Ωú¿Ωµ¿Ωπ¿Ω∫¿ΩÓ¿ΩÙ¿æC¿æë¿æÆ¿æ¥¿ø¿øP¿øù¿øÌ¿¿ ¿¿3¿¿R¿¿|¿¿º¿¿◊¿¿€¿¿‹¿¡¿¡¿¡g¿¡Ø¿¡˘¿¬¿¬¿¬[¿¬©¿¬˜¿√E¿√j¿√Æ¿√⁄¿ƒ¿ƒ,¿ƒl¿ƒ°¿ƒ…¿ƒ—¿ƒ¿ƒÙ¿ƒı¿≈'¿≈-¿≈z¿≈æ¿≈ƒ¿∆¿∆U¿∆[¿∆ß¿∆˜¿«¿«>¿«[¿«É¿«¡¿«⁄¿«ﬁ¿«ﬂ¿»¿»¿»d¿»®¿»Æ¿»Ú¿…?¿…E¿…ì¿…„¿…˝¿ ,¿ I¿ q¿ Ø¿ »¿ Ã¿ Õ¿ ˚¿À¿ÀI¿ÀO¿Àû¿À«¿ÀÓ¿Ã¿Ã+¿Ãe¿Ãz¿Ã~¿Ã¿Ã¨¿Ã≤¿Ã˚¿Õ¿Õ¿Õa¿Õä¿ÕØ¿Õ«¿ÕÍ¿Œ#¿Œ7¿Œ;¿Œ<¿Œk¿Œq¿Œ∏¿Œæ¿œ¿œ6¿œ_¿œy¿œû¿œŸ¿œÔ¿œÛ¿œÙ¿–*¿–0¿–~¿–Œ¿–Ú¿–¯¿—A¿—â¿—´¿—‚¿“¿“/¿“q¿“é¿“í¿“ì¿“Ÿ¿“ﬂ¿”)¿”T¿”Z¿”®¿”Œ¿‘*¿‘`¿‘°¿‘º¿’
¿’<¿’[¿’c¿’ê¿’î¿’ï¿’‹¿’‚¿÷,¿÷X¿÷^¿÷Æ¿÷‘¿◊2¿◊i¿◊´¿◊∆¿ÿ¿ÿG¿ÿf¿ÿn¿ÿú¿ÿ†¿ÿ°¿ÿ‚¿ÿË¿Ÿ2¿ŸY¿Ÿ_¿ŸØ¿Ÿ’¿⁄'¿⁄X¿⁄î¿⁄Ø¿⁄¯¿€*¿€I¿€Q¿€~¿€Ç¿€É¿€≈¿€À¿‹¿‹<¿‹B¿‹í¿‹∏¿›¿›>¿›{¿›ñ¿›‡¿ﬁ¿ﬁ1¿ﬁ9¿ﬁg¿ﬁk¿ﬁl¿ﬁ¢¿ﬁ®¿ﬁ˘¿ﬂC¿ﬂI¿ﬂî¿ﬂ÷¿‡¿‡<¿‡o¿‡ä¿‡»¿‡Û¿·R¿·ö¿·˚¿‚¿‚ ¿‚$¿‚%¿‚V¿‚\¿‚≠¿‚”¿‚Ÿ¿„(¿„E¿„t¿„í¿„ª¿„÷¿‰¿‰=¿‰h¿‰|¿‰Ñ¿‰ú¿‰†¿‰°¿‰‰¿‰Í¿Â8¿Âv¿Âæ¿Ê¿Ê2¿Ê8¿Êâ¿Ê⁄¿Á(¿Á.¿Á>¿ÁD¿Áî¿ÁΩ¿Ë¿Ë`¿Ëé¿Ë«¿È¿È@¿ÈD¿ÈE¿Èà¿Èé¿È÷¿Í¿Íb¿Í¨¿Í÷¿Í‹¿Î-¿Î~¿ÎÃ¿Î“¿Î‚¿ÎË¿Ï5¿ÏS¿Ï•¿Ïˆ¿Ì$¿Ì]¿Ì¨¿Ì÷¿Ì⁄¿Ì€¿Ó¿ÓA¿Ó[¿ÓÄ¿Óª¿Ó—¿Ó’¿Ó÷¿Ô%¿ÔB¿ÔH¿Ôï¿Ô‚¿4¿Ä¿Ü¿÷¿Ò%¿ÒW¿Ò¢¿Ò∆¿Ú¿Ú]¿Úx¿Ú¢¿ÚÎ¿Û¿Û¿Û¿Ûi¿Û{¿Û”¿Û‘¿Ù#¿Ù5¿Ù;¿Ùâ¿Ù◊¿Ù˛¿ı¿ıS¿ıû¿ı‰¿ˆ¿ˆ9¿ˆW¿ˆÄ¿ˆõ¿ˆ±¿ˆœ¿ˆ”¿ˆ‘¿˜ ¿˜&¿˜n¿˜Ω¿¯¿¯?¿¯k¿¯Ç¿¯§¿¯¿¿¯ﬁ¿¯‚¿¯„¿˘/¿˘5¿˘Ç¿˘é¿˘¿¿˘⁄¿˘ˇ¿˙$¿˙2¿˙8¿˙W¿˙u¿˙y¿˙z¿˙ƒ¿˙’¿˙˝¿˚¿˚2¿˚R¿˚`¿˚f¿˚Ä¿˚û¿˚¢¿˚£¿˚Ì¿¸
¿¸8¿¸P¿¸s¿¸ñ¿¸§¿¸™¿¸«¿¸Â¿¸È¿¸Í¿˝6¿˝H¿˝N¿˝õ¿˝Ø¿˝µ¿˛¿˛:¿˛h¿˛Ä¿˛£¿˛∆¿˛‘¿˛⁄¿˛˜¿ˇ¿ˇ¿ˇ¿ˇi¿ˇ{¿ˇÅ¿ˇŒ¿ˇ‚¿ˇË¿ 3¿ R¿ à¿ §¿ À¿ Ú¿ ¿¿'¿E¿I¿J¿õ¿·¿Á¿,¿q¿Ø¿µ¿¿Q¿Ç¿∂¿÷¿¿"¿&¿'¿f¿l¿∏¿¿K¿Ç¿‰¿)¿X¿ß¿≈¿ˇ¿$¿k¿o¿p¿†¿˘¿¿!¿'¿k¿á¿ô¿ü¿£¿§¿‰¿	¿	'¿	M¿	k¿	â¿	ç¿	é¿	»¿	Î¿
¿
9¿
L¿
j¿
n¿
o¿
©¿
Ø¿
Ò¿
˜¿0¿6¿F¿L¿ö¿…¿Â¿¿3¿7¿8¿á¿ï¿õ¿Â¿4¿Ä¿…¿
¿¿I¿O¿_¿e¿ü¿€¿¿Q¿y¿ó¿õ¿ú¿Ï¿Ú¿4¿:¿s¿y¿â¿è¿›¿+¿q¿ø¿¿4¿P¿Ä¿û¿¢¿£¿Ú¿¿¿f¿µ¿¿J¿ã¿ë¿ ¿–¿‡¿Ê¿ ¿p¿†¿¿ ¿\¿ò¿“¿˙¿¿¿¿W¿Ä¿Ü¿—¿◊¿&¿p¿õ¿°¿⁄¿‡¿¿ˆ¿M¿é¿º¿˛¿¿ ¿!¿[¿°¿ß¿ˆ¿@¿k¿q¿™¿∞¿¿¿∆¿	¿W¿ú¿Ë¿"¿@¿D¿E¿¿®¿Æ¿˘¿ˇ¿N¿ò¿√¿…¿¿¿_¿†¿Œ¿ ¿ .¿ 2¿ 3¿ m¿ ≥¿ π¿!¿!R¿!}¿!É¿!º¿!¬¿!“¿!ÿ¿"¿"i¿"Æ¿"˙¿#4¿#R¿#V¿#W¿#•¿#´¿#Ï¿#Ú¿$+¿$1¿$A¿$G¿$î¿$¡¿$€¿%	¿%'¿%+¿%,¿%|¿%ù¿%£¿%Ï¿&;¿&à¿&—¿'¿'¿'Q¿'W¿'g¿'m¿'¶¿'‡¿(¿(S¿(y¿(ó¿(õ¿(ú¿(—¿(◊¿)¿)2¿)J¿)j¿)Ç¿)†¿)§¿)•¿)Ó¿)ˇ¿*>¿*h¿*ù¿*∂¿*ƒ¿* ¿*Ê¿+¿+¿+	¿+T¿+o¿+u¿+Ö¿+ã¿+⁄¿,¿,(¿,Z¿,x¿,|¿,}¿,Ω¿,√¿,”¿,Ÿ¿-&¿-R¿-q¿-¢¿-¿¿-ƒ¿-≈¿-˚¿.!¿.=¿.k¿.â¿.ç¿.é¿.¡¿.«¿/¿/`¿/ì¿/ô¿/Á¿05¿0É¿0»¿1¿1A¿1G¿1W¿1]¿1≥¿1·¿2 ¿23¿2Q¿2U¿2V¿2ú¿2 ¿3 ¿3!¿3U¿3y¿3ó¿3õ¿3ú¿3Á¿3Ì¿4:¿4ç¿4ﬂ¿5¿5C¿5b¿5´¿5…¿5Õ¿5Œ¿6¿6y¿6¿6–¿7¿7¿7g¿7á¿7’¿7ı¿8>¿8\¿8`¿8a¿8ü¿8•¿8ˆ¿9E¿9z¿9Ä¿9–¿9Ù¿9˙¿:I¿:v¿:|¿:œ¿;%¿;3¿;~¿;ù¿;‰¿;Â¿<¿<¿<¿<Y¿<§¿<∏¿<æ¿=¿=V¿=\¿=•¿=ƒ¿>¿>.¿>f¿>≠¿>À¿>œ¿>–¿?¿?D¿?J¿?õ¿?‚¿?Ë¿@1¿@L¿@ß¿@Œ¿@˛¿AM¿Ak¿Ao¿Ap¿A¡¿B¿B¿Bf¿B¢¿B®¿BÒ¿C¿CP¿Co¿C∂¿C‘¿Cÿ¿CŸ¿D)¿D_¿De¿D≤¿D˙¿EF¿Eu¿E∂¿E‘¿Eÿ¿EŸ¿F¿FI¿Fi¿Fõ¿Fπ¿FΩ¿Fæ¿G¿G1¿GO¿G¿Gù¿G°¿G¢¿GÌ¿H¿H2¿Ha¿H¿HÉ¿HÑ¿HÕ¿HÒ¿I¿I9¿IW¿I[¿I\¿Iì¿I≥¿Iƒ¿I≈¿I·¿I˛¿J¿J¿J(¿JF¿JJ¿JK¿Jñ¿Jæ¿J€¿K
¿K(¿K,¿K-¿Kj¿Kp¿Kæ¿KÁ¿L ¿L¿L!¿LG¿Lh¿Lv¿L|¿Ló¿Lµ¿Lπ¿L∫¿M¿M-¿MJ¿My¿Mó¿Mõ¿Mú¿M‰¿MÛ¿N%¿NG¿N{¿Nô¿Nù¿Nû¿N‹¿N‚¿O1¿OÇ¿Oà¿Oÿ¿P%¿P7¿P=¿Pç¿P¨¿P≤¿Q¿QQ¿Qû¿Q÷¿Q˛¿R¿RJ¿Rh¿Rl¿Rm¿R¶¿R‘¿RÙ¿S&¿SD¿SH¿SI¿S¿SÖ¿S∑¿S„¿T¿T3¿TQ¿TU¿TV¿TÄ¿TÜ¿T’¿U%¿Uf¿Uí¿U±¿U‚¿V ¿V¿V¿V0¿V6¿VÖ¿Væ¿VÏ¿W¿W>¿W\¿W`¿Wa¿Wò¿Wû¿WÔ¿X/¿X5¿XÄ¿Xñ¿Xú¿X¨¿X≤¿Y¿YO¿Yo¿Y∏¿Y÷¿Y⁄¿Y€¿Z+¿ZV¿Z\¿Z¨¿Z˙¿[E¿[v¿[∂¿[ﬂ¿\¿\8¿\<¿\=¿\Ü¿\∫¿\¿]¿]=¿]X¿]t¿]í¿]ñ¿]ó¿]Á¿]˘¿]ˇ¿^O¿^õ¿^·¿^Á¿^˜¿^˝¿_G¿_x¿_ì¿_π¿_‘¿_Ò¿`¿`¿`¿`c¿`u¿`{¿`∂¿`º¿`Ã¿`“¿a%¿aX¿at¿aõ¿a∂¿a‘¿aÚ¿aˆ¿a˜¿bF¿bX¿b^¿bô¿bü¿bØ¿bµ¿c¿c;¿cW¿c~¿cô¿c∑¿c’¿cŸ¿c⁄¿d$¿dX¿dw¿d°¿dº¿dÿ¿dˆ¿d˙¿d˚¿eA¿eà¿eÿ¿f¿f1¿fO¿fS¿fT¿fì¿f≈¿g ¿g,¿gD¿gb¿gf¿gg¿gq¿gr¿g∫¿g“¿gÿ¿gË¿gÓ¿h=¿hM¿hê¿hë¿h‹¿h¯¿iO¿iP¿iw¿ix¿i«¿iÂ¿iÎ¿j/¿jÄ¿jû¿j§¿j¿kA¿ké¿kî¿k§¿k™¿kÎ¿l¿l4¿l_¿l¿lÉ¿lÑ¿l¢¿l£¿l“¿l”¿lÒ¿m¿m+¿m1¿mO¿má¿mÆ¿m…¿m‚¿n ¿n¿n:¿nM¿nS¿ne¿ni¿nj¿nè¿nê¿nŸ¿nÓ¿nÙ¿oC¿oà¿o¡¿p
¿p¿p#¿pY¿pm¿ps¿p§¿p∏¿pæ¿q¿q¿q¿q`¿qt¿qz¿q∆¿q⁄¿q‡¿r:¿rN¿rT¿rä¿rû¿r§¿rµ¿rπ¿r∫¿s¿s¿sZ¿s~¿sÑ¿s”¿t¿t¿t]¿tØ¿tÈ¿u¿u8¿u9¿u\¿uj¿up¿uó¿uÍ¿v ¿vA¿vK¿vU¿vb¿vâ¿vè¿vƒ¿w¿w0¿w]¿wå¿wΩ¿wÓ¿x¿xG¿xp¿x£¿x“¿y¿y8¿y9¿yb¿yä¿y¨¿y≥¿y¥¿yﬂ¿z ¿z¿zD¿zJ¿zz¿z®¿z–¿{¿{4¿{;¿{d¿{ï¿{õ¿{Õ¿|¿|¿|H¿|ã¿|ë¿|∏¿|”¿|Ÿ¿}
¿}/¿}5¿}d¿}ë¿}π¿}Ì¿~¿~#¿~=¿~^¿~d¿~e¿~á¿~¥¿~„¿2¿8¿9¿q¿ª¿Ó¿Ä-¿Äu¿Ä™¿Ä≤¿Ä∏¿Äπ¿Ä˝¿Å¿Å¿Å5¿ÅW¿Å{¿Å≠¿Å›¿Ç?¿Çl¿Ç∏¿Ç‡¿Ç¸¿É¿ÉJ¿Éà¿É¥¿ÉÚ¿Ñ¿ÑD¿Ñ`¿Ñx¿Ñ§¿ÑÃ¿Ñˆ¿Ö"¿ÖN¿Öv¿Öù¿Ö¡¿ÖÔ¿Ü¿ÜC¿Üu¿Üó¿Ü◊¿á¿á3¿áO¿áe¿áç¿áª¿á‹¿á‡¿á‚¿á„¿à2¿àC¿àb¿àè¿àï¿à‚¿â0¿âd¿âv¿âw¿â¶¿â¨¿â˚¿ä¿ä,¿ä.¿ä/¿äZ¿äå¿äø¿äÏ¿ã¿ã¿ãM¿ãn¿ãr¿ã¡¿å¿åI¿åÉ¿åä¿å¶¿å˙¿å˛¿ç+¿çM¿çQ¿çR¿ç¢¿ç§¿ç•¿çˆ¿é¿é¿éd¿é¥¿éÓ¿éÚ¿è>¿èk¿èo¿è¿¿èÏ¿è¿è˛¿ê¿êF¿ê§¿êı¿ë=¿ëd¿ëe¿ë∂¿ë…¿ëœ¿í¿í¿íc¿íí¿í®¿í©¿íµ¿íﬂ¿ì¿ì!¿ìI¿ì†¿ìß¿ì®¿ì˜¿î¿î6¿îU¿î[¿î\¿îÆ¿îΩ¿îÎ¿î¸¿ï1¿ïA¿ïG¿ïH¿ïq¿ïu¿ïv¿ïü¿ï•¿ïı¿ñ¿ñ¿ñc¿ñ≥¿ó¿ó¿ó¿óN¿óO¿ó[¿ó†¿óÀ¿ò¿ò¿ò¿ò¿ò^¿òi¿òm¿ò≥¿òﬂ¿ò„¿ô3¿ôÇ¿ô√¿ô⁄¿ôﬁ¿ö*¿öW¿ö[¿öß¿ö¿õ2¿õh¿õò¿õË¿õÓ¿ú¿úJ¿úy¿ú†¿ú°¿úÔ¿ù?¿ùO¿ùU¿ù£¿ù¿û¿û¿û¿û;¿û[¿ûk¿ûq¿ûö¿ûû¿ûü¿û´¿û¿ü¿üc¿üg¿üi¿üj¿üµ¿üﬂ¿ü„¿†4¿†z¿†~¿†Õ¿°¿°+¿°{¿°≤¿°¥¿°µ¿¢¿¢.¿¢A¿¢`¿¢w¿¢{¿¢î¿¢´¿¢Ø¿¢…¿¢‡¿¢‰¿¢¸¿£¿£¿£2¿£I¿£M¿£f¿£}¿£Å¿£†¿£∑¿£ª¿£‘¿£Î¿£Ô¿§¿§0¿§4¿§L¿§c¿§g¿§Å¿§ô¿§ù¿§∏¿§–¿§‘¿§Ó¿•¿•
¿•"¿•:¿•>¿•U¿•m¿•q¿•ç¿••¿•©¿•»¿•‡¿•‰¿•˝¿¶¿¶¿¶=¿¶U¿¶Y¿¶t¿¶å¿¶ê¿¶™¿¶¬¿¶∆¿¶·¿¶˘¿¶˝¿ß¿ß+¿ß/¿ßG¿ß_¿ßc¿ßÄ¿ßò¿ßú¿ßΩ¿ß’¿ßŸ¿ß˘¿®¿®¿®/¿®G¿®K¿®k¿®É¿®á¿®ß¿®ø¿®√¿®›¿®ı¿®˘¿©¿©   Ä∑/// @docImport 'dart:ui';
///
/// @docImport 'package:flutter/material.dart';
/// @docImport 'package:flutter/rendering.dart';
/// @docImport 'package:flutter_test/flutter_test.dart';
Åg   Å{ÅíÅë Åó  Å¨Ç‰ÇÁ   É   É>  ÉeÉàÉä   É≤   ÉÂ  É˚ÑÑ   Ñ2ÑGÖ0Ö3Ö`ÜÜÜ-Ü?ÜAÜrÜ~ÜÅÜüÜ≤ è◊Ø[è◊ê4/// A static class to conduct semantics role checks.     ê7áêLêL  ê`êoên   óSÄâóhóh  ówóÜóÖ   ó‡Bóıóı  òòò   ò&Çzò;ò;  òIòXòW   ö§ÅØöπöπ  ö öŸöÿ   úWÅNúlúl  ú|úãúä   ù©Çùæùæ  ùÃù€ù⁄   üÀÄˇü‡ü‡  üÔü˛ü˝   †ŒÅ†„†„  †˙°	°   °ÿÉ°°Ì°Ì  ¢¢¢   •}Ä¨•í•í  •°•∞•Ø   ¶-Ä≥¶B¶B  ¶T¶c¶b   ¶‰Å´¶˘¶˘  ßßß   ®ìÇq®®®®  ®√®“®—   ´Çh´´  ´5´D´C   ≠tÅÆ≠â≠â  ≠ó≠¶≠•   Ø&Ç‹Ø;Ø;  ØNØ]Ø\   ≤Å-≤≤  ≤"≤1≤0   ≥7Åó≥C≥C  ≥V≥e≥d   ¥“Ç¶¥Á¥Á  ¥ˇµµ   ∑|Ç†∑ë∑ë  ∑ß∑∂∑µ   ∫ Çã∫5∫5  ∫D∫S∫R   ºØÅQºƒºƒ  ºŸºËºÁ   æÅ,ææ  æ*æ9æ8    ø4Ñ˝ø4¿ A·Ç¶/// A tag for a [SemanticsNode].
///
/// Tags can be interpreted by the parent of a [SemanticsNode]
/// and depending on the presence of a tag the parent can for example decide
/// how to add the tagged node as a child. Tags are not sent to the engine.
///
/// As an example, the [RenderSemanticsGestureHandler] uses tags to determine
/// if a child node should be excluded from the scrollable area for semantic
/// purposes.
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical. ¿ AÚÅE¿ C ¿ C¿ C+ Å/// Creates a [SemanticsTag].
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical.¿ C,	¿ C2¿ C1   ¿ C;Äö¿ C—¿ C—ÄÇ/// A human-readable name for this tag used for debugging.
///
/// This string is not used to determine if two tags are identical.   ¿ C⁄U¿ CÌ¿ CÌ   ¿ C⁄¿ C€ ¿ D3á(¿ D3¿ E«Åç/// The result that contains the arrangement for the child
/// [SemanticsConfiguration]s.
///
/// When the [PipelineOwner] builds the semantics tree, it uses the returned
/// [ChildSemanticsConfigurationsResult] from
/// [SemanticsConfiguration.childConfigurationsDelegate] to decide how semantics nodes
/// should form.
///
/// Use [ChildSemanticsConfigurationsResultBuilder] to build the result. ¿ EÓL¿ EÓ¿ F¿ F¿ F¿ F ¿ F¿ F¿ F  ¿ F!¿ F'¿ F&   ¿ F>Åy¿ G∞¿ G∞ÅB/// Returns the [SemanticsConfiguration]s that are supposed to be merged into
/// the parent semantics node.
///
/// [SemanticsConfiguration]s that are either semantics boundaries or are
/// conflicting with other [SemanticsConfiguration]s will form explicit
/// semantics nodes. All others will be merged into the parent. ¿ GºÉú¿ KF¿ KFÉD/// The groups of child semantics configurations that want to merge together
/// and form a sibling [SemanticsNode].
///
/// All the [SemanticsConfiguration]s in a given group that are either
/// semantics boundaries or are conflicting with other
/// [SemanticsConfiguration]s of the same group will be excluded from the
/// sibling merge group and form independent semantics nodes as usual.
///
/// The result [SemanticsNode]s from the merges are attached as the sibling
/// nodes of the immediate parent semantics node. For example, a `RenderObjectA`
/// has a rendering child, `RenderObjectB`. If both of them form their own
/// semantics nodes, `SemanticsNodeA` and `SemanticsNodeB`, any semantics node
/// created from sibling merge groups of `RenderObjectB` will be attach to
/// `SemanticsNodeA` as a sibling of `SemanticsNodeB`.     ¿ K]àO¿ K]¿ LƒÅ`/// The builder to build a [ChildSemanticsConfigurationsResult] based on its
/// annotations.
///
/// To use this builder, one can use [markAsMergeUp] and
/// [markAsSiblingMergeGroup] to annotate the arrangement of
/// [SemanticsConfiguration]s. Once all the configs are annotated, use [build]
/// to generate the [ChildSemanticsConfigurationsResult]. ¿ LÚi¿ M/ ¿ M/¿ MX :/// Creates a [ChildSemanticsConfigurationsResultBuilder].  ¿ M_H¿ MÇ¿ MÇ ¿ M•¿ M¶¿ Mç¿ M§¿ Mé¿ M´_¿ M‘¿ M‘ ¿ N¿ N	¿ MÍ¿ N¿ MÎ¿ MÔ¿ N¿ M  ¿ NÅ1¿ N˚¿ N˚Ä‹/// Marks the [SemanticsConfiguration] to be merged into the parent semantics
/// node.
///
/// The [SemanticsConfiguration] will be added to the
/// [ChildSemanticsConfigurationsResult.mergeUp] that this builder builds. ¿ O	¿ O!¿ O    ¿ ODÅz¿ PV¿ PVÅ/// Marks a group of [SemanticsConfiguration]s to merge together
/// and form a sibling [SemanticsNode].
///
/// The group of [SemanticsConfiguration]s will be added to the
/// [ChildSemanticsConfigurationsResult.siblingMergeGroups] that this builder builds. ¿ Pn$¿ På¿ Pã   ¿ P¬ÇË¿ Q3¿ Q3K/// Builds a [ChildSemanticsConfigurationsResult] contains the arrangement.    ¿ SÆåã¿ SÆ¿ WÑÉƒ/// An identifier of a custom semantics action.
///
/// Custom semantics actions can be provided to make complex user
/// interactions more accessible. For instance, if an application has a
/// drag-and-drop list that requires the user to press and hold an item
/// to move it, users interacting with the application using a hardware
/// switch may have difficulty. This can be made accessible by creating custom
/// actions and pairing them with handlers that move a list item up or down in
/// the list.
///
/// In Android, these actions are presented in the local context menu. In iOS,
/// these are presented in the radial context menu.
///
/// Localization and text direction do not automatically apply to the provided
/// label or hint.
///
/// Instances of this class should either be instantiated with const or
/// new instances cached in static fields.
///
/// See also:
///
///  * [SemanticsProperties], where the handler for a custom action is provided. ¿ WûÄ‘¿ W¸ ¿ W¸¿ X Q/// Creates a new [CustomSemanticsAction].
///
/// The [label] must not be empty.¿ X¿ X)¿ X(  ¿ X6¿ X<¿ XH¿ XC¿ X=¿ XF¿ XV¿ XQ¿ XX¿ Xk¿ Xd¿ Xm¿ XvÅ/¿ Y¿ Y¿ Y¿ Y*¿ Y/// Creates a new [CustomSemanticsAction] that overrides a standard semantics
/// action.
///
/// The [hint] must not be empty.¿ Y1¿ YG¿ YF  ¿ YP$¿ Yo¿ Yn  	¿ Y}¿ YÉ¿ Yé¿ Yâ¿ YÑ¿ Yå¿ Yû¿ Yò¿ Y†¿ Y©Q¿ Yı¿ Yı;/// The user readable name of this custom semantics action. ¿ YˇN¿ ZI¿ ZI9/// The hint description of this custom semantics action. ¿ ZRW¿ Z£¿ Z£7/// The standard semantics action this action replaces. ¿ \ﬁ¿ \È¿ \È ¿ \Û¿ \¯V¿ ]%¿ ]% ¿ ]L¿ ]M¿ ]0¿ ]K¿ ]1¿ ]6¿ ]RR¿ ]¿ ] ¿ ]¢¿ ]£¿ ]Ü¿ ]°¿ ]á¿ ]û¿ ZÆA¿ Z¬¿ Z¬   ¿ ZÆ¿ ZØ ¿ ZÛÅ¿ [¿ [  ¿ [¿ [¿ [  ¿ ZÛ¿ ZÙ¿ [¯ÄÄ¿ \¿ \   ¿ [¯¿ [˘¿ ]©Å¿ ]„¿ ]„,/// Get the identifier for a given `action`. ¿ ]Ò¿ ^¿ ^   ¿ ^√}¿ _¿ _,/// Get the `action` for a given identifier. ¿ _¿ _¿ _   ¿ _DÄÛ¿ _∂¿ _∂N/// Resets internal state between tests. Does nothing if asserts are disabled.  ¿ _ï¿ _ñ¿ Ws¿ Wt¿ `;ä-¿ `;¿ `Ñ7/// A string that carries a list of [StringAttribute]s. ¿ `ôÇ§¿ a| ¿ a|¿ aå Ä‘/// Creates a attributed string.
///
/// The [TextRange] in the [attributes] must be inside the length of the
/// [string].
///
/// The [attributes] must not be changed after the attributed string is
/// created.¿ aç¿ aì¿ aí  ¿ aõ+¿ a°¿ a†  ¿ a≠¿ aƒ¿ a≈¿ a≥¿ a√¿ a¥¿ aœ¿ a’¿ a˝¿ aË¿ a÷¿ a‹¿ a›¿ aÎ¿ aı¿ aˆ¿ b¿ b¿ c;¿ b¿ c8¿ c9¿ c:¿ cAK¿ cÜ¿ cÜ5/// The plain string stored in the attributed string. ¿ cëÄò¿ d¿ dk/// The attributes this string carries.
///
/// The list must not be modified after this string is created. ¿ iû@¿ i≤¿ i≤   ¿ iû¿ iü ¿ d.Ñ3¿ e+¿ e+Ä⁄/// Returns a new [AttributedString] by concatenate the operands
///
/// The string attribute list of the returned [AttributedString] will contains
/// the string attributes from both operands with updated text ranges. ¿ e-¿ e?¿ e>   ¿ heÅ5¿ hÀ¿ hÀI/// Two [AttributedString]s are equal if their string and attributes are. ¿ hŒ¿ h÷¿ h’  ¿ h±¿ h≤¿ i‚ÄÑ¿ iı¿ iı   ¿ i‚¿ i„¿ `s¿ `t¿ jjÖì¿ jj¿ j¯Äá/// A [DiagnosticsProperty] for [AttributedString]s, which shows a string
/// when there are no attributes, and more details otherwise. ¿ kCÅF¿ kÃ ¿ kÃ¿ k‰ ÄÇ/// Create a diagnostics property for an [AttributedString] object.
///
/// Such properties are used with [SemanticsData] objects.¿ kÍ¿ k¯¿ k˜  ¿ l¿ l¿ l  ¿ l¿ l¿ l  ¿ l(¿ l.¿ l-  ¿ lH¿ lO¿ lN  ¿ l`¿ lg¿ lf  ¿ lq¿ lx¿ lw  ¿ l=¿ lçÄÀ¿ mK¿ mKÄ™/// Whether to show the property when the [value] is an [AttributedString]
/// whose [AttributedString.string] is the empty string.
///
/// This overrides [defaultValue]. ¿ m]ÄÇ¿ mr¿ mr   ¿ m]¿ m^ ¿ m„Ç¿ mˆ¿ mˆ  ¿ n*¿ n¿ n  ¿ m„¿ m‰ ¿ pBåË¿ pB¿ s’Éê/// Builder for creating semantically correct concatenated labels with proper
/// text direction handling and spacing.
///
/// This builder helps address the complexity of concatenating multiple text
/// parts while handling language-specific nuances like RTL vs LTR text direction
/// and proper spacing.
///
/// Example usage:
/// ```dart
/// SemanticsLabelBuilder builder = SemanticsLabelBuilder()
///   ..addPart('Hello')
///   ..addPart('world');
/// String label = builder.build(); // "Hello world"
/// ```
///
/// For multilingual text with proper RTL support:
/// ```dart
/// SemanticsLabelBuilder builder = SemanticsLabelBuilder(textDirection: TextDirection.ltr)
///   ..addPart('Welcome', textDirection: TextDirection.ltr)
///   ..addPart('ŸÖÿ±ÿ≠ÿ®ÿß', textDirection: TextDirection.rtl); // Arabic
/// String label = builder.build(); // "Welcome \u202BŸÖÿ±ÿ≠ÿ®ÿß\u202C" (with Unicode embedding)
/// ``` ¿ sÔÅ¿ t√ ¿ t√¿ tÿ ÄÀ/// Creates a new [SemanticsLabelBuilder].
///
/// The [separator] is used between text parts (defaults to space).
/// The [textDirection] specifies the overall text direction for the concatenated label.¿ t⁄¿ t‡¿ tﬂ  ¿ t¿ tˆ¿ tı  ¿ tÎ¿ u	C¿ uC¿ uC*/// The separator used between text parts. ¿ uQ_¿ u£¿ u£:/// The overall text direction for the concatenated label. ¿ uµ.¿ uÃ¿ uÃ ¿ u·¿ u‚¿ u’¿ u‡¿ u÷¿ wc¿ wM¿ wM=/// Returns true if no parts have been added to this builder.   ¿ wkY¿ w¨¿ w¨6/// Returns the number of parts added to this builder.    ¿ uËÅ¿ vy¿ vyÄÉ/// Adds a text part.
///
/// If [textDirection] is specified, it will be used for this specific part.
/// Empty parts are ignored. ¿ vÅ¿ vâ¿ và  ¿ vê¿ v†¿ vü   ¿ w»ÑÚ¿ x{¿ x{Ä£/// Builds and returns the concatenated label from the added parts.
///
/// This method concatenates all parts with proper text direction handling
/// and spacing.   ¿ |æj¿ }¿ }A/// Clears all parts from this builder, allowing it to be reused.    ¿ },¿ D.¿ },¿ ~∫Å|/// Summary information about a [SemanticsNode] object.
///
/// A semantics node might [SemanticsNode.mergeAllDescendantsIntoThisNode],
/// which means the individual fields on the semantics node don't fully describe
/// the semantics at that node. This data structure contains the full semantics
/// for the node.
///
/// Typically obtained from [SemanticsNode.getSemanticsData]. ¿ ~‡â ¿ X ¿ X¿ e q/// Creates a semantics data object.
///
/// If [label] is not empty, then [textDirection] must also not be null.¿ l¿ {¿ z  ¿ è¿ û¿ ù  ¿ ™¿ π¿ ∏  ¿ »¿ ◊¿ ÷  ¿ Î¿ ˙¿ ˘  ¿ Ä&¿ Ä¿ Ä  ¿ Ä:&¿ ÄI¿ ÄH  ¿ Äf¿ Äu¿ Ät  ¿ Äà¿ Äó¿ Äñ  ¿ Ä£¿ Ä≤¿ Ä±  ¿ Äƒ¿ Ä”¿ Ä“  ¿ Ä‹¿ ÄÎ¿ ÄÍ  ¿ Ä˝¿ Å¿ Å  ¿ Å¿ Å+¿ Å*  ¿ Å@¿ ÅO¿ ÅN  ¿ Åb¿ Åq¿ Åp  ¿ ÅÖ¿ Åî¿ Åì  ¿ Å®¿ Å∑¿ Å∂  ¿ Å ¿ ÅŸ¿ Åÿ  ¿ ÅÏ ¿ Å˚¿ Å˙  ¿ Ç¿ Ç!¿ Ç   ¿ Ç2¿ ÇA¿ Ç@  ¿ ÇM¿ Ç\¿ Ç[  ¿ Çe¿ Çt¿ Çs  ¿ ÇÜ¿ Çï¿ Çî  ¿ Ç™¿ Çπ¿ Ç∏  ¿ Ç«¿ Ç÷¿ Ç’  ¿ Ç·	¿ ÇÁ¿ ÇÊ  ¿ Ç¿ Çˆ¿ Çı  ¿ É¿ É
¿ É	  Äã¿ É*¿ É0¿ Éa¿ Éø¿ ÉI¿ ÉC¿ É;¿ ÉF¿ ÉZ¿ ÉL¿ É]¿ Él¿ Éí¿ Éì¿ Éö¿ É…¿ Éœ¿ Ñ¿ Ñ|¿ É˜¿ ÉÒ¿ É⁄¿ ÉÈ¿ ÉÍ¿ ÉÙ¿ Ñ¿ É˙¿ Ñ¿ Ñ¿ Ñ>¿ ÑV¿ Ñ@¿ ÑO¿ ÑP¿ ÑW¿ ÑÜ¿ Ñå¿ ÑÃ¿ Ö9¿ Ñ¥¿ ÑÆ¿ Ñó¿ Ñ¶¿ Ñß¿ Ñ±¿ Ñ≈¿ Ñ∑¿ Ñ»¿ Ñ◊¿ Ñ˚¿ Ö¿ Ñ˝¿ Ö¿ Ö¿ Ö¿ ÖC¿ ÖI¿ Öí¿ Ü¿ Öz¿ Öt¿ ÖT¿ Öl¿ Öm¿ Öw¿ Öã¿ Ö}¿ Öé¿ Öù¿ Ö ¿ ÖÎ¿ ÖÃ¿ Ö‰¿ ÖÂ¿ ÖÏ¿ Ü¿ Ü!¿ Üj¿ ÜÈ¿ ÜR¿ ÜL¿ Ü,¿ ÜD¿ ÜE¿ ÜO¿ Üc¿ ÜU¿ Üf¿ Üu¿ Ü¢¿ Ü√¿ Ü§¿ Üº¿ ÜΩ¿ Üƒ¿ ÜÛ¿ Ü˘¿ á8¿ á£¿ á ¿ á¿ á¿ á¿ á¿ á¿ á1¿ á#¿ á4¿ áC¿ áf¿ á}¿ áh¿ áv¿ áw¿ á~¿ á≠¿ á≥¿ á⁄¿ à¿ á∆¿ á¡¿ á¥¿ áƒ¿ á÷¿ á…¿ áŸ¿ á‹¿ à¿ à¿ àG¿ à®¿ à.¿ à&¿ à¿ à)¿ à1¿ à@¿ àA¿ àR¿ âè;¿ âª¿ âª/// Semantics flags. ¿ âœR¿ ä¿ ä>/// A bit field of [SemanticsAction]s that apply to this node. ¿ ä&W¿ äs¿ äs=/// {@macro flutter.semantics.SemanticsProperties.identifier} ¿ ãoÅ¿ åf¿ åfÄ”/// A textual description for the current label of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text. ¿ çgÅ¿ é^¿ é^Ä”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text. ¿ è†Å8¿ ê¿¿ ê¿Ä¸/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text. ¿ íÅ8¿ ì+¿ ì+Ä¸/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text. ¿ îAÅ¿ ïF¿ ïFÄ·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text. ¿ ïYÄà¿ ï⁄¿ ï⁄m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection]. ¿ ïÊÄÔ¿ ñ…¿ ñ…Ä–/// Indicates that this subtree represents a heading.
///
/// A value of 0 indicates that it is not a heading. The value should be a
/// number between 1 and 6, indicating the hierarchical level as a heading. ¿ ñ⁄Äñ¿ óc¿ óco/// The reading direction for the text in [label], [value],
/// [increasedValue], [decreasedValue], and [hint]. ¿ óuÄü¿ ò¿ òx/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field. ¿ òÄ∆¿ òœ¿ òœÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null. ¿ ò‰\¿ ô5¿ ô5C/// The index of the first visible semantic child of a scroll node. ¿ ôEÅÃ¿ õ¿ õÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken. ¿ õÅ.¿ ú5¿ ú5Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken. ¿ úIÅ.¿ ùh¿ ùhÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken. ¿ ù|Å…¿ ü7¿ ü7Åô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS. ¿ üJÅv¿ †≤¿ †≤ÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field. ¿ †≈Åg¿ ¢¿ ¢Å9/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. This must
/// be set when [maxValueLength] is set. ¿ ¢1Äü¿ ¢…¿ ¢…ÄÇ/// The URL that this node links to.
///
/// See also:
///
/// * [SemanticsFlag.isLink], which indicates that this node is a link. ¿ ¢’N¿ £¿ £</// The bounding box for this node in its coordinate system. ¿ £(Y¿ £}¿ £}9/// The set of [SemanticsTag]s associated with this node. ¿ £ÜÅ¿ §ú¿ §úÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent). ¿ §™Å0¿ •¬¿ •¬Äˆ/// The identifiers for the custom semantics actions and standard action
/// overrides for this node.
///
/// The list must be sorted in increasing order.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions. ¿ •ﬂL¿ ¶'¿ ¶'1/// {@macro flutter.semantics.SemanticsNode.role} ¿ ¶0Ä¶¿ ¶…¿ ¶…/// {@macro flutter.semantics.SemanticsNode.controlsNodes}
///
/// {@macro flutter.semantics.SemanticsProperties.controlsNodes} ¿ ¶€v¿ ßA¿ ßAC/// {@macro flutter.semantics.SemanticsProperties.validationResult} ¿ ßV[¿ ß®¿ ß®6/// {@macro flutter.semantics.SemanticsNode.inputType} ¿ ß∂Äµ¿ ®e¿ ®eÄò/// The locale for this semantics node.
///
/// Assistive technologies uses this property to correctly interpret the
/// content of this semantics node. ¿ àÆÄ›¿ âf¿ âf</// A bit field of [SemanticsFlag]s that apply to this node.  ¿ àÌ¿ àÓ¿ à¯¿ âZ¿ à˛¿ â"¿ äÇÄÈ¿ ãK¿ ãKÄ≥/// A textual description for the current label of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿ åzÄÈ¿ çC¿ çCÄ≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿ érÅ*¿ èj¿ èjÄ‡/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿ ê›Å*¿ ë’¿ ë’Ä‡/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿ ìHÄı¿ î¿ îÄ¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿ º“Ç‰¿ ºÊ¿ ºÊ   ¿ º“¿ º” ¿ ®pÄﬁ¿ ©¿ ©,/// Whether [flags] contains the given flag. ¿ ©¿ ©,¿ ©+  ¿ ®ü¿ ®†¿ ®™¿ ©¿ ®∞¿ ®‘¿ ©R{¿ ©ä¿ ©ä0/// Whether [actions] contains the given action. ¿ ©î¿ ©•¿ ©§   ¿ ©—O¿ ©‰¿ ©‰   ¿ ©—¿ ©“¿ ™$åŒ¿ ™5¿ ™5  ¿ ™I&¿ ™f¿ ™e  ¿ ™$¿ ™%¿ ∂ˆÖÿ¿ ∑¿ ∑  ¿ ∑¿ ∑¿ ∑  ¿ ∂ˆ¿ ∂˜¿ ø∫Åû¿ ø∆¿ ø∆  ¿ øÿ¿ ø‰¿ ø„  ¿ øÈ¿ øı¿ øÙ   ¿ ~©¿ ~™¿ ¡\Åq¿ ¡\¿ ¡b  ¿ ¡≠ÄÜ¿ ¡≠ ¿ ¡≠¿ ¡…  ¿ ¡–
¿ ¡◊¿ ¡÷  ¿ ¡‡¿ ¡¿ ¡Ô  ¿ ¡˙¿ ¬
¿ ¬	  ¿ ¬¿ ¬#¿ ¬"   ¿ ¬7(¿ ¬U¿ ¬U    ¿ ¬dg¿ ¬Ü¿ ¬Ü   ¿ ¬d¿ ¬e ¿ ¬œá¿ ¬œ¿ √gÄÜ/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On iOS, these values are always ignored. ¿ √ùÄ≤¿ √Õ ¿ √Õ¿ √„ '/// Creates a semantics hint overrides.¿ √Â¿ √Î¿ √Í  ¿ √ı¿ √˚¿ √˙  ¿ ƒ¿ ƒ¿ ƒ(¿ ƒ#¿ ƒ¿ ƒ&¿ ƒ1¿ ƒ7¿ ƒM¿ ƒH¿ ƒ8¿ ƒK¿ ƒSÅ8¿ ≈Ç¿ ≈ÇÅ/// The hint text for a tap action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a tap occurs, not the
/// manner in which a tap is accomplished.
///
/// Bad: 'Double tap to show movies'.
/// Good: 'show movies'. ¿ ≈êÅ`¿ ∆·¿ ∆·Å0/// The hint text for a long press action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a long press occurs, not
/// the manner in which the long press is accomplished.
///
/// Bad: 'Double tap and hold to show tooltip'.
/// Good: 'show tooltip'. ¿ ∆ıv¿ «0¿ «0//// Whether there are any non-null hint values.   ¿ «oH¿ «É¿ «É   ¿ «o¿ «p ¿ «ªÄ˛¿ «’¿ «’  ¿ «ÿ¿ «‡¿ «ﬂ  ¿ «ª¿ «º¿ »ΩÅ)¿ »Œ¿ »Œ  ¿ »‚&¿ »ˇ¿ »˛  ¿ »Ω¿ »æ¿ √V¿ √W¿ …Í¿ ú÷¿ …Í¿  «ÄÀ/// Contains properties used by assistive technologies to make the application
/// more accessible.
///
/// The properties of this class are used to generate a [SemanticsNode]s in the
/// semantics tree. ¿  ˙äü¿ À% ¿ À%¿ À8 "/// Creates a semantic annotation.F¿ À?¿ ÀE¿ ÀD  ¿ ÀQ¿ ÀW¿ ÀV  ¿ Àc
¿ Ài¿ Àh  ¿ Às¿ Ày¿ Àx  ¿ ÀÜ¿ Àå¿ Àã  ¿ Àô¿ Àü¿ Àû  ¿ À´¿ À±¿ À∞  ¿ Àº	¿ À¬¿ À¡  ¿ ÀÀ¿ À—¿ À–  ¿ À›¿ À„¿ À‚  ¿ ÀÓ¿ ÀÙ¿ ÀÛ  ¿ Ã¿ Ã¿ Ã
  ¿ Ã¿ Ã¿ Ã  ¿ Ã*¿ Ã0¿ Ã/  ¿ Ã@¿ ÃF¿ ÃE  ¿ ÃS¿ ÃY¿ ÃX  ¿ Ãg¿ Ãm¿ Ãl  ¿ Ãy¿ Ã¿ Ã~  ¿ Ãú¿ Ã¢¿ Ã°  ¿ Ã≠¿ Ã≥¿ Ã≤  ¿ Ã¿¿ Ã∆¿ Ã≈  ¿ Ã‘¿ Ã⁄¿ ÃŸ  ¿ ÃÍ¿ Ã¿ ÃÔ  ¿ Ãˇ
¿ Õ¿ Õ  ¿ Õ¿ Õ¿ Õ  ¿ Õ$¿ Õ*¿ Õ)  ¿ Õ9¿ Õ?¿ Õ>  ¿ ÕR¿ ÕX¿ ÕW  ¿ Õo¿ Õu¿ Õt  ¿ ÕÑ
¿ Õä¿ Õâ  ¿ Õî¿ Õö¿ Õô  ¿ ÕÆ
¿ Õ¥¿ Õ≥  ¿ Õæ¿ Õƒ¿ Õ√  ¿ Õÿ¿ Õﬁ¿ Õ›  ¿ ÕÒ¿ Õ˜¿ Õˆ  ¿ Œ¿ Œ¿ Œ  ¿ Œ-¿ Œ3¿ Œ2  ¿ ŒP	¿ ŒV¿ ŒU  ¿ Œ_¿ Œe¿ Œd  ¿ Œq¿ Œw¿ Œv  ¿ Œä¿ Œê¿ Œè  ¿ Œ¢¿ Œ®¿ Œß  ¿ Œ∫¿ Œ¿¿ Œø  ¿ ŒÃ¿ Œ“¿ Œ—  ¿ ŒÂ	¿ ŒÎ¿ ŒÍ  ¿ ŒÙ¿ Œ˙¿ Œ˘  ¿ œ¿ œ¿ œ  ¿ œ 6¿ œ&¿ œ%  ¿ œ\
¿ œb¿ œa  ¿ œl¿ œr¿ œq  ¿ œÇ¿ œà¿ œá  ¿ œô¿ œü¿ œû  ¿ œ±¿ œ∑¿ œ∂  ¿ œ∆¿ œÃ¿ œÀ  ¿ œ›¿ œ„¿ œ‚  ¿ œÚ¿ œ¯¿ œ˜  ¿ –¿ –¿ –  ¿ –
¿ –¿ –  ¿ –(¿ –.¿ –-  ¿ –:#¿ –@¿ –?  ¿ –c$¿ –i¿ –h  ¿ –ç¿ –ì¿ –í  ¿ –±¿ –∑¿ –∂  ¿ –÷¿ –‹¿ –€  ¿ –Ô¿ –ı¿ –Ù  ¿ — ¿ —	¿ —  ¿ —) ¿ —/¿ —.  ¿ —O¿ —U¿ —T  ¿ —a¿ —g¿ —f  ¿ —u¿ —{¿ —z  _¿ œ8¿ œQ¿ œR¿ —ô¿ —ü¿ —“¿ “¿ —∏¿ —∞¿ —™¿ —≥¿ —À¿ —ª¿ —Œ¿ —›¿ “)¿ “/¿ “b¿ “Ø¿ “H¿ “@¿ “:¿ “C¿ “[¿ “K¿ “^¿ “m¿ “π¿ “ø¿ ”¿ ”c¿ “·¿ “Ÿ¿ “ ¿ “‹¿ “˝¿ “‰¿ ” ¿ ”¿ ”m¿ ”s¿ ”∏¿ ‘¿ ”ï¿ ”ç¿ ”~¿ ”ê¿ ”±¿ ”ò¿ ”¥¿ ”√¿ ‘!¿ ‘'¿ ‘X¿ ‘£¿ ‘?¿ ‘7¿ ‘2¿ ‘:¿ ‘Q¿ ‘B¿ ‘T¿ ‘c¿ ‘≠¿ ‘≥¿ ‘˝¿ ’8¿ ‘”¿ ‘À¿ ‘æ¿ ‘Œ¿ ‘÷¿ ‘¸¿ ‘Ë¿ ‘‰¿ ‘◊¿ ‘Ê¿ ‘¯¿ ‘Î¿ ‘˚¿ ’¿ ’B¿ ’H¿ ’k¿ ’ó¿ ’Y¿ ’Q¿ ’I¿ ’T¿ ’\¿ ’j¿ ’b¿ ’]¿ ’e¿ ’mF¿ ’ùÅ[¿ ÷Ò¿ ÷ÒÅ;/// If non-null, indicates that this subtree represents something that can be
/// in an enabled or disabled state.
///
/// For example, a button that a user can currently interact with would set
/// this field to true. A button that currently does not respond to user
/// interactions would set this field to false. ¿ ÷˝Åú¿ ÿí¿ ÿíÅv/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "checked" state, and what its current
/// state is.
///
/// When the [Checkbox.value] of a tristate Checkbox is null,
/// indicating a mixed-state, this value shall be false, in which
/// case, [mixed] will be true.
///
/// This is mutually exclusive with [toggled] and [mixed]. ¿ ÿûÅ‚¿ ⁄{¿ ⁄{Åº/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "half-checked" state or similar, and
/// whether it is currently in this half-checked state.
///
/// This must be null when [Checkbox.tristate] is false, or
/// when the widget is not a checkbox. When a tristate
/// checkbox is fully unchecked/checked, this value shall
/// be false.
///
/// This is mutually exclusive with [checked] and [toggled]. ¿ ⁄ÖÅ%¿ €¢¿ €¢Å/// If non-null, indicates that this subtree represents something
/// that can be in an "expanded" or "collapsed" state.
///
/// For example, if a [SubmenuButton] is opened, this property
/// should be set to true; otherwise, this property should be
/// false. ¿ €ØÄÒ¿ ‹ô¿ ‹ôÄ”/// If non-null, indicates that this subtree represents a toggle switch
/// or similar widget with an "on" state, and what its current
/// state is.
///
/// This is mutually exclusive with [checked] and [mixed]. ¿ ‹•Å&¿ ›√¿ ›√Å/// If non-null indicates that this subtree represents something that can be
/// in a selected or unselected state, and what its current state is.
///
/// The active tab in a tab bar for example is considered "selected", whereas
/// all other tabs are unselected. ¿ ›–Äª¿ ﬁÖ¿ ﬁÖÄ†/// If non-null, indicates that this subtree represents a button.
///
/// TalkBack/VoiceOver provides users with the hint "button" when a button
/// is focused. ¿ ﬁêÅ ¿ ﬂå¿ ﬂåÄÂ/// If non-null, indicates that this subtree represents a link.
///
/// iOS's VoiceOver provides users with a unique hint when a link is focused.
/// Android's Talkback will announce a link hint the same way it does a
/// button. ¿ ﬂïÅ¿ ‡≠¿ ‡≠Å/// If non-null, indicates that this subtree represents a header.
///
/// A header divides into sections. For example, an address book application
/// might define headers A, B, C, etc. to divide the list of alphabetically
/// sorted contacts into sections. ¿ ‡∏Äø¿ ·n¿ ·nÄ°/// If non-null, indicates that this subtree represents a text field.
///
/// TalkBack/VoiceOver provide special affordances to enter text into a
/// text field. ¿ ·|Äº¿ ‚2¿ ‚2Ä°/// If non-null, indicates that this subtree represents a slider.
///
/// Talkback/\VoiceOver provides users with the hint "slider" when a
/// slider is focused. ¿ ‚=a¿ ‚ì¿ ‚ìG/// If non-null, indicates that this subtree represents a keyboard key. ¿ ‚£Ä–¿ „k¿ „kÄ±/// If non-null, indicates that this subtree is read only.
///
/// Only applicable when [textField] is true.
///
/// TalkBack/VoiceOver will treat it as non-editable text field. ¿ „xÅ’¿ ÂD¿ ÂDÅØ/// If non-null, whether the node is able to hold input focus.
///
/// If [focusable] is set to false, then [focused] must not be true.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ ÂRÇ¿ Áh¿ ÁhÅ˜/// If non-null, whether the node currently holds input focus.
///
/// At most one node in the tree should hold input focus at any point in time,
/// and it should not be set to true if [focusable] is false.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ ÁtÅ¿ Ëd¿ ËdÄ€/// If non-null, whether a semantic node is in a mutually exclusive group.
///
/// For example, a radio button is in a mutually exclusive group because only
/// one radio button in that group can be marked as [checked]. ¿ ËÅÉF¿ Î¡¿ Î¡É/// If non-null, whether the node is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS. ¿ ÎÃÅ3¿ Ï˜¿ Ï˜Å/// If non-null, whether [value] should be obscured.
///
/// This option is usually set in combination with [textField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out the [value]. ¿ ÌÅ7¿ Ó2¿ Ó2Å/// Whether the [value] is coming from a field that supports multiline text
/// editing.
///
/// This option is only meaningful when [textField] is true to indicate
/// whether it's a single-line or multiline text field.
///
/// This option is null when [textField] is false. ¿ Ó@Å—¿ ¿ Å£/// If non-null, whether the node corresponds to the root of a subtree for
/// which a route name should be announced.
///
/// Generally, this is set in combination with
/// [SemanticsConfiguration.explicitChildNodes], since nodes with this flag
/// are not considered focusable by Android or iOS.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute] for a description of how the announced
///    value is selected. ¿ ÄŒ¿ ⁄¿ ⁄Ä≠/// If non-null, whether the node contains the semantic label for a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute] for a description of how the name is used. ¿ ÈÄ¨¿ Òê¿ ÒêÄê/// If non-null, whether the node represents an image.
///
/// See also:
///
///  * [SemanticsFlag.isImage], for the flag this setting controls. ¿ ÒöÉ¢¿ ı2¿ ı2Éi/// If non-null, whether the node should be considered a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag this setting controls.
///  * [SemanticsConfiguration.liveRegion], for a full description of a live region. ¿ ıAÇu¿ ˜¨¿ ˜¨ÇB/// If non-null, whether the node should be considered required.
///
/// If true, user input is required on the semantics node before a form can
/// be submitted. If false, the node is optional before a form can be
/// submitted. If null, the node does not have a required semantics.
///
/// For example, a login form requires its email text field to be non-empty.
///
/// On web, this will set a `aria-required` attribute on the DOM element
/// that corresponds to the semantics node.
///
/// See also:
///
///  * [SemanticsFlag.isRequired], for the flag this setting controls. ¿ ˜ªÅg¿ ˘¿ ˘Å=/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Defaults to null,
/// which means no limit is imposed on the text field. ¿ ˘'ÅS¿ ˙h¿ ˙hÅ%/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Must be set when
/// [maxValueLength] is set. ¿ ˙ÉX¿ ˝Õ¿ ˝ÕÉ/// {@template flutter.semantics.SemanticsProperties.identifier}
/// Provides an identifier for the semantics node in native accessibility hierarchy.
///
/// This value is not exposed to the users of the app.
///
/// It's usually used for UI testing with tools that work by querying the
/// native accessibility, like UIAutomator, XCUITest, or Appium. It can be
/// matched with [CommonFinders.bySemanticsIdentifier].
///
/// On Android, this is used for `AccessibilityNodeInfo.setViewIdResourceName`.
/// It'll be appear in accessibility hierarchy as `resource-id`.
///
/// On iOS, this will set `UIAccessibilityElement.accessibilityIdentifier`.
///
/// On web, this will set a `flt-semantics-identifier` attribute on the DOM element
/// that corresponds to the semantics node.
/// {@endtemplate} ¿ ˝‹Ç¿ ˇı¿ ˇıÅ/// Provides a textual description of the widget.
///
/// If a label is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.label] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ ˇˇÇV¿F¿FÇ/// Provides an [AttributedString] version of textual description of the widget.
///
/// If a [attributedLabel] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedLabel] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [label] for a plain string version of this property. ¿ZÇ+¿Ä¿ÄÅ˝/// Provides a textual description of the value of the widget.
///
/// If a value is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.value] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿äÇi¿‰¿‰Ç%/// Provides an [AttributedString] version of textual description of the value
/// of the widget.
///
/// If a [attributedValue] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [value] for a plain string version of this property. ¿¯Ç◊¿	¡¿	¡Çö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.increase] action has been performed on this widget.
///
/// If a value is provided, [onIncrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.increasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedIncreasedValue] for an [AttributedString] version of this
///    property. ¿	‘Ç˝¿π¿πÇÆ/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.increase] action has been performed on this widget.
///
/// If a [attributedIncreasedValue] is provided, [onIncrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedIncreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [increasedValue] for a plain string version of this property. ¿÷Ç◊¿ü¿üÇö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a value is provided, [onDecrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.decreasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedDecreasedValue] for an [AttributedString] version of this
///    property. ¿≤É	¿£¿£Ç∫/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a [attributedDecreasedValue] is provided, [onDecrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null/// provided.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedDecreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [decreasedValue] for a plain string version of this property. ¿¿ÇI¿¿Ç/// Provides a brief textual description of the result of an action performed
/// on the widget.
///
/// If a hint is provided, there must either be an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.hint] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedHint] for an [AttributedString] version of this property. ¿ÇÅ¿Å¿ÅÇ>/// Provides an [AttributedString] version of brief textual description of the
/// result of an action performed on the widget.
///
/// If a [attributedHint] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedHint] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [hint] for a plain string version of this property. ¿îÅ©¿6¿6ÅÉ/// Provides a textual description of the widget's tooltip.
///
/// In Android, this property sets the `AccessibilityNodeInfo.setTooltipText`.
/// In iOS, this property is appended to the end of the
/// `UIAccessibilityElement.accessibilityLabel`.
///
/// If a [tooltip] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided. ¿BÇ¿:¿:Å⁄/// The heading level in the DOM document structure.
///
/// This is only applied to web semantics and is ignored on other platforms.
///
/// Screen readers will use this value to determine which part of the page
/// structure this heading represents. A level 1 heading, indicated
/// with aria-level="1", usually indicates the main heading of a page,
/// a level 2 heading, defined with aria-level="2" the first subsection,
/// a level 3 is a subsection of that, and so on. ¿KÉ¥¿Ú¿ÚÉZ/// Overrides the default accessibility hints provided by the platform.
///
/// This [hintOverrides] property does not affect how the platform processes hints;
/// it only sets the custom text that will be read by assistive technology.
///
/// On Android, these overrides replace the default hints for semantics nodes
/// with tap or long-press actions. For example, if [SemanticsHintOverrides.onTapHint]
/// is provided, instead of saying `Double tap to activate`, the screen reader
/// will say `Double tap to <onTapHint>`.
///
/// On iOS, this property is ignored, and default platform behavior applies.
///
/// Example usage:
/// ```dart
/// const Semantics.fromProperties(
///  properties: SemanticsProperties(
///    hintOverrides: SemanticsHintOverrides(
///      onTapHint: 'open settings',
///    ),
///  ),
///  child: Text('button'),
/// )
/// ``` ¿Ä√¿∫¿∫Äò/// The reading direction of the [label], [value], [increasedValue],
/// [decreasedValue], and [hint].
///
/// Defaults to the ambient [Directionality]. ¿ÃÅI¿!¿!Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android). ¿!Çü¿#´¿#´Ç`/// A tag to be applied to the child [SemanticsNode]s of this widget.
///
/// The tag is added to all child [SemanticsNode]s that pass through the
/// [RenderObject] corresponding to this widget while looking to be attached
/// to a parent SemanticsNode.
///
/// Tags are used to communicate to a parent SemanticsNode that a child
/// SemanticsNode was passed through a particular RenderObject. The parent can
/// use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [SemanticsConfiguration.addTagForChildren], to which the tags provided
///    here will be passed. ¿#æÄÛ¿$™¿$™Ä“/// The URL that this node links to.
///
/// On the web, this is used to set the `href` attribute of the DOM element.
///
/// See also:
///
/// * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href ¿$∂Ç¬¿'s¿'sÇé/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android *may* trigger this
/// action by double-tapping the screen while an element is focused.
///
/// Note: different OSes or assistive technologies may decide to interpret
/// user inputs differently. Some may simulate real screen taps, while others
/// may call semantics tap. One way to handle taps properly is to provide the
/// same handler to both gesture tap and semantics tap. ¿'}ÇÁ¿*Y¿*YÇ´/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android *may* trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.
///
/// Note: different OSes or assistive technologies may decide to interpret
/// user inputs differently. Some may simulate real long presses, while others
/// may call semantics long press. One way to handle long press properly is to
/// provide the same handler to both gesture long press and semantics long
/// press. ¿*iÇe¿,¬¿,¬Ç./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿,”Çk¿/1¿/1Ç3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿/CÇ]¿1ñ¿1ñÇ(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿1•Çf¿3ˇ¿3ˇÇ//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿4Ç:¿6@¿6@Ç/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [value] will be set to [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button. ¿6OÇ>¿8É¿8ÉÇ	/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [value] will be set to [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button. ¿8íÅ¿9†¿9†ÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿9´Å$¿: ¿: Ä¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿:‘Å¿;‚¿;‚ÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿;ÓÅr¿=B¿=BÅ,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field. ¿=eÅw¿>Ω¿>ΩÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿>·Åf¿@.¿@.Å%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿@LÅh¿Aö¿AöÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿AπÅì¿C>¿C>Å[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu. ¿CQÅ?¿Dá¿DáÅ/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking `type <text>` to
/// their Android devices. ¿DïÑ¿Hò¿HòÉ»/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [onFocus], which is invoked when the assistive technology requests that
///    the input focus is gained by a widget.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿H∏Éè¿L,¿L,É=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿LLÑ1¿Pv¿PvÉÈ/// {@template flutter.semantics.SemanticsProperties.onFocus}
/// The handler for [SemanticsAction.focus].
///
/// This handler is invoked when the assistive technology requests that the
/// focusable widget corresponding to this semantics node gain input focus.
/// The [FocusNode] that manages the focus of the widget must gain focus. The
/// widget must begin responding to relevant key events. For example:
///
/// * Buttons must respond to tap/click events produced via keyboard shortcuts.
/// * Text fields must become focused and editable, showing an on-screen
///   keyboard, if necessary.
/// * Checkboxes, switches, and radio buttons must become toggleable using
///   keyboard shortcuts.
///
/// Focus behavior is specific to the platform and to the assistive technology
/// used. See the documentation of [SemanticsAction.focus] for more detail.
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
/// {@endtemplate} ¿PÇÅS¿QÃ¿QÃÅ'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option. ¿Q⁄Ç7¿S˚¿S˚Å‹/// A map from each supported [CustomSemanticsAction] to a provided handler.
///
/// The handler associated with each custom action is called whenever a
/// semantics action of type [SemanticsAction.customAction] is received. The
/// provided argument will be an identifier used to retrieve an instance of
/// a custom action which can then retrieve the correct handler from this map.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions. ¿TÇ¿V¿VÅ‹/// {@template flutter.semantics.SemanticsProperties.role}
/// A enum to describe what role the subtree represents.
///
/// Setting the role for a widget subtree helps assistive technologies, such
/// as screen readers, to understand and interact with the UI correctly.
///
/// Defaults to [SemanticsRole.none] if not set, which means the subtree does
/// not represent any complex ui or controls.
///
/// For a list of available roles, see [SemanticsRole].
/// {@endtemplate} ¿V'ÇJ¿Xd¿XdÇ/// The [SemanticsNode.identifier]s of widgets controlled by this subtree.
///
/// {@template flutter.semantics.SemanticsProperties.controlsNodes}
/// If a widget is controlling the visibility or content of another widget,
/// for example, [Tab]s control child visibilities of [TabBarView] or
/// [ExpansionTile] controls visibility of its expanded content, one must
/// assign a [SemanticsNode.identifier] to the content and also provide a set
/// of identifiers including the content's identifier to this property.
/// {@endtemplate} ¿XvÇù¿[¿[ÇR/// {@template flutter.semantics.SemanticsProperties.validationResult}
/// Describes the validation result for a form field represented by this
/// widget.
///
/// Providing a validation result helps assistive technologies, such as screen
/// readers, to communicate to the user whether they provided correct
/// information in a form.
///
/// Defaults to [SemanticsValidationResult.none] if not set, which means no
/// validation information is available for the respective semantics node.
///
/// For a list of available validation results, see [SemanticsValidationResult].
/// {@endtemplate} ¿[Å≥¿\¬¿\¬Å}/// {@template flutter.semantics.SemanticsProperties.inputType}
/// The input type for of a editable widget.
///
/// This property is only used when the subtree represents a text field.
///
/// Assistive technologies use this property to provide better information to
/// users. For example, screen reader reads out the input type of text field
/// when focused.
/// {@endtemplate}   ¿\–â_¿\·¿\·  ¿\ı&¿]¿]  ¿\–¿\—¿f3U¿fF¿fF   ¿f3¿f4¿  ∂¿  ∑¿gm¿ €,¿gm¿hßÅ3/// A node that represents some semantic data.
///
/// The semantics tree is maintained during the semantics phase of the pipeline
/// (i.e., during [PipelineOwner.flushSemantics]), which happens after
/// compositing. The semantics tree is then uploaded into the engine for use
/// by assistive technology. ¿h÷Ä˛¿i] ¿i]¿ij ~/// Creates a semantic node.
///
/// Each semantic node has a unique identifier that is assigned when the node
/// is created.¿il¿ir¿iq  ¿iv¿iÖ¿iÑ  ¿iù¿iô¿iü¿i≠¿iÆ¿i≈¿i∑¿i«¿iÿÅ,¿j`¿jm¿jn¿jr¿jnÄÅ/// Creates a semantic node to represent the root of the semantics tree.
///
/// The root node is assigned an identifier of zero.¿jt¿jz¿jy  ¿j~¿jç¿jå  ¿jö¿j≥¿j≤  ¿jƒ¿j¿¿j∆¿j›¿jœ¿jﬂ8¿lIE¿lZ¿lZ ¿lã¿lÅ¿lâ¿lÑ¿lÇ¿lá¿lç¿lì¿lû¿lû ¿l∞¿mJÄ«¿n¿nÄ∞/// Uniquely identifies this node in the list of sibling nodes.
///
/// Keys are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿o˜¿o˚¿o˚  ¿p!¿p¿p  ¿qg¿qp¿qp  ¿r¢¿rß¿rß ¿rØ¿r≥¿r¥¿svÉn¿vÕ¿vÕÉ./// The semantic clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// be excluded from the semantics tree. Descendant [SemanticsNode]s that are
/// overlapping with this rect, but are outside of [parentPaintClipRect] will
/// be included in the tree, but they will be marked as hidden because they
/// are assumed to be not visible on screen.
///
/// If this rect is null, all descendant [SemanticsNode]s outside of
/// [parentPaintClipRect] will be excluded from the tree.
///
/// If this rect is non-null it has to completely enclose
/// [parentPaintClipRect]. If [parentPaintClipRect] is null this property is
/// also null. ¿vÈÇò¿yn¿ynÇd/// The paint clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// either be excluded from the semantics tree (if they have no overlap with
/// [parentSemanticsClipRect]) or they will be included and marked as hidden
/// (if they are overlapping with [parentSemanticsClipRect]).
///
/// This rect is completely enclosed by [parentSemanticsClipRect].
///
/// If this rect is null [parentSemanticsClipRect] also has to be null. ¿yÜÅ}¿zˆ¿zˆÅ^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4. ¿~j ¿~o¿~o ¿~Ö¿Ä∏#¿ÄΩ¿ÄΩ ¿Ä÷¿É¿U¿É≈¿É≈ ¿ÉË¿Éı¿Éˆ¿Ñ)h¿Ñà¿ÑàG/// Contains the children in inverse hit test order (i.e. paint order). ¿ÑñÄ‡¿Ö`¿Ö`Ä™/// A snapshot of `newChildren` passed to [_replaceChildren] that we keep in
/// debug mode. It supports the assertion that user does not mutate the list
/// of children. ¿ñf¿ñk¿ñk ¿ñs¿õ¿õ+¿õ+  ¿ú‘¿ú„¿ú„  ¿û-¿û1¿û1 ¿û:¿û@Ä°¿û⁄¿û⁄Äâ/// The locale of this node.
///
/// This property is used by assistive technologies to correctly interpret
/// the content of this node. ¿¨¿¨¿¨ ¿¨#¿≥ÂN¿¥¿¥ ¿¥¿¥*¿¥+¿¥7n¿¥`¿¥` ¿¥Ä¿¥ç¿¥é¿µ(1¿µ,¿µ, ¿µ=¿µJ¿µK¿µ^Ä¬¿∂¿∂Ä¢/// The [SemanticsTag]s this node is tagged with.
///
/// Tags are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿∂û+¿∂≠¿∂≠ ¿∂∂¿∂ƒ¿∂≈¿∏±-¿∏∏¿∏∏ ¿∏∆¿∏”¿∏‘¿∫ΩA¿∫Œ¿∫Œ ¿∫·¿∫Ó¿∫Ô¿ΩA¿Ω¿Ω ¿Ω1¿Ω>¿Ω?¿¿ﬁS¿¿Ô¿¿Ô ¿¡¿¡¿¡¿ƒ¡S¿ƒ“¿ƒ“ ¿ƒÓ¿ƒ˚¿ƒ¸¿«;?¿«L¿«L ¿«^¿«k¿«l¿»'¿»¿» ¿»'¿»4¿»5¿»⁄&¿»Ú¿»Ú  ¿…£;¿…≤¿…≤ ¿…√¿…–¿…—¿À:¿ÀL¿ÀL  ¿Ã¿Ã¿Ã  ¿Ãƒ¿Ã ¿Ã   ¿Õ∏¿ÕΩ¿ÕΩ  ¿ŒA¿ŒF¿ŒF  ¿–8¿–@¿–@  ¿—ò¿—†¿—†  ¿“¯¿” ¿”   ¿‘Û¿‘¯¿‘¯  ¿÷ó¿÷ú¿÷ú  ¿ÿ+¿ÿ0¿ÿ0  ¿ŸK/¿ŸO¿ŸO ¿Ÿ_¿Ÿl¿Ÿm¿Ÿ∆&¿ŸÀ¿ŸÀ ¿Ÿ÷¿Ÿ„¿Ÿ‰¿€R(¿€`¿€` ¿€h¿€u¿€v¿‹õ9¿‹®¿‹® ¿‹π¿‹∆¿‹«¿›fL¿›Ä¿›Ä ¿›î¿›°¿›¢¿ﬂo7¿ﬂÇ¿ﬂÇ ¿ﬂè¿ﬂú¿ﬂù¿ﬂ˛L¿‡"¿‡" ¿‡2¿‡H¿‡I¿•6¿º¿º ¿œ¿ÿ¿⁄¿Ÿ¿ﬂG¿ˆ¿ˆ ¿¿#¿%¿$¿*G¿C¿C ¿Y¿o¿p1¿nÅﬁ¿oÍ¿oÍÅπ/// The unique identifier for this node.
///
/// The root node has an id of zero. Other nodes are given a unique id
/// when they are attached to a [SemanticsOwner]. If they are detached, their
/// ids are invalid and should not be used.
///
/// In rare circumstances, id may change if this node is detached and
/// re-attached to the [SemanticsOwner]. This should only happen when the
/// application has generated too many semantics nodes.   ¿p8Å,¿qL¿qLÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent).   ¿rIV¿rë¿rë</// The bounding box for this node in its coordinate system.   ¿{ÇL¿|˝¿|˝Å◊/// Whether the node is invisible.
///
/// A node whose [rect] is outside of the bounds of the screen and hence not
/// reachable for users is considered invisible if its semantic information
/// is not merged into a (partially) visible parent as indicated by
/// [isMergedIntoParent].
///
/// An invisible node can be safely dropped from the semantic tree without
/// losing semantic information that is relevant for describing the content
/// currently shown on screen.   ¿}fÅ¿~=¿~=Ä≈/// Whether this node merges its semantic information into an ancestor node.
///
/// This value indicates whether this node has any ancestors with
/// [mergeAllDescendantsIntoThisNode] set to true.   ¿1ÅÑ¿ÄÖ¿ÄÖÅ>/// Whether the user can interact with this node in assistive technologies.
///
/// This node can still receive accessibility focus even if this is true.
/// Setting this to true prevents the user from activating pointer related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or
/// [SemanticsAction.longPress].   ¿ÅÉÅç¿Ç√¿Ç√Å$/// Whether this node is taking part in a merge of semantic information.
///
/// This returns true if the node is either merged into an ancestor node or if
/// decedent nodes are merged into this node.
///
/// See also:
///
///  * [isMergedIntoParent]
///  * [mergeAllDescendantsIntoThisNode]   ¿ÉÄ©¿Éy¿ÉyY/// Whether this node and all of its descendants should be treated as one logical entity.   ¿ïÒr¿ñ5¿ñ58/// Whether this node has a non-zero number of children.   ¿ñ}i¿ñ±¿ñ±)/// The number of children this node has.   ¿öfÄ≤¿õ¿õÄá/// The owner for this node (null if unattached).
///
/// The entire semantics tree that this node belongs to will have the same owner.   ¿õ6ÄÙ¿ú¿úÄ≈/// Whether the semantics tree this node belongs to is attached to a [SemanticsOwner].
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿ú.Ä£¿úø¿úøw/// The parent of this node in the semantics tree.
///
/// The [parent] of the root node in the semantics tree is null.   ¿úÔÅ;¿û¿ûÅ/// The depth of this node in the semantics tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree.  There's no guarantee regarding depth between siblings.
///
/// The depth is used to ensure that nodes are processed in depth order.   ¿¨ÛÅÅ¿≠ˆ¿≠ˆÄ◊/// When asserts are enabled, returns whether node is marked as dirty.
///
/// Otherwise, returns null.
///
/// This getter is intended for use in framework unit tests. Applications must
/// not depend on its value.  ¿≠◊¿≠ÿ¿¥™{¿¥≤¿¥≤    ¿∂ŒD¿∂¯¿∂¯/// Semantics flags.   ¿∑5¿∑¿∑    ¿∏Ie¿∏î¿∏î=/// {@macro flutter.semantics.SemanticsProperties.identifier}   ¿∏„Ä’¿πó¿πóÄû/// A textual description of this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿πºÄ˛¿∫ñ¿∫ñÄ∫/// A textual description of this node in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text.   ¿ªÄÍ¿ªÃ¿ªÃÄ≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿ªÒÅ¿ºÊ¿ºÊÄ”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text.   ¿ΩSÅ£¿æ√¿æ√ÅR/// The value that [value] will have after a [SemanticsAction.increase] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿æ˙Å·¿¿•¿¿•ÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.increase] action has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text.   ¿¡6Å£¿¬¶¿¬¶ÅR/// The value that [value] will have after a [SemanticsAction.decrease] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿¬›Å·¿ƒà¿ƒàÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.decrease] action has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text.   ¿≈Äˆ¿≈¿≈Ä¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿∆Å%¿«¿«Ä·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text.   ¿«Äì¿«˛¿«˛m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿»AÄñ¿»∑¿»∑U/// Provides hint values which override the default hints on supported
/// platforms.   ¿…Äõ¿…Ä¿…Äc/// The reading direction for [label], [value], [hint], [increasedValue], and
/// [decreasedValue].   ¿…„ÅT¿À#¿À#Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).   ¿ÀYÄ∞¿ÀÈ¿ÀÈx/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field.   ¿Ã.Äì¿Ã•¿Ã•h/// If this node represents a text field, this indicates whether or not it's
/// a multiline text field.   ¿Ã€Ä⁄¿Õè¿ÕèÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿Õ”k¿Œ"¿Œ"C/// The index of the first visible semantic child of a scroll node.   ¿ŒWÅﬁ¿–¿–Åõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿–TÅA¿—q¿—qÅ /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿—µÅ@¿“—¿“—Äˇ/// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent] from where this value is usually taken.   ¿”Å€¿‘Œ¿‘ŒÅô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS.   ¿’Åà¿÷r¿÷rÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field.   ¿÷∞Åx¿◊˛¿◊˛Å4/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Must be
/// set when [maxValueLength] is set.   ¿ÿHÅ ¿Ÿ*¿Ÿ*Ä”/// The level of the widget as a heading within the structural hierarchy
/// of the screen. A value of 1 indicates the highest level of structural
/// hierarchy. A value of 2 indicates the next level, and so on.   ¿ŸD¿ŸØ¿ŸØ$/// The URL that this node links to.   ¿ŸÒÅ^¿€A¿€AÅ-/// {@template flutter.semantics.SemanticsNode.role}
/// The role this node represents
///
/// A semantics node's role helps assistive technologies, such as screen
/// readers, understand and interact with the UI correctly.
///
/// For a list of possible roles, see [SemanticsRole].
/// {@endtemplate}   ¿€Å¿‹x¿‹xÄ›/// {@template flutter.semantics.SemanticsNode.controlsNodes}
/// The [SemanticsNode.identifier]s of widgets controlled by this node.
/// {@endtemplate}
///
/// {@macro flutter.semantics.SemanticsProperties.controlsNodes}   ¿‹ŸÄä¿›=¿›=C/// {@macro flutter.semantics.SemanticsProperties.validationResult}   ¿›∑Åµ¿ﬂT¿ﬂTÅs/// {@template flutter.semantics.SemanticsNode.inputType}
/// The input type for of a editable node.
///
/// This property is only used when this node represents a text field.
///
/// Assistive technologies use this property to provide better information to
/// users. For example, screen reader reads out the input type of text field
/// when focused.
/// {@endtemplate}   ¿q~Ä«¿qÇ¿qÇ  ¿qå¿qñ¿qï   ¿rºÄ∂¿r¿¿r¿  ¿r≈
¿rÀ¿r    ¿~éÄü¿~í¿~í  ¿~•
¿~´¿~™   ¿ÄﬂÄ†¿Ä„¿Ä„  ¿Ä˘
¿Äˇ¿Ä˛   ¿lµÄë¿l¿¿l¿    ¿Ö{êr¿ÖÄ¿ÖÄ  ¿Öë¿Ö¶¿Ö•   ¿ñÍÅh¿óÖ¿óÖÄç/// Visits the immediate children of this node.
///
/// This function calls visitor for each immediate child until visitor returns
/// false. ¿óì¿ó©¿ó®   ¿òVÇ¿ôU¿ôUÄÔ/// Visit all the descendants of this node.
///
/// This function calls visitor for each descendant in a pre-order traversal
/// until visitor returns false. Returns true if all the visitor calls
/// returned true, otherwise returns false. ¿ôg¿ô}¿ô|   ¿ûÊÄ∏¿ûÎ¿ûÎ  ¿û˘¿ü¿ü   ¿ü¢D¿üß¿üß    ¿üÍÅÔ¿üÔ¿üÔ  ¿†¿†¿†   ¿°›`¿°‚¿°‚    ¿¢AÉ!¿¢F¿¢F  ¿¢R¿¢a¿¢`   ¿•fÄø¿•k¿•k  ¿•v¿•Ö¿•Ñ   ¿¶)Çâ¿¶x¿¶x2/// Mark this node as attached to the given owner. ¿¶¿¶è¿¶é  ¿¶^¿¶_¿®∂ÉD¿©¿©./// Mark this node as detached from its owner.  ¿®Á¿®Ë¿¨,Ä√¿¨1¿¨1    ¿ÆxÖM¿Æ}¿Æ}  ¿Æß¿Æø¿Ææ   ¿∂%u¿∂X¿∂X+/// Whether this node is tagged with `tag`. ¿∂a¿∂o¿∂n   ¿∑OÄˆ¿∏¿∏</// Whether this node currently has a given [SemanticsFlag]. ¿∏¿∏¿∏  ¿∑é¿∑è¿∑ô¿∑˚¿∑ü¿∑√¿ﬂ´O¿ﬂ∞¿ﬂ∞  ¿ﬂ¬¿ﬂ”¿ﬂ“   ¿‡OçA¿‚>¿‚>Å◊/// Reconfigures the properties of this object to describe the configuration
/// provided in the `config` argument and the children listed in the
/// `childrenInInversePaintOrder` argument.
///
/// The arguments may be null; this represents an empty configuration (all
/// values at their defaults, no children).
///
/// No reference is kept to the [SemanticsConfiguration] object, but the child
/// list is used as-is and should therefore not be changed after this call. ¿‚O'¿‚q¿‚p  ¿‚|0¿‚í¿‚ë   ¿Ìîû±¿Ó∞¿Ó∞Å/// Returns a summary of the semantics for this node.
///
/// If this node has [mergeAllDescendantsIntoThisNode], then the returned data
/// includes the information from this node's descendants. Otherwise, the
/// returned data matches the data on this node.   ¿IX¿\¿\    ¿vçˇ¿{¿{  ¿à¿†¿ü  ¿®'¿≤¿±   ¿yâù¿›¿›M/// Builds a new list made of [_children] sorted in semantic traversal order.   ¿%Åx¿&¿&Ä‹/// Sends a [SemanticsEvent] associated with this [SemanticsNode].
///
/// Semantics events should be sent to inform interested parties (like
/// the accessibility system of the operating system) about changes to the UI. ¿&¿&¿&   ¿&ñÄœ¿&õ¿&õ  ¿&±¿&¬¿&¡   ¿'iX¿'|¿'|   ¿'i¿'j¿'≈ì»¿'÷¿'÷  ¿'Í&¿(¿(  ¿'≈¿'∆¿;ëÇ§¿<r¿<rÄ≈/// Returns a string representation of this node and its descendants.
///
/// The order in which the children of the [SemanticsNode] will be printed is
/// controlled by the [childOrder] parameter. ¿<Ö¿<ç¿<å  ¿<§¿<≠¿<¨  ¿<¬0¿<”¿<“  ¿<¯K¿=¿=  ¿=I¿=N¿=M  
¿<_¿<`¿<ú¿<›¿<Ï¿<Ì¿=¿=4¿=5¿=Y¿>9Åc¿>U¿>U  ¿>m¿>v¿>u  ¿>9¿>ñ¿>ï  ¿>æK¿>◊¿>÷  ¿>9¿>:¿>ù¿>±¿>≤¿>„¿>˙¿>˚¿?†ÅS¿?¬¿?¬  ¿?ﬁK¿?˜¿?ˆ  ¿?†¿?°¿@¿@¿@¿@˜Å†¿AZ¿AZL/// Returns the list of direct children of this node in the specified order. ¿As"¿Aå¿Aã    ¿BõÖ™¿Bõ¿DæÇ/// An edge of a box, such as top, bottom, left or right, used to compute
/// [SemanticsNode]s that overlap vertically or horizontally.
///
/// For computing horizontal overlap in an LTR setting we create two [_BoxEdge]
/// objects for each [SemanticsNode]: one representing the left edge (marked
/// with [isLeadingEdge] equal to true) and one for the right edge (with [isLeadingEdge]
/// equal to false). Similarly, for vertical overlap we also create two objects
/// for each [SemanticsNode], one for the top and one for the bottom edge. ¿DÎp¿DÎ ¿DÎ¿DÛ  ¿Dı¿E¿E  ¿E¿E!¿E   ¿E(¿E7¿E6  ¿EC¿EI¿EY¿EJ¿EP¿EQ¿E_ÅΩ¿G¿GÅí/// True if the edge comes before the seconds edge along the traversal
/// direction, and false otherwise.
///
/// This field is never null.
///
/// For example, in LTR traversal the left edge's [isLeadingEdge] is set to true,
/// the right edge's [isLeadingEdge] is set to false. When considering vertical
/// ordering of boxes, the top edge is the start edge, and the bottom edge is
/// the end edge. ¿G!¿Gö¿Gög/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal. ¿G•?¿G‡¿G‡$/// The node whom this edge belongs.   ¿GÈZ¿G˘¿G˘  ¿H¿H¿H  ¿GÈ¿GÍ ¿HGñ/¿HG¿IÄ—/// A group of [nodes] that are disjoint vertically or horizontally from other
/// nodes that share the same [SemanticsNode] parent.
///
/// The [nodes] are sorted among each other separately from other nodes. ¿IbN¿Ib ¿Ib¿Iu  ¿Iw¿IÜ¿IÖ  ¿Ií¿I°¿I†   ¿I¥Ä˚¿J§¿J§Äÿ/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal.
///
/// This value is equal to the [_BoxEdge.offset] of the first node in the
/// [nodes] list being considered. ¿J¥!¿J»¿J»  ¿J⁄e¿K&¿K&//// The nodes that are sorted among each other.¿K=¿K>¿K.¿K<¿K/  ¿KDo¿KT¿KT  ¿K^¿Ks¿Kr  ¿KD¿KE¿K∑Üi¿Lü¿LüÄÀ/// Sorts this group assuming that [nodes] belong to the same vertical group.
///
/// This method breaks up this group into horizontal [_SemanticsSortGroup]s
/// then sorts them using [sortedWithinKnot].   ¿R$åP¿U|¿U|É%/// Sorts [nodes] where nodes intersect both vertically and horizontally.
///
/// In the special case when [nodes] contains one or less nodes, this method
/// returns [nodes] unchanged.
///
/// This method constructs a graph, where vertices are [SemanticsNode]s and
/// edges are "traversed before" relation between pairs of nodes. The sort
/// order is the topological sorting of the graph, with the original order of
/// [nodes] used as the tie breaker.
///
/// Whether a node is traversed before another node is determined by the
/// vector that connects the two nodes' centers. If the vector "points to the
/// right or down", defined as the [Offset.direction] being between `-pi/4`
/// and `3*pi/4`), then the semantics node whose center is at the end of the
/// vector is said to be traversed after.    ¿f˘ÑL¿f˘¿hdÅd/// The implementation of [Comparable] that implements the ordering of
/// [SemanticsNode]s in the accessibility traversal.
///
/// [SemanticsNode]s are sorted prior to sending them to the engine side.
///
/// This implementation considers a [node]'s [sortKey] and its position within
/// the list of its siblings. [sortKey] takes precedence over position. ¿h•O¿h• ¿h•¿h∑  ¿hπ¿h»¿h«  ¿hÕ¿h”¿h“  ¿h€¿hÍ¿hÈ   ¿h¯Q¿iE¿iE6/// The node whose position this sort node determines. ¿iNÄµ¿i¸¿i¸Äç/// Determines the position of this node among its siblings.
///
/// Sort keys take precedence over other attributes, such as
/// [position]. ¿jl¿jl¿jlU/// Position within the list of siblings as determined by the default sort
/// order.   ¿jyÄ ¿jâ¿jâ  ¿jì¿jß¿j¶  ¿jy¿jz ¿kG®b¿kG¿l~Å0/// Owns [SemanticsNode] objects and notifies listeners of changes to the
/// render tree semantics.
///
/// To listen for semantic updates, call [SemanticsBinding.ensureSemantics] or
/// [PipelineOwner.ensureSemantics] to obtain a [SemanticsHandle]. This will
/// create a [SemanticsOwner] if necessary. ¿l®Ä◊¿l¸ ¿l¸¿m
 Q/// Creates a [SemanticsOwner] that manages zero or more [SemanticsNode] objects.¿m¿m¿m   ¿mÉÅ∂¿o(¿o(Åx/// The [onSemanticsUpdate] callback is expected to dispatch [SemanticsUpdate]s
/// to the [FlutterView] that is associated with this [PipelineOwner] and/or
/// [SemanticsOwner].
///
/// A [SemanticsOwner] calls [onSemanticsUpdate] during [sendSemanticsUpdate]
/// after the [SemanticsUpdate] has been build, but before the [SemanticsOwner]'s
/// listeners have been notified. ¿o=8¿oV¿oV ¿os¿ot¿od¿or¿oe¿oy=¿oó¿oó ¿o¥¿oµ¿o†¿o≥¿o°¿o¶¿o∫;¿o”¿o” ¿oÛ¿oÙ¿o‰¿oÚ¿oÂ¿o˙Äü¿pz¿pzf/// The root node of the semantics tree, if any.
///
/// If the semantics tree is empty, returns null.    ¿pùÄ¨¿pÆ¿pÆ   ¿pù¿pû¿qMïâ¿qà¿qà3/// Update the semantics using [onSemanticsUpdate].   ¿Ü⁄ÇO¿ÜÚ¿ÜÚ  ¿á¿á¿á  ¿á¿á+¿á*   ¿â-Ç–¿äf¿äfÅ%/// Asks the [SemanticsNode] with the given id to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿ät¿äy¿äx  ¿ä|¿äç¿äå  ¿äï¿äû¿äù   ¿åÑ¬¿å¿å  ¿åD¿åS¿åR  ¿å\¿åd¿åc  ¿åq¿åÇ¿åÅ   ¿ê«Ç§¿í¿íÅ)/// Asks the [SemanticsNode] at the given position to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿í¿í¿í  ¿í%¿í6¿í5  ¿í>¿íG¿íF   ¿ìo8¿ìÇ¿ìÇ   ¿ìo¿ìp ¿ì´¿ Ù6¿ì´¿îiÄ∑/// Describes the semantic information associated with the owning
/// [RenderObject].
///
/// The information provided in the configuration is used to generate the
/// semantics tree.  ?¿ók ¿óp¿óp ¿óÜ¿òu¿ò}¿ò}  ¿ôÄÅA¿öª¿öªÅ$/// The locale of the resulting semantics node if this configuration formed
/// one.
///
/// This is used internally to track the inherited locale from parent
/// rendering object and should not be used directly.
///
/// To set a locale for a rendering object, use [localeForSubtree] instead. ¿ö∆É¿ùº¿ùºÇ‘/// Whether to block pointer related user actions for the rendering subtree.
///
/// Setting this to true will prevent users from interacting with the
/// rendering object produces this semantics configuration and its subtree
/// through pointer-related [SemanticsAction]s in assistive technologies.
///
/// The [SemanticsNode] created from this semantics configuration is still
/// focusable by assistive technologies. Only pointer-related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or its friends, are
/// blocked.
///
/// If this semantics configuration is merged into a parent semantics node,
/// only the [SemanticsAction]s from this rendering object and the rendering
/// objects in the subtree are blocked.¿ù‘¿ùﬁÉ6¿†˙¿†˙Ç¸/// Whether the configuration forces all children of the owning [RenderObject]
/// that want to contribute semantic information to the semantics tree to do
/// so in the form of explicit [SemanticsNode]s.
///
/// When set to false children of the owning [RenderObject] are allowed to
/// annotate [SemanticsNode]s of their parent with the semantic information
/// they want to contribute to the semantic tree.
/// When set to true the only way for children of the owning [RenderObject]
/// to contribute semantic information to the semantic tree is to introduce
/// new explicit [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with [isSemanticBoundary] to
/// create semantic boundaries that are either writable or not for children.¿°¿°É|¿§b¿§bÉ%/// Whether the owning [RenderObject] makes other [RenderObject]s previously
/// painted within the same semantic boundary unreachable for accessibility
/// purposes.
///
/// If set to true, the semantic information for all siblings and cousins of
/// this node, that are earlier in a depth-first pre-order traversal, are
/// dropped from the semantics tree up until a semantic boundary (as defined
/// by [isSemanticBoundary]) is reached.
///
/// If [isSemanticBoundary] and [isBlockingSemanticsOfPreviouslyPaintedNodes]
/// is set on the same node, all previously painted siblings and cousins up
/// until the next ancestor that is a semantic boundary are dropped.
///
/// Paint order as established by [RenderObject.visitChildrenForSemantics] is
/// used to determine if a node is previous to this one.¿§ê¿•Ò¿•ˆ¿•ˆ ¿¶
¿¶Å5¿ß¿ßÄπ/// The actions (with associated action handlers) that this configuration
/// would like to contribute to the semantics tree.
///
/// See also:
///
///  * [_addAction] to add an action.¿ßG¿ßH¿ß¿ßF¿ß¿ß0¿ßÀ¿ßœ¿ßœ ¿ß‡¿ØÜ¿Øî¿Øî  ¿±ª¿±…¿±…  ¿¥ÿ¿¥Ê¿¥Ê  ¿∂‰¿∂Ú¿∂Ú  ¿∫ ¿∫¿∫  ¿Ω¿Ω)¿Ω)  ¿¿5¿¿C¿¿C  ¿√∞(¿√«¿√«  ¿«@¿«N¿«N  ¿ .¿ <¿ <  ¿À¿À˛¿À˛  ¿Õ±¿Õø¿Õø  ¿œa¿œo¿œo  ¿—‰¿—Ú¿—Ú  ¿‘,2¿‘?¿‘?  ¿◊43¿◊G¿◊G  ¿⁄)-¿⁄<¿⁄<  ¿›.¿›!¿›!  ¿‡$¿‡+¿‡+  ¿„v¿„Ü¿„Ü  ¿Ëb*¿Ëp¿Ëp  ¿Ï¯*¿Ì¿Ì  ¿ÓC¿ÓQ¿ÓQ  ¿Ò»B¿ÒÓ¿ÒÓ  ¿ˆ;¿ˆM¿ˆM  ¿¯m¿¯r¿¯r  ¿˘¬¿˘«¿˘«  ¿˙ˇ¿˚¿˚  ¿¸:¿¸?¿¸?  ¿˛j¿˛o¿˛o  ¿ ä¿ è¿ è  ¿S-¿X¿X ¿{¿Êp¿¿ ¿T¿U¿/¿S¿0¿G¿	¿	¿	 ¿	#¿	Ì(¿	˚¿	˚ ¿
¿
¿
¿›8¿Ó¿Ó ¿¿¿¿¿^8¿o¿o ¿Ç¿í¿ï¿ì¿YA¿j¿j ¿Ü¿ñ¿ô¿ó¿"kA¿"|¿"| ¿"ò¿"®¿"´¿"©¿'‚7¿'Û¿'Û ¿(¿(¿(¿(¿)4¿);¿); ¿)F¿*@&¿*X¿*X  ¿3¿3¿3  ¿Iµ¿I∫¿I∫  ¿KÈ¿KÌ¿KÌ ¿K˝¿\Ú¿]¿]  ¿_z¿_Ç¿_Ç  ¿aZ¿ab¿ab  ¿c=¿cE¿cE  ¿dZ¿dg¿dg  ¿eäL¿e§¿e§ ¿e∏¿e—¿e“¿f«7¿f⁄¿f⁄ ¿fÁ¿f˘¿f˙¿iR#¿ie¿ie  ¿l•+¿l¥¿l¥ ¿lΩ¿lÀ¿lÃX¿î•Ç√¿ó>¿ó>Çu/// Whether the [RenderObject] owner of this configuration wants to own its
/// own [SemanticsNode].
///
/// When set to true semantic information associated with the [RenderObject]
/// owner of this configuration or any of its descendants will not leak into
/// parents. The [SemanticsNode] generated out of this configuration will
/// act as a boundary.
///
/// Whether descendants of the owning [RenderObject] can add their semantic
/// information to the [SemanticsNode] introduced by this configuration
/// is controlled by [explicitChildNodes].
///
/// This has to be true if [isMergingSemanticsOfDescendants] is also true.   ¿ò_¿òL¿òL*/// The locale for widgets in the subtree.   ¿•Äﬂ¿•»¿•»Äß/// Whether this configuration is empty.
///
/// An empty configuration doesn't contain any semantic information that it
/// wants to contribute to the semantics tree.   ¿ßNz¿ßV¿ßV    ¿™ñÑÌ¿Øs¿ØsÑ¢/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused.
///
/// On Android prior to Android Oreo a double-tap on the screen while an
/// element with an [onTap] handler is focused will not call the registered
/// handler. Instead, Android will simulate a pointer down and up event at the
/// center of the focused element. Those pointer events will get dispatched
/// just like a regular tap with TalkBack disabled would: The events will get
/// processed by any [GestureDetector] listening for gestures in the center of
/// the focused element. Therefore, to ensure that [onTap] handlers work
/// properly on Android versions prior to Oreo, a [GestureDetector] with an
/// onTap handler should always be wrapping an element that defines a
/// semantic [onTap] handler. By default a [GestureDetector] will register its
/// own semantic [onTap] handler that follows this principle.   ¿∞Å•¿±ú¿±úÅf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.   ¿≤`Çu¿¥∑¿¥∑Ç./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿µÅÅ`¿∂…¿∂…Å'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option.   ¿∑ÅÇ|¿π›¿π›Ç3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿∫≠Çk¿º˛¿º˛Ç(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿ΩºÇv¿¿¿¿Ç//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿¿ﬁÇœ¿√á¿√áÇu/// The handler for [SemanticsAction.scrollToOffset].
///
/// This handler is only called on iOS by UIKit, when the iOS focus engine
/// switches its focus to an item too close to a scrollable edge of a
/// scrollable container, to make sure the focused item is always fully
/// visible.
///
/// The callback, if not `null`, should typically set the scroll offset of
/// the associated scrollable container to the given `targetOffset` without
/// animation as it is already animated by the caller: the iOS focus engine
/// invokes [onScrollToOffset] every frame during the scroll animation with
/// animated scroll offset values.   ¿ƒ˜ÇF¿«#¿«#Ç/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [value] will be set to [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button.   ¿«·ÇJ¿ ¿ Ç/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [value] will be set to [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button.   ¿ œÅ¿À€¿À€ÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿ÃÅÅ-¿Õû¿ÕûÄ¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿Œ>Å ¿œJ¿œJÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿œˆÅÎ¿—ø¿—øÅ§/// The handler for [SemanticsAction.showOnScreen].
///
/// A request to fully show the semantics node on screen. For example, this
/// action might be send to a node in a scrollable list that is partially off
/// screen to bring it on screen.
///
/// For elements in a scrollable list the framework provides a default
/// implementation for this action and it is not advised to provide a
/// custom one via this setter.   ¿“ïÅî¿”Á¿”ÁÅ,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field.   ¿’óÅö¿÷Ì¿÷ÌÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿ÿ£ÅÉ¿ŸÓ¿ŸÓÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿€ÖÅÜ¿‹—¿‹—Å&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿ﬁnÅ•¿ﬂÒ¿ﬂÒÅ[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu.   ¿‚'ÅL¿„[¿„[Å/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking `type <text>` to
/// their Android devices.   ¿‰£Éº¿Ë#¿Ë#ÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿ÈGÉÆ¿Ïπ¿ÏπÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿Ì›c¿Ó,¿Ó,:/// {@macro flutter.semantics.SemanticsProperties.onFocus}   ¿ÓÿÇÌ¿ÒÉ¿ÒÉÇj/// A delegate that decides how to handle [SemanticsConfiguration]s produced
/// in the widget subtree.
///
/// The [SemanticsConfiguration]s are produced by rendering objects in the
/// subtree and want to merge up to their parent. This delegate can decide
/// which of these should be merged together to form sibling SemanticsNodes and
/// which of them should be merged upwards into the parent SemanticsNode.
///
/// The input list of [SemanticsConfiguration]s can be empty if the rendering
/// object of this semantics configuration is a leaf node or child rendering
/// objects do not contribute to the semantics.   ¿Û÷Çb¿ˆ$¿ˆ$Ç!/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).
///
/// Whether this sort key has an effect on the [SemanticsNode] sort order is
/// subject to how this configuration is used. For example, the [absorb]
/// method may decide to not use this key when it combines multiple
/// [SemanticsConfiguration] objects.   ¿ˆ÷Åî¿¯J¿¯JÅ^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4.   ¿¯ÂÄ⁄¿˘ô¿˘ôÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿˙|ÄÄ¿˙‡¿˙‡V/// The index of the first visible scrollable child that contributes to
/// semantics.   ¿˚•Äí¿¸¿¸b/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.   ¿¸ÏÅ{¿˛E¿˛EÅ?/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Defaults to null,
/// which means no limit is imposed on the text field.   ¿ˇÅk¿ ]¿ ]Å'/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Must be set when
/// [maxValueLength] is set.   ¿LÇ¿¿Å¶/// Whether the semantic information provided by the owning [RenderObject] and
/// all of its descendants should be treated as one logical entity.
///
/// If set to true, the descendants of the owning [RenderObject]'s
/// [SemanticsNode] will merge their semantic information into the
/// [SemanticsNode] representing the owning [RenderObject].
///
/// Setting this to true requires that [isSemanticBoundary] is also true.   ¿)Å∫¿±¿±ÅN/// The handlers for each supported [CustomSemanticsAction].
///
/// Whenever a custom accessibility action is added to a node, the action
/// [SemanticsAction.customAction] is automatically added. A handler is
/// created which uses the passed argument to lookup the custom action
/// handler from this map and invoke it, if present.   ¿¶e¿Ò¿Ò=/// {@macro flutter.semantics.SemanticsProperties.identifier}   ¿	êZ¿	‹¿	‹7/// {@macro flutter.semantics.SemanticsProperties.role}   ¿
qÅW¿ß¿ßÅ/// A textual description of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedLabel].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedLabel], which is the [AttributedString] of this property.   ¿:Ç†¿∂¿∂ÇJ/// A textual description of the owning [RenderObject] in [AttributedString]
/// format.
///
/// On iOS this is used for the `accessibilityAttributedLabel` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedValue] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [label], which is the raw text of this property.   ¿ûÇï¿¿ÇN/// A textual description for the current value of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedValue].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedValue], which is the [AttributedString] of this property.
///  * [increasedValue] and [attributedIncreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.increase].
///  * [decreasedValue] and [attributedDecreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.decrease].   ¿•É∂¿7¿7ÉX/// A textual description for the current value of the owning [RenderObject]
/// in [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedValue` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [value], which is the raw text of this property.
///  * [attributedIncreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.increase].
///  * [attributedDecreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.decrease].   ¿Çn¿Z¿ZÇ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action.
///
/// Setting this attribute will override the [attributedIncreasedValue].
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedIncreasedValue], which is the [AttributedString] of this property.   ¿#Ç3¿ ¿ Åœ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [increasedValue], which is the raw text of this property.   ¿GÇX¿l¿lÇ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action.
///
/// Setting this attribute will override the [attributedDecreasedValue].
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
///  * [attributedDecreasedValue], which is the [AttributedString] of this property.   ¿ 5Ç3¿"2¿"2Åœ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [decreasedValue], which is the raw text of this property.   ¿#YÅg¿$°¿$°Å*/// A brief description of the result of performing an action on this node.
///
/// Setting this attribute will override the [attributedHint].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedHint], which is the [AttributedString] of this property.   ¿%.Ç±¿'Ω¿'ΩÇ]/// A brief description of the result of performing an action on this node in
/// [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedHint` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedValue] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [hint], which is the raw text of this property.   ¿(ûÄì¿)¿)m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿)ßÄñ¿*¿*U/// Provides hint values which override the default hints on supported
/// platforms.   ¿+Ä¸¿+Â¿+ÂÄƒ/// Whether the semantics node is the root of a subtree for which values
/// should be announced.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute], for a full description of route scoping.   ¿,Ä“¿-1¿-1Äû/// Whether the semantics node contains the label of a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute], for a full description of route naming.   ¿-«Y¿.¿.3/// Whether the semantics node represents an image.   ¿.êÉP¿1æ¿1æÉ/// Whether the semantics node is a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag that this setting controls.   ¿2XÄß¿2ﬂ¿2ﬂo/// The reading direction for the text in [label], [value], [hint],
/// [increasedValue], and [decreasedValue].   ¿3ûÅ§¿5"¿5"Ån/// Whether the owning [RenderObject] is selected (true) or not (false).
///
/// This is different from having accessibility focus. The element that is
/// accessibility focused may or may not be selected; e.g. a [ListTile] can have
/// accessibility focus but have its [ListTile.selected] property set to false,
/// in which case it will not be flagged as selected.   ¿5–Ç¿7ì¿7ìÅ®/// If this node has Boolean state that can be controlled by the user, whether
/// that state is expanded or collapsed, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have expanded/collapsed state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// expanded/collapsed state.   ¿8cÉ¿;?¿;?Ç≥/// Whether the owning [RenderObject] is currently enabled.
///
/// A disabled object does not respond to user interactions. Only objects that
/// usually respond to user interactions, but which currently do not (like a
/// disabled button) should be marked as disabled.
///
/// The setter should not be called for objects (like static text) that never
/// respond to user interactions.
///
/// The getter will return null if the owning [RenderObject] doesn't support
/// the concept of being enabled/disabled.
///
/// This property does not control whether semantics are enabled. If you wish to
/// disable semantics for a particular widget, you should use an [ExcludeSemantics]
/// widget.   ¿<
Ç¿=–¿=–Å©/// If this node has Boolean state that can be controlled by the user, whether
/// that state is checked or unchecked, corresponding to true and false,
/// respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// checked/unchecked state.   ¿>“Å‘¿@X¿@XÅk/// If this node has tristate that can be controlled by the user, whether
/// that state is in its mixed state.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// mixed checked state.   ¿ArÅ›¿C¿CÅÑ/// If this node has Boolean state that can be controlled by the user, whether
/// that state is on or off, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have on/off state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// on/off state.   ¿C€Åj¿E¿EÅ/// Whether the owning RenderObject corresponds to UI that allows the user to
/// pick one of several mutually exclusive options.
///
/// For example, a [Radio] button is in a mutually exclusive group because
/// only one radio button in that group can be marked as [isChecked].   ¿E€m¿F&¿F&?/// Whether the owning [RenderObject] can hold the input focus.   ¿F¿p¿G¿GF/// Whether the owning [RenderObject] currently holds the input focus.   ¿G§p¿G¯¿G¯H/// Whether the owning [RenderObject] is a button (true) or not (false).   ¿HÜj¿Hÿ¿HÿF/// Whether the owning [RenderObject] is a link (true) or not (false).   ¿I^T¿Iû¿Iû4/// The URL that the owning [RenderObject] links to.   ¿JMp¿J°¿J°H/// Whether the owning [RenderObject] is a header (true) or not (false).   ¿K/Ä∑¿K»¿K»Ää/// Indicates the heading level in the document structure.
///
/// This is only used for web semantics, and is ignored on other platforms.   ¿Lºp¿M¿MH/// Whether the owning [RenderObject] is a slider (true) or not (false).   ¿MûÄÜ¿M˛¿M˛R/// Whether the owning [RenderObject] is a keyboard key (true) or not
/// (false).   ¿N†É]¿Q·¿Q·É/// Whether the owning [RenderObject] is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS.   ¿Rod¿R±¿R±6/// Whether the owning [RenderObject] is a text field.   ¿SKÄó¿S¬¿S¬g/// Whether the owning [RenderObject] is read only.
///
/// Only applicable when [isTextField] is true.   ¿TXÅ9¿Uq¿UqÅ/// Whether [value] should be obscured.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out [value].   ¿VÄ‰¿V…¿V…Ä∞/// Whether the text field is multiline.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field is configured to be multiline.   ¿WcÅÎ¿Y¿YÅâ/// Whether the semantics node has a required state.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have a required state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have a
/// required state.
///
/// See also:
///
///  * [SemanticsFlag.isRequired], for a full description of required nodes.   ¿Y›Åÿ¿[Å¿[ÅÅå/// Whether the platform can scroll the semantics node when the user attempts
/// to move focus to an offscreen child.
///
/// For example, a [ListView] widget has implicit scrolling so that users can
/// easily move to the next visible set of children. A [TabBar] widget does
/// not have implicit scrolling, so that users can navigate into the tab
/// body when reaching the end of the tab bar.   ¿\?Ä∞¿\œ¿\œx/// The currently selected text (or the position of the cursor) within
/// [value] if this node represents a text field.   ¿]ôÅﬁ¿_U¿_UÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿`ÅA¿a3¿a3Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿a˘ÅA¿c¿cÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken.   ¿c‹{¿d7¿d7G/// The [SemanticsNode.identifier]s of widgets controlled by this node.   ¿d˝Ää¿ea¿eaC/// {@macro flutter.semantics.SemanticsProperties.validationResult}   ¿fVn¿f¨¿f¨</// {@macro flutter.semantics.SemanticsProperties.inputType}   ¿gtÅ¿hk¿hkÄÃ/// The set of tags that this configuration wants to add to all child
/// [SemanticsNode]s.
///
/// See also:
///
///  * [addTagForChildren] to add a tag and for more information about their
///    usage.   ¿l’Åì¿lﬁ¿lﬁ    T¿óèÄÄ¿óì¿óì  ¿ó¶
¿ó¨¿ó´   ¿òíÄÍ¿òñ¿òñ  ¿òß¿ò∞¿òØ   ¿Øûq¿Ø¢¿Ø¢  ¿Ø®¿Ø∑¿Ø∂   ¿±ŸÄÉ¿±›¿±›  ¿±È¿±¯¿±˜   ¿¥˜ÄÜ¿¥˚¿¥˚  ¿µ¿µ¿µ   ¿∑ }¿∑¿∑  ¿∑¿∑¿∑   ¿∫ Äâ¿∫$¿∫$  ¿∫2¿∫A¿∫@   ¿Ω8ÄÄ¿Ω<¿Ω<  ¿ΩG¿ΩV¿ΩU   ¿¿TÄÜ¿¿X¿¿X  ¿¿e¿¿t¿¿s   ¿√‹Å¿√‡¿√‡  ¿√Ò¿ƒ	¿ƒ   ¿«]ÄÄ¿«a¿«a  ¿«l¿«{¿«z   ¿ KÄÄ¿ O¿ O  ¿ Z¿ i¿ h   ¿Ã	t¿Ã¿Ã  ¿Ã¿Ã#¿Ã"   ¿Õ…q¿ÕÕ¿ÕÕ  ¿Õ”¿Õ‚¿Õ·   ¿œ{w¿œ¿œ  ¿œá¿œñ¿œï   ¿“Äå¿“	¿“	  ¿“¿“'¿“&   ¿‘bÅ1¿‘f¿‘f  ¿‘Ö¿‘ô¿‘ò   ¿◊kÅ4¿◊o¿◊o  ¿◊è¿◊£¿◊¢   ¿⁄ZÅ'¿⁄^¿⁄^  ¿⁄x¿⁄å¿⁄ã   ¿›@Å*¿›D¿›D  ¿›_¿›s¿›r   ¿‡>ÅÂ¿‡B¿‡B  ¿‡Q¿‡g¿‡f   ¿„îÅ¿„ò¿„ò  ¿„¢¿„≥¿„≤   ¿ËêÄ≥¿Ëî¿Ëî  ¿Ë∞¿Ëø¿Ëæ   ¿Ì&Ä≥¿Ì*¿Ì*  ¿ÌF¿ÌU¿ÌT   ¿Ó]w¿Óa¿Óa  ¿Ói¿Óx¿Ów   ¿ÚÅ¿Ú¿Ú  ¿Ú.+¿ÚU¿ÚT   ¿ˆYy¿ˆ]¿ˆ]  ¿ˆe¿ˆx¿ˆw   ¿¯Ñ]¿¯à¿¯à  ¿¯ñ
¿¯ú¿¯õ   ¿˘‹Äú¿˘‡¿˘‡  ¿˘Ò
¿˘˜¿˘ˆ   ¿˚Äç¿˚¿˚  ¿˚$
¿˚*¿˚)   ¿¸RÄñ¿¸V¿¸V  ¿¸e
¿¸k¿¸j   ¿˛ÇÄñ¿˛Ü¿˛Ü  ¿˛ï
¿˛õ¿˛ö   ¿ ¶Ä¢¿ ™¿ ™  ¿ Ω
¿ √¿ ¬   ¿ÑÄ°¿à¿à  ¿®
¿Æ¿≠   ¿ZÅ¿^¿^  ¿u.¿ü¿û   ¿	)c¿	-¿	-  ¿	8¿	@¿	?   ¿
T¿
¿
  ¿
"¿
1¿
0   ¿Àk¿œ¿œ  ¿’¿›¿‹   ¿ÄÅ¿¿  ¿- ¿?¿>   ¿6k¿:¿:  ¿@¿H¿G   ¿öÄÅ¿û¿û  ¿Æ ¿¿¿ø   ¿êÄè¿î¿î  ¿£¿´¿™   ¿ûÄ•¿¢¿¢  ¿ª)¿Õ¿Ã   ¿¢Äè¿¶¿¶  ¿µ¿Ω¿º   ¿"∞Ä•¿"¥¿"¥  ¿"Õ)¿"ﬂ¿"ﬁ   ¿$√g¿$«¿$«  ¿$Ã¿$‘¿$”   ¿(}¿(!¿(!  ¿(0¿(B¿(A   ¿)LW¿)P¿)P  ¿)X¿)`¿)_   ¿*jÄù¿*n¿*n  ¿*|¿*ï¿*î   ¿,
q¿,¿,  ¿,
¿, ¿,   ¿-To¿-X¿-X  ¿-c
¿-i¿-h   ¿.#i¿.'¿.'  ¿./
¿.5¿.4   ¿1„q¿1Á¿1Á  ¿1Ú
¿1¯¿1˜   ¿3#w¿3'¿3'  ¿35¿3E¿3D   ¿5EÄá¿5I¿5I  ¿5T
¿5Z¿5Y   ¿7◊Äà¿7€¿7€  ¿7Ê¿7Ì¿7Ï   ¿;ÄÄÜ¿;Ñ¿;Ñ  ¿;é¿;ï¿;î   ¿>ÄΩ¿>¿>  ¿>¿>&¿>%   ¿@©Ä≈¿@≠¿@≠  ¿@ø¿@∆¿@≈   ¿CRÄÖ¿CV¿CV  ¿C`¿Cg¿Cf   ¿EHÄè¿EL¿EL  ¿Eg
¿Em¿El   ¿FKq¿FO¿FO  ¿F[
¿Fa¿F`   ¿G3m¿G7¿G7  ¿GA
¿GG¿GF   ¿Hk¿H¿H  ¿H$
¿H*¿H)   ¿HÛg¿H˜¿H˜  ¿H˛
¿I¿I   ¿I«ÄÇ¿IÀ¿IÀ  ¿I”
¿IŸ¿Iÿ   ¿J¿k¿Jƒ¿Jƒ  ¿JÕ
¿J”¿J“   ¿LÄµ¿L¿L  ¿L	¿L¿L   ¿M/k¿M3¿M3  ¿M<
¿MB¿MA   ¿N'u¿N+¿N+  ¿N9
¿N?¿N>   ¿R k¿R¿R  ¿R
¿R¿R   ¿R÷q¿R⁄¿R⁄  ¿RÊ
¿RÏ¿RÎ   ¿SÂo¿SÈ¿SÈ  ¿SÙ
¿S˙¿S˘   ¿Uîo¿Uò¿Uò  ¿U£
¿U©¿U®   ¿VÓq¿VÚ¿VÚ  ¿V˛
¿W¿W   ¿YQÄà¿YU¿YU  ¿Y`¿Yg¿Yf   ¿[∏ÄÉ¿[º¿[º  ¿[—
¿[◊¿[÷   ¿]ÄÇ¿]¿]  ¿]%¿]5¿]4   ¿_ï}¿_ô¿_ô  ¿_®¿_±¿_∞   ¿av¿az¿az  ¿aä¿aì¿aí   ¿cY¿c]¿c]  ¿cm¿cv¿cu   ¿dyÄÄ¿d}¿d}  ¿dã¿dô¿dò   ¿e⁄x¿eﬁ¿eﬁ  ¿eÔ¿f
¿f	   ¿gc¿g¿g  ¿g¿g$¿g#   	¿ßÊÅ;¿®w¿®wÄÉ/// Adds an `action` to the semantics tree.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿®Ç¿®ì¿®í  ¿®ö¿®≤¿®±   ¿©%Åm¿©Î¿©ÎÄ∂/// Adds an `action` to the semantics tree, whose `handler` does not expect
/// any arguments.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿™¿™¿™  ¿™¿™(¿™'   ¿ÛÄ¥¿Ûï¿ÛïZ/// Returns the action handler registered for [action] or null if none was
/// registered. ¿Û¶¿Û∑¿Û∂   ¿rÅ0¿w¿w  ¿ê¿ô¿ò   ¿hìÄª¿hˇ¿hˇb/// Whether this configuration will tag the child semantics nodes with a
/// given [SemanticsTag]. ¿i¿i¿i   ¿izÉ¿l¿lÇp/// Specifies a [SemanticsTag] that this configuration wants to apply to all
/// child [SemanticsNode]s.
///
/// The tag is added to all [SemanticsNode] that pass through the
/// [RenderObject] owning this configuration while looking to be attached to a
/// parent [SemanticsNode].
///
/// Tags are used to communicate to a parent [SemanticsNode] that a child
/// [SemanticsNode] was passed through a particular [RenderObject]. The parent
/// can use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [RenderViewport.excludeFromScrolling] for an example of
///    how tags are used. ¿l ¿l.¿l-   ¿níÑ&¿oè¿oèÄÌ/// Whether this configuration is compatible with the provided `other`
/// configuration.
///
/// Two configurations are said to be compatible if they can be added to the
/// same [SemanticsNode] without losing any semantics information. ¿o†¿oπ¿o∏   ¿rºéD¿t¿tÇ/// Absorb the semantic information from `child` into this configuration.
///
/// This adds the semantic information of both configurations and saves the
/// result in this configuration.
///
/// The [RenderObject] owning the `child` configuration must be a descendant
/// of the [RenderObject] that owns this configuration.
///
/// Only configurations that have [explicitChildNodes] set to false can
/// absorb other configurations and it is recommended to only absorb compatible
/// configurations as determined by [isCompatibleWith]. ¿t˜¿u¿u   ¿ÅÜ€¿ÅN¿ÅN0/// Returns an exact copy of this configuration.    ¿ç•äq¿ç•¿êUÇ†/// Base class for all sort keys for [SemanticsProperties.sortKey] accessibility
/// traversal order sorting.
///
/// Sort keys are sorted by [name], then by the comparison that the subclass
/// implements. If [SemanticsProperties.sortKey] is specified, sort keys within
/// the same semantic group must all be of the same type.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// If no sort key is applied to a semantics node, then it will be ordered using
/// a platform dependent default algorithm.
///
/// See also:
///
///  * [OrdinalSortKey] for a sort key that sorts using an ordinal. ¿ê¶ÄΩ¿ëE ¿ëE¿ëU Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿ëW	¿ë]¿ë\   ¿ëgÅ?¿í¢¿í¢Å/// An optional name that will group this sort key with other sort keys of the
/// same [name].
///
/// Sort keys must have the same `runtimeType` when compared.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].   ¿í´Ç…¿íª¿íª  ¿í≈¿í◊¿í÷  ¿í´¿í¨¿ïxÅ’¿ó!¿ó!ÅÖ/// The implementation of [compareTo].
///
/// The argument is guaranteed to be of the same type as this object and have
/// the same [name].
///
/// The method should return a negative number if this object comes earlier in
/// the sort order than the argument; and a positive number if it comes later
/// in the sort order. Returning zero causes the system to use default sort
/// order. ¿ó+ ¿óG¿óF  ¿ó¿ó¿óQÄ√¿ób¿ób  ¿óv&¿óì¿óí  ¿óQ¿óR ¿òáP¿ò¿õnÉO/// A [SemanticsSortKey] that sorts based on the `double` value it is
/// given.
///
/// The [OrdinalSortKey] compares itself with other [OrdinalSortKey]s
/// to sort based on the order it is given.
///
/// [OrdinalSortKey]s are sorted by the optional [name], then by their [order].
/// If [SemanticsProperties.sortKey] is a [OrdinalSortKey], then all the other
/// specified sort keys in the same semantics group must also be
/// [OrdinalSortKey]s.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// The ordinal value [order] is typically a whole number, though it can be
/// fractional, e.g. in order to fit between two other consecutive whole
/// numbers. The value must be finite (it cannot be [double.nan],
/// [double.infinity], or [double.negativeInfinity]). ¿õöÅ¿ú! ¿ú!¿ú/ z/// Creates a const semantics sort key that uses a [double] as its key value.
///
/// The [order] must be a finite number.¿ú0
¿ú6¿ú5  ¿ú=
¿úD¿úC  ¿úP¿úV¿úv¿ú]¿úW¿ú_¿úe¿úf¿ú¿úÖ¿úù¿úå¿úÜ¿úé¿úî¿úï¿ú£Åa¿ùˇ¿ùˇÅB/// Determines the placement of this key in a sequence of keys that defines
/// the order in which this node is traversed by the platform's accessibility
/// services.
///
/// Lower values will be traversed first. Keys with the same [name] will be
/// grouped together and sorted by name first, and then sorted by [order].   ¿û	Äî¿û¿û  ¿û#¿û3¿û2  ¿û	¿û
¿û°Ä≈¿û≤¿û≤  ¿û∆&¿û„¿û‚  ¿û°¿û¢  ¿á„ÇJ¿á„¿àH_/// Used by [debugDumpSemanticsTree] to specify the order in which child nodes
/// are printed.  ¿àdÅ¿âf¿âfÄ˜/// Print nodes in inverse hit test order.
///
/// In inverse hit test order, the last child of a [SemanticsNode] will be
/// asked first if it wants to respond to a user's interaction, followed by
/// the second last, etc. until a taker is found. ¿âyÄ±¿ä¿äÄö/// Print nodes in semantic traversal order.
///
/// This is the order in which a user would navigate the UI using the "next"
/// and "previous" gestures.         ¿f¬Ä©¿f¬¿g$\/// In tests use this function to reset the counter used to generate
/// [SemanticsNode.id].   ¿^xÅC¿^x¿^¿@/// Converts `point` to the `node`'s parent's coordinate system. ¿^⁄¿^È¿^Ë  ¿^Ó¿^ˆ¿^ı   ¿_Ωá:¿_Ω¿a—Åˇ/// Sorts `children` using the default sorting algorithm, and returns them as a
/// new list.
///
/// The algorithm first breaks up children into groups such that no two nodes
/// from different groups overlap vertically. These groups are sorted vertically
/// according to their [_SemanticsSortGroup.startOffset].
///
/// Within each group, the nodes are sorted using
/// [_SemanticsSortGroup.sortedWithinVerticalGroup].
///
/// For an illustration of the algorithm see http://bit.ly/flutter-default-traversal. ¿aÏ¿b¿b   ¿b¿b¿b   ¿ä/Ét¿ä/¿ä@  ¿ä\.¿äw¿äv  ¿äé/¿ä©¿ä®  ¿ä¡)¿ä⁄¿äŸ  ¿äÓ*¿ã¿ã   ¿üjÇI¿üj¿°/Å¿/// Picks the most accurate heading level when two nodes, with potentially
/// different heading levels, are merged.
///
/// Argument [sourceLevel] is the heading level of the source node that is being
/// merged into a target node, which has heading level [targetLevel].
///
/// If the target node is not a heading, the the source heading level is used.
/// Otherwise, the target heading level is used irrespective of the source
/// heading level. ¿°D¿°R¿°Q  ¿°^¿°l¿°k   ¿°µáW¿°µ¿¢Q/// This is just to support flag 0-30, new flags don't need to be in the bitmask. ¿¢¿¢&¿¢%    	ÜµÄ„Üµá_Ä°/// Signature for a function that is called for each [SemanticsNode].
///
/// Return false to stop visiting nodes.
///
/// Used by [SemanticsNode.visitChildren].  áÑáìáí   áöÅáöà~Ä€/// Signature for [SemanticsAction]s that move the cursor.
///
/// If `extendSelection` is set to true the cursor movement should extend the
/// current selection or (if nothing is currently selected) start a selection.  à†à¶à•   à∏Ä–à∏âKÄä/// Signature for the [SemanticsAction.setSelection] handlers to change the
/// text selection (or re-position the cursor) to `selection`.  âoâ~â}   âäÄ§âääo/// Signature for the [SemanticsAction.setText] handlers to replace the
/// current text with the input `text`.  ä!ä)ä(   ä0Ä«ä0äºÄÉ/// Signature for the [SemanticsAction.scrollToOffset] handlers to scroll the
/// scrollable container to the given `targetOffset`.  ä‚äÍäÈ   ä˘Ä∞ä˘ãtr/// Signature for a handler of a [SemanticsAction].
///
/// Returned by [SemanticsConfiguration.getActionHandler].  ãõã§ã£   ã´Ä—ã´å<Äà/// Signature for a function that receives a semantics update and returns no result.
///
/// Used by [SemanticsOwner.onSemanticsUpdate].  ådåuåt   å~Ç»å~é—ÇJ/// Signature for the [SemanticsConfiguration.childConfigurationsDelegate].
///
/// The input list contains all [SemanticsConfiguration]s that rendering
/// children want to merge upward. One can tag a render child with a
/// [SemanticsTag] and look up its [SemanticsConfiguration]s through
/// [SemanticsConfiguration.tagsChildrenWith].
///
/// The return value is the arrangement of these configs, including which
/// configs continue to merge upward and which configs form sibling merge group.
///
/// Use [ChildSemanticsConfigurationsResultBuilder] to generate the return
/// value.  è(     ¿ oˇA¿ oˇ¿ p      èHÄåèRèR èüèoè~èèòèôè•è¥èµèŒèœ   ÄÆ  dart:ui  ÄÃ  package:flutter/material.dart  Ä¸  package:flutter/rendering.dart  Å-  &package:flutter_test/flutter_test.dart ò— <ÄÜÄ§Ä•ÄøÄ√ÄÛÅ$Å]ÅfÅgÅ{ÅóÅ®Å±Å¡Å—ÅﬂÅ¯ÇÇ'ÇCÇZÇsÇìÇ∂ÇœÇÊÇÁÉÉ>ÉäÉ≤É‰ÉÂÑÑ1Ñ2ÑCÑLÑ\ÑjÑÉÑöÑ≤Ñ…ÑÏÖÖÖ2Ö3Ö\ÖeÖ~Ö£ÖºÖ⁄ÖÁÜÜAÜÄÜÅÜ¥ÜµÜ˚Üˇá(á,áWáôáöá’áŸà'àvà∑à∏ââCâââäâ“â˙ä/ä0ä~ä¥ä¯ä˘ã-ã1ãlã™ã´å åå4å}å~å åŒçç\ç°ç–ç‘ééoéséæé…é¯èGèHèkè°è÷è◊êê5êåêøêÌëëAëoëüëÀëıííWíçí∑íÁìì[ìóì¡ìÏîîJîÜîæîËïïLïxï¿ï˘ñ)ñYñáñ¥ñËóóEóPóQóéó›óﬁò#ò$ò_òóò…ôô	ô
ô0ôCôIôJô{ô≠ôÍôÚöKöÜöåöùö°ö¢ö‡õõ9õ?õXõáõ«úúú6ú>úPúTúUúíú´ú⁄ùùdùlùàùêù¢ù¶ùßù‚ûûUû[ûtû£û‰ü-üÜüéü™ü≤üƒü»ü…††b†∞†∂†«†À†Ã°°m°∫°¿°—°’°÷¢¢1¢S¢ç¢«¢˙£G£e£m£n£¨£‰§§
§§7§V§Æ§∆§–§§¯§˘••)•/•0•d•v•z•{•∑•Ÿ¶¶¶¶&¶*¶+¶j¶å¶≈¶À¶Ã¶›¶·¶‚ß"ßIßsß∞ß®®®6®<®å®ê®ë®Ÿ©©B©á©ç©é©µ©ﬂ™™\™q™y™¢™®´´´´K´É´¥´ˆ´¸´˝¨$¨N¨ã¨À¨‡¨Ë≠≠≠m≠q≠r≠≠≠ÂÆÆ-ÆyÆ ÆˇØØØØ#Ø$ØdØúØÀØÂ∞ ∞U∞^∞d∞≠∞Á±±F±ó±ﬂ±Ë±Ó±ˇ≤≤≤=≤s≤ß≤‘≥≥4≥5≥u≥¿≥€¥¥P¥i¥ä¥°¥´¥≥¥π¥À¥œ¥–µµCµeµ¢µø∂"∂-∂5∂]∂c∂d∂ú∂÷∂Ò∑U∑^∑d∑u∑y∑z∑Ω∑Î∏∏J∏g∏»∏”∏€ππ	π
πBπ|πóπ˘∫∫∫∫∫∫Z∫à∫™∫Áªª^ªiªqªôªüª†ªÿºº-ºàºëºóº®º¨º≠ºÔΩ'ΩaΩ|Ω›ΩÊΩÏΩ˝æææ@æxæñæ±øøøøø-ø1ø3ø4øUøYøòøÂ¿ @1¿ @5¿ @É¿ @–¿ @ﬁ¿ @‚¿ A0¿ A~¿ AÃ¿ A€¿ A¿ B¿ B¿ Bf¿ B∂¿ C¿ C¿ C8¿ C9¿ Cv¿ C|¿ C¬¿ C◊¿ Cÿ¿ C‰¿ D0¿ D2¿ D3¿ Dn¿ Dç¿ Dë¿ Dﬁ¿ E¿ Ec¿ Et¿ Ex¿ E¡¿ EÏ¿ F;¿ F<¿ Få¿ F≠¿ F≥¿ Fˇ¿ GI¿ Gã¿ Gπ¿ G∫¿ H	¿ H3¿ H9¿ HÇ¿ Hª¿ I¿ IP¿ IV¿ I§¿ I˜¿ JD¿ Jï¿ J‚¿ K¿ KZ¿ K\¿ K]¿ K™¿ Kª¿ Kø¿ K¯¿ L5¿ LÑ¿ Læ¿ L¿ M-¿ M\¿ M]¿ M©¿ N¿ N¿ N]¿ Ni¿ No¿ Nß¿ NÙ¿ OA¿ OB¿ OÖ¿ OØ¿ Oµ¿ O˜¿ PO¿ Pó¿ Pø¿ P¿¿ Q¿ Q=¿ QM¿ Qü¿ QÎ¿ R ¿ R*¿ R5¿ RE¿ Rh¿ Rµ¿ S¿ S'¿ S2¿ S:¿ SM¿ SW¿ Sß¿ S´¿ S≠¿ SÆ¿ Sﬁ¿ S‚¿ T$¿ Tl¿ T¥¿ T¸¿ UK¿ Uö¿ U®¿ U¨¿ U˚¿ V/¿ V3¿ VÇ¿ Vï¿ Vô¿ V·¿ W¿ W¿ W¿ W"¿ Ws¿ W~¿ Wú¿ W…¿ Wœ¿ WÙ¿ X0¿ XK¿ X^¿ Xs¿ Xt¿ Xƒ¿ X“¿ Xÿ¿ X¸¿ Y-¿ YL¿ Yv¿ Yë¿ Y¶¿ Yß¿ YÂ¿ Y¸¿ Y˝¿ Z9¿ ZO¿ ZP¿ Zä¿ Z´¿ Z¨¿ Z∏¿ Z¿ ZÒ¿ Z˝¿ [ ¿ [L¿ [`¿ [f¿ [ì¿ [≥¿ [—¿ [Ò¿ [ı¿ [ˆ¿ \¿ \¿ \u¿ \y¿ \z¿ \√¿ \‹¿ \ˆ¿ ]P¿ ]¶¿ ]ß¿ ]÷¿ ^¿ ^1¿ ^K¿ ^e¿ ^Ç¿ ^£¿ ^©¿ ^º¿ ^¿¿ ^¡¿ ^¿ _$¿ _=¿ _A¿ _B¿ _ì¿ _®¿ _»¿ _ÿ¿ _¿ `¿ `¿ `*¿ `4¿ `8¿ `:¿ `;¿ `s¿ `~¿ `ó¿ `∫¿ `¿¿ a¿ a¿ a!¿ ak¿ az¿ a…¿ b ¿ b¿ bP¿ bb¿ bæ¿ c¿ c¿ c¿ c2¿ c>¿ c?¿ cw¿ cé¿ cè¿ cπ¿ cø¿ d¿ d+¿ d,¿ do¿ du¿ d∆¿ e¿ eG¿ ea¿ eu¿ e{¿ eõ¿ eÆ¿ e¥¿ eµ¿ e⁄¿ f¿ fd¿ fã¿ f≥¿ fı¿ g#¿ gT¿ gÅ¿ gå¿ gﬂ¿ h¿ h¿ h¿ h^¿ hb¿ hc¿ hØ¿ hª¿ hﬁ¿ i¿ i2¿ iT¿ ió¿ iõ¿ iú¿ i®¿ iﬂ¿ i‡¿ iÏ¿ j¿ jc¿ jg¿ ji¿ jj¿ j¥¿ jÚ¿ kA¿ ká¿ kç¿ k ¿ kÊ¿ k˝¿ l¿ l$¿ lD¿ l\¿ lm¿ lÑ¿ lä¿ lã¿ lÿ¿ m¿ m¿ m>¿ mZ¿ m[¿ mg¿ mÉ¿ m‡¿ m·¿ mÌ¿ n4¿ nM¿ nb¿ nh¿ nâ¿ n‹¿ o¿ oB¿ oH¿ om¿ oÖ¿ oã¿ o¯¿ o¸¿ o˛¿ oˇ¿ pA¿ pB¿ pê¿ pπ¿ pΩ¿ q
¿ q\¿ qt¿ qx¿ qã¿ qó¿ q”¿ qÏ¿ r¿ r;¿ rC¿ rG¿ rz¿ rÜ¿ r‚¿ s¿ se¿ s¡¿ s…¿ sÌ¿ t¿ t ¿ tf¿ t¡¿ u¿ u¿ u4¿ uN¿ uO¿ uå¿ u≤¿ u≥¿ uÂ¿ uÊ¿ u˛¿ v¿ vS¿ vr¿ v±¿ vÕ¿ v˜¿ v˝¿ w¿ w¿ wB¿ wh¿ wi¿ w¢¿ w≈¿ w∆¿ x¿ x¿ x_¿ xr¿ xÖ¿ xü¿ x∞¿ x∂¿ x∑¿ x’¿ y¿ y$¿ y*¿ y+¿ yq¿ y°¿ y‡¿ y˝¿ y˛¿ zV¿ z•¿ z¶¿ z»¿ zÈ¿ zÒ¿ zÚ¿ {¿ {w¿ {º¿ {Ë¿ |¿ |¿ |f¿ |n¿ |o¿ |í¿ |ò¿ |ô¿ |∑¿ |ª¿ |º¿ } ¿ }¿ }%¿ })¿ }+¿ },¿ }d¿ }h¿ }¥¿ ~¿ ~U¿ ~g¿ ~k¿ ~©¿ ~¥¿ ~ﬁ¿ ¿ ¿ V¿ h¿ ã¿ ¶¿ ƒ¿ Á¿ Ä
¿ Ä6¿ Äb¿ ÄÑ¿ Äü¿ Ä¿¿ Äÿ¿ Ä˘¿ Å¿ Å<¿ Å^¿ ÅÅ¿ Å§¿ Å∆¿ ÅË¿ Ç¿ Ç.¿ ÇI¿ Ça¿ ÇÇ¿ Ç¶¿ Ç√¿ Ç›¿ ÇÏ¿ É ¿ É#¿ É2¿ Éc¿ É∏¿ É¬¿ É—¿ Ñ¿ Ñu¿ Ñ¿ Ñé¿ ÑŒ¿ Ö2¿ Ö<¿ ÖK¿ Öî¿ Ü
¿ Ü¿ Ü#¿ Ül¿ Ü‚¿ ÜÏ¿ Ü˚¿ á:¿ áú¿ á¶¿ à¿ à¿ àI¿ à°¿ à´¿ à¨¿ àÎ¿ à˙¿ â¿ âX¿ â\¿ âå¿ âç¿ â§¿ âÃ¿ âÕ¿ ä¿ ä#¿ ä$¿ äd¿ ä¿ äÄ¿ äø¿ ä≈¿ ä˛¿ ã¿ ã>¿ ãl¿ ãm¿ ãÆ¿ ãœ¿ ã’¿ å¿ å¿ åM¿ åw¿ åx¿ å∑¿ åΩ¿ åˆ¿ å¸¿ ç6¿ çd¿ çe¿ ç¶¿ ç«¿ çÕ¿ é¿ é¿ éE¿ éo¿ ép¿ é¨¿ é’¿ é€¿ è¿ è¿ è]¿ èù¿ èû¿ è⁄¿ ê ¿ ê&¿ ê_¿ êe¿ êß¿ ê⁄¿ ê€¿ ë¿ ë@¿ ëF¿ ë¿ ëÖ¿ ë»¿ í¿ í	¿ íE¿ íã¿ íë¿ í ¿ í–¿ ì¿ ìE¿ ìF¿ ìî¿ ìö¿ ì”¿ ìŸ¿ î¿ î>¿ î?¿ îå¿ î∞¿ î∂¿ îÔ¿ îı¿ ï-¿ ïV¿ ïW¿ ïå¿ ïí¿ ïÀ¿ ï„¿ ï‰¿ ñ¿ ñ"¿ ño¿ ñΩ¿ ñ◊¿ ñÿ¿ ó¿ óL¿ ór¿ ós¿ óƒ¿ ó¿ ò¿ ò¿ òc¿ òi¿ ò∂¿ ò¬¿ ò·¿ ò‚¿ ô(¿ ôB¿ ôC¿ ôì¿ ô•¿ ô´¿ ô˚¿ öG¿ öç¿ öì¿ ö£¿ ö©¿ öÛ¿ õ¿ õ¿ õc¿ õu¿ õ{¿ õ∂¿ õº¿ õÃ¿ õ“¿ ú%¿ úF¿ úG¿ úñ¿ ú®¿ úÆ¿ úÈ¿ úÔ¿ úˇ¿ ù¿ ùX¿ ùy¿ ùz¿ ùƒ¿ ù·¿ ùÁ¿ û5¿ û¿ ûî¿ ûö¿ û™¿ û∞¿ û¿ ü*¿ üG¿ üH¿ üî¿ ü¶¿ ü¨¿ ü˘¿ †¿ †¿ †c¿ †•¿ †¬¿ †√¿ °¿ °$¿ °*¿ °w¿ °ã¿ °ë¿ °‚¿ ¢¿ ¢.¿ ¢/¿ ¢V¿ ¢\¿ ¢l¿ ¢r¿ ¢º¿ ¢“¿ ¢”¿ £¿ £%¿ £&¿ £b¿ £É¿ £Ñ¿ £ﬁ¿ £‰¿ §+¿ §|¿ §ã¿ §ß¿ §®¿ §Û¿ •¿ •¿ •K¿ •Q¿ •a¿ •g¿ •Ø¿ •‹¿ •›¿ ¶¿ ¶-¿ ¶.¿ ¶k¿ ¶q¿ ¶¥¿ ¶ÿ¿ ¶Ÿ¿ ß¿ ßS¿ ßT¿ ßç¿ ß≥¿ ß¥¿ ßﬁ¿ ß‰¿ ®/¿ ®U¿ ®m¿ ®n¿ ®ù¿ ®¨¿ ®–¿ ©
¿ ©¿ ©O¿ ©P¿ ©É¿ ©Œ¿ ©œ¿ ©€¿ ™!¿ ™"¿ ™.¿ ™s¿ ™û¿ ™Ï¿ ´P¿ ´Å¿ ´ƒ¿ ´¸¿ ¨¿ ¨T¿ ¨Æ¿ ¨¡¿ ≠¿ ≠,¿ ≠ã¿ ≠í¿ ≠ì¿ ≠’¿ Æ(¿ Æx¿ Æ¿¿ Ø¿ Øb¿ Øº¿ ∞¿ ∞L¿ ∞±¿ ∞‹¿ ∞Ú¿ ±P¿ ±Y¿ ±_¿ ±∂¿ ≤¿ ≤l¿ ≤≈¿ ≥¿ ≥r¿ ≥Ã¿ ¥(¿ ¥x¿ ¥Œ¿ ¥Ô¿ µI¿ µO¿ µu¿ µÿ¿ µﬁ¿ ∂¿ ∂2¿ ∂c¿ ∂Å¿ ∂ù¿ ∂’¿ ∂‡¿ ∂È¿ ∂Ô¿ ∂Û¿ ∂Ù¿ ∑ ¿ ∑#¿ ∑H¿ ∑h¿ ∑å¿ ∑∂¿ ∑Í¿ ∏¿ ∏d¿ ∏™¿ ∏‹¿ π ¿ π0¿ πN¿ πu¿ π´¿ π◊¿ ∫¿ ∫9¿ ∫m¿ ∫°¿ ∫”¿ ª¿ ª?¿ ªg¿ ªï¿ ªπ¿ ª◊¿ º¿ º5¿ ºå¿ ºÀ¿ ºœ¿ º–¿ º‹¿ ºˇ¿ Ω
¿ Ω¿ Ω'¿ Ω<¿ ΩQ¿ Ωo¿ Ωç¿ Ω°¿ ΩÆ¿ Ω¡¿ ΩÀ¿ Ω’¿ ΩË¿ Ω˛¿ æ¿ æ#¿ æ8¿ æM¿ æa¿ ær¿ æà¿ æ¢¿ æ≥¿ æ«¿ æ÷¿ ø1¿ ø=¿ øU¿ øö¿ ø´¿ ø≤¿ ø∑¿ ø∏¿ ø˝¿ ¿&¿ ¿9¿ ¿?¿ ¿h¿ ¿ë¿ ¿ß¿ ¿Ø¿ ¿›¿ ¡ ¿ ¡¿ ¡"¿ ¡*¿ ¡=¿ ¡C¿ ¡U¿ ¡Y¿ ¡[¿ ¡\¿ ¡´¿ ¡Ã¿ ¡‹¿ ¡ˆ¿ ¬¿ ¬.¿ ¬4¿ ¬5¿ ¬a¿ ¬b¿ ¬n¿ ¬Ã¿ ¬Œ¿ ¬œ¿ √¿ √%¿ √)¿ √V¿ √a¿ √õ¿ √≈¿ ƒ¿ ƒ+¿ ƒP¿ ƒQ¿ ƒw¿ ƒ}¿ ƒØ¿ ƒµ¿ ƒ¸¿ ≈)¿ ≈/¿ ≈W¿ ≈r¿ ≈ç¿ ≈é¿ ≈ª¿ ≈¡¿ ≈Û¿ ≈˘¿ ∆C¿ ∆}¿ ∆É¿ ∆µ¿ ∆—¿ ∆Ú¿ ∆Û¿ «%¿ «l¿ «m¿ «y¿ «∏¿ «π¿ «≈¿ «Ë¿ »¿ »(¿ ».¿ »\¿ »Ñ¿ »∂¿ »∫¿ »ª¿ »«¿ …¿ …7¿ …á¿ …„¿ …Á¿ …È¿ …Í¿  9¿  N¿  R¿  ¢¿  ∂¿  ¡¿  ¯¿ À¿ À;¿ ÀM¿ À_¿ Ào¿ ÀÇ¿ Àï¿ Àß¿ À∏¿ À«¿ ÀŸ¿ ÀÍ¿ Ã¿ Ã¿ Ã&¿ Ã<¿ ÃO¿ Ãc¿ Ãu¿ Ãò¿ Ã©¿ Ãº¿ Ã–¿ ÃÊ¿ Ã˚¿ Õ¿ Õ ¿ Õ5¿ ÕN¿ Õk¿ ÕÄ¿ Õê¿ Õ™¿ Õ∫¿ Õ‘¿ ÕÌ¿ Œ¿ Œ)¿ ŒL¿ Œ[¿ Œm¿ ŒÜ¿ Œû¿ Œ∂¿ Œ»¿ Œ·¿ Œ¿ œ¿ œ¿ œX¿ œh¿ œ~¿ œï¿ œ≠¿ œ¬¿ œŸ¿ œÓ¿ –¿ –¿ –$¿ –6¿ –_¿ –â¿ –≠¿ –“¿ –Î¿ –ˇ¿ —%¿ —K¿ —]¿ —q¿ —í¿ —°¿ —‘¿ “¿ “"¿ “1¿ “d¿ “®¿ “≤¿ “¡¿ ”¿ ”\¿ ”f¿ ”u¿ ”∫¿ ‘¿ ‘¿ ‘)¿ ‘Z¿ ‘ú¿ ‘¶¿ ‘µ¿ ‘ˇ¿ ’1¿ ’;¿ ’ö¿ ’õ¿ ’Î¿ ÷¿ ÷¿ ÷f¿ ÷±¿ ÷„¿ ÷˙¿ ÷˚¿ ◊@¿ ◊Ö¿ ◊ï¿ ◊õ¿ ◊€¿ ÿ¿ ÿA¿ ÿG¿ ÿÑ¿ ÿõ¿ ÿú¿ ÿ·¿ Ÿ%¿ Ÿ_¿ Ÿe¿ Ÿ£¿ Ÿ‹¿ ⁄¿ ⁄(¿ ⁄.¿ ⁄m¿ ⁄Ç¿ ⁄É¿ ⁄«¿ € ¿ €¿ €G¿ €á¿ €î¿ €¨¿ €≠¿ €˜¿ ‹8¿ ‹H¿ ‹N¿ ‹ã¿ ‹¢¿ ‹£¿ ‹Ú¿ ›:¿ ›@¿ ›ê¿ ›µ¿ ›Õ¿ ›Œ¿ ﬁ¿ ﬁ¿ ﬁe¿ ﬁw¿ ﬁç¿ ﬁé¿ ﬁ–¿ ﬁ÷¿ ﬂ&¿ ﬂp¿ ﬂ~¿ ﬂí¿ ﬂì¿ ﬂ◊¿ ﬂ›¿ ‡,¿ ‡z¿ ‡ü¿ ‡µ¿ ‡∂¿ ‡˛¿ ·¿ ·N¿ ·`¿ ·y¿ ·z¿ ·æ¿ ·ƒ¿ ‚¿ ‚$¿ ‚:¿ ‚;¿ ‚Ö¿ ‚†¿ ‚°¿ ‚ﬁ¿ ‚‰¿ „¿ „¿ „]¿ „u¿ „v¿ „∑¿ „Ω¿ ‰¿ ‰
¿ ‰\¿ ‰¶¿ ‰˜¿ Â6¿ ÂO¿ ÂP¿ Âë¿ Âó¿ ÂË¿ Ê(¿ Ê.¿ ÊÄ¿ Ê ¿ Á¿ ÁZ¿ Áq¿ Ár¿ Áø¿ Á≈¿ Ë¿ ËV¿ Ë~¿ Ë¿ Ëπ¿ Ëø¿ È¿ È_¿ Èe¿ Èµ¿ Í¿ Í¿ Í¿ Íj¿ Íâ¿ Íè¿ Í‡¿ Î.¿ Î{¿ Î≥¿ Î…¿ Î ¿ Ï¿ Ï¿ ÏT¿ Ï§¿ ÏÈ¿ Ì¿ Ì¿ ÌP¿ Ì_¿ Ìe¿ ÌØ¿ ÌÈ¿ ÌÔ¿ Ó$¿ Ó=¿ Ó>¿ Óã¿ Óπ¿ Óø¿ Ó¿ Ô>¿ Ôt¿ Ôz¿ Ôä¿ Ôê¿ Ô‹¿ Ô¯¿ ¿ ¿ a¿ g¿ w¿ }¿ Ã¿ Ê¿ Á¿ Ò ¿ Ò&¿ Ò6¿ Ò<¿ ÒÇ¿ Òó¿ Òò¿ Ò‡¿ ÒÊ¿ Ú2¿ Ú¿ Ú≤¿ Ú∏¿ Û¿ ÛT¿ Û¢¿ ÛÁ¿ Ù6¿ Ù`¿ Ùf¿ Ùv¿ Ù|¿ ÙÕ¿ ı$¿ ı>¿ ı?¿ ıÇ¿ ıà¿ ı÷¿ ˆ¿ ˆe¿ ˆk¿ ˆ∫¿ ˆ¿¿ ˜¿ ˜9¿ ˜?¿ ˜O¿ ˜U¿ ˜û¿ ˜∏¿ ˜π¿ ¯¿ ¯¿ ¯¿ ¯j¿ ¯~¿ ¯Ñ¿ ¯Œ¿ ˘¿ ˘$¿ ˘%¿ ˘t¿ ˘Ü¿ ˘å¿ ˘Ÿ¿ ˘Ì¿ ˘Û¿ ˙<¿ ˙[¿ ˙|¿ ˙}¿ ˙¿¿ ˚¿ ˚¿ ˚V¿ ˚\¿ ˚®¿ ˚ı¿ ¸/¿ ¸5¿ ¸á¿ ¸ ¿ ¸–¿ ˝¿ ˝$¿ ˝z¿ ˝®¿ ˝Ω¿ ˝Ÿ¿ ˝⁄¿ ˛¿ ˛¿ ˛c¿ ˛ú¿ ˛¢¿ ˛Ò¿ ˇ¿ ˇ¿ ˇ¿ ˇ!¿ ˇr¿ ˇñ¿ ˇÂ¿ ˇ¸¿ ˇ˝¿ P¿ V¿ †¿ Í¿ ¿?¿S¿Y¿i¿o¿ø¿Ó¿,¿W¿X¿ô¿ü¿Ó¿'¿-¿|¿ê¿ñ¿¶¿¨¿˝¿!¿p¿á¿à¿Ÿ¿Ó¿Ù¿>¿à¿é¿›¿Ò¿˜¿¿¿]¿å¿ ¿ı¿ˆ¿<¿á¿ç¿ÿ¿#¿;¿A¿z¿∂¿º¿Ã¿“¿	!¿	P¿	û¿	±¿	—¿	“¿
#¿
p¿
v¿
«¿¿9¿?¿x¿¥¿∫¿ ¿–¿ ¿X¿ü¿”¿‘¿¿e¿k¿∂¿¿¿¿X¿î¿ö¿™¿∞¿ˇ¿.¿|¿è¿Ø¿∞¿¿N¿T¿•¿Ô¿¿¿V¿û¿§¿¥¿∫¿
¿B¿â¿Ω¿æ¿¿#¿)¿w¿∞¿∂¿¿¿¿-¿3¿É¿ß¿ı¿¿¿]¿ê¿ñ¿ﬂ¿)¿/¿|¿ê¿ñ¿¶¿¨¿˚¿*¿g¿ë¿í¿–¿÷¿'¿a¿î¿ö¿‹¿&¿?¿@¿w¿}¿Ã¿“¿¿e¿Æ¿˘¿-¿H¿I¿ì¿ô¿Ô¿=¿C¿ì¿Ï¿=¿i¿o¿æ¿ƒ¿Ÿ¿Á¿¿5¿e¿å¿ò¿¢¿¿¿»¿“¿¿¿I¿m¿s¿£¿…¿ ¿ ¿ +¿ 1¿ ¿ Õ¿ Ù¿!¿!¿!`¿!f¿!±¿" ¿"!¿"'¿"q¿"¬¿#¿#¿#!¿#'¿#w¿#ï¿#ª¿#º¿#„¿#È¿$8¿$>¿$N¿$T¿$ù¿$≥¿$¥¿$·¿$Á¿%7¿%á¿%ï¿%õ¿%È¿&0¿&6¿&É¿&”¿'#¿']¿'z¿'{¿'Æ¿'¥¿(¿(?¿(E¿(ì¿(‚¿(Ù¿(˙¿)G¿)ò¿)È¿*6¿*C¿*f¿*g¿*õ¿*°¿*¿+>¿+]¿+c¿+≥¿+ˇ¿,J¿,ô¿,¨¿,–¿,—¿-¿-¿-[¿-©¿-»¿-Œ¿.¿.k¿.∏¿/¿/¿/@¿/A¿/s¿/y¿/»¿0¿03¿09¿0á¿0”¿1¿1m¿1Ä¿1¢¿1£¿1◊¿1›¿2,¿2z¿2ó¿2ù¿2Ì¿39¿3Ü¿3÷¿3È¿4¿4¿4@¿4F¿4ì¿4◊¿4›¿5#¿5p¿5v¿5¬¿6¿6*¿6L¿6M¿6¿6Ö¿6“¿7¿7¿7b¿7Ø¿7µ¿8¿8S¿8m¿8è¿8ê¿8æ¿8ƒ¿9¿9¿9a¿9ä¿9®¿9©¿9÷¿9‹¿:%¿:6¿:<¿:ã¿:¥¿:—¿:“¿;¿;¿;N¿;T¿;£¿;Ã¿;Î¿;Ï¿<2¿<8¿<Ç¿<≠¿<≥¿=¿='¿=b¿=c¿=™¿=∞¿=˙¿>&¿>,¿>|¿>¢¿>ﬁ¿>ﬂ¿? ¿?&¿?p¿?ó¿?ù¿?Ì¿@¿@I¿@J¿@å¿@í¿@‹¿A¿A	¿AY¿A¿A∂¿A∑¿AÌ¿AÛ¿BD¿Bé¿Bî¿Bﬂ¿C!¿CN¿CO¿CÄ¿CÜ¿C◊¿C˝¿D¿DR¿Do¿Dí¿Dì¿D÷¿D‹¿E*¿Eh¿E∞¿E˙¿F$¿F*¿F{¿FÃ¿G¿G ¿G0¿G6¿GÜ¿GØ¿H ¿H0¿HÇ¿Hµ¿H∂¿H˘¿Hˇ¿IG¿Iá¿I”¿J¿JG¿JM¿Jû¿JÔ¿K=¿KC¿KS¿KY¿K¶¿Kƒ¿L¿LI¿LJ¿Lä¿Lπ¿Lø¿M¿M[¿M´¿MÛ¿M˘¿NK¿Nñ¿N∂¿O¿O¿O%¿Ov¿Oƒ¿O ¿O⁄¿O‡¿P-¿PK¿P`¿P¿PÄ¿P±¿P∑¿Pˆ¿P¸¿QI¿Qò¿Q∂¿Q◊¿Qÿ¿R'¿R-¿Rw¿R∆¿S¿Se¿Sk¿S{¿SÅ¿S…¿T¿T¿TQ¿Tå¿Tí¿T·¿U,¿U2¿UÇ¿U≤¿U∏¿UÚ¿V¿V$¿V%¿Vr¿Vx¿Væ¿W¿WT¿W†¿W¿X:¿XO¿Xs¿Xt¿XΩ¿Y¿Y¿Y¿Ym¿Yµ¿Y“¿Yÿ¿Z&¿Zs¿Zy¿ZÃ¿Z·¿[¿[¿[X¿[á¿[ç¿[ÿ¿[ﬁ¿\.¿\}¿\ë¿\¶¿\Õ¿\Œ¿\⁄¿]¿]J¿]°¿]Ù¿^M¿^¶¿_¿_U¿_ù¿_±¿`	¿`¿`X¿`l¿`ƒ¿`À¿a¿a0¿aP¿at¿añ¿a≤¿aª¿a¬¿b¿b'¿bG¿bk¿bç¿b©¿b≤¿bπ¿bˇ¿cc¿cØ¿d¿dg¿d{¿d™¿d∆¿d‡¿e¿e¿e&¿eâ¿eù¿e–¿eÈ¿f ¿f¿f%¿f,¿f0¿f1¿f=¿fø¿f¡¿f¬¿g¿g¿gE¿gj¿gl¿gm¿gú¿g†¿g¿h7¿hÑ¿h°¿h‘¿hÛ¿h˘¿iI¿i[¿iì¿i±¿i’¿i÷¿j!¿j'¿j^¿j∫¿j…¿jÓ¿k¿k¿k¿kL¿kQ¿k¥¿l¿lG¿lê¿lë¿l≥¿l”¿m'¿mC¿mG¿mH¿mä¿mê¿m‡¿n¿n¿n¿n?¿nE¿né¿nﬁ¿o¿o¿oZ¿o¶¿o‡¿oı¿p ¿p¿p&¿p'¿p5¿p6¿pê¿pñ¿p›¿q.¿q=¿qe¿q|¿qû¿q÷¿r(¿r<¿rB¿rF¿rG¿rÜ¿r†¿r∫¿r”¿s&¿s@¿sU¿si¿so¿ss¿st¿sº¿s¬¿t¿t'¿t-¿t}¿tÕ¿u¿uk¿uö¿u†¿uÁ¿v#¿v)¿ve¿v¥¿v≈¿vÊ¿vÁ¿w,¿w2¿wÉ¿wó¿wù¿wÌ¿x<¿xã¿xÀ¿x—¿y¿y¿yf¿yÉ¿yÑ¿y–¿y÷¿z¿zm¿zΩ¿zÔ¿{¿{¿{+¿{1¿{Ä¿{Œ¿|¿|0¿|6¿|É¿|—¿|Ú¿}U¿}V¿}c¿}d¿}≥¿}π¿}˝¿~2¿~h¿~å¿~≥¿~€¿~È¿~Ô¿¿*¿.¿/¿}¿É¿œ¿Ä¿ÄW¿Äz¿Ä∂¿Ä›¿Å¿Å2¿Å@¿ÅF¿Åj¿Å|¿ÅÄ¿ÅÅ¿ÅÃ¿Å“¿Ç#¿ÇS¿ÇY¿Çi¿Ço¿Çç¿Ç∏¿É¿É¿Én¿Éæ¿Ñ¿Ñ¿Ñ&¿Ñ'¿Ñq¿Ñì¿Ñî¿Ñ„¿Ö2¿ÖE¿Öx¿Öy¿Ö¥¿Ö˙¿Ü
¿ÜK¿ÜÇ¿Ü´¿Üœ¿Ü‚¿ÜÏ¿ÜÌ¿á%¿áB¿áx¿áî¿áú¿á¢¿á◊¿áÚ¿á¯¿à¿à1¿àg¿àÇ¿à®¿àÌ¿â%¿âD¿âP¿âl¿âv¿â~¿âÑ¿âπ¿â€¿âˇ¿äK¿äî¿ä⁄¿ã"¿ãZ¿ãÖ¿ãè¿ã∞¿ãÃ¿ãÊ¿ãÓ¿ãÙ¿åA¿åT¿åd¿åì¿å›¿ç ¿ç>¿ç\¿ç±¿ç‹¿çÎ¿ç¯¿é	¿éB¿éã¿é∫¿éÌ¿é˝¿è\¿è~¿èª¿èÂ¿ê¿ê2¿êC¿êe¿êó¿êº¿êˆ¿ë	¿ë¿ë(¿ë4¿ë>¿ëg¿ë°¿ëª¿í&¿í5¿íL¿íø¿íŒ¿í˛¿ì¿ì+¿ì5¿ì=¿ìÅ¿ìÇ¿ìß¿ìÿ¿ì˝¿î¿îQ¿îd¿în¿îo¿îö¿î—¿î¿ï$¿ïY¿ïu¿ïÜ¿ïê¿ïò¿ïû¿ïª¿ï–¿ï‰¿ïÍ¿ïÓ¿ïÔ¿ñ*¿ñd¿ñz¿ñ{¿ñß¿ñÁ¿ñË¿ó¿ó ¿óq¿ó~¿ó≥¿ó–¿ò¿ò%¿ò7¿òA¿òI¿òO¿òS¿òT¿òÇ¿òà¿ò◊¿ô ¿ôN¿ôá¿ô§¿ô⁄¿ö¿ö6¿ö@¿öH¿öN¿ö_¿öc¿öd¿öò¿öû¿öÚ¿õ¿õ3¿õ4¿õç¿õì¿õ»¿õŒ¿ú¿ú+¿ú,¿úa¿úg¿ú™¿ú“¿úÏ¿úÌ¿ù!¿ù'¿ùw¿ùø¿ù≈¿û¿û+¿û=¿û>¿û]¿ûc¿û∞¿û–¿û„¿û‰¿ü¿ü2¿üT¿üu¿üï¿üõ¿üü¿ü†¿üº¿ü„¿üÁ¿üË¿†'¿†I¿†à¿†â¿†…¿†◊¿†›¿†ﬁ¿°¿°¿°I¿°ö¿°ß¿°–¿°÷¿°⁄¿°€¿¢ ¿¢:¿¢>¿¢?¿¢i¿¢å¿¢ú¿¢Ω¿¢·¿¢˛¿£¿£O¿£b¿£l¿£Ü¿£ö¿£∑¿£Ω¿£◊¿§%¿§t¿§∫¿• ¿•2¿•_¿•c¿•d¿•ç¿•∞¿•ÿ¿•Ú¿¶¿¶¿¶"¿¶&¿¶'¿¶\¿¶q¿¶ó¿¶≥¿¶«¿¶Ú¿ßC¿ßá¿ß•¿ß´¿ß»¿ßÔ¿®¿®¿®+¿®1¿®N¿®Ñ¿®°¿®©¿®Ø¿®≥¿®¥¿®Â¿®˙¿©¿©(¿©S¿©Ü¿©§¿©…¿©‹¿™¿™5¿™k¿™∏¿™Ë¿´¿´&¿´0¿´8¿´>¿´Ç¿´√¿´Â¿´˜¿´˚¿´¸¿¨¿¨¿¨*¿¨@¿¨R¿¨`¿¨f¿¨y¿¨ç¿¨¬¿¨Ê¿¨Ï¿¨¿¨Ò¿≠:¿≠@¿≠_¿≠e¿≠∂¿≠’¿≠Í¿Æ¿Æ¿Æ(¿Æ@¿ÆS¿Æ]¿Æq¿Æu¿Æv¿Æ»¿Ø¿Ø5¿Øk¿Ø≥¿Ø˚¿∞!¿∞D¿∞v¿∞ù¿∞–¿±¿±<¿±s¿±¶¿±◊¿≤
¿≤?¿≤|¿≤“¿≥¿≥E¿≥l¿≥å¿≥¬¿≥∆¿≥«¿≥‚¿≥„¿¥5¿¥z¿¥ß¿¥®¿¥Õ¿µ&¿µ[¿µ\¿µê¿µñ¿µÊ¿∂¿∂"¿∂#¿∂Q¿∂õ¿∂ú¿∂À¿∂Ã¿∂„¿∑¿∑¿∑L¿∑M¿∑å¿∑õ¿∑ø¿∑˘¿∑˝¿∏F¿∏G¿∏á¿∏Ø¿∏‡¿∏·¿π¿π¿πJ¿πP¿πä¿ππ¿π∫¿∫¿∫¿∫@¿∫F¿∫¿∫ª¿ª ¿ª¿ª@¿ªF¿ª¿ªÖ¿ªø¿ªÓ¿ªÔ¿º0¿ºQ¿ºW¿ºê¿ºñ¿ºœ¿Ω¿ΩP¿ΩQ¿Ω¢¿Ωº¿Ω¬¿æ¿æ.¿æ4¿æm¿æs¿æ∂¿æ˜¿æ¯¿øG¿øï¿øõ¿øÈ¿¿¿¿¿¿F¿¿L¿¿é¿¿‹¿¡3¿¡4¿¡Ö¿¡ü¿¡•¿¡Û¿¬¿¬¿¬P¿¬V¿¬ô¿¬⁄¿¬€¿√*¿√x¿√~¿√Ã¿√Í¿√¿ƒ)¿ƒ/¿ƒq¿ƒø¿≈¿≈¿≈e¿≈k¿≈§¿≈™¿≈„¿∆¿∆¿∆^¿∆Ç¿∆à¿∆¡¿∆«¿∆ˇ¿«9¿«|¿«}¿«≤¿«∏¿«Ò¿»¿»>¿»?¿»à¿»ô¿»ÿ¿…¿…¿…S¿…k¿…°¿…‡¿…·¿ 0¿ B¿ H¿ ñ¿ ‰¿À¿À8¿ÀV¿ÀW¿À®¿À‘¿Ã
¿Ã+¿Ã,¿Ã{¿Ãô¿Ã¬¿Ãÿ¿ÃŸ¿Õ%¿Õ+¿Õx¿ÕÑ¿Õ∂¿Õ–¿Õ—¿Œ¿Œ?¿ŒT¿ŒU¿Œ•¿Œ∑¿ŒΩ¿œ¿œY¿œü¿œ•¿œµ¿œª¿–¿–6¿–Q¿–R¿–°¿–≥¿–π¿–Ù¿–˙¿—
¿—¿—c¿—ñ¿—≤¿—≥¿“¿“¿“¿“U¿“[¿“k¿“q¿“√¿“ˆ¿”¿”¿”]¿”z¿”Ä¿”Œ¿‘¿‘-¿‘3¿‘C¿‘I¿‘â¿‘√¿‘Ò¿’	¿’
¿’V¿’h¿’n¿’ª¿’œ¿’’¿÷%¿÷g¿÷ï¿÷≠¿÷Æ¿÷˝¿◊¿◊¿◊b¿◊v¿◊|¿◊À¿◊Û¿ÿ)¿ÿE¿ÿF¿ÿë¿ÿ›¿Ÿ ¿ŸI¿Ÿ|¿Ÿ}¿Ÿ§¿Ÿƒ¿ŸÓ¿ŸÔ¿⁄&¿⁄J¿⁄P¿⁄õ¿⁄Ÿ¿⁄ﬂ¿€¿€-¿€P¿€|¿€}¿€Ω¿‹¿‹¿‹"¿‹e¿‹ô¿‹÷¿‹◊¿›¿›d¿›¥¿›µ¿›Ò¿ﬁ¿ﬁ$¿ﬁm¿ﬁs¿ﬁ√¿ﬂ¿ﬂ&¿ﬂ;¿ﬂm¿ﬂ®¿ﬂ©¿ﬂ˚¿ﬂ¸¿‡L¿‡M¿‡ú¿‡„¿·¿·¿·d¿·í¿·ò¿·È¿‚7¿‚K¿‚x¿‚Æ¿‚µ¿‚”¿„¿„$¿„*¿„+¿„7¿„^¿„è¿„æ¿‰¿‰¿‰¿‰L¿‰†¿‰°¿‰∆¿‰ı¿Â$¿Âe¿Â¶¿Â”¿ÂÚ¿Ê¿Ê9¿Êd¿ÊÉ¿Ê‘¿Á¿ÁE¿ÁL¿Áx¿Á§¿ÁÀ¿Á˘¿Ë)¿ËY¿Ë®¿ËŸ¿È ¿È*¿ÈX¿ÈÜ¿Èº¿È˜¿Í!¿ÍA¿Í[¿Íá¿Íπ¿Í›¿Í˙¿Í˚¿ÎI¿ÎJ¿ÎÅ¿Î§¿Î™¿Î´¿Î∑¿Ï¿Ïï¿Ïú¿Ï®¿Ì¿ÌÜ¿Ìç¿Ìë¿Ìí¿Ì ¿Ì–¿Ó!¿Óm¿Ó†¿Ó≈¿ÓË¿Ô4¿Ôo¿Ôë¿Ô∂¿ÔÔ¿(¿s¿æ¿ı¿Ò¿ÒG¿Òû¿Ò—¿Ú ¿Ú%¿ÚS¿ÚÉ¿Ú≥¿Úﬁ¿Û	¿Û<¿Ûb¿Û¿Ûü¿Û–¿Ù¿ÙC¿Ùg¿Ùû¿ÙÌ¿ı>¿ıD¿ıe¿ıì¿ıË¿ˆ¿ˆ:¿ˆE¿ˆò¿ˆ†¿ˆ‘¿˜)¿˜Z¿˜á¿˜í¿˜Â¿˜Ì¿˜Û¿˜Ù¿¯¿¯N¿¯w¿¯°¿¯“¿˘¿˘0¿˘e¿˘ê¿˘¡¿˘Ù¿˙'¿˙X¿˙â¿˙¬¿˙Â¿˚¿˚<¿˚a¿˚l¿˚m¿˚ç¿˚∂¿˚¿¿˚Ï¿¸¿¸)¿¸^¿¸£¿¸≠¿¸‚¿˝'¿˝1¿˝[¿˝x¿˝Ç¿˝∂¿˝›¿˝Á¿˛¿˛'¿˛1¿˛R¿˛}¿˛ß¿˛±¿ˇ	¿ˇ^¿ˇh¿ˇí¿ˇ…¿ "¿ V¿ Å¿ ê¿ Á¿ Û¿0¿â¿√¿Ù¿¿Z¿f¿p¿£¿‘¿ ¿8¿k¿v¿®¿ÿ¿¿;¿n¿y¿z¿ü¿Œ¿ ¿P¿Z¿[¿ù¿“¿¿i¿ß¿Ò¿<¿s¿¿â¿ä¿ü¿©¿Ø¿∞¿ ¿Ë¿<¿Z¿Ç¿™¿‰¿	¿	D¿	\¿	Ä¿	í¿	Æ¿	∆¿	Í¿
¿
4¿
Z¿
Ç¿
™¿
–¿
ˆ¿$¿o¿ë¿©¿ª¿ﬂ¿	¿%¿;¿B¿F¿G¿w¿û¿¢¿£¿›¿(¿s¿t¿”¿Á¿¿*¿Å¿ú¿±¿π¿Ã¿÷¿¿0¿k¿û¿œ¿‹¿¿Z¿í¿¬¿˛¿¿W¿g¿ù¿“¿¿!¿'¿P¿é¿·¿)¿r¿¡¿…¿œ¿Á¿ı¿¿5¿L¿o¿ô¿—¿˚¿3¿o¿π¿ı¿?¿g¿ù¿∫¿„¿>¿ù¿Œ¿ˇ¿8¿j¿î¿Õ¿¿C¿Ñ¿æ¿Ù¿L¿s¿¢¿π¿Ï¿¿<¿W¿^¿r¿v¿w¿«¿˚¿6¿\¿ù¿‘¿ˆ¿¸¿˝¿.¿X¿¥¿¡¿¿-¿3¿4¿É¿“¿¿f¿¥¿˚¿ ¿ u¿ π¿ ¿!H¿!{¿!ñ¿!“¿"¿"^¿"Æ¿"Œ¿"Ò¿#¿#¿#C¿#^¿#f¿#g¿#√¿#…¿# ¿$¿$2¿$Q¿$i¿$o¿$ó¿$ò¿$¥¿% ¿%¿%¿%¿%]¿%c¿%¨¿%˝¿&&¿&;¿&I¿&O¿&è¿&ì¿&î¿&À¿&‰¿&Ù¿'2¿'E¿'O¿'b¿'f¿'g¿'s¿'¬¿'√¿'œ¿(¿(?¿(Z¿(l¿(¿¿(÷¿)4¿)=¿)]¿)c¿)w¿)¢¿)≥¿)¬¿*¿*¿*¿*0¿*ç¿*î¿*®¿*º¿*Á¿+¿+<¿+E¿+L¿+g¿+´¿+±¿,¿,+¿,â¿,ñ¿,Ò¿-¿-'¿-m¿-∫¿-‚¿-˙¿.¿.(¿.e¿.~¿.∂¿.æ¿.‘¿/0¿/9¿/?¿/S¿/s¿/É¿/∂¿/“¿/€¿/‚¿0¿0¿03¿0]¿0Æ¿0º¿0“¿0Ê¿14¿1z¿1ç¿1ﬁ¿1Ú¿2K¿2R¿2S¿2∂¿3¿3q¿3¬¿4¿4T¿4Ø¿5
¿5Q¿5ú¿5∞¿6¿6¿66¿6x¿6~¿6·¿7¿7#¿7Ñ¿7ç¿7ì¿7Í¿8A¿8†¿8˘¿9J¿9¶¿: ¿:\¿:±¿;¿;3¿;Ñ¿;ä¿;é¿;è¿;◊¿;›¿<-¿<]¿<i¿<Å¿<†¿<æ¿<Ù¿=E¿=]¿=d¿=ß¿=À¿=ı¿>¿>+¿>2¿>6¿>7¿>C¿>i¿>{¿>∫¿?¿?¿?;¿?M¿?`¿?t¿?í¿?ô¿?ù¿?û¿?™¿?⁄¿@+¿@2¿@b¿@Å¿@”¿@›¿@¿@Ù¿@ı¿AD¿Aô¿A∂¿A‹¿A‚¿A„¿B¿B@¿Bç¿Bî¿Bò¿Bö¿Bõ¿BÂ¿C#¿C'¿Cw¿Cƒ¿D¿Dm¿D∏¿DÈ¿E=¿E\¿E]¿E¶¿EÃ¿E“¿EÚ¿E¯¿FL¿Fû¿FÓ¿G¿G¿G¿Gi¿Gã¿G¢¿G£¿G ¿GÊ¿GÁ¿GÛ¿H¿H@¿HD¿HF¿HG¿Hñ¿HÃ¿H–¿I¿I`¿I±¿I≤¿I¸¿J¿J$¿Jp¿Jï¿J±¿J≤¿J◊¿Jÿ¿K
¿KA¿KB¿KN¿K{¿K∞¿K¥¿Kµ¿L¿L¿LY¿Lâ¿LΩ¿LÏ¿M¿Mi¿Mü¿M∞¿M¬¿M·¿N+¿NB¿NM¿NV¿Ng¿Ny¿Nô¿NÁ¿N˛¿O	¿O¿O¿O*¿O+¿Ou¿Oï¿O®¿O—¿OÒ¿P¿Pd¿Pà¿Pó¿P´¿P≥¿PÀ¿PÒ¿Q¿Q¿Q¿Q2¿Q3¿Qa¿Qû¿Q§¿Q•¿Q¡¿R
¿R¿R!¿R"¿Rn¿Rt¿R√¿R‰¿RÍ¿S8¿SÖ¿S’¿S¸¿T¿TM¿Tù¿TÎ¿U:¿Uf¿Uë¿UÆ¿U‘¿UË¿UÓ¿V2¿V`¿Vé¿V≠¿V¸¿W0¿Wz¿W∆¿WÎ¿Wˇ¿X	¿X
¿Xg¿Xü¿X”¿Y¿Y0¿Yb¿Yä¿Y≥¿Yÿ¿Z
¿ZU¿Zá¿ZØ¿Zπ¿Z¡¿Z«¿Z»¿ZÒ¿[¿[T¿[Ü¿[‘¿\"¿\g¿\à¿\®¿\≤¿\Ê¿\¿\Ò¿]¿]0¿]@¿]H¿]b¿]Ö¿]°¿]©¿]¬¿]»¿]…¿^¿^q¿^u¿^w¿^x¿^π¿^˛¿_¿_0¿_4¿_o¿_ï¿_∫¿_º¿_Ω¿`¿`¿`¿`m¿`æ¿`¯¿`¸¿a.¿ac¿ag¿aΩ¿aÍ¿b
¿b)¿b-¿bZ¿bä¿b´¿b˜¿c+¿c:¿cJ¿cg¿cØ¿cƒ¿cÕ¿c‘¿c„¿cÛ¿d¿d]¿dr¿d{¿dÇ¿dÜ¿dñ¿dó¿d„¿e¿e¿e9¿eW¿ei¿e∆¿eË¿eı¿f¿f¿f#¿fE¿fY¿f_¿fc¿f|¿f}¿fï¿fÂ¿fˆ¿f¯¿f˘¿g@¿gu¿gy¿g√¿g«¿h¿h^¿h£¿hı¿hˆ¿i/¿iK¿iL¿iã¿ië¿i–¿i‚¿j¿j¿jS¿j`¿jv¿jw¿jÉ¿jØ¿j„¿k¿k¿k@¿kD¿kF¿kG¿kë¿k¨¿k∞¿kˇ¿lL¿lx¿l¶¿l˙¿m0¿m|¿mÄ¿mÅ¿m”¿n"¿n:¿n@¿nê¿n‰¿o¿o;¿ow¿o∏¿o˜¿o¯¿p+¿p1¿pe¿pö¿põ¿pß¿p∫¿pË¿q¿q¿q1¿qF¿qJ¿qK¿qÅ¿q†¿qÁ¿q˜¿r;¿rå¿r’¿r˚¿s/¿sP¿st¿s∞¿s‚¿sÏ¿t¿t	¿t
¿tQ¿tx¿t≈¿u¿uK¿uî¿u”¿u›¿uÂ¿uÊ¿v
¿v¿v'¿v(¿vq¿v≠¿vœ¿w%¿wJ¿wÅ¿wº¿wœ¿x¿x'¿x/¿x0¿xf¿xπ¿y¿yF¿yY¿y√¿z¿z¿z0¿zÜ¿zŸ¿{¿{¿{$¿{Å¿{›¿|.¿|9¿|C¿|M¿|N¿|m¿|{¿|Å¿|∏¿|¯¿}¿}[¿}§¿}π¿}‘¿}Ú¿~G¿~s¿~≠¿~ ¿/¿W¿¶¿Ä¿ÄM¿Äü¿Å¿Å¿Å¿Å"¿Å(¿Åx¿Å›¿Ç¿Ço¿Ç±¿Çˆ¿É<¿É}¿É°¿É‚¿Ñ%¿Ñk¿ÑØ¿Ñƒ¿ÑÓ¿Ö,¿Ö4¿Ö:¿ÖS¿Öé¿ÖÂ¿Ü¿Ü¿Ü:¿ÜU¿ÜÖ¿Üé¿Üî¿Üº¿Ü”¿Ü◊¿Üÿ¿á4¿á\¿áπ¿áÔ¿à¿à6¿àh¿àr¿àò¿à¢¿à®¿àË¿à˚¿â¿â&¿â*¿â+¿ây¿â¿âŒ¿â¿âˆ¿äC¿ä_¿ä¶¿äˇ¿ã¿ã/¿ã=¿ãC¿ãD¿ãy¿ã–¿ãÙ¿ã˙¿ã˛¿ãˇ¿å@¿åX¿åm¿åâ¿åè¿å±¿å„¿ç¿ç1¿ç9¿çy¿ç¿ç®¿çª¿ç¡¿çÒ¿é¿éC¿éK¿éh¿éù¿éÃ¿éÊ¿é˛¿è¿è¿è'¿èN¿èT¿èp¿è¥¿ê¿ê¿ê0¿êB¿êM¿êl¿êÜ¿êê¿êò¿êû¿ê¿¿êƒ¿ê≈¿ë¿ë¿ël¿ëé¿ëî¿ë·¿ë˝¿íO¿íÇ¿íö¿í®¿íÆ¿ì¿ì¿ì¿ì+¿ì2¿ìM¿ìb¿ìh¿ìl¿ìm¿ìy¿ì®¿ì™¿ì´¿ìÌ¿î¿î¿îO¿îc¿îÇ¿î¢¿î£¿îÒ¿ï¿ï¿ïa¿ï∞¿ï¸¿ñ¿ñ¿ñi¿ñ≥¿ñ‡¿ñÊ¿ó3¿ói¿óç¿ó¥¿óÎ¿ò¿ò¿ò¿ò>¿òs¿òê¿ò∏¿òƒ¿ò¿ô@¿ôS¿ôZ¿ôy¿ô}¿ô~¿ôÃ¿ô◊¿ô›¿ö%¿ö]¿öc¿ö±¿ö√¿öƒ¿õ¿õ¿õa¿õÆ¿õ˙¿ú ¿úM¿úç¿úŸ¿úË¿úÓ¿ù<¿ùã¿ùµ¿ù€¿ù‹¿û-¿û|¿ûØ¿ûµ¿ü¿üP¿üÑ¿ü“¿† ¿†Q¿†W¿†§¿†Û¿°¿°¿°f¿°¥¿°ƒ¿° ¿¢¿¢e¿¢¥¿¢ﬂ¿¢Â¿£5¿£É¿£ ¿£–¿§ ¿§[¿§ó¿§ò¿§≤¿§Ï¿•¿•¿•8¿•>¿•å¿•Ω¿•Ô¿¶¿¶¿¶^¿¶î¿¶ö¿¶™¿¶∞¿¶ÿ¿ß¿ßK¿ßL¿ßq¿ß…¿ß„¿ß‰¿®¿®¿®`¿®p¿®º¿®‹¿© ¿©¿©"¿©#¿©q¿©Ü¿©å¿©‘¿©‰¿™2¿™Z¿™v¿™á¿™è¿™ì¿™î¿™¡¿™«¿´¿´g¿´u¿´{¿´«¿¨¿¨¿¨_¿¨≠¿¨˛¿≠L¿≠ú¿≠Ì¿Æ8¿ÆÜ¿ÆŒ¿Ø¿Ø_¿ØÑ¿Øú¿Øø¿Ø¯¿∞¿∞¿∞¿∞D¿∞J¿∞ö¿∞’¿∞€¿±'¿±v¿±à¿±π¿±◊¿≤ ¿≤?¿≤Y¿≤]¿≤^¿≤í¿≤ò¿≤Á¿≥5¿≥T¿≥Z¿≥™¿≥ˆ¿¥A¿¥ê¿¥£¿¥÷¿¥ı¿µ¿µ_¿µz¿µ~¿µ¿µ∞¿µ∂¿µı¿µ˚¿∂H¿∂ó¿∂µ¿∂‚¿∂˛¿∑%¿∑b¿∑z¿∑~¿∑¿∑¥¿∑∫¿∏	¿∏W¿∏v¿∏|¿∏Õ¿π¿πf¿π∂¿π…¿π˛¿∫¿∫I¿∫ä¿∫¶¿∫™¿∫´¿∫›¿∫„¿ª2¿ªÄ¿ªù¿ª£¿ªÒ¿º=¿ºà¿º◊¿ºÍ¿Ω¿Ω6¿Ω^¿Ωú¿Ωµ¿Ωπ¿Ω∫¿ΩÓ¿ΩÙ¿æC¿æë¿æÆ¿æ¥¿ø¿øP¿øù¿øÌ¿¿ ¿¿3¿¿R¿¿|¿¿º¿¿◊¿¿€¿¿‹¿¡¿¡¿¡g¿¡Ø¿¡˘¿¬¿¬¿¬[¿¬©¿¬˜¿√E¿√j¿√Æ¿√⁄¿ƒ¿ƒ,¿ƒl¿ƒ°¿ƒ…¿ƒ—¿ƒ¿ƒÙ¿ƒı¿≈'¿≈-¿≈z¿≈æ¿≈ƒ¿∆¿∆U¿∆[¿∆ß¿∆˜¿«¿«>¿«[¿«É¿«¡¿«⁄¿«ﬁ¿«ﬂ¿»¿»¿»d¿»®¿»Æ¿»Ú¿…?¿…E¿…ì¿…„¿…˝¿ ,¿ I¿ q¿ Ø¿ »¿ Ã¿ Õ¿ ˚¿À¿ÀI¿ÀO¿Àû¿À«¿ÀÓ¿Ã¿Ã+¿Ãe¿Ãz¿Ã~¿Ã¿Ã¨¿Ã≤¿Ã˚¿Õ¿Õ¿Õa¿Õä¿ÕØ¿Õ«¿ÕÍ¿Œ#¿Œ7¿Œ;¿Œ<¿Œk¿Œq¿Œ∏¿Œæ¿œ¿œ6¿œ_¿œy¿œû¿œŸ¿œÔ¿œÛ¿œÙ¿–*¿–0¿–~¿–Œ¿–Ú¿–¯¿—A¿—â¿—´¿—‚¿“¿“/¿“q¿“é¿“í¿“ì¿“Ÿ¿“ﬂ¿”)¿”T¿”Z¿”®¿”Œ¿‘*¿‘`¿‘°¿‘º¿’
¿’<¿’[¿’c¿’ê¿’î¿’ï¿’‹¿’‚¿÷,¿÷X¿÷^¿÷Æ¿÷‘¿◊2¿◊i¿◊´¿◊∆¿ÿ¿ÿG¿ÿf¿ÿn¿ÿú¿ÿ†¿ÿ°¿ÿ‚¿ÿË¿Ÿ2¿ŸY¿Ÿ_¿ŸØ¿Ÿ’¿⁄'¿⁄X¿⁄î¿⁄Ø¿⁄¯¿€*¿€I¿€Q¿€~¿€Ç¿€É¿€≈¿€À¿‹¿‹<¿‹B¿‹í¿‹∏¿›¿›>¿›{¿›ñ¿›‡¿ﬁ¿ﬁ1¿ﬁ9¿ﬁg¿ﬁk¿ﬁl¿ﬁ¢¿ﬁ®¿ﬁ˘¿ﬂC¿ﬂI¿ﬂî¿ﬂ÷¿‡¿‡<¿‡o¿‡ä¿‡»¿‡Û¿·R¿·ö¿·˚¿‚¿‚ ¿‚$¿‚%¿‚V¿‚\¿‚≠¿‚”¿‚Ÿ¿„(¿„E¿„t¿„í¿„ª¿„÷¿‰¿‰=¿‰h¿‰|¿‰Ñ¿‰ú¿‰†¿‰°¿‰‰¿‰Í¿Â8¿Âv¿Âæ¿Ê¿Ê2¿Ê8¿Êâ¿Ê⁄¿Á(¿Á.¿Á>¿ÁD¿Áî¿ÁΩ¿Ë¿Ë`¿Ëé¿Ë«¿È¿È@¿ÈD¿ÈE¿Èà¿Èé¿È÷¿Í¿Íb¿Í¨¿Í÷¿Í‹¿Î-¿Î~¿ÎÃ¿Î“¿Î‚¿ÎË¿Ï5¿ÏS¿Ï•¿Ïˆ¿Ì$¿Ì]¿Ì¨¿Ì÷¿Ì⁄¿Ì€¿Ó¿ÓA¿Ó[¿ÓÄ¿Óª¿Ó—¿Ó’¿Ó÷¿Ô%¿ÔB¿ÔH¿Ôï¿Ô‚¿4¿Ä¿Ü¿÷¿Ò%¿ÒW¿Ò¢¿Ò∆¿Ú¿Ú]¿Úx¿Ú¢¿ÚÎ¿Û¿Û¿Û¿Ûi¿Û{¿Û”¿Û‘¿Ù#¿Ù5¿Ù;¿Ùâ¿Ù◊¿Ù˛¿ı¿ıS¿ıû¿ı‰¿ˆ¿ˆ9¿ˆW¿ˆÄ¿ˆõ¿ˆ±¿ˆœ¿ˆ”¿ˆ‘¿˜ ¿˜&¿˜n¿˜Ω¿¯¿¯?¿¯k¿¯Ç¿¯§¿¯¿¿¯ﬁ¿¯‚¿¯„¿˘/¿˘5¿˘Ç¿˘é¿˘¿¿˘⁄¿˘ˇ¿˙$¿˙2¿˙8¿˙W¿˙u¿˙y¿˙z¿˙ƒ¿˙’¿˙˝¿˚¿˚2¿˚R¿˚`¿˚f¿˚Ä¿˚û¿˚¢¿˚£¿˚Ì¿¸
¿¸8¿¸P¿¸s¿¸ñ¿¸§¿¸™¿¸«¿¸Â¿¸È¿¸Í¿˝6¿˝H¿˝N¿˝õ¿˝Ø¿˝µ¿˛¿˛:¿˛h¿˛Ä¿˛£¿˛∆¿˛‘¿˛⁄¿˛˜¿ˇ¿ˇ¿ˇ¿ˇi¿ˇ{¿ˇÅ¿ˇŒ¿ˇ‚¿ˇË¿ 3¿ R¿ à¿ §¿ À¿ Ú¿ ¿¿'¿E¿I¿J¿õ¿·¿Á¿,¿q¿Ø¿µ¿¿Q¿Ç¿∂¿÷¿¿"¿&¿'¿f¿l¿∏¿¿K¿Ç¿‰¿)¿X¿ß¿≈¿ˇ¿$¿k¿o¿p¿†¿˘¿¿!¿'¿k¿á¿ô¿ü¿£¿§¿‰¿	¿	'¿	M¿	k¿	â¿	ç¿	é¿	»¿	Î¿
¿
9¿
L¿
j¿
n¿
o¿
©¿
Ø¿
Ò¿
˜¿0¿6¿F¿L¿ö¿…¿Â¿¿3¿7¿8¿á¿ï¿õ¿Â¿4¿Ä¿…¿
¿¿I¿O¿_¿e¿ü¿€¿¿Q¿y¿ó¿õ¿ú¿Ï¿Ú¿4¿:¿s¿y¿â¿è¿›¿+¿q¿ø¿¿4¿P¿Ä¿û¿¢¿£¿Ú¿¿¿f¿µ¿¿J¿ã¿ë¿ ¿–¿‡¿Ê¿ ¿p¿†¿¿ ¿\¿ò¿“¿˙¿¿¿¿W¿Ä¿Ü¿—¿◊¿&¿p¿õ¿°¿⁄¿‡¿¿ˆ¿M¿é¿º¿˛¿¿ ¿!¿[¿°¿ß¿ˆ¿@¿k¿q¿™¿∞¿¿¿∆¿	¿W¿ú¿Ë¿"¿@¿D¿E¿¿®¿Æ¿˘¿ˇ¿N¿ò¿√¿…¿¿¿_¿†¿Œ¿ ¿ .¿ 2¿ 3¿ m¿ ≥¿ π¿!¿!R¿!}¿!É¿!º¿!¬¿!“¿!ÿ¿"¿"i¿"Æ¿"˙¿#4¿#R¿#V¿#W¿#•¿#´¿#Ï¿#Ú¿$+¿$1¿$A¿$G¿$î¿$¡¿$€¿%	¿%'¿%+¿%,¿%|¿%ù¿%£¿%Ï¿&;¿&à¿&—¿'¿'¿'Q¿'W¿'g¿'m¿'¶¿'‡¿(¿(S¿(y¿(ó¿(õ¿(ú¿(—¿(◊¿)¿)2¿)J¿)j¿)Ç¿)†¿)§¿)•¿)Ó¿)ˇ¿*>¿*h¿*ù¿*∂¿*ƒ¿* ¿*Ê¿+¿+¿+	¿+T¿+o¿+u¿+Ö¿+ã¿+⁄¿,¿,(¿,Z¿,x¿,|¿,}¿,Ω¿,√¿,”¿,Ÿ¿-&¿-R¿-q¿-¢¿-¿¿-ƒ¿-≈¿-˚¿.!¿.=¿.k¿.â¿.ç¿.é¿.¡¿.«¿/¿/`¿/ì¿/ô¿/Á¿05¿0É¿0»¿1¿1A¿1G¿1W¿1]¿1≥¿1·¿2 ¿23¿2Q¿2U¿2V¿2ú¿2 ¿3 ¿3!¿3U¿3y¿3ó¿3õ¿3ú¿3Á¿3Ì¿4:¿4ç¿4ﬂ¿5¿5C¿5b¿5´¿5…¿5Õ¿5Œ¿6¿6y¿6¿6–¿7¿7¿7g¿7á¿7’¿7ı¿8>¿8\¿8`¿8a¿8ü¿8•¿8ˆ¿9E¿9z¿9Ä¿9–¿9Ù¿9˙¿:I¿:v¿:|¿:œ¿;%¿;3¿;~¿;ù¿;‰¿;Â¿<¿<¿<¿<Y¿<§¿<∏¿<æ¿=¿=V¿=\¿=•¿=ƒ¿>¿>.¿>f¿>≠¿>À¿>œ¿>–¿?¿?D¿?J¿?õ¿?‚¿?Ë¿@1¿@L¿@ß¿@Œ¿@˛¿AM¿Ak¿Ao¿Ap¿A¡¿B¿B¿Bf¿B¢¿B®¿BÒ¿C¿CP¿Co¿C∂¿C‘¿Cÿ¿CŸ¿D)¿D_¿De¿D≤¿D˙¿EF¿Eu¿E∂¿E‘¿Eÿ¿EŸ¿F¿FI¿Fi¿Fõ¿Fπ¿FΩ¿Fæ¿G¿G1¿GO¿G¿Gù¿G°¿G¢¿GÌ¿H¿H2¿Ha¿H¿HÉ¿HÑ¿HÕ¿HÒ¿I¿I9¿IW¿I[¿I\¿Iì¿I≥¿Iƒ¿I≈¿I·¿I˛¿J¿J¿J(¿JF¿JJ¿JK¿Jñ¿Jæ¿J€¿K
¿K(¿K,¿K-¿Kj¿Kp¿Kæ¿KÁ¿L ¿L¿L!¿LG¿Lh¿Lv¿L|¿Ló¿Lµ¿Lπ¿L∫¿M¿M-¿MJ¿My¿Mó¿Mõ¿Mú¿M‰¿MÛ¿N%¿NG¿N{¿Nô¿Nù¿Nû¿N‹¿N‚¿O1¿OÇ¿Oà¿Oÿ¿P%¿P7¿P=¿Pç¿P¨¿P≤¿Q¿QQ¿Qû¿Q÷¿Q˛¿R¿RJ¿Rh¿Rl¿Rm¿R¶¿R‘¿RÙ¿S&¿SD¿SH¿SI¿S¿SÖ¿S∑¿S„¿T¿T3¿TQ¿TU¿TV¿TÄ¿TÜ¿T’¿U%¿Uf¿Uí¿U±¿U‚¿V ¿V¿V¿V0¿V6¿VÖ¿Væ¿VÏ¿W¿W>¿W\¿W`¿Wa¿Wò¿Wû¿WÔ¿X/¿X5¿XÄ¿Xñ¿Xú¿X¨¿X≤¿Y¿YO¿Yo¿Y∏¿Y÷¿Y⁄¿Y€¿Z+¿ZV¿Z\¿Z¨¿Z˙¿[E¿[v¿[∂¿[ﬂ¿\¿\8¿\<¿\=¿\Ü¿\∫¿\¿]¿]=¿]X¿]t¿]í¿]ñ¿]ó¿]Á¿]˘¿]ˇ¿^O¿^õ¿^·¿^Á¿^˜¿^˝¿_G¿_x¿_ì¿_π¿_‘¿_Ò¿`¿`¿`¿`c¿`u¿`{¿`∂¿`º¿`Ã¿`“¿a%¿aX¿at¿aõ¿a∂¿a‘¿aÚ¿aˆ¿a˜¿bF¿bX¿b^¿bô¿bü¿bØ¿bµ¿c¿c;¿cW¿c~¿cô¿c∑¿c’¿cŸ¿c⁄¿d$¿dX¿dw¿d°¿dº¿dÿ¿dˆ¿d˙¿d˚¿eA¿eà¿eÿ¿f¿f1¿fO¿fS¿fT¿fì¿f≈¿g ¿g,¿gD¿gb¿gf¿gg¿gq¿gr¿g∫¿g“¿gÿ¿gË¿gÓ¿h=¿hM¿hê¿hë¿h‹¿h¯¿iO¿iP¿iw¿ix¿i«¿iÂ¿iÎ¿j/¿jÄ¿jû¿j§¿j¿kA¿ké¿kî¿k§¿k™¿kÎ¿l¿l4¿l_¿l¿lÉ¿lÑ¿l¢¿l£¿l“¿l”¿lÒ¿m¿m+¿m1¿mO¿má¿mÆ¿m…¿m‚¿n ¿n¿n:¿nM¿nS¿ne¿ni¿nj¿nè¿nê¿nŸ¿nÓ¿nÙ¿oC¿oà¿o¡¿p
¿p¿p#¿pY¿pm¿ps¿p§¿p∏¿pæ¿q¿q¿q¿q`¿qt¿qz¿q∆¿q⁄¿q‡¿r:¿rN¿rT¿rä¿rû¿r§¿rµ¿rπ¿r∫¿s¿s¿sZ¿s~¿sÑ¿s”¿t¿t¿t]¿tØ¿tÈ¿u¿u8¿u9¿u\¿uj¿up¿uó¿uÍ¿v ¿vA¿vK¿vU¿vb¿vâ¿vè¿vƒ¿w¿w0¿w]¿wå¿wΩ¿wÓ¿x¿xG¿xp¿x£¿x“¿y¿y8¿y9¿yb¿yä¿y¨¿y≥¿y¥¿yﬂ¿z ¿z¿zD¿zJ¿zz¿z®¿z–¿{¿{4¿{;¿{d¿{ï¿{õ¿{Õ¿|¿|¿|H¿|ã¿|ë¿|∏¿|”¿|Ÿ¿}
¿}/¿}5¿}d¿}ë¿}π¿}Ì¿~¿~#¿~=¿~^¿~d¿~e¿~á¿~¥¿~„¿2¿8¿9¿q¿ª¿Ó¿Ä-¿Äu¿Ä™¿Ä≤¿Ä∏¿Äπ¿Ä˝¿Å¿Å¿Å5¿ÅW¿Å{¿Å≠¿Å›¿Ç?¿Çl¿Ç∏¿Ç‡¿Ç¸¿É¿ÉJ¿Éà¿É¥¿ÉÚ¿Ñ¿ÑD¿Ñ`¿Ñx¿Ñ§¿ÑÃ¿Ñˆ¿Ö"¿ÖN¿Öv¿Öù¿Ö¡¿ÖÔ¿Ü¿ÜC¿Üu¿Üó¿Ü◊¿á¿á3¿áO¿áe¿áç¿áª¿á‹¿á‡¿á‚¿á„¿à2¿àC¿àb¿àè¿àï¿à‚¿â0¿âd¿âv¿âw¿â¶¿â¨¿â˚¿ä¿ä,¿ä.¿ä/¿äZ¿äå¿äø¿äÏ¿ã¿ã¿ãM¿ãn¿ãr¿ã¡¿å¿åI¿åÉ¿åä¿å¶¿å˙¿å˛¿ç+¿çM¿çQ¿çR¿ç¢¿ç§¿ç•¿çˆ¿é¿é¿éd¿é¥¿éÓ¿éÚ¿è>¿èk¿èo¿è¿¿èÏ¿è¿è˛¿ê¿êF¿ê§¿êı¿ë=¿ëd¿ëe¿ë∂¿ë…¿ëœ¿í¿í¿íc¿íí¿í®¿í©¿íµ¿íﬂ¿ì¿ì!¿ìI¿ì†¿ìß¿ì®¿ì˜¿î¿î6¿îU¿î[¿î\¿îÆ¿îΩ¿îÎ¿î¸¿ï1¿ïA¿ïG¿ïH¿ïq¿ïu¿ïv¿ïü¿ï•¿ïı¿ñ¿ñ¿ñc¿ñ≥¿ó¿ó¿ó¿óN¿óO¿ó[¿ó†¿óÀ¿ò¿ò¿ò¿ò¿ò^¿òi¿òm¿ò≥¿òﬂ¿ò„¿ô3¿ôÇ¿ô√¿ô⁄¿ôﬁ¿ö*¿öW¿ö[¿öß¿ö¿õ2¿õh¿õò¿õË¿õÓ¿ú¿úJ¿úy¿ú†¿ú°¿úÔ¿ù?¿ùO¿ùU¿ù£¿ù¿û¿û¿û¿û;¿û[¿ûk¿ûq¿ûö¿ûû¿ûü¿û´¿û¿ü¿üc¿üg¿üi¿üj¿üµ¿üﬂ¿ü„¿†4¿†z¿†~¿†Õ¿°¿°+¿°{¿°≤¿°¥¿°µ¿¢¿¢.¿¢A¿¢`¿¢w¿¢{¿¢î¿¢´¿¢Ø¿¢…¿¢‡¿¢‰¿¢¸¿£¿£¿£2¿£I¿£M¿£f¿£}¿£Å¿£†¿£∑¿£ª¿£‘¿£Î¿£Ô¿§¿§0¿§4¿§L¿§c¿§g¿§Å¿§ô¿§ù¿§∏¿§–¿§‘¿§Ó¿•¿•
¿•"¿•:¿•>¿•U¿•m¿•q¿•ç¿••¿•©¿•»¿•‡¿•‰¿•˝¿¶¿¶¿¶=¿¶U¿¶Y¿¶t¿¶å¿¶ê¿¶™¿¶¬¿¶∆¿¶·¿¶˘¿¶˝¿ß¿ß+¿ß/¿ßG¿ß_¿ßc¿ßÄ¿ßò¿ßú¿ßΩ¿ß’¿ßŸ¿ß˘¿®¿®¿®/¿®G¿®K¿®k¿®É¿®á¿®ß¿®ø¿®√¿®›¿®ı¿®˘¿©¿©   _kUnblockedUserActions_DebugSemanticsRoleChecksSemanticsTag"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuilderCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsLabelBuilderSemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKey_mergeHeadingLevels
_toBitMask	0flutter.semantics.SemanticsProperties.identifierÇíProvides an identifier for the semantics node in native accessibility hierarchy.

This value is not exposed to the users of the app.

It's usually used for UI testing with tools that work by querying the
native accessibility, like UIAutomator, XCUITest, or Appium. It can be
matched with [CommonFinders.bySemanticsIdentifier].

On Android, this is used for `AccessibilityNodeInfo.setViewIdResourceName`.
It'll be appear in accessibility hierarchy as `resource-id`.

On iOS, this will set `UIAccessibilityElement.accessibilityIdentifier`.

On web, this will set a `flt-semantics-identifier` attribute on the DOM element
that corresponds to the semantics node.-flutter.semantics.SemanticsProperties.onFocusÉMThe handler for [SemanticsAction.focus].

This handler is invoked when the assistive technology requests that the
focusable widget corresponding to this semantics node gain input focus.
The [FocusNode] that manages the focus of the widget must gain focus. The
widget must begin responding to relevant key events. For example:

* Buttons must respond to tap/click events produced via keyboard shortcuts.
* Text fields must become focused and editable, showing an on-screen
  keyboard, if necessary.
* Checkboxes, switches, and radio buttons must become toggleable using
  keyboard shortcuts.

Focus behavior is specific to the platform and to the assistive technology
used. See the documentation of [SemanticsAction.focus] for more detail.

See also:

 * [onDidGainAccessibilityFocus], which is invoked when the node gains
   accessibility focus.*flutter.semantics.SemanticsProperties.roleÅmA enum to describe what role the subtree represents.

Setting the role for a widget subtree helps assistive technologies, such
as screen readers, to understand and interact with the UI correctly.

Defaults to [SemanticsRole.none] if not set, which means the subtree does
not represent any complex ui or controls.

For a list of available roles, see [SemanticsRole].3flutter.semantics.SemanticsProperties.controlsNodesÅ]If a widget is controlling the visibility or content of another widget,
for example, [Tab]s control child visibilities of [TabBarView] or
[ExpansionTile] controls visibility of its expanded content, one must
assign a [SemanticsNode.identifier] to the content and also provide a set
of identifiers including the content's identifier to this property.6flutter.semantics.SemanticsProperties.validationResultÅœDescribes the validation result for a form field represented by this
widget.

Providing a validation result helps assistive technologies, such as screen
readers, to communicate to the user whether they provided correct
information in a form.

Defaults to [SemanticsValidationResult.none] if not set, which means no
validation information is available for the respective semantics node.

For a list of available validation results, see [SemanticsValidationResult]./flutter.semantics.SemanticsProperties.inputTypeÅThe input type for of a editable widget.

This property is only used when the subtree represents a text field.

Assistive technologies use this property to provide better information to
users. For example, screen reader reads out the input type of text field
when focused.$flutter.semantics.SemanticsNode.roleÄœThe role this node represents

A semantics node's role helps assistive technologies, such as screen
readers, understand and interact with the UI correctly.

For a list of possible roles, see [SemanticsRole].-flutter.semantics.SemanticsNode.controlsNodesCThe [SemanticsNode.identifier]s of widgets controlled by this node.)flutter.semantics.SemanticsNode.inputTypeÅThe input type for of a editable node.

This property is only used when this node represents a text field.

Assistive technologies use this property to provide better information to
users. For example, screen reader reads out the input type of text field
when focused. ?