Ä¿magnifierConfiguration	focusNodechildcontextMenuBuilderselectionControlsonSelectionChangedgetSelectableButtonItemscreateState_actions_gestureRecognizers_selectionOverlay_startHandleLayerLink_endHandleLayerLink_toolbarLayerLink_selectionDelegate_selectable_hasSelectionOverlayGeometry_lastOrientation_lastSelectedContentselectionOverlay_processTextService_processTextActions_localFocusNode
_focusNode_selectionStatusNotifier	initState_initProcessTextActionsdidChangeDependenciesdidUpdateWidget_makeOverridable_handleFocusChanged_updateSelectionStatus_isShiftPressed_lastSecondaryTapDownPosition_lastPointerDeviceKind_isPrecisePointerDevice_finalizeSelectableRegionStatus _getEffectiveConsecutiveTapCount_initMouseGestureRecognizer_onTapTrackStart_onTapTrackReset_initTouchGestureRecognizer_doubleTapOffset_startNewMouseSelectionGesture_handleMouseDragStart_handleMouseDragUpdate_handleMouseDragEnd_handleMouseTapUp_updateSelectedContentIfNeeded_handleTouchLongPressStart_handleTouchLongPressMoveUpdate_handleTouchLongPressEnd_positionIsOnActiveSelection_handleRightClickDown_selectionEndPosition_userDraggingSelectionEnd _scheduledSelectionEndEdgeUpdate_triggerSelectionEndEdgeUpdate_onAnyDragEnd_stopSelectionEndEdgeUpdate_selectionStartPosition_userDraggingSelectionStart"_scheduledSelectionStartEdgeUpdate _triggerSelectionStartEdgeUpdate_stopSelectionStartEdgeUpdate!_selectionStartHandleDragPosition_selectionEndHandleDragPosition$_handleSelectionStartHandleDragStart%_handleSelectionStartHandleDragUpdate"_handleSelectionEndHandleDragStart#_handleSelectionEndHandleDragUpdate_buildInfoForMagnifier_createSelectionOverlay_updateSelectionOverlay_showHandles_showToolbar_selectEndTo_selectStartTo_collapseSelectionAt_selectWordAt_selectParagraphAt_finalizeSelectionclearSelection_copy_sharecontextMenuAnchors_adjustingSelectionEnd!_determineIsAdjustingSelectionEnd_granularlyExtendSelection_directionalHorizontalBaseline_directionallyExtendSelectioncontextMenuButtonItems _textProcessingActionButtonItemsstartGlyphHeightendGlyphHeightselectionEndpoints
cutEnabledpasteEnabledhideToolbar	selectAllcopySelectiontextEditingValuebringIntoViewcutSelectionuserUpdateTextEditingValue	pasteTextaddremovedisposebuildinvokeActioninvokestategranularity_hasReceivedStartEvent_hasReceivedEndEvent"_lastStartEdgeUpdateGlobalPosition _lastEndEdgeUpdateGlobalPositiondidReceiveSelectionEventFor!didReceiveSelectionBoundaryEventsupdateLastSelectionEdgeLocation/_updateLastSelectionEdgeLocationsFromGeometriesclearInternalSelectionState(clearInternalSelectionStateForSelectablehandleSelectAllhandleSelectWordhandleSelectParagraphhandleClearSelectionhandleSelectionEdgeUpdatedispatchSelectionEventToChildensureChildUpdateddidChangeSelectablesselectables$_kSelectionHandleDrawableAreaPaddingcurrentSelectionEndIndexcurrentSelectionStartIndex_startHandleLayer_startHandleLayerOwner_endHandleLayer_endHandleLayerOwner_isHandlingSelectionEvent_scheduledSelectableUpdate_selectionInProgress
_additions_extendSelectionInProgresslayoutDidChange_scheduleSelectableUpdate_updateSelectables_flushAdditions_removeSelectablevalue_selectionGeometry_updateSelectionGeometry_getBoundingBoxcompareOrder_compareScreenOrder_compareVertically_compareHorizontally_handleSelectableGeometryChangegetSelectionGeometry-_adjustSelectionIndexBasedOnSelectionGeometrypushHandleLayers_updateHandleLayersAndOwnersgetSelectedContentcontentLength_calculateLocalRangegetSelection_flushInactiveSelections_handleSelectBoundaryhandleGranularlyExtendSelection"handleDirectionallyExtendSelectiondispatchSelectionEvent_initSelection_adjustSelectionchanging	finalized _selectableRegionSelectionStatusselectionStatusNotifiermaybeOfupdateShouldNotifyselectionNotifier_initialSelectionGeometry_selectionNotifier_setNotifiernotifyListenersrangestatus	selection
registered"_registerSelectionListenerDelegate$_unregisterSelectionListenerDelegateaddListener_kLongPressSelectionDevices&_kSelectableVerticalComparingThresholdSelectableRegionSelectableRegionState_NonOverrideAction_SelectAllAction_CopySelectionAction _GranularlyExtendSelectionAction%_GranularlyExtendCaretSelectionAction(_DirectionallyExtendCaretSelectionAction StaticSelectionContainerDelegate)MultiSelectableSelectionContainerDelegate_SelectionInfo"SelectableRegionContextMenuBuilderSelectableRegionSelectionStatus(_SelectableRegionSelectionStatusNotifier$SelectableRegionSelectionStatusScopeSelectionListener_SelectionListenerState_SelectionListenerDelegateSelectionDetailsSelectionListenerNotifierÅ∫SetPointerDeviceKindtouchstylusinvertedStylusdoubleTextSelectionAreamaterial
SelectableSelectionContainerSelectionEventSelectionRegistrarScopedelegateSelectionRegistrarmaybeOfSelectionRegistrantdisabledchanging	finalizedValueListenableaddListenerStatedidChangeDependenciesdisposeremoveListenerWidgetTesterdragFrom	GlobalKeySelectableTextSelectionHandlerStatefulWidgetTextMagnifierConfiguration	FocusNodeWidgetemptyTextSelectionControlsTextSelectionControlsValueChangedSelectedContentContextMenuButtonItemcontextMenuButtonItemsEditableTextgetEditableButtonItemsAdaptiveTextSelectionToolbarbuttonItemsgetAdaptiveButtonsListSelectionGeometryVoidCallbackboolselectionGeometrystatusSelectionStatusuncollapsed
hasContentdefaultTargetPlatformTargetPlatformandroidmacOSfuchsialinuxwindowsiOSonShare	onPressedonCopytypeContextMenuButtonTypecopyshareonSelectAll	selectAlloverrideTextSelectionDelegateMapTypeActionIntentSelectAllTextIntentCopySelectionTextIntent6ExtendSelectionToNextWordBoundaryOrCaretLocationIntentgranularityTextGranularityword'ExpandSelectionToDocumentBoundaryIntentdocument ExpandSelectionToLineBreakIntentline ExtendSelectionByCharacterIntent	character'ExtendSelectionToNextWordBoundaryIntent ExtendSelectionToLineBreakIntent-ExtendSelectionVerticallyToAdjacentLineIntent'ExtendSelectionToDocumentBoundaryIntentGestureRecognizerFactorySelectionOverlay	LayerLinkvaluestartSelectionPointendSelectionPointOrientationvisibleForTestingProcessTextServiceDefaultProcessTextServiceProcessTextActionwidget	focusNode
debugLabel_	protectedvoid	initStateTapGestureRecognizer$GestureRecognizerFactoryWithHandlers
debugOwnerinstanceonSecondaryTapDownFutureclearaddAllqueryTextActions
MediaQueryorientationOfcontextdidUpdateWidgethasFocusoverridabledefaultActionkIsWeb#PlatformSelectableRegionContextMenudetachSchedulerBindinglifecycleStateAppLifecycleStateresumedattachTextSelection	collapsed
baseOffsetextentOffsetnoneoffsetTextEditingValuetext	selectionPointerDownEventBaseTapAndDragGestureRecognizerOffsetmousetrackpadunknownintminTapAndPanGestureRecognizersupportedDevicesonTapTrackStartonTapTrackReset	onTapDownonTapUponDragStartonDragUpdate	onDragEndonCanceldragStartBehaviorDragStartBehaviordownHardwareKeyboardlogicalKeysPressedintersectionLogicalKeyboardKey	shiftLeft
shiftRight
isNotEmpty%TapAndHorizontalDragGestureRecognizervalueswheredevicetoSeteagerVictoryOnDragLongPressGestureRecognizeronLongPressStartonLongPressMoveUpdateonLongPressEndTapDragDownDetailskindconsecutiveTapCountrequestFocusisShiftPressedValidglobalPositionTapDragStartDetailsTapDragUpdateDetails
continuoustextGranularity	paragraphTapDragEndDetailsTapDragUpDetailstoolbarIsVisibleisPointerPreciseonSelectionChangedgetSelectedContent	plainTextcallLongPressStartDetailsHapticFeedbackselectionClickLongPressMoveUpdateDetailsLongPressEndDetailsRectselectionRectsMatrix4getTransformToMatrixUtilstransformRectselectionRectcontainsTapDownDetails0lastSecondaryTapDownPositionWasOnActiveSelectionlocationSelectionEdgeUpdateEventSelectionResultpendingdispatchSelectionEventforEndaddPostFrameCallbackDurationDragEndDetailsisDraggingStartHandleisDraggingEndHandleselectionControlsTextSelectionHandleControlshideMagnifiershowToolbarcontextMenuBuilderBuildContextforStartDragStartDetailslocalPositiontransformPointshowMagnifierDragUpdateDetailsdelta
lineHeightupdateMagnifierMagnifierInfoSelectionPointVector3getTranslationxyfromLTWHdxdyglobalGesturePosition	caretRectfieldBoundssizecurrentLineBoundariesdebugRequiredForstartHandleType
handleTypeTextSelectionHandleTypelineHeightAtStartonStartHandleDragStartonStartHandleDragUpdateonStartHandleDragEndendHandleTypelineHeightAtEndonEndHandleDragStartonEndHandleDragUpdateonEndHandleDragEndselectionEndpointsselectionDelegateclipboardStatusstartHandleLayerLinkendHandleLayerLinktoolbarLayerLinkmagnifierConfigurationleftrightshowHandlesOverlayBrowserContextMenuenabledtoolbarLocationhideToolbarSelectWordSelectionEventSelectParagraphSelectionEventClearSelectionEvent	ClipboardsetDataClipboardDataSystemChannelsplatforminvokeMethodTextSelectionToolbarAnchorsprimaryAnchor	RenderBoxfindRenderObjectfromSelection	renderBoxstartGlyphHeightendGlyphHeighthasSelectionGranularlyExtendSelectionEventforwardisEnd!DirectionallyExtendSelectionEvent	directionSelectionExtendDirectionnextLinepreviousLinegetSelectableButtonItemsEditableTextStateSelectionChangedCausetoolbaraddlabelactionStringprocessTextActionidTextSelectionPointTextDirectionltr
DeprecatedhideHandlesSelectAllSelectionEventcauseTextPositionpushHandleLayersdebugCheckHasOverlayselectionStatusNotifierchild	registrarCompositedTransformTargetlinkRawGestureDetectorgesturesbehaviorHitTestBehaviortranslucentexcludeFromSemanticsActionsactionsFocuswithExternalFocusNodeincludeSemanticsContextActionObjectcallingActioninvokekeyboard_copyDirectionalTextEditingIntent_granularlyExtendSelectionDirectionalCaretMovementIntentcollapseSelection_directionallyExtendSelectionSelectionContainerDelegate
selectablecurrentSelectionStartIndexcurrentSelectionEndIndexmaxindexselectablesglobalSelectionEdgeLocationforEachremovehandleSelectAllhandleSelectWordhandleSelectParagraphhandleClearSelectionSelectionEventTypeendEdgeUpdatehandleSelectionEdgeUpdatestartEdgeUpdate
selectWordselectParagraphgranularlyExtendSelectiondirectionallyExtendSelectiondispatchSelectionEventToChildremoveWheredidChangeSelectablesChangeNotifier kFlutterMemoryAllocationsEnabledmaybeDispatchObjectCreationschedulerPhaseSchedulerPhasepostFrameCallbacksscheduleMicrotasktoListsortlengthindexOfremoveAtmustCallSupernotifyListenersboundingBoxesfirstexpandToInclude
ComparatortopbottomabsprecisionErrorToleranceisEmptygetTransformFromisFinitehasSizecontainerSizewidthheightmap	intersectinflatedataStringBufferwritetoStringcontentLengthfoldsumSelectedContentRangegetSelection	endOffsetstartOffsetrangetargetrectnextpreviousendbackwardcopyWithEditableTextContextMenuBuilderInheritedWidget"dependOnInheritedWidgetOfExactTypeselectionNotifier_setNotifier"_registerSelectionListenerDelegate$_unregisterSelectionListenerDelegate	ExceptionStatefulWidgetStateTextSelectionDelegateSelectionRegistrarContextAction_NonOverrideAction)MultiSelectableSelectionContainerDelegateSelectionContainerDelegateChangeNotifierValueListenableInheritedWidget StaticSelectionContainerDelegateSelectionDetailsVßê¢°˝@ê“Xw9A    Å^   
dart:async  Ås   	dart:math  Åà   package:flutter/foundation.dart  Å≤   package:flutter/gestures.dart  Å⁄   package:flutter/rendering.dart  Ç   package:flutter/scheduler.dart  Ç,   package:flutter/services.dart  ÇT   'package:vector_math/vector_math_64.dart  Çá   actions.dart  Çû   
basic.dart  Ç≥   context_menu_button_item.dart  Ç€   
debug.dart  Ç   focus_manager.dart  É   focus_scope.dart  É(   framework.dart  ÉA   gesture_detector.dart  Éa   magnifier.dart  Éz   media_query.dart  Éï   overlay.dart  É¨   ,platform_selectable_region_context_menu.dart  É„   selection_container.dart  Ñ   text_editing_intents.dart  Ñ*   text_selection.dart  ÑH   #text_selection_toolbar_anchors.dart¿ ﬂ” ¿7«é< <ÄÜÄ§Ä•Ä’ÅÅÅ7ÅSÅ\Å]ÅrÅÜÅáÅ±ÅŸÇÇ+ÇSÇÖÇÜÇùÇ≤Ç⁄ÇÔÉÉ'É@É`ÉyÉîÉ´É‚ÑÑ)ÑGÑuÑvÑéÑ•Ñ¶ÑˆÖÖ-ÖQÖTÖUÖ£ÖÒÜ2ÜmÜnÜ®Ü¨Ü˘áIáôáÂà,à|à¢à¶àıââ#âkâ∑ääRäVäÇäÜä◊ãããbã•ã ãŒååYå®å˜çHçñç¬ç∆ééeé´é˚èèèhèúè‡èÔèÛê!ê%ê9ê=êIêZêxê≤êÀëë)ëOëèëœëﬁëÎëˆëˇíííí!í%íJíoíêí≤í’í˘ììDìtì†ìÀì˜î$îYîèîìîóîπîΩïïOïgïkïµññ9ñ=ñåñ◊ó"óAóEóYó•ó¬ó∆ò!ò1ò5òKòOòûòÎô)ô-ôAôçô”ô◊ö6öFöJöõö„õõ
õõlõpõÿõËõÏú6úâúÿù&ù*ùBùFùûùˆûNû™ûıû˘ü7üküoü¬††0†4†Ñ†Ò°B°ê°ﬁ¢¢¢¢¢j¢ª¢Ë¢Ï¢¯£\£d£h£v£z£∫£Á§1§Ñ§ü§Ô•=•V•§•Ò¶?¶g¶ó¶≈¶Àßß;ßVßeßÇßñß›ß˙®®8®>®?®é®î®Â©0©b©h©ó©“©”™™ ™!™X™^™è™•™¶™Â´%´&´o´~´Ñ´Œ¨¨>¨?¨o¨´¨¨¨¯≠!≠'≠w≠ì≠ô≠©≠Ø≠˜Æ9ÆäÆƒØØJØ~Ø—∞∞Z∞í∞∫∞Á±±±j±¶±È≤B≤`≤Ä≤û≤≈≥≥e≥ê≥–≥Û≥˙¥9¥:¥¥⁄¥€µ,µrµÖµ©∂∂8∂é∂¶∑∑5∑ã∑í∑ñ∑ó∑£∑Â∑Á∑Ë∏∏H∏g∏ã∏’ππcπ±∫∫∫J∫S∫Z∫ô∫Í∫¯ª'ª0ª7ªoªπª«ªÚª˚ºº:ºâºóº«º–º◊ΩΩlΩzΩ•ΩÆΩµΩÌæ<æJæuæ~æÖæ ø/ø6øuøÀøŸ¿ @¿ @¿ @¿ @¿ @¿ @`¿ @ä¿ @±¿ @Ë¿ A¿ AP¿ A≤¿ B¿ B¿ B¿ BI¿ Bá¿ B¡¿ B¬¿ B„¿ C¿ C¿ CS¿ CY¿ Cñ¿ C´¿ CÍ¿ CÎ¿ DB¿ Dê¿ Dë¿ D⁄¿ E'¿ E(¿ Ed¿ EÇ¿ E†¿ E˚¿ E¸¿ FV¿ F¢¿ F÷¿ F◊¿ F‰¿ F¿ G¿ G¿ GM¿ Gp¿ Gì¿ G®¿ Gÿ¿ H¿ HT¿ HÄ¿ H¡¿ HŒ¿ HŸ¿ H¯¿ H¸¿ H˝¿ IN¿ Is¿ I§¿ I≈¿ J¿ J¿ J¿ J%¿ J1¿ JR¿ Ju¿ Jö¿ JΩ¿ J‹¿ JÎ¿ K¿ K/¿ KP¿ Ks¿ KÉ¿ Kâ¿ Kä¿ K’¿ L¿ L@¿ Lf¿ Lt¿ Lz¿ L•¿ LÀ¿ M¿ M¿ M¿ M¿ M'¿ M3¿ Mh¿ Mé¿ M¡¿ N¿ ND¿ Nh¿ Nà¿ N‘¿ O¿ O¿ OQ¿ Oì¿ O≤¿ O∫¿ O¿¿ Oƒ¿ O≈¿ P¿ Pa¿ Pe¿ Pf¿ PÖ¿ P•¿ Pπ¿ Q¿ Q	¿ Q\¿ Q´¿ Q˜¿ RH¿ Rì¿ RÂ¿ S5¿ SY¿ Ss¿ S∆¿ SÒ¿ S˘¿ Sˇ¿ T¿ TW¿ T]¿ Ta¿ Tb¿ TÑ¿ T≈¿ U¿ U)¿ UÅ¿ U…¿ U–¿ V¿ VC¿ Vd¿ Vq¿ Vï¿ Vµ¿ Vª¿ Vø¿ V¿¿ Vœ¿ V–¿ W ¿ W\¿ W|¿ W}¿ W√¿ W⁄¿ X¿ X¿ XS¿ Xj¿ Xó¿ Xò¿ XÂ¿ Y¿ Y*¿ Y?¿ Yf¿ Yã¿ Y∏¿ Y‹¿ Z¿ Z¿ Z¿ Z"¿ Z#¿ ZN¿ Z§¿ ZÒ¿ Zˇ¿ [¿ [U¿ [Y¿ [Z¿ [™¿ [˝¿ \M¿ \í¿ \ó¿ \È¿ \˝¿ ]4¿ ]S¿ ]x¿ ]õ¿ ]æ¿ ^!¿ ^o¿ ^ª¿ ^Ò¿ _¿ _¿ _i¿ _æ¿ `¿ `S¿ `•¿ `Ó¿ a¿ a2¿ ac¿ aâ¿ aº¿ a›¿ b*¿ b¿ b–¿ c¿ cm¿ c∂¿ c„¿ c˙¿ d+¿ dQ¿ dÑ¿ d£¿ dƒ¿ dÁ¿ e4¿ eâ¿ e‹¿ f¿ f2¿ f8¿ f<¿ f=¿ fd¿ fö¿ f‰¿ g¿ g.¿ gz¿ gá¿ gπ¿ gŒ¿ h¿ h4¿ ho¿ hõ¿ hœ¿ i¿ i5¿ i_¿ iõ¿ i®¿ i≥¿ i∑¿ i∏¿ i‘¿ j%¿ j~¿ jê¿ jî¿ jï¿ j±¿ jŒ¿ j“¿ j”¿ j˙¿ kR¿ k™¿ l	¿ lJ¿ lü¿ l÷¿ lÙ¿ mN¿ mÜ¿ mû¿ m´¿ mË¿ m˝¿ n@¿ nç¿ nœ¿ o¿ oS¿ oï¿ o’¿ p¿ p]¿ põ¿ p‹¿ q¿ qA¿ qí¿ qÕ¿ q˘¿ r-¿ rc¿ rì¿ rΩ¿ r˘¿ s¿ s¿ sG¿ së¿ sΩ¿ s€¿ t¿ t#¿ tU¿ tj¿ t®¿ t¿ u+¿ u8¿ uC¿ uG¿ uH¿ ud¿ u®¿ u”¿ v ¿ v.¿ vQ¿ vz¿ v°¿ v»¿ vÎ¿ w;¿ wO¿ wb¿ wá¿ w¨¿ w”¿ wÓ¿ x<¿ xå¿ xŸ¿ y¿ y/¿ yà¿ yØ¿ yÎ¿ zD¿ zY¿ zg¿ zÖ¿ z«¿ {¿ {(¿ {6¿ {_¿ {Ç¿ {ﬂ¿ |8¿ |q¿ |Ü¿ |î¿ |œ¿ }&¿ }y¿ }ó¿ }•¿ }Ã¿ }Û¿ ~¿ ~=¿ ~d¿ ~ü¿ ~ˆ¿  ¿ ¿ 7¿ ^¿ Ö¿ ®¿ ˙¿ ÄA¿ Ä|¿ Äæ¿ Å¿ Å%¿ ÅJ¿ Åo¿ Åñ¿ Å÷¿ Ç-¿ Ç7¿ Ç=¿ Çc¿ Çg¿ Çh¿ Ç§¿ ÇÒ¿ Çˇ¿ ÉN¿ Éô¿ É´¿ Éµ¿ ÉÌ¿ Ñ@¿ ÑF¿ Ñl¿ Ñp¿ Ñq¿ ÑØ¿ Ñ¸¿ Ö
¿ ÖY¿ Ö§¿ Ö∂¿ Ö¿¿ Ü¿ Ü[¿ Üi¿ Üí¿ Üπ¿ Ü‡¿ á3¿ ái¿ á∆¿ á‚¿ à¿ à4¿ àk¿ à|¿ à’¿ à„¿ â¿ â ¿ âH¿ âÉ¿ âØ¿ ä¿ ä-¿ äe¿ äå¿ äö¿ ä¥¿ ä‚¿ ã¿ ã7¿ ãF¿ ãù¿ ã¿ å¿ å¿ åA¿ åf¿ åç¿ åß¿ å’¿ åı¿ ç*¿ ç9¿ çê¿ çö¿ ç®¿ ç—¿ ç¯¿ é¿ éB¿ éí¿ éª¿ è¿ è)¿ èY¿ è{¿ è∑¿ è»¿ ê!¿ ê/¿ êT¿ êy¿ ê†¿ ê∫¿ êË¿ ë¿ ëB¿ ëQ¿ ë®¿ ë≤¿ ë∏¿ ëﬁ¿ ë‚¿ ë„¿ í¿ íG¿ íõ¿ íÍ¿ ì<¿ ìç¿ ì≠¿ ìÙ¿ î¿ î<¿ î_¿ îë¿ î´¿ î≈¿ îœ¿ îÓ¿ ï ¿ ï:¿ ïD¿ ïe¿ ïÜ¿ ï©¿ ï˙¿ ñ	¿ ñ¿ ñ)¿ ñO¿ ñv¿ ñz¿ ñ{¿ ñ∞¿ ñÁ¿ ó7¿ óÅ¿ ó¬¿ ò¿ ò2¿ òN¿ ò]¿ òu¿ ò}¿ òã¿ òë¿ òﬁ¿ òÏ¿ ô¿ ô<¿ ôc¿ ôÜ¿ ô°¿ ô„¿ ö:¿ ö_¿ öÑ¿ ö´¿ öÔ¿ ö˘¿ õ¿ õT¿ õ}¿ õ§¿ õÀ¿ õ¿ úE¿ úò¿ ú∂¿ ú‘¿ ú‚¿ ù¿ ù*¿ ùF¿ ù¶¿ ùΩ¿ ùÕ¿ û¿ ûq¿ ûè¿ ûù¿ û¬¿ ûÁ¿ ü¿ üU¿ üw¿ üä¿ üî¿ üö¿ ü¡¿ üÁ¿ üÎ¿ üÏ¿ †¿ †C¿ †Q¿ †W¿ †ü¿ †‡¿ °¿ °C¿ °I¿ °M¿ °N¿ °ë¿ °∂¿ °’¿ ¢¿ ¢W¿ ¢¢¿ ¢Ù¿ £C¿ £~¿ £î¿ £ö¿ £¿¿ £ƒ¿ £≈¿ §¿ §k¿ §∫¿ §‡¿ §‰¿ §Â¿ •$¿ •>¿ •d¿ •ã¿ •ü¿ •⁄¿ •¿ •ˆ¿ •˙¿ •˚¿ ¶C¿ ¶ì¿ ¶÷¿ ß)¿ ßZ¿ ßo¿ ßw¿ ß}¿ ßè¿ ßì¿ ßî¿ ßÀ¿ ®¿ ®o¿ ®´¿ ® ¿ ®Ô¿ ©¿ ©5¿ ©X¿ ©©¿ ©È¿ ™M¿ ™¿ ™ä¿ ™ ¿ ´¿ ´I¿ ´ã¿ ´•¿ ´Ê¿ ¨¿ ¨$¿ ¨.¿ ¨t¿ ¨ì¿ ¨“¿ ¨Û¿ ≠X¿ ≠q¿ ≠É¿ ≠ç¿ ≠Ã¿ ≠Ì¿ Æ¿ Æ&¿ Æ8¿ ÆB¿ Æì¿ Æ”¿ Ø7¿ Øi¿ Øt¿ Øµ¿ Ø˝¿ ∞¿ ∞¿ ∞\¿ ∞É¿ ∞“¿ ∞ˆ¿ ±2¿ ±F¿ ±Å¿ ±ß¿ ±´¿ ±¨¿ ±“¿ ±”¿ ±Ù¿ ≤;¿ ≤l¿ ≤m¿ ≤≥¿ ≤π¿ ≥
¿ ≥[¿ ≥ç¿ ≥Ÿ¿ ¥%¿ ¥p¿ ¥ø¿ µ¿ µQ¿ µ_¿ µe¿ µí¿ µΩ¿ µÒ¿ ∂¿ ∂(¿ ∂5¿ ∂X¿ ∂á¿ ∂”¿ ∑¿ ∑¿ ∑ ¿ ∑R¿ ∑ú¿ ∑‘¿ ∑‚¿ ∑Ë¿ ∑Ï¿ ∑Ì¿ ∏¿ ∏=¿ ∏b¿ ∏¿¿ π¿ π"¿ πN¿ πx¿ πÄ¿ πç¿ π´¿ π◊¿ πˇ¿ ∫¿ ∫R¿ ∫ê¿ ∫ù¿ ∫®¿ ∫∞¿ ∫∂¿ ∫–¿ ∫ˆ¿ ª¿ ª!¿ ª"¿ ªI¿ ªw¿ ªô¿ ªù¿ ªû¿ ª¡¿ º¿ º?¿ º@¿ ºà¿ ºé¿ ºﬂ¿ Ω0¿ Ωb¿ Ω∞¿ Ω¸¿ æG¿ æñ¿ æﬁ¿ ø,¿ ø:¿ ø@¿ øm¿ øö¿ ø–¿ ø˙¿ ¿¿ ¿¿ ¿7¿ ¿h¿ ¿¥¿ ¿Á¿ ¿˘¿ ¡¿ ¡7¿ ¡É¿ ¡Ω¿ ¡À¿ ¡—¿ ¡’¿ ¡÷¿ ¡ˇ¿ ¬/¿ ¬Q¿ ¬U¿ ¬V¿ ¬|¿ ¬}¿ ¬Æ¿ ¬›¿ ¬ﬁ¿ √&¿ √h¿ √i¿ √«¿ ƒ¿ ƒr¿ ƒs¿ ƒô¿ ƒ˛¿ ≈¿ ≈+¿ ≈/¿ ≈0¿ ≈z¿ ≈’¿ ∆¿ ∆h¿ ∆Ü¿ ∆≤¿ «¿ «+¿ «,¿ «T¿ «π¿ «¿¿ «Ê¿ »5¿ »9¿ »:¿ »Ä¿ »¿¿ …¿ …c¿ …≈¿ …∆¿ …Ï¿  O¿  V¿  |¿  Ä¿  Å¿  …¿ À ¿ Àj¿ À≥¿ Àœ¿ À˘¿ ÃH¿ Ãn¿ Ão¿ Ãó¿ Ã˙¿ Õ¿ Õ'¿ Õv¿ Õz¿ Õ{¿ Õ£¿ Õ≈¿ ÕË¿ ÕÓ¿ ŒF¿ Œü¿ Œœ¿ œ¿ œ9¿ œ`¿ œ£¿ œ¨¿ œÕ¿ œ‘¿ œ’¿ œÔ¿ –#¿ –?¿ –¿ –…¿ ––¿ –‘¿ –’¿ –¯¿ —"¿ —G¿ —U¿ —[¿ —´¿ —˜¿ “!¿ “9¿ “Y¿ “®¿ “Á¿ ”+¿ ”q¿ ”ú¿ ”Á¿ ‘$¿ ‘d¿ ‘¶¿ ‘œ¿ ‘˝¿ ’0¿ ’O¿ ’l¿ ’ü¿ ’Œ¿ ’˘¿ ÷6¿ ÷=¿ ÷A¿ ÷B¿ ÷e¿ ÷ä¿ ÷ò¿ ÷û¿ ÷»¿ ◊¿ ◊d¿ ◊{¿ ◊«¿ ÿ¿ ÿQ¿ ÿê¿ ÿ¡¿ ÿ≈¿ ÿ∆¿ ÿÈ¿ ÿÔ¿ Ÿ:¿ ŸG¿ Ÿ_¿ ŸÑ¿ Ÿ¨¿ Ÿø¿ Ÿ≈¿ Ÿ∆¿ ŸÔ¿ ⁄¿ ⁄	¿ ⁄
¿ ⁄)¿ ⁄O¿ ⁄`¿ ⁄d¿ ⁄e¿ ⁄ç¿ ⁄ì¿ ⁄ﬁ¿ €.¿ €{¿ €å¿ €í¿ €„¿ ‹¿ ‹S¿ ‹g¿ ‹m¿ ‹n¿ ‹ø¿ ›¿ ›_¿ ›™¿ ›Î¿ ﬁ¿ ﬁ/¿ ﬁ5¿ ﬁ6¿ ﬁ[¿ ﬁ|¿ ﬁÇ¿ ﬁÉ¿ ﬁ∂¿ ﬁ˙¿ ﬂ"¿ ﬂ5¿ ﬂ;¿ ﬂ<¿ ﬂb¿ ﬂc¿ ﬂá¿ ﬂü¿ ﬂ“¿ ‡¿ ‡¿ ‡¿ ‡-¿ ‡1¿ ‡2¿ ‡u¿ ‡{¿ ‡…¿ ·¿ ·c¿ ·i¿ ·≠¿ ·Î¿ ·Ò¿ ‚;¿ ‚ä¿ ‚“¿ ‚¯¿ ‚˛¿ „1¿ „7¿ „d¿ „j¿ „æ¿ ‰¿ ‰<¿ ‰B¿ ‰R¿ ‰ô¿ ‰ﬁ¿ Â¿ Âc¿ Âµ¿ Ê¿ Ê=¿ ÊS¿ Êo¿ Êå¿ Ê≤¿ Êπ¿ Ê–¿ Ê˚¿ ÁZ¿ Ác¿ Áq¿ Áw¿ Á¢¿ Á»¿ Ë¿ Ë¿ Ë¿ Ë¿ Ë`¿ Ëf¿ Ë¥¿ È¿ ÈN¿ ÈT¿ Èö¿ Èÿ¿ Èﬁ¿ Í(¿ Íw¿ Íø¿ ÍÂ¿ ÍÎ¿ Î¿ Î$¿ ÎQ¿ ÎW¿ Î´¿ ÎÛ¿ Ï)¿ Ï/¿ Ï?¿ ÏÇ¿ Ï«¿ Ì¿ ÌL¿ Ìû¿ ÌÓ¿ Ó&¿ Ó>¿ ÓZ¿ Ów¿ Óù¿ Ó§¿ Óª¿ ÓÊ¿ ÔG¿ ÔP¿ Ô^¿ Ôd¿ Ôë¿ Ôπ¿ ¿ 	¿ ¿ ¿ L¿ R¿ ¿ Ö¿ ï¿ ‹¿ Ò¿ Òd¿ Ò£¿ ÒÈ¿ Ú;¿ Ús¿ Ú´¿ Úÿ¿ ÚÚ¿ Û¿ Û8¿ Û<¿ Û=¿ Ûr¿ Ûx¿ Û•¿ Û´¿ Û¯¿ ÙC¿ Ùè¿ Ùï¿ ÙÁ¿ ı¿ ı¿ ı$¿ ık¿ ıÆ¿ ıÛ¿ ˆ2¿ ˆÇ¿ ˆ‘¿ ˜¿ ˜=¿ ˜j¿ ˜Ñ¿ ˜ﬂ¿ ˜„¿ ˜‰¿ ¯!¿ ¯'¿ ¯T¿ ¯Z¿ ¯¶¿ ¯Ò¿ ˘B¿ ˘H¿ ˘ö¿ ˘¡¿ ˘«¿ ˘◊¿ ˙¿ ˙a¿ ˙¶¿ ˙‰¿ ˚*¿ ˚b¿ ˚ò¿ ˚≈¿ ˚ﬂ¿ ¸?¿ ¸C¿ ¸D¿ ¸o¿ ¸u¿ ¸¬¿ ˝¿ ˝¿ ˝Y¿ ˝©¿ ˝Ú¿ ˛¿ ˛!¿ ˛D¿ ˛i¿ ˛m¿ ˛n¿ ˛Ø¿ ˛…¿ ˛„¿ ˇ¿ ˇ1¿ ˇw¿ ˇù¿ ˇ°¿ ˇ¢¿ ˇ¡¿ ¿ ¿ ,¿ 2¿ t¿ x¿ y¿ ô¿ ﬁ¿ ˆ¿¿
¿Z¿^¿_¿ñ¿ú¿¨¿≤¿¿0¿g¿ò¿Á¿¿'¿|¿”¿ˇ¿¿¿e¿õ¿∑¿·¿¿5¿<¿@¿A¿a¿ö¿ƒ¿Í¿¿¿[¿ß¿‡¿˘¿9¿S¿`¿¢¿®¿Ú¿-¿1¿2¿Å¿¨¿ﬁ¿Ï¿Ú¿	¿	A¿	[¿	ñ¿	∏¿	¡¿	»¿	Ó¿
=¿
d¿
h¿
i¿
ì¿
î¿
…¿
˚¿	¿¿e¿ß¿›¿¿]¿ß¿ﬂ¿¿¿A¿j¿í¿≠¿›¿¿=¿F¿M¿s¿¬¿È¿Ì¿Ó¿¿¿c¿å¿í¿¢¿®¿¸¿I¿õ¿‚¿1¿G¿ò¿Õ¿¿M¿ù¿ÿ¿¿A¿T¿e¿f¿ù¿∆¿Ì¿¿2¿â¿∏¿€¿˚¿ ¿E¿l¿á¿ë¿ö¿≤¿€¿¿%¿L¿Ç¿ß¿Ã¿Û¿¿'¿1¿:¿N¿`¿a¿ö¿√¿Í¿¿/¿Ü¿µ¿ÿ¿¯¿¿B¿i¿Ñ¿é¿ó¿»¿Ã¿Õ¿¿a¿¶¿æ¿ÿ¿ﬁ¿ﬂ¿!¿8¿W¿v¿ñ¿Œ¿˘¿S¿p¿~¿ã¿ñ¿ü¿•¿Ω¿¡¿¬¿ˇ¿¿d¿h¿i¿§¿¬¿¿	¿
¿Y¿ç¿›¿)¿S¿•¿ı¿ ,¿ Q¿ í¿ ’¿ ﬁ¿ Î¿!¿!S¿!î¿!ù¿!£¿!∂¿!∫¿!ª¿!„¿"%¿"Q¿"á¿"à¿"ó¿"¿¿"˘¿"˝¿#	¿#)¿#*¿#9¿#b¿#õ¿#ü¿#´¿#Õ¿#Œ¿#⁄¿$
¿$0¿$G¿$o¿$u¿$y¿$z¿$Ü¿$π¿$œ¿%¿%K¿%a¿%w¿%}¿%£¿%Ú¿&¿&¿&¿&-¿&V¿&è¿&ì¿&ü¿&”¿&‡¿&ˆ¿'E¿'l¿'p¿'q¿'Ä¿'©¿'‚¿'Ê¿'Ú¿(;¿(<¿(K¿(t¿(≠¿(±¿(Ω¿(Î¿)%¿))¿)*¿)9¿)b¿)õ¿)ü¿)´¿)ﬁ¿)Ò¿)ı¿)ˆ¿*¿*.¿*g¿*k¿*w¿*–¿+¿+¿+¿+¿+@¿+y¿+}¿+â¿+«¿+⁄¿+ﬁ¿+ﬂ¿,¿,¿,¿,4¿,U¿,s¿,©¿,¯¿,¸¿,˝¿-	¿-0¿-W¿-ê¿-ø¿-◊¿-€¿-‹¿-È¿-ı¿.¿.A¿.p¿.í¿.∫¿/¿/B¿/j¿/å¿/™¿/Â¿0¿0?¿0T¿0X¿0Y¿0f¿0r¿0ô¿0ƒ¿1 ¿19¿1û¿1•¿1∑¿1˙¿2 ¿2&¿2E¿2f¿2ç¿2º¿2‡¿2¯¿3¿3C¿3h¿3ã¿3¶¿3≥¿3æ¿3«¿3Œ¿3“¿3‘¿3’¿4#¿4'¿4u¿4∆¿4⁄¿5)¿5d¿5e¿5q¿5ß¿5»¿5Ù¿5˙¿6$¿6(¿6*¿6+¿6t¿6î¿6ï¿6∫¿6ª¿6«¿7¿7G¿7K¿7M¿7N¿7ü¿7√¿7ƒ¿7È¿7Í¿7ˆ¿8E¿8X¿8\¿8^¿8_¿8Æ¿8“¿9¿9 ¿9E¿9j¿9k¿9w¿9∞¿9Û¿9˜¿9˘¿9˙¿:P¿:t¿:∆¿:«¿:Ï¿;¿;¿;¿;W¿;{¿;±¿;ø¿;≈¿<¿<¿<¿<¿<h¿<å¿<ƒ¿<≈¿<Í¿<Î¿<˜¿=0¿=T¿=ä¿=ò¿=û¿=◊¿=€¿=›¿=ﬁ¿>,¿>g¿>k¿>π¿?¿?O¿?S¿?£¿?Ò¿@B¿@ó¿@Ω¿@¡¿A¿At¿AÕ¿B4¿B8¿BF¿BJ¿Bö¿BÂ¿C@¿CÄ¿C¡¿C¬¿D ¿D?¿D@¿DÉ¿D±¿D≤¿DÛ¿E¿E ¿Ez¿EÄ¿E‘¿F&¿F;¿FA¿Fö¿F∂¿Fº¿G¿G/¿G5¿Gì¿GÏ¿G˘¿HN¿Hd¿Hu¿H£¿Hµ¿HÂ¿Hˆ¿I&¿IT¿IZ¿I^¿I_¿I®¿IÊ¿J,¿J2¿J|¿Jœ¿K¿K;¿KA¿Kü¿K¯¿L¿L2¿LÄ¿Lé¿Lî¿LÂ¿M4¿Ml¿MØ¿Mµ¿MÏ¿M¿MÒ¿NB¿Nw¿NÑ¿N≠¿Nﬁ¿N¯¿Nˇ¿O¿OW¿Od¿O¨¿O≤¿O∂¿O∑¿P¿P7¿Pr¿Pû¿P‰¿Q,¿QP¿Qã¿Q“¿Q˘¿R:¿R`¿Rz¿RÖ¿Rú¿R•¿R´¿R’¿S¿S]¿S¿S∂¿S˘¿T ¿Ta¿TÖ¿Tù¿T®¿Tæ¿T«¿TÕ¿T—¿T“¿T˝¿U¿UG¿Uç¿UÃ¿UŸ¿V ¿VC¿Vr¿Vü¿V£¿V§¿VË¿VÓ¿W6¿Wf¿Wl¿W∞¿W˝¿X
¿XS¿XÇ¿XØ¿X≥¿X¥¿X¿¿XÁ¿Y!¿Y?¿YC¿YD¿YP¿Yì¿Y‘¿Y˝¿Z¿Z¿Z¿Z!¿Zf¿Z®¿Z—¿Z‰¿ZË¿ZÈ¿Zı¿[D¿[ã¿[¥¿[«¿[À¿[Ã¿[ÿ¿\¿\b¿\Ö¿\ò¿\ú¿\ù¿\©¿\˜¿]¿]U¿]ì¿]ö¿]Õ¿]—¿]“¿]ﬁ¿]Ò¿^¿^)¿^-¿^.¿^:¿^ô¿^≥¿^‚¿_.¿_V¿_É¿_Œ¿_ˆ¿`¿`Y¿`Ç¿`¨¿`€¿`Í¿a#¿a_¿aú¿aƒ¿a ¿b¿b¿b¿bj¿bp¿bí¿b‚¿c¿c:¿cå¿c«¿d¿d0¿d<¿do¿dÀ¿e$¿e_¿eh¿eî¿e…¿e—¿f¿f¿fr¿fÕ¿g
¿g¿gA¿gv¿g~¿gπ¿gø¿g√¿gƒ¿g–¿g¿h$¿hE¿h°¿h™¿h∞¿hÊ¿i¿ig¿ip¿iv¿iµ¿i€¿j!¿j(¿jP¿jñ¿jù¿jø¿j√¿j≈¿j∆¿k¿k¿k!¿kr¿k¿¿l ¿l\¿lv¿l¿¿l¿m¿mT¿mZ¿m^¿m_¿mü¿m–¿m—¿n¿n*¿n0¿n~¿nŒ¿nÈ¿nÔ¿o5¿on¿ot¿oπ¿o˚¿o¸¿pA¿pN¿ps¿pt¿pª¿p»¿pÔ¿p¿q¿q6¿qT¿qx¿qy¿q£¿qŒ¿qÛ¿r"¿r#¿rN¿rO¿r[¿r¿rÆ¿rŒ¿rÔ¿rÛ¿rÙ¿s ¿s'¿sP¿sò¿sƒ¿sÕ¿t¿t(¿t.¿tQ¿tr¿tv¿tw¿tæ¿tŸ¿t˘¿t˝¿t˛¿u#¿uJ¿us¿uß¿u“¿u‰¿uÓ¿v¿v8¿v@¿vA¿vú¿vÌ¿w9¿wÖ¿wø¿wÏ¿w˚¿x3¿xO¿xå¿xó¿xü¿x•¿x©¿x™¿x»¿xÏ¿y¿y&¿y,¿yH¿yL¿yM¿yh¿y¡¿yˇ¿z!¿z;¿zV¿zê¿z∆¿zÂ¿{J¿{Å¿{∫¿|¿|5¿|p¿|§¿|Æ¿|Á¿}¿}#¿}`¿}|¿}é¿}ñ¿}ó¿}Ë¿~¿~S¿~™¿¿0¿8¿~¿®¿¡¿«¿”¿Ä¿Ä?¿Ä}¿ÄÑ¿Ä◊¿Å&¿Åt¿Å√¿Ç¿Ç@¿Çv¿Çó¿Çõ¿Çú¿ÇŒ¿É(¿É_¿ÉÄ¿É≠¿É“¿Éÿ¿Ñ¿Ñ.¿Ñ4¿Ñt¿Ñx¿Ñy¿Ñæ¿ÑÀ¿Ñ‹¿Ñ¸¿Ö¿Ö ¿Ö!¿Ö-¿Öb¿Ö§¿Öª¿Ö›¿Ö‚¿Ö„¿Ü0¿ÜT¿Üì¿ÜΩ¿Ü‚¿Ü˚¿á¿á%¿á)¿á*¿áa¿áì¿á‚¿à*¿à0¿àC¿àG¿àH¿àî¿à¥¿à∫¿à⁄¿àÁ¿â)¿â*¿âi¿â«¿ä%¿ä^¿äu¿ää¿äê¿äø¿ä√¿äƒ¿ã¿ã ¿ã&¿ãp¿ã≤¿ã‰¿å%¿åh¿å∂¿å˘¿çG¿çW¿ç]¿çß¿çÃ¿ç“¿ç˚¿çˇ¿é ¿éP¿éò¿éû¿é›¿è¿è&¿èã¿èú¿è¢¿è∑¿ê¿ê,¿ê2¿êo¿êñ¿êú¿ê√¿ê«¿ê»¿êÛ¿ëD¿ëí¿ë‹¿í¿í¿í¿í5¿í9¿í:¿í¿íå¿íπ¿ì¿ìD¿ì¶¿ì¨¿ì≠¿ì‘¿î&¿îJ¿îl¿îu¿î≈¿îÁ¿ï¿ï¿ï¿ï¿ïS¿ï®¿ñ¿ñ9¿ñt¿ñ©¿ñﬁ¿ó¿ó¿ó ¿ó@¿óu¿óÀ¿ò¿ò¿òT¿ò]¿òï¿ò±¿ò÷¿òˆ¿ô;¿ôÄ¿ôã¿ôì¿ôô¿ôö¿ô–¿ö!¿öT¿ö∏¿öÎ¿õ"¿õ(¿õF¿õw¿õ…¿õ˛¿ú¿úJ¿úS¿úã¿ú•¿ú»¿úÊ¿ù'¿ùh¿ùs¿ù{¿ùÅ¿ùÇ¿ùÀ¿û¿û>¿ûe¿ûÆ¿ûæ¿ü¿ü|¿ü”¿ü˘¿†E¿†ù¿†·¿†Ó¿°¿°[¿°h¿°}¿°º¿°¬¿°√¿°·¿¢¿¢+¿¢Q¿¢≤¿¢Â¿¢˝¿£¿£¿£	¿£T¿£°¿£Ô¿§<¿§ã¿§®¿§≠¿§˝¿•V¿•ã¿•µ¿¶¿¶.¿¶4¿¶M¿¶Q¿¶R¿¶^¿¶¶¿¶Ú¿ß ¿ß¿ß+¿ßL¿ßp¿ßt¿ßu¿ß∆¿ßÃ¿®¿®`¿®Ø¿®…¿®Ò¿©*¿©_¿©•¿©Œ¿©È¿©˙¿™¿™.¿™R¿™é¿™†¿™√¿™Ú¿´¿´`¿´Å¿´Æ¿´–¿¨¿¨c¿¨¶¿¨¨¿¨˙¿≠¿≠C¿≠Å¿≠®¿≠∞¿≠⁄¿Æ¿Æ;¿ÆC¿ÆQ¿ÆW¿ÆX¿Æ•¿Æ·¿ÆÁ¿Ø0¿Øj¿Øp¿Øq¿Ø∑¿Ø∏¿Ø˙¿∞.¿∞c¿∞Ω¿∞À¿∞—¿∞“¿±¿±^¿±§¿±®¿±©¿±‚¿±Ó¿≤¿≤X¿≤è¿≤‚¿≤È¿≥¿≥¿≥ ¿≥P¿≥ä¿≥≥¿≥π¿≥Û¿≥˜¿≥¯¿¥G¿¥M¿¥¢¿¥¬¿¥Œ¿¥È¿µM¿µN¿µú¿µÒ¿∂=¿∂é¿∂´¿∂˚¿∑I¿∑\¿∑b¿∑{¿∑í¿∑Ø¿∏¿∏E¿∏∑¿π'¿πg¿π™¿π√¿∫!¿∫'¿∫e¿∫ü¿∫ƒ¿∫ﬁ¿ª¿ªJ¿ªç¿ªö¿ª§¿ª‘¿ªı¿º¿º¿º?¿ºe¿ºâ¿ºí¿º¿¿ºÊ¿Ω
¿Ω¿Ω,¿Ω]¿Ω∫¿Ω’¿Ω‰¿æ4¿æ<¿æB¿æN¿æ`¿ø¿ø
¿ø+¿øj¿øß¿øÆ¿ø≤¿ø≥¿¿¿¿A¿¿G¿¿ë¿¿∑¿¿√¿¿Ï¿¡*¿¡a¿¡∂¿¡Ω¿¡Í¿¡Ó¿¡Ô¿¬0¿¬k¿¬p¿¬√¿¬ı¿¬˙¿√>¿√b¿√∞¿√æ¿√ƒ¿ƒ¿ƒO¿ƒt¿ƒú¿ƒÆ¿ƒ¯¿≈¿≈/¿≈É¿≈ê¿≈û¿≈§¿≈˘¿∆L¿∆é¿∆¬¿∆‘¿∆‹¿«2¿«8¿«<¿«=¿«n¿«{¿«æ¿«ı¿»-¿»3¿»W¿»é¿»Ø¿»≥¿»¥¿»Ù¿… ¿…S¿…´¿…≤¿…·¿ ¿ l¿ Ø¿À¿À¿À8¿Àz¿À©¿À‚¿Ã&¿Ãc¿Ãò¿Ã™¿Ã∑¿Ãı¿Õ$¿Õ7¿ÕC¿ÕM¿ÕU¿Õ}¿Õ ¿Œ"¿ŒÄ¿Œß¿Œ±¿ŒÏ¿œ ¿œ
¿œW¿œÇ¿œå¿œ»¿–¿–_¿–u¿–ø¿–◊¿–˛¿—V¿—g¿—∞¿—∫¿—ﬁ¿—Ì¿“(¿“u¿“õ¿“•¿“≠¿“≥¿“‹¿“¸¿” ¿”¿”8¿”i¿”v¿”ª¿”‰¿”Ë¿”È¿‘%¿‘[¿‘h¿‘∑¿‘‡¿‘‰¿‘Â¿’-¿’:¿’~¿’µ¿’Ì¿’Û¿÷¿÷;¿÷\¿÷`¿÷a¿÷†¿÷≠¿◊¿◊[¿◊á¿◊¢¿◊Â¿◊Ù¿ÿL¿ÿT¿ÿZ¿ÿµ¿Ÿ¿Ÿ+¿Ÿ]¿Ÿ¥¿ŸŒ¿⁄¿⁄S¿⁄[¿⁄h¿⁄ñ¿⁄‹¿⁄ˆ¿€G¿€w¿€¿€Ö¿€ú¿€ ¿€◊¿‹¿‹¿‹ ¿‹$¿‹%¿‹d¿‹q¿‹—¿›%¿›Q¿›™¿›€¿ﬁ ¿ﬁt¿ﬁ}¿ﬁÉ¿ﬁﬁ¿ﬂ;¿ﬂZ¿ﬂå¿ﬂ·¿‡¿‡4¿‡R¿‡Ü¿‡Æ¿‡˙¿·	¿·<¿·H¿·R¿·Ä¿·—¿·ˇ¿‚5¿‚S¿‚á¿‚Ø¿‚˙¿„	¿„<¿„H¿„R¿„¿„≠¿„‹¿„‚¿„˘¿‰'¿‰4¿‰d¿‰j¿‰}¿‰Å¿‰Ç¿‰•¿‰≤¿Â ¿Â:¿Âf¿Âï¿Â«¿ÂÕ¿Â˘¿Ê'¿ÊX¿Ê\¿Ê]¿Êi¿Ê™¿ÊÙ¿Á2¿Ám¿Áì¿Áô¿Áœ¿Áı¿Ë¿Ë0¿Ë_¿Ëå¿Ë∏¿È¿È,¿ÈX¿Èù¿È∆¿ÈÚ¿Í6¿Í`¿Íå¿Í“¿Î¿Î-¿Î}¿Î∂¿Î·¿Ï<¿Ïx¿Ï£¿Ì¿Ì
¿Ì1¿ÌQ¿Ìd¿Ìh¿Ìi¿Ìu¿Ìà¿Ìø¿Ó¿Ó¿Ó/¿ÓW¿Ól¿Óp¿Óq¿Óø¿Ó≈¿Ô¿ÔT¿ÔZ¿Ô™¿Ôæ¿ÔÀ¿Ô˝¿Ô˛¿=¿C¿í¿ ¿◊¿Ò6¿Òk¿Òo¿Òp¿Ò¨¿Ò≤¿Ú¿ÚP¿Ú¢¿ÚÎ¿Û#¿Û)¿Ûx¿Û…¿Û÷¿Ù0¿Ù<¿Ùù¿Ù§¿Ùª¿Ùﬂ¿Ù¸¿ıT¿ıá¿ıﬁ¿ı˚¿ˆ¿ˆA¿ˆ]¿ˆ¿ˆõ¿ˆ√¿ˆÁ¿˜¿˜2¿˜N¿˜h¿˜ó¿˜£¿˜Õ¿˜Û¿¯¿¯;¿¯_¿¯g¿¯m¿¯n¿¯à¿¯´¿¯Œ¿¯‘¿¯Â¿˘¿˘¿˘J¿˘P¿˘p¿˘º¿˙¿˙Z¿˙Ö¿˙â¿˙ä¿˙ÿ¿˚¿˚$¿˚k¿˚º¿˚¸¿¸X¿¸h¿¸{¿¸€¿¸¿¸¯¿˝Z¿˝m¿˝w¿˝ô¿˝Ê¿˛6¿˛u¿˛¡¿˛›¿ˇ*¿ˇY¿ˇ`¿ˇ¥¿ˇ⁄¿ ¿ D¿ ~¿ ≤¿ Î¿#¿Ñ¿∫¿Ò¿*¿K¿Ñ¿æ¿ˆ¿¿¿2¿d¿¥¿ÿ¿*¿P¿¶¿‰¿Î¿4¿X¿_¿É¿∏¿¯¿5¿â¿Ê¿¿1¿W¿z¿´¿Œ¿¿¿:¿u¿®¿ª¿◊¿Ú¿˛¿	%¿	G¿	b¿	ë¿	∑¿	Í¿	˝¿
¿
5¿
A¿
I¿
O¿
`¿
ã¿
ò¿
≈¿
À¿
Î¿¿¿
¿¿U¿c¿∞¿±¿˝¿¿¿,¿0¿z¿ë¿æ¿¿¿S¿W¿ò¿Ã¿–¿¿P¿l¿ì¿ﬁ¿‰¿'¿p¿µ¿¯¿A¿M¿N¿ö¿†¿Ë¿/¿x¿¬¿¿M¿Z¿\¿]¿≠¿Ÿ¿›¿>¿Ä¿Ã¿¿>¿?¿Ñ¿µ¿∂¿¿.¿4¿s¿¿–¿—¿"¿:¿@¿¿å¿≈¿—¿¿T¿ï¿·¿Ë¿¿1¿5¿7¿8¿Ñ¿∑¿ª¿¿k¿ª¿–¿¿L¿w¿ë¿ó¿ò¿‰¿˛¿¿`¿∫¿¿¿W¿]¿∑¿«¿Õ¿¿_¿∫¿Õ¿!¿D¿H¿I¿U¿°¿Í¿Ó¿¿Ò¿F¿ù¿∏¿º¿ ¿ f¿ j¿ ∫¿!¿![¿!©¿!ﬂ¿!„¿!˜¿"N¿"Å¿"Ö¿"⁄¿"Í¿"Ó¿#¿#G¿#r¿#v¿#À¿#€¿#ﬂ¿#Ì¿#Ò¿$A¿$r¿$°¿$ˇ¿% ¿%9¿%n¿%o¿%™¿%∞¿%·¿%˜¿%¯¿&¿&K¿&M¿&N¿&è¿&Ë¿'¿'¿'¿'+¿'a¿'á¿' ¿(¿(¿(¿(¿("¿(5¿(W¿(l¿(p¿(q¿(}¿(§¿(ˆ¿(˙¿(¸¿(˝¿)M¿)o¿)ƒ¿)Û¿*4¿*8¿*9¿*i¿*j¿*ö¿*◊¿+¿+<¿+}¿+Å¿+Ç¿+é¿+©¿+∆¿,¿,F¿,o¿,}¿,É¿,≠¿,±¿,≤¿,æ¿,—¿-¿-6¿-K¿-O¿-P¿-\¿-ë¿-í¿-û¿-Ã¿-Œ¿-œ¿./¿.3¿.Ä¿.–¿/ ¿/>¿/B¿/ì¿/ı¿0¿0l¿0r¿0•¿0»¿0…¿1.¿1L¿1N¿1O¿1û¿1´¿1Ø¿1Ô¿2.¿2`¿2a¿2ª¿2¡¿3¿3z¿3û¿3∫¿4¿4¿4o¿4§¿4•¿4ˇ¿5¿5¿5©¿5∞¿5‹¿5‡¿5·¿6¿60¿64¿65¿6O¿6[¿6n¿6ö¿6Ø¿6≥¿6¥¿7¿7,¿72¿7h¿7t¿7†¿7¡¿7≈¿7«   Ä≠/// @docImport 'package:flutter/material.dart';
/// @docImport 'package:flutter_test/flutter_test.dart';
///
/// @docImport 'editable_text.dart';
/// @docImport 'text.dart';Å]   År   Åá   Å±   ÅŸ   Ç   Ç+   ÇS   ÇÜ   Çù   Ç≤   Ç⁄   ÇÔ   É   É'   É@   É`   Éy   Éî   É´   É‚   Ñ   Ñ)   ÑG     Ün±xÜn¶mü¯/// A widget that introduces an area for user selections.
///
/// Flutter widgets are not selectable by default. Wrapping a widget subtree
/// with a [SelectableRegion] widget enables selection within that subtree (for
/// example, [Text] widgets automatically look for selectable regions to enable
/// selection). The wrapped subtree can be selected by users using mouse or
/// touch gestures, e.g. users can select widgets by holding the mouse
/// left-click and dragging across widgets, or they can use long press gestures
/// to select words on touch devices.
///
/// A [SelectableRegion] widget requires configuration; in particular specific
/// [selectionControls] must be provided.
///
/// The [SelectionArea] widget from the [material] library configures a
/// [SelectableRegion] in a platform-specific manner (e.g. using a Material
/// toolbar on Android, a Cupertino toolbar on iOS), and it may therefore be
/// simpler to use that widget rather than using [SelectableRegion] directly.
///
/// ## An overview of the selection system.
///
/// Every [Selectable] under the [SelectableRegion] can be selected. They form a
/// selection tree structure to handle the selection.
///
/// The [SelectableRegion] is a wrapper over [SelectionContainer]. It listens to
/// user gestures and sends corresponding [SelectionEvent]s to the
/// [SelectionContainer] it creates.
///
/// A [SelectionContainer] is a single [Selectable] that handles
/// [SelectionEvent]s on behalf of child [Selectable]s in the subtree. It
/// creates a [SelectionRegistrarScope] with its [SelectionContainer.delegate]
/// to collect child [Selectable]s and sends the [SelectionEvent]s it receives
/// from the parent [SelectionRegistrar] to the appropriate child [Selectable]s.
/// It creates an abstraction for the parent [SelectionRegistrar] as if it is
/// interacting with a single [Selectable].
///
/// The [SelectionContainer] created by [SelectableRegion] is the root node of a
/// selection tree. Each non-leaf node in the tree is a [SelectionContainer],
/// and the leaf node is a leaf widget whose render object implements
/// [Selectable]. They are connected through [SelectionRegistrarScope]s created
/// by [SelectionContainer]s.
///
/// Both [SelectionContainer]s and the leaf [Selectable]s need to register
/// themselves to the [SelectionRegistrar] from the
/// [SelectionContainer.maybeOf] if they want to participate in the
/// selection.
///
/// An example selection tree will look like:
///
/// {@tool snippet}
///
/// ```dart
/// MaterialApp(
///   home: SelectableRegion(
///     selectionControls: materialTextSelectionControls,
///     child: Scaffold(
///       appBar: AppBar(title: const Text('Flutter Code Sample')),
///       body: ListView(
///         children: const <Widget>[
///           Text('Item 0', style: TextStyle(fontSize: 50.0)),
///           Text('Item 1', style: TextStyle(fontSize: 50.0)),
///         ],
///       ),
///     ),
///   ),
/// )
/// ```
/// {@end-tool}
///
///
///               SelectionContainer
///               (SelectableRegion)
///                  /         \
///                 /           \
///                /             \
///           Selectable          \
///      ("Flutter Code Sample")   \
///                                 \
///                          SelectionContainer
///                              (ListView)
///                              /       \
///                             /         \
///                            /           \
///                     Selectable        Selectable
///                     ("Item 0")         ("Item 1")
///
///
/// ## Making a widget selectable
///
/// Some leaf widgets, such as [Text], have all of the selection logic wired up
/// automatically and can be selected as long as they are under a
/// [SelectableRegion].
///
/// To make a custom selectable widget, its render object needs to mix in
/// [Selectable] and implement the required APIs to handle [SelectionEvent]s
/// as well as paint appropriate selection highlights.
///
/// The render object also needs to register itself to a [SelectionRegistrar].
/// For the most cases, one can use [SelectionRegistrant] to auto-register
/// itself with the register returned from [SelectionContainer.maybeOf] as
/// seen in the example below.
///
/// {@tool dartpad}
/// This sample demonstrates how to create an adapter widget that makes any
/// child widget selectable.
///
/// ** See code in examples/api/lib/material/selectable_region/selectable_region.0.dart **
/// {@end-tool}
///
/// ## Complex layout
///
/// By default, the screen order is used as the selection order. If a group of
/// [Selectable]s needs to select differently, consider wrapping them with a
/// [SelectionContainer] to customize its selection behavior.
///
/// {@tool dartpad}
/// This sample demonstrates how to create a [SelectionContainer] that only
/// allows selecting everything or nothing with no partial selection.
///
/// ** See code in examples/api/lib/material/selection_container/selection_container.0.dart **
/// {@end-tool}
///
/// In the case where a group of widgets should be excluded from selection under
/// a [SelectableRegion], consider wrapping that group of widgets using
/// [SelectionContainer.disabled].
///
/// {@tool dartpad}
/// This sample demonstrates how to disable selection for a Text in a Column.
///
/// ** See code in examples/api/lib/material/selection_container/selection_container_disabled.0.dart **
/// {@end-tool}
///
/// To create a separate selection system from its parent selection area,
/// wrap part of the subtree with another [SelectableRegion]. The selection of the
/// child selection area can not extend past its subtree, and the selection of
/// the parent selection area can not extend inside the child selection area.
///
/// ## Selection status
///
/// A [SelectableRegion]s [SelectableRegionSelectionStatus] is used to indicate whether
/// the [SelectableRegion] is actively changing the selection, or has finalized it. For
/// example, during a mouse click + drag, the [SelectableRegionSelectionStatus] will be
/// set to [SelectableRegionSelectionStatus.changing], and when the mouse click is released
/// the status will be set to [SelectableRegionSelectionStatus.finalized].
///
/// The default value of [SelectableRegion]s selection status
/// is [SelectableRegionSelectionStatus.finalized].
///
/// To access the [SelectableRegionSelectionStatus] of a parent [SelectableRegion]
/// use [SelectableRegionSelectionStatusScope.maybeOf] and retrieve the value from
/// the [ValueListenable].
///
/// One can also listen for changes to the [SelectableRegionSelectionStatus] by
/// adding a listener to the [ValueListenable] retrieved from [SelectableRegionSelectionStatusScope.maybeOf]
/// through [ValueListenable.addListener]. In Stateful widgets this is typically
/// done in [State.didChangeDependencies]. Remove the listener when no longer
/// needed, typically in your Stateful widgets [State.dispose] method through
/// [ValueListenable.removeListener].
///
/// ## Tests
///
/// In a test, a region can be selected either by faking drag events (e.g. using
/// [WidgetTester.dragFrom]) or by sending intents to a widget inside the region
/// that has been given a [GlobalKey], e.g.:
///
/// ```dart
/// Actions.invoke(key.currentContext!, const SelectAllTextIntent(SelectionChangedCause.keyboard));
/// ```
///
/// See also:
///
///  * [SelectionArea], which creates a [SelectableRegion] with
///    platform-adaptive selection controls.
///  * [SelectableText], which enables selection on a single run of text.
///  * [SelectionHandler], which contains APIs to handle selection events from the
///    [SelectableRegion].
///  * [Selectable], which provides API to participate in the selection system.
///  * [SelectionRegistrar], which [Selectable] needs to subscribe to receive
///    selection events.
///  * [SelectionContainer], which collects selectable widgets in the subtree
///    and provides api to dispatch selection event to the collected widget.
///  * [SelectionListener], which enables accessing the [SelectionDetails] of
///    the selectable subtree it wraps. ¶ôÅ§ßC ßCßS Äõ/// Create a new [SelectableRegion] widget.
///
/// The [selectionControls] are used for building the selection handles and
/// toolbar for mobile devices.ßZ	ßaß`  ßißoßn  ßÜßåßã  ßöAß†ßü  ß·ßÁßÊ  ß˛®®  ®#®2®1  ß∏ß“ß”®AÅè©∫©∫ÅI/// The configuration for the magnifier used with selections in this region.
///
/// By default, [SelectableRegion]'s [TextMagnifierConfiguration] is disabled.
/// For a version of [SelectableRegion] that adapts automatically to the
/// current platform, consider [SelectionArea].
///
/// {@macro flutter.widgets.magnifier.intro} ©’I™™,/// {@macro flutter.widgets.Focus.focusNode} ™#ÄÄ™û™ûg/// The child widget this selection area applies to.
///
/// {@macro flutter.widgets.ProxyWidget.child} ™®{´´</// {@macro flutter.widgets.EditableText.contextMenuBuilder} ´(Å¨+¨+Ä‹/// The delegate to build the selection handles and toolbar for mobile
/// devices.
///
/// The [emptyTextSelectionControls] global variable provides a default
/// [TextSelectionControls] implementation with no controls. ¨Ah¨ó¨ó-/// Called when the selected content changes.   ¨ÆäÁ∞?∞?ÉK/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu.
///
/// For example, [SelectableRegion] uses this to generate the default buttons
/// for its context menu.
///
/// See also:
///
/// * [SelectableRegionState.contextMenuButtonItems], which gives the
///   [ContextMenuButtonItem]s for a specific SelectableRegion.
/// * [EditableText.getEditableButtonItems], which performs a similar role but
///   for content that is both selectable and editable.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the button
///   Widgets for the current platform given [ContextMenuButtonItem]s. ∞^2∞Ä∞  ∞ñ"∞≥∞≤  ∞æ'∞€∞⁄  ∞Î$±	±   ∑ôK∑ª∑ª   ∑ô∑ö ∑Ë¿ ˚Î∑Ë∏#/// State for a [SelectableRegion].  ∏çáé∏≤∏≤ Äû∏”¿ @∏Ω∏“∏æ∏ƒ∏ ∏—∏À∏Ï∏Ÿ∏Ó∏˛π∏ˇππππ3ππ5πEπ`πFπZπ_π[πùπgπüπØ∫Wπ∑π◊∫πÿ∫∫P∫∫2∫'∫4∫C∫D∫Ö∫^∫á∫óª4∫ü∫ø∫Á∫¿∫Ëª-∫Úªª ªªªª[ª;ª]ªmªˇªuªïª∂ªñª∑ª¯ª¡ª⁄ªœª‹ªÎªÏº&ºº(º8º‘º@ºeºÜºfºáºÕºëº™ºüº¨ºªººΩº€ΩΩΩ≤ΩΩAΩiΩBΩjΩ´ΩtΩçΩÇΩèΩûΩüΩŸΩπΩ€ΩÎæÇΩÛææ9ææ:æ{æDæ]æRæ_ænæoæ∂æâæ∏æ»ø3æ–æ¯ø&æ˘ø'ø,ø(øaø:øcøs¿ @ø{ø†ø»ø°ø…¿ @ø”øÏø·øÓø˝ø˛¿ @ h¿ @J¿ @J ¿ @Ü¿ @á¿ @f¿ @Ö¿ @g¿ @m¿ @å#¿ @û¿ @û  ¿ @≥3¿ @√¿ @√ ¿ @€¿ @‰¿ @Â¿ @Í1¿ @˙¿ @˙ ¿ A¿ A¿ A¿ A/¿ A/¿ A/ ¿ AC¿ AL¿ AM¿ AR^¿ Ay¿ Ay ¿ Aé¿ AÆ¿ AØ¿ B¿ B¿ B  ¿ Bƒ¿ B—¿ B—  ¿ BÂ%¿ Bˆ¿ Bˆ  ¿ CÌÄ°¿ D]¿ D]T/// The text processing service used to retrieve the native text processing actions.¿ Ds¿ Då¿ Dç¿ DìÄí¿ D˙¿ D˙F/// The list of native text processing actions provided by the engine.¿ E#¿ E$¿ E¿ E"¿ E¿ Ef¿ Eq¿ Eq  ¿ E˛Ä÷¿ Fá¿ FáW/// Notifies its listeners when the selection state in this [SelectableRegion] changes.¿ F®¿ F–¿ F—¿ F“¿ F”¿ V“Ä®¿ Wc¿ WcÄá/// Whether the Shift key was pressed when the most recent [PointerDownEvent]
/// was tracked by the [BaseTapAndDragGestureRecognizer].¿ Wu¿ W‹%¿ W‰¿ W‰  ¿ Xl)¿ X¿ X  ¿ uJ¿ uR¿ uR  ¿ ±’¿ ±›¿ ±›  ¿ ≤=-¿ ≤B¿ ≤B ¿ ≤e¿ ª†¿ ª®¿ ª®  ¿ º/¿ º¿ º ¿ º8¿ ¬-¿ ¬ã¿ ¬ã  ¿ ¬∞+¿ ¬º¿ ¬º  ¿C¿I¿I  ¿
k&¿
s¿
s  ¿'sÄ∆¿(¿( ¿'s¿'t¿'~¿'‰¿'Ñ¿'≠¿'Ë¿'È¿(¿(¿(.¿(8¿(3¿(/¿(5¿ B Ä†¿ B)¿ B)    ¿ CÄ⁄¿ C√¿ C√ÄÇ/// The [SelectionOverlay] that is currently visible on the screen.
///
/// Can be null if there is no visible [SelectionOverlay].  ¿ Cò¿ Cô¿ EÑv¿ Eí¿ Eí    ¿ ±ˆD¿ ±ˇ¿ ±ˇ    ¿ ª√H¿ ªÃ¿ ªÃ    ¿aÉﬁ¿R¿RÄƒ/// {@macro flutter.widgets.EditableText.getAnchors}
///
/// See also:
///
///  * [contextMenuButtonItems], which provides the [ContextMenuButtonItem]s
///    for the default context menu buttons.   ¿ä≤¿ø¿øÉe/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu.
///
/// See also:
///
/// * [SelectableRegion.getSelectableButtonItems], which performs a similar role,
///   but for any selectable text, not just specifically SelectableRegion.
/// * [EditableTextState.contextMenuButtonItems], which performs a similar role
///   but for content that is not just selectable but also editable.
/// * [contextMenuAnchors], which provides the anchor points for the default
///   context menu.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
///   button Widgets for the current platform given [ContextMenuButtonItem]s.   ¿œÇÒ¿Ô¿Ô    ¿ƒÄ£¿¿:/// The line height at the start of the current selection.   ¿kÄù¿±¿±8/// The line height at the end of the current selection.   ¿É≠¿x¿xL/// Returns the local coordinates of the endpoints of the current selection.   ¿"äÄû¿#¿#   ¿"ä¿"ã¿"ï¿"˚¿"õ¿"ƒ¿"ˇ¿# ¿#,Ä†¿#∂¿#∂   ¿#,¿#-¿#7¿#ù¿#=¿#f¿#°¿#¢ >¿ FŸÇ"¿ F˜¿ F˜   ¿ FŸ¿ F⁄¿ FÊ¿ FÁ¿ HˇÅ¿ IÇ¿ IÇq/// Query the engine to initialize the list of text processing actions to show
/// in the text selection toolbar.   ¿ JÇ˛¿ J8¿ J8   ¿ J¿ J¿ J'¿ J(¿ MÇß¿ M:¿ M:  ¿ MJ¿ M\¿ M[  ¿ M¿ M¿ M)¿ M*¿ O«Äù¿ O—¿ O— ¿ O‚¿ O‚¿ O‚¿ OÙ¿ Oˇ¿ O˛   ¿ PhÉ¯¿ Pm¿ Pm    ¿ TdÇZ¿ Ti¿ Ti    ¿ XöÅá¿ X¶¿ X¶  ¿ Xæ#¿ X—¿ X–   ¿ Z%Å3¿ Z*¿ Z*    ¿ \ˇâ<¿ ]¿ ]  ¿ ]$¿ ])¿ ](   ¿ f?Éw¿ fD¿ fD    ¿ i∫ÄŸ¿ iø¿ iø    ¿ jó:¿ jú¿ jú    ¿ j’äq¿ j⁄¿ j⁄    ¿ ufç ¿ uk¿ uk  ¿ uä¿ uû¿ uù   ¿ ÇjÇ¿ Ço¿ Ço  ¿ ÇÖ¿ Çö¿ Çô   ¿ Ñsçn¿ Ñx¿ Ñx  ¿ Ñè¿ Ñ•¿ Ñ§   ¿ ëÂÑî¿ ëÍ¿ ëÍ  ¿ ë˛¿ í¿ í   ¿ ñ}âm¿ ñÇ¿ ñÇ  ¿ ñî¿ ñ¶¿ ñ•   ¿ üÓÅ^¿ üÛ¿ üÛ    ¿ °PÇs¿ °U¿ °U  ¿ °p¿ °á¿ °Ü   ¿ £«Å¿ £Ã¿ £Ã  ¿ £Ï"¿ §¿ §   ¿ §ÁÅ¿ §Ï¿ §Ï  ¿ •¿ •¿ •   ¿ •˝Åï¿ ¶¿ ¶  ¿ ¶ ¿ ¶1¿ ¶0   ¿ ßñä¿ ßõ¿ ßõ  ¿ ß±¿ ß¡¿ ß¿   ¿ ≤oÖ|¿ ≥î¿ ≥îÅ/// Sends end [SelectionEdgeUpdateEvent] to the selectable subtree.
///
/// If the selectable subtree returns a [SelectionResult.pending], this method
/// continues to send [SelectionEdgeUpdateEvent]s every frame until the result
/// is not pending or users end their gestures. ¿ ≥¥ ¿ ≥∆¿ ≥≈   ¿ ∑ÔÉ1¿ ∑Ù¿ ∑Ù  ¿ ∏¿ ∏¿ ∏   ¿ ª$x¿ ª)¿ ª)    ¿ ºBÖí¿ Ωi¿ ΩiÅ/// Sends start [SelectionEdgeUpdateEvent] to the selectable subtree.
///
/// If the selectable subtree returns a [SelectionResult.pending], this method
/// continues to send [SelectionEdgeUpdateEvent]s every frame until the result
/// is not pending or users end their gestures. ¿ Ωã ¿ Ωù¿ Ωú   ¿ ¡ÿ|¿ ¡›¿ ¡›    ¿ ¬‡ÇN¿ ¬Â¿ ¬Â  ¿ √
¿ √¿ √   ¿ ≈2É¿ ≈7¿ ≈7  ¿ ≈]¿ ≈p¿ ≈o   ¿ »<ÇC¿ »A¿ »A  ¿ »d¿ »v¿ »u   ¿  ÉÇˆ¿  à¿  à  ¿  ¨¿  ø¿  æ   ¿ Õ}ÉV¿ Õã¿ Õã  ¿ Õß¿ ÕØ¿ ÕÆ  ¿ Õ…¿ ÕŸ¿ Õÿ   ¿ –◊Öi¿ –‹¿ –‹    ¿ ÷DÇÄ¿ ÷I¿ ÷I    ¿ ÿ»Åõ¿ ŸN¿ ŸNx/// Shows the selection handles.
///
/// Returns true if the handles are shown, false if the handles can't be
/// shown.   ¿ ⁄gÖ…¿ €Í¿ €ÍÅm/// Shows the text selection toolbar.
///
/// If the parameter `location` is set, the toolbar will be shown at the
/// location. Otherwise, the toolbar location will be calculated based on the
/// handles' locations. The `location` is in the coordinates system of the
/// [Overlay].
///
/// Returns true if the toolbar is shown, false if the toolbar can't be shown. ¿ €¯¿ ‹¿ ‹    ¿ ‡4áÂ¿ ÊD¿ ÊDÖŒ/// Sets or updates selection end edge to the `offset` location.
///
/// A selection always contains a select start edge and selection end edge.
/// They can be created by calling both [_selectStartTo] and [_selectEndTo], or
/// use other selection APIs, such as [_selectWordAt] or [selectAll].
///
/// This method sets or updates the selection end edge by sending
/// [SelectionEdgeUpdateEvent]s to the child [Selectable]s.
///
/// If `continuous` is set to true and the update causes scrolling, the
/// method will continue sending the same [SelectionEdgeUpdateEvent]s to the
/// child [Selectable]s every frame until the scrolling finishes or a
/// [_finalizeSelection] is called.
///
/// The `continuous` argument defaults to false.
///
/// The `offset` is in global coordinates.
///
/// Provide the `textGranularity` if the selection should not move by the default
/// [TextGranularity.character]. Only [TextGranularity.character] and
/// [TextGranularity.word] are currently supported.
///
/// See also:
///  * [_selectStartTo], which sets or updates selection start edge.
///  * [_finalizeSelection], which stops the `continuous` updates.
///  * [clearSelection], which clears the ongoing selection.
///  * [_selectWordAt], which selects a whole word at the location.
///  * [_selectParagraphAt], which selects an entire paragraph at the location.
///  * [_collapseSelectionAt], which collapses the selection at the location.
///  * [selectAll], which selects the entire content. ¿ ÊW¿ Êh¿ Êg  ¿ Ês¿ Êy¿ Êx  ¿ Êê ¿ Ê¢¿ Ê°  ¿ ÊÖ¿ ËáÔ¿ Ó-¿ Ó-ÖŒ/// Sets or updates selection start edge to the `offset` location.
///
/// A selection always contains a select start edge and selection end edge.
/// They can be created by calling both [_selectStartTo] and [_selectEndTo], or
/// use other selection APIs, such as [_selectWordAt] or [selectAll].
///
/// This method sets or updates the selection start edge by sending
/// [SelectionEdgeUpdateEvent]s to the child [Selectable]s.
///
/// If `continuous` is set to true and the update causes scrolling, the
/// method will continue sending the same [SelectionEdgeUpdateEvent]s to the
/// child [Selectable]s every frame until the scrolling finishes or a
/// [_finalizeSelection] is called.
///
/// The `continuous` argument defaults to false.
///
/// The `offset` is in global coordinates.
///
/// Provide the `textGranularity` if the selection should not move by the default
/// [TextGranularity.character]. Only [TextGranularity.character] and
/// [TextGranularity.word] are currently supported.
///
/// See also:
///  * [_selectEndTo], which sets or updates selection end edge.
///  * [_finalizeSelection], which stops the `continuous` updates.
///  * [clearSelection], which clears the ongoing selection.
///  * [_selectWordAt], which selects a whole word at the location.
///  * [_selectParagraphAt], which selects an entire paragraph at the location.
///  * [_collapseSelectionAt], which collapses the selection at the location.
///  * [selectAll], which selects the entire content. ¿ ÓB¿ ÓS¿ ÓR  ¿ Ó^¿ Ód¿ Óc  ¿ Ó{ ¿ Óç¿ Óå  ¿ Óp¿ É+¿ Úz¿ ÚzÇL/// Collapses the selection at the given `offset` location.
///
/// The `offset` is in global coordinates.
///
/// See also:
///  * [_selectStartTo], which sets or updates selection start edge.
///  * [_selectEndTo], which sets or updates selection end edge.
///  * [_finalizeSelection], which stops the `continuous` updates.
///  * [clearSelection], which clears the ongoing selection.
///  * [_selectWordAt], which selects a whole word at the location.
///  * [_selectParagraphAt], which selects an entire paragraph at the location.
///  * [selectAll], which selects the entire content. ¿ Úê¿ Ú°¿ Ú†   ¿ Û?Ñ£¿ ˜¿ ˜É®/// Selects a whole word at the `offset` location.
///
/// The `offset` is in global coordinates.
///
/// If the whole word is already in the current selection, selection won't
/// change. One call [clearSelection] first if the selection needs to be
/// updated even if the word is already covered by the current selection.
///
/// One can also use [_selectEndTo] or [_selectStartTo] to adjust the selection
/// edges after calling this method.
///
/// See also:
///  * [_selectStartTo], which sets or updates selection start edge.
///  * [_selectEndTo], which sets or updates selection end edge.
///  * [_finalizeSelection], which stops the `continuous` updates.
///  * [clearSelection], which clears the ongoing selection.
///  * [_collapseSelectionAt], which collapses the selection at the location.
///  * [_selectParagraphAt], which selects an entire paragraph at the location.
///  * [selectAll], which selects the entire content. ¿ ˜"¿ ˜3¿ ˜2   ¿ ˜ÊÑ\¿ ˚i¿ ˚iÉY/// Selects the entire paragraph at the `offset` location.
///
/// The `offset` is in global coordinates.
///
/// If the paragraph is already in the current selection, selection won't
/// change. One call [clearSelection] first if the selection needs to be
/// updated even if the paragraph is already covered by the current selection.
///
/// One can also use [_selectEndTo] or [_selectStartTo] to adjust the selection
/// edges after calling this method.
///
/// See also:
///  * [_selectStartTo], which sets or updates selection start edge.
///  * [_selectEndTo], which sets or updates selection end edge.
///  * [_finalizeSelection], which stops the `continuous` updates.
///  * [clearSelection], which clear the ongoing selection.
///  * [_selectWordAt], which selects a whole word at the location.
///  * [selectAll], which selects the entire content. ¿ ˚}¿ ˚é¿ ˚ç   ¿ ¸FÇ&¿ ˛
¿ ˛
Å¨/// Stops any ongoing selection updates.
///
/// This method is different from [clearSelection] that it does not remove
/// the current selection. It only stops the continuous updates.
///
/// A continuous update can happen as result of calling [_selectStartTo] or
/// [_selectEndTo] with `continuous` sets to true which causes a [Selectable]
/// to scroll. Calling this method will stop the update as well as the
/// scrolling.   ¿ ˛pÅ0¿ ˛∂¿ ˛∂>/// Removes the ongoing selection for this [SelectableRegion].   ¿ ˇ§Ä”¿ ˇ±¿ ˇ±    ¿ {Ä‚¿ à¿ à    ¿cÇÕ¿h¿h  ¿ä¿ê¿è   ¿4Ç3¿9¿9  ¿T¿e¿d  ¿q¿w¿v   ¿
ñÑV¿
õ¿
õ  ¿
π¿
ø¿
æ   ¿#–Ä®¿#·¿#·  ¿#Ó¿#Ù¿#Û  ¿#–¿#—¿$¿$|Å†¿$ç¿$ç  ¿$ò¿$∞¿$Ø  ¿$|¿$}¿& ÅO¿&¶¿&¶  ¿&¥¿&À¿&   ¿& ¿&!¿&+¿&ë¿&1¿&Z¿&ï¿&ñ¿(>ÄÍ¿(ƒ¿(ƒ  ¿(“¿(‡¿(ﬂ  ¿(>¿(?¿(I¿(Ø¿(O¿(x¿(≥¿(¥¿),Ä»¿)≤¿)≤  ¿)ø¿)÷¿)’  ¿),¿)-¿)7¿)ù¿)=¿)f¿)°¿)¢¿)¯Å¿*~¿*~  ¿*ô¿*´¿*™  ¿*±¿*»¿*«  ¿)¯¿)˘¿*¿*i¿*	¿*2¿*m¿*n¿+
Ä”¿+ò¿+ò  ¿+¢¿+π¿+∏  ¿+
¿+¿+¿+{¿+¿+D¿+¿+Ä¿,Äı¿,¿,  ¿,¿,'¿,&  ¿,¿,¿,ˇÄ€¿-¿-  ¿-¿-#¿-"  ¿,ˇ¿- ¿-ﬁÇy¿-¸¿-¸   ¿-ﬁ¿-ﬂ¿-Î¿-Ï¿0[Év¿0{¿0{  ¿0Å¿0è¿0é  ¿0[¿0\¿0h¿0i ¿3’ÇT¿3’¿4ÈÅ/// An action that does not override any [Action.overridable] in the subtree.
///
/// If this action is invoked by an [Action.overridable], it will immediately
/// invoke the [Action.overridable] and do nothing else. Otherwise, it will call
/// [invokeAction].¿4¸¿4¸¿4¸    ¿5+8¿53¿53  ¿5@¿5C¿5B  ¿5K¿5Z¿5Y   ¿5gÄ¿¿5{¿5{  ¿5Ç¿5Ö¿5Ñ  ¿5ç¿5ú¿5õ  ¿5g¿5h ¿6+Å!¿6+¿61  ¿6v¿6v ¿6v¿6Ü  ¿6á
¿6ç¿6å   ¿6ó!¿6≥¿6≥    ¿6ΩÄç¿6Œ¿6Œ  ¿6€¿6¿6Ô  ¿6¯¿7¿7  ¿6Ω¿6æ ¿7NÅ¿7N¿7T  ¿7°!¿7° ¿7°¿7µ  ¿7∂
¿7º¿7ª   ¿7∆!¿7‚¿7‚    ¿7Ïo¿7˝¿7˝  ¿8
¿8#¿8"  ¿8+¿8:¿89  ¿7Ï¿7Ì ¿8_Åô¿8_¿8e ¿8Ü&¿8Ü¿8Ü¿8‘J¿8‘ ¿8‘¿8Ù  ¿8ı
¿8˚¿8˙  ¿9¿9¿9   ¿9"!¿9>¿9>  ¿9G!¿9]¿9]    ¿9mÄâ¿9~¿9~  ¿9ã¿9é¿9ç  ¿9ñ¿9•¿9§  ¿9m¿9n ¿9˙Ç¿9˙¿:  ¿:&(¿:&¿:&¿:vO¿:v ¿:v¿:õ  ¿:ú
¿:¢¿:°  ¿:©¿:∏¿:∑   ¿:…!¿:Â¿:Â  ¿:Ó!¿;¿;    ¿;Ä˜¿;%¿;%  ¿;2¿;5¿;4  ¿;=¿;L¿;K  ¿;¿; ¿<ÅÕ¿<¿< ¿<>(¿<>¿<>¿<é5¿<é ¿<é¿<∂  ¿<∑
¿<Ω¿<º   ¿<«!¿<„¿<„    ¿<ÌÄÌ¿<˛¿<˛  ¿=¿=¿=  ¿=¿=%¿=$  ¿<Ì¿<Ó ¿=ﬁ¨Ê¿=ﬁ¿BÎÖ/// A delegate that manages updating multiple [Selectable] children where the
/// [Selectable]s do not change or move around frequently.
///
/// This delegate keeps track of the [Selectable]s that received start or end
/// [SelectionEvent]s and the global locations of those events to accurately
/// synthesize [SelectionEvent]s for children [Selectable]s when needed.
///
/// When a new [SelectionEdgeUpdateEvent] is dispatched to a [Selectable], this
/// delegate checks whether the [Selectable] has already received a selection
/// update for each edge that currently exists, and synthesizes an event for the
/// edges that have not yet received an update. This synthesized event is dispatched
/// before dispatching the new event.
///
/// For example, if we have an existing start edge for this delegate and a [Selectable]
/// child receives an end [SelectionEdgeUpdateEvent] and the child hasn't received a start
/// [SelectionEdgeUpdateEvent], we synthesize a start [SelectionEdgeUpdateEvent] for the
/// child [Selectable] and dispatch it before dispatching the original end [SelectionEdgeUpdateEvent].
///
/// See also:
///
///  * [MultiSelectableSelectionContainerDelegate], for the class that provides
///  the main implementation details of this [SelectionContainerDelegate].  ¿CB}¿Cò¿Cò=/// The set of [Selectable]s that have received start events.¿CΩ¿Cæ¿C±¿Cº¿C≤¿Cƒy¿D¿D;/// The set of [Selectable]s that have received end events.¿D;¿D<¿D/¿D:¿D0¿DBm¿Dç¿Dç@/// The global position of the last selection start edge update. ¿D¥i¿D˝¿D˝>/// The global position of the last selection end edge update.   ¿E"Ñ;¿H ¿H ÇØ/// Tracks whether a selection edge update event for a given [Selectable] was received.
///
/// When `forEnd` is true, the [Selectable] will be registered as having received
/// an end event. When false, the [Selectable] is registered as having received
/// a start event.
///
/// When `forEnd` is null, the [Selectable] will be registered as having received both
/// start and end events.
///
/// Call this method when a [SelectionEvent] is dispatched to a child selectable managed
/// by this delegate.
///
/// Subclasses should call [clearInternalSelectionStateForSelectable] to clean up any state
/// added by this method, for example when removing a [Selectable] from this delegate. ¿H¿H2¿H1  ¿H=¿HD¿HC  ¿GÓ¿GÔ¿IaÑé¿L¿LÇÇ/// Updates the internal selection state after a [SelectionEvent] that
/// selects a boundary such as: [SelectWordSelectionEvent],
/// [SelectParagraphSelectionEvent], and [SelectAllSelectionEvent].
///
/// Call this method after determining the new selection as a result of
/// a [SelectionEvent] that selects a boundary. The [currentSelectionStartIndex]
/// and [currentSelectionEndIndex] should be set to valid values at the time
/// this method is called.
///
/// Subclasses should call [clearInternalSelectionStateForSelectable] to clean up any state
/// added by this method, for example when removing a [Selectable] from this delegate.  ¿K˙¿K˚¿MÛÅ¬¿Nã¿NãÄÅ/// Updates the last selection edge location of the edge specified by `forEnd`
/// to the provided `globalSelectionEdgeLocation`. ¿N±+¿N¬¿N¡  ¿N‚¿NÒ¿N  ¿Ny¿Nz¿OπÖ¿P>¿P>{/// Updates the last selection edge locations of both start and end selection
/// edges based on their [SelectionGeometry].   ¿T‘ÅŒ¿U‡¿U‡ÄÔ/// Clears the internal selection state.
///
/// This indicates that no [Selectable] child under this delegate
/// has received start or end events, and resets any tracked global
/// locations for start and end [SelectionEdgeUpdateEvent]s.  ¿UŒ¿Uœ¿V¶Ç¿X¿XÅJ/// Clears the internal selection state for a given [Selectable].
///
/// This indicates that the given `selectable` has neither received a
/// start or end [SelectionEdgeUpdateEvent]s.
///
/// Subclasses should call this method to clean up state added in
/// [didReceiveSelectionEventFor] and [didReceiveSelectionBoundaryEvents]. ¿X:¿XF¿XE  ¿Wˇ¿X ¿X∂Äå¿X«¿X«  ¿XŒ¿X⁄¿XŸ  ¿X∂¿X∑¿YFÄÕ¿Yb¿Yb  ¿Yr¿Yã¿Yä  ¿YF¿YG¿ZÄ–¿Z3¿Z3  ¿ZD¿Z^¿Z]  ¿Z¿Z¿ZÎÄﬂ¿[¿[  ¿[#¿[<¿[;  ¿ZÎ¿ZÏ¿[ŒÄÕ¿[Í¿[Í  ¿[ˇ¿\¿\  ¿[Œ¿[œ¿\üÅ1¿\ª¿\ª  ¿\’¿\Ô¿\Ó  ¿\ü¿\†¿]‘X¿]Â¿]Â   ¿]‘¿]’¿^0É‡¿^L¿^L  ¿^j¿^v¿^u  ¿^Å¿^ë¿^ê  ¿^0¿^1¿bÖÆ¿dC¿dCÇ	/// Ensures the `selectable` child has received the most up to date selection events.
///
/// This method is called when:
///   1. A new [Selectable] is added to the delegate, and its screen location
///   falls into the previous selection.
///   2. Before a [SelectionEvent] of type
///   [SelectionEventType.startEdgeUpdate], [SelectionEventType.endEdgeUpdate],
///   [SelectionEventType.granularlyExtendSelection], or
///   [SelectionEventType.directionallyExtendSelection] is dispatched
///   to a [Selectable] child. ¿dV¿db¿da  ¿d2¿d3¿g∆Ç¸¿g◊¿g◊   ¿g∆¿g« ¿j∆¿ †C¿j∆¿lÅ9/// A delegate that handles events and updates for multiple [Selectable]
/// children.
///
/// Updates are optimized by tracking which [Selectable]s reside on the edges of
/// a selection. Subclasses should implement [ensureChildUpdated] to describe
/// how a [Selectable] should behave when added to a selection. ¿lxÄÂ¿l¬ ¿l¬¿lÎ G/// Creates an instance of [MultiSelectableSelectionContainerDelegate].  ¿mam¿m≤¿m≤=/// Gets the list of [Selectable]s this delegate is managing.¿mÃ¿mÕ¿m¿¿mÀ¿m¡¿m”Ç&¿oœ¿oœÅ—/// The number of additional pixels added to the selection handle drawable
/// area.
///
/// Selection handles that are outside of the drawable area will be hidden.
/// That logic prevents handles that get scrolled off the viewport from being
/// drawn on the screen.
///
/// The drawable area = current rectangle of [SelectionContainer] +
/// _kSelectionHandleDrawableAreaPadding on each side.
///
/// This was an eyeballed value to create smooth user experiences.¿oˆ¿o˛s¿pT¿pTB/// The current [Selectable] that contains the selection end edge.¿pC¿pD¿po¿pp¿pvw¿pŒ¿pŒD/// The current [Selectable] that contains the selection start edge.¿pΩ¿pæ¿pÎ¿pÏ¿pÚ¿p˝¿p˝  ¿q"¿q¿q  ¿q8¿qC¿qC  ¿qV ¿qb¿qb  ¿q{&¿qÄ¿qÄ ¿qú¿q•'¿q™¿q™ ¿q«¿q–!¿q’¿q’ ¿qÏ¿qı+¿r¿r ¿r¿r¿r¿r¿r¿r%'¿r*¿r* ¿rG¿Öd|¿Öv¿Öv ¿Öã¿Öë¿Ö¢¿Öﬂ¿Ö≤¿Ö®¿Ö¥¿Ö≈¿Öø¿Ö«¿Ö÷¿Ö◊¿Ö#>¿ÖE¿ÖE   ¿Ö#¿Ö$¿àJÄﬁ¿â¿âÄâ/// The compare function this delegate used for determining the selection
/// order of the selectables.
///
/// Defaults to screen order.  ¿à‹¿à›¿≥˙ÅR¿¥ÿ¿¥ÿÄ¡/// The total length of the content under this [SelectionContainerDelegate].
///
/// This value is derived from the [Selectable.contentLength] of each [Selectable]
/// managed by this delegate.  ¿¥ƒ¿¥≈ $¿rQÄ°¿rb¿rb  ¿rf¿rr¿rq  ¿rQ¿rR¿rˆÅ¿s¿s  ¿s¿s¿s  ¿rˆ¿r˜¿tyÄÉ¿t≈¿t≈D/// Notifies this delegate that layout of the container has changed.   ¿u É®¿u¿u    ¿x¨Äü¿x±¿x±    ¿yOâK¿yT¿yT    ¿ÇûÅŸ¿Ç£¿Ç£  ¿Çµ¿Ç¡¿Ç¿   ¿Ñ{Ä§¿Ñ„¿Ñ„B/// Called when this delegate finishes updating the [Selectable]s.  ¿Ñ¿¿Ñ¡¿ÑÕ¿ÑŒ¿ÖÂÅC¿Ü7¿Ü7J/// Updates the [value] in this class and notifies listeners if necessary.   ¿á,Å¿á8¿á8  ¿áH¿áT¿áS   ¿â,Åñ¿â7¿â7  ¿âK¿âW¿âV  ¿âY¿âe¿âd   ¿ä∆É8¿ãø¿ãøÄ„/// Compares two rectangles in the screen order solely by their vertical
/// positions.
///
/// Returns positive if a is lower, negative if a is higher, 0 if their
/// order can't be determine solely by their vertical position. ¿ã“¿ãÿ¿ã◊  ¿ã⁄¿ã‡¿ãﬂ   ¿éÇƒ¿éÍ¿éÍÄ‘/// Compares two rectangles in the screen order by their horizontal positions
/// assuming one of the rectangles enclose the other rect vertically.
///
/// Returns positive if a is lower, negative if a is higher. ¿éˇ¿è¿è  ¿è¿è¿è   ¿ê Ån¿êœ¿êœ    ¿í<êÀ¿í†¿í†B/// Gets the combined [SelectionGeometry] for child [Selectable]s.  ¿íÅ¿íÇ¿§ˇÅQ¿•¿•  ¿•1¿•6¿•5  ¿•C¿•H¿•G   ¿¶TÅ¿¶e¿¶e  ¿¶v¿¶Ç¿¶Å  ¿¶é¿¶ö¿¶ô  ¿¶T¿¶U¿ßwä0¿®–¿®–ÅG/// Pushes both handle layers to the selectables that contain selection edges.
///
/// This method needs to be called every time the selectables that contain the
/// selection edges change, i.e. [currentSelectionStartIndex] or
/// [currentSelectionEndIndex] changes. Otherwise, the handle may be painted
/// in the wrong place.   ¿±´ÇK¿≤¿≤6/// Copies the selected contents of all [Selectable]s.  ¿±‰¿±Â¿µPäa¿∂√¿∂√ÅR/// This method calculates a local [SelectedContentRange] based on the list
/// of [selections] that are accumulated from the [Selectable] children under this
/// delegate. This calculation takes into account the accumulated content
/// length before the active selection, and returns null when either selection
/// edge has not been set. ¿∂ÿ¿∂Ó¿∂Ì   ¿øµÇ8¿¿€¿¿€Ä˘/// Returns a [SelectedContentRange] considering the [SelectedContentRange]
/// from each [Selectable] child managed under this delegate.
///
/// When nothing is selected or either selection edge has not been set,
/// this method will return `null`.  ¿¿π¿¿∫¿√@É˚¿√E¿√E    ¿«?Ås¿«ç¿«ç./// Selects all contents of all [Selectable]s. ¿«ù¿«∂¿«µ  ¿«p¿«q¿»∂äI¿»∆¿»∆  ¿»‹¿»Ï¿»Î   ¿”Ä‰¿”à¿”àc/// Selects a word in a [Selectable] at the location
/// [SelectWordSelectionEvent.globalPosition]. ¿”ô¿”≥¿”≤  ¿”k¿”l¿”ÎÄ¯¿‘z¿‘zm/// Selects a paragraph in a [Selectable] at the location
/// [SelectParagraphSelectionEvent.globalPosition]. ¿‘ê#¿‘Ø¿‘Æ  ¿‘]¿‘^¿‘ÁÅx¿’L¿’LE/// Removes the selection of all [Selectable]s this delegate manages. ¿’a¿’v¿’u  ¿’/¿’0¿÷cÖ¿¿÷ø¿÷ø</// Extend current selection in a certain [TextGranularity]. ¿÷ﬂ$¿÷ˇ¿÷˛  ¿÷¢¿÷£¿‹'àY¿‹É¿‹É</// Extend current selection in a certain [TextGranularity]. ¿‹¶'¿‹…¿‹»  ¿‹f¿‹g¿‰ÑÅ◊¿‰ƒ¿‰ƒ /// Updates the selection edges. ¿‰ﬁ¿‰¯¿‰˜  ¿‰ß¿‰®¿Ê_á¿Ê{¿Ê{  ¿Êí¿Ê¢¿Ê°  ¿Ê_¿Ê`¿ÌkÅ¿Ì|¿Ì|   ¿Ìk¿Ìl¿ÓsÅâ¿Ô“¿Ô“Å>/// Ensures the [Selectable] child has received up to date selection event.
///
/// This method is called when a new [Selectable] is added to the delegate,
/// and its screen location falls into the previous selection.
///
/// Subclasses are responsible for updating the selection of this newly added
/// [Selectable]. ¿ÔÂ¿ÔÒ¿Ô  ¿Ô¿¿Ô¡¿ Ån¿È¿ÈÄ√/// Dispatches a selection event to a specific [Selectable].
///
/// Override this method if subclasses need to generate additional events or
/// treatments prior to sending the [SelectionEvent]. ¿Ò¿Ò¿Ò  ¿Ò¿Ò.¿Ò-  ¿Ã¿Õ¿Òrâ¿ÛË¿ÛËÇO/// Initializes the selection of the selectable children.
///
/// The goal is to find the selectable child that contains the selection edge.
/// Returns [SelectionResult.end] if the selection edge ends on any of the
/// children. Otherwise, it returns [SelectionResult.previous] if the selection
/// does not reach any of its children. Returns [SelectionResult.next]
/// if the selection reaches the end of its children.
///
/// Ideally, this method should only be called twice at the beginning of the
/// drag selection, once for start edge update event, once for end edge update
/// event. ¿Û˜¿Ù¿Ù  ¿Ù¿Ù'¿Ù&   ¿˙åê{¿¸¿¸Åe/// Adjusts the selection based on the drag selection update event if there
/// is already a selectable child that contains the selection edge.
///
/// This method starts by sending the selection event to the current
/// selectable that contains the selection edge, and finds forward or backward
/// if that selectable no longer contains the selection edge. ¿¸¿¸9¿¸8  ¿¸@¿¸O¿¸N    ¿]ÖŸ¿]¿åÅ"/// Notifies its listeners when the [SelectableRegion] that created this object
/// is changing or finalizes its selection.
///
/// To access the [_SelectableRegionSelectionStatusNotifier] from the nearest [SelectableRegion]
/// ancestor, use [SelectableRegionSelectionStatusScope.maybeOf]. ¿-¿¿8¿9¿:¿9   ¿Ar¿a¿a ¿ä¿©¿™¿∏Å¿•¿•Ä¥/// The current value of the [SelectableRegionSelectionStatus] of the [SelectableRegion]
/// that owns this object.
///
/// Defaults to [SelectableRegionSelectionStatus.finalized].  ¿u¿v¿”Ça¿í¿íÄ•/// Sets the [SelectableRegionSelectionStatus] for the [SelectableRegion] that
/// owns this object.
///
/// Listeners are notified even if the value did not change. ¿ò)¿π¿∏  ¿Å¿Ç  ¿8Ü∑¿8¿‹Åó/// Notifies its listeners when the selection under a [SelectableRegion] or
/// [SelectionArea] is being changed or finalized.
///
/// Use [SelectableRegionSelectionStatusScope.maybeOf], to access the [ValueListenable] of type
/// [SelectableRegionSelectionStatus] under a [SelectableRegion]. Its listeners
/// will be called even when the value of the [SelectableRegionSelectionStatus]
/// does not change. ¿y¿#¿G¿H¿I¿H ¿P%¿_¿^  ¿{¿ã¿ä   ¿öÅp¿Û¿ÛÅ/// Tracks updates to the [SelectableRegionSelectionStatus] of the owning
/// [SelectableRegion].
///
/// Listeners will be called even when the value of the [SelectableRegionSelectionStatus]
/// does not change. The selection under the [SelectableRegion] still may have changed.   ¿Ç8¿ö¿öÅC/// The closest instance of this class that encloses the given context.
///
/// If there is no enclosing [SelectableRegion] or [SelectionArea] widget, then null is
/// returned.
///
/// Calling this method will create a dependency on the closest
/// [SelectableRegionSelectionStatusScope] in the [context], if there is one. ¿¢¿∞¿Ø   ¿KÄ¢¿\¿\  ¿o.¿ï¿î  ¿K¿L ¿Òá[¿Ò¿$GÖO/// A [SelectionContainer] that allows the user to access the [SelectionDetails] and
/// listen to selection changes for the child subtree it wraps under a [SelectionArea]
/// or [SelectableRegion].
///
/// The selection updates are provided through the [selectionNotifier], to listen
/// to these updates attach a listener through [SelectionListenerNotifier.addListener].
///
/// This widget does not listen to selection changes of nested [SelectionArea]s
/// or [SelectableRegion]s in its subtree because those widgets are self-contained
/// and do not bubble up their selection. To listen to selection changes of a
/// [SelectionArea] or [SelectableRegion] under this [SelectionListener], add
/// an additional [SelectionListener] under each one.
///
/// {@tool dartpad}
/// This example shows how to use [SelectionListener] to access the [SelectionDetails]
/// under a [SelectionArea] or [SelectableRegion].
///
/// ** See code in examples/api/lib/material/selection_area/selection_area.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows how to color the active selection red under a
/// [SelectionArea] or [SelectableRegion].
///
/// ** See code in examples/api/lib/material/selection_area/selection_area.2.dart **
/// {@end-tool}
///
/// See also:
///
///   * [SelectableRegion], which provides an overview of the selection system. ¿$tÄä¿$© ¿$©¿$∫ ,/// Create a new [SelectionListener] widget.¿$º	¿$√¿$¬  ¿$«¿$÷¿$’  ¿$Ë¿$˜¿$ˆ   ¿%j¿%[¿%[6/// Notifies listeners when the selection has changed. ¿%qÄÑ¿%¿%k/// The child widget this selection listener applies to.
///
/// {@macro flutter.widgets.ProxyWidget.child}   ¿%˙P¿&¿&   ¿%˙¿%˚ ¿&NÇ≠¿&N¿&T   ¿&ëÄã¿&∑¿&∑ ¿&Ã¿&Ê¿'¿&˝¿&Ï¿&ˇ¿'¿'  ¿'!ÄÛ¿'2¿'2  ¿'B¿'U¿'T  ¿'!¿'"¿(W¿()¿()   ¿(¿(¿(sÄÜ¿(Ü¿(Ü  ¿(å¿(ö¿(ô  ¿(s¿(t ¿(˝Ñ–¿(˝¿)	  ¿)qÄ∆¿)q ¿)q¿)ã  ¿)ç4¿)±¿)∞  ¿)›¿) ¿)ﬂ¿*;,¿*N¿*N  ¿*l,¿*Ü¿*Ü  ¿-R>¿-x¿-x   ¿-R¿-S¿-î7¿-¥¿-¥   ¿-î¿-ï ¿*úÄ‰¿*°¿*°  ¿*Æ%¿*…¿*»   ¿+ÑÅ,¿+ï¿+ï   ¿+Ñ¿+Ö¿,¥Äö¿,≈¿,≈   ¿,¥¿,µ ¿-œÉ~¿-œ¿0
Ç%/// A read-only interface for accessing the details of a selection under a [SelectionListener].
///
/// This includes information such as the status of the selection indicating
/// if it is collapsed or uncollapsed, the [SelectedContentRange] that includes
/// the start and end offsets of the selection local to the [SelectionListener]
/// that reports this object.
///
/// This object is typically accessed by providing a [SelectionListenerNotifier]
/// to a [SelectionListener] and retrieving the value from [SelectionListenerNotifier.selection].   ¿0Ä®¿0¡¿0¡ÄÅ/// The computed selection range of the owning [SelectionListener]s subtree.
///
/// Returns `null` if there is nothing selected.   ¿0ÀÄÄ¿1D¿1Db/// The status that indicates whether there is a selection and whether the selection is collapsed.      ¿1OÜw¿1O¿1˚Äü/// Notifies listeners when the selection under a [SelectionListener] has been
/// changed.
///
/// This object is typically provided to a [SelectionListener].  ¿20.¿2L¿2L  ¿2cÅ≠¿3ë¿3ëÅ/// The details of the selection under the [SelectionListener] that owns this notifier.
///
/// Throws an exception if this notifier has not been registered to a [SelectionListener].
/// To check if a notifier has been registered to a [SelectionListener] use [registered].   ¿4Äè¿4z¿4zZ/// Whether this [SelectionListenerNotifier] has been registered to a [SelectionListener].    ¿4ßÅ8¿4¨¿4¨  ¿4œ,¿4Î¿4Í   ¿5„P¿5Ë¿5Ë    ¿6Qa¿6b¿6b   ¿6Q¿6R¿6∂Å¿7{¿7{Ä´/// Calls the listener every time the [SelectionGeometry] of the selection changes under
/// a [SelectionListener].
///
/// Listeners can be removed with [removeListener]. ¿7á¿7ï¿7î  ¿7j¿7k  ¿ÖD¿¿qÅT/// The status of the selection under a [SelectableRegion].
///
/// This value can be accessed for a [SelectableRegion] by using
/// [SelectableRegionSelectionStatusScope.maybeOf].
///
/// This value under a [SelectableRegion] is updated frequently
/// during selection gestures such as clicks and taps to select
/// and keyboard shortcuts.  ¿ïÅ∂¿C¿CÅü/// Indicates that the selection under a [SelectableRegion] is changing.
///
/// A [SelectableRegion]s selection is changing when it is being
/// updated by user through selection gestures and keyboard shortcuts.
/// For example, during a text selection drag with a click + drag,
/// a [SelectableRegion]s selection is considered changing until
/// the user releases the click, then it will be considered finalized. ¿PÇ¿O¿OÅÓ/// Indicates that the selection under a [SelectableRegion] is finalized.
///
/// A [SelectableRegion]s selection is finalized when it is no longer
/// being updated by the user through selection gestures or keyboard
/// shortcuts. For example, the selection will be finalized on a mouse
/// drag end, touch long press drag end, a single click to collapse the
/// selection, a double click/tap to select a word, ctrl + A / cmd + A to
/// select all, or a triple click/tap to select a paragraph.           ¿Ä§¿¿kW/// The length of the content that can be selected, and the range that is
/// selected.    ¿±Åd¿±¿ôÄﬂ/// Signature for a widget builder that builds a context menu for the given
/// [SelectableRegionState].
///
/// See also:
///
///  * [EditableTextContextMenuBuilder], which performs the same role for
///    [EditableText].  ¿“¿‡¿ﬂ  ¿Ë+¿ˇ¿˛    Ñ¶Ä¨Ñ√Ñ√ ÑÙÖQÑ·ÑÛÑ‚Ñ¯Ö	Ö
ÖÖ$Ö%Ö/Ö@ÖAÜ29Ü?Ü? Üh   ÄÆ  package:flutter/material.dart  Äﬁ  &package:flutter_test/flutter_test.dart  Å  editable_text.dart  Å@  	text.dart é< <ÄÜÄ§Ä•Ä’ÅÅÅ7ÅSÅ\Å]ÅrÅÜÅáÅ±ÅŸÇÇ+ÇSÇÖÇÜÇùÇ≤Ç⁄ÇÔÉÉ'É@É`ÉyÉîÉ´É‚ÑÑ)ÑGÑuÑvÑéÑ•Ñ¶ÑˆÖÖ-ÖQÖTÖUÖ£ÖÒÜ2ÜmÜnÜ®Ü¨Ü˘áIáôáÂà,à|à¢à¶àıââ#âkâ∑ääRäVäÇäÜä◊ãããbã•ã ãŒååYå®å˜çHçñç¬ç∆ééeé´é˚èèèhèúè‡èÔèÛê!ê%ê9ê=êIêZêxê≤êÀëë)ëOëèëœëﬁëÎëˆëˇíííí!í%íJíoíêí≤í’í˘ììDìtì†ìÀì˜î$îYîèîìîóîπîΩïïOïgïkïµññ9ñ=ñåñ◊ó"óAóEóYó•ó¬ó∆ò!ò1ò5òKòOòûòÎô)ô-ôAôçô”ô◊ö6öFöJöõö„õõ
õõlõpõÿõËõÏú6úâúÿù&ù*ùBùFùûùˆûNû™ûıû˘ü7üküoü¬††0†4†Ñ†Ò°B°ê°ﬁ¢¢¢¢¢j¢ª¢Ë¢Ï¢¯£\£d£h£v£z£∫£Á§1§Ñ§ü§Ô•=•V•§•Ò¶?¶g¶ó¶≈¶Àßß;ßVßeßÇßñß›ß˙®®8®>®?®é®î®Â©0©b©h©ó©“©”™™ ™!™X™^™è™•™¶™Â´%´&´o´~´Ñ´Œ¨¨>¨?¨o¨´¨¨¨¯≠!≠'≠w≠ì≠ô≠©≠Ø≠˜Æ9ÆäÆƒØØJØ~Ø—∞∞Z∞í∞∫∞Á±±±j±¶±È≤B≤`≤Ä≤û≤≈≥≥e≥ê≥–≥Û≥˙¥9¥:¥¥⁄¥€µ,µrµÖµ©∂∂8∂é∂¶∑∑5∑ã∑í∑ñ∑ó∑£∑Â∑Á∑Ë∏∏H∏g∏ã∏’ππcπ±∫∫∫J∫S∫Z∫ô∫Í∫¯ª'ª0ª7ªoªπª«ªÚª˚ºº:ºâºóº«º–º◊ΩΩlΩzΩ•ΩÆΩµΩÌæ<æJæuæ~æÖæ ø/ø6øuøÀøŸ¿ @¿ @¿ @¿ @¿ @¿ @`¿ @ä¿ @±¿ @Ë¿ A¿ AP¿ A≤¿ B¿ B¿ B¿ BI¿ Bá¿ B¡¿ B¬¿ B„¿ C¿ C¿ CS¿ CY¿ Cñ¿ C´¿ CÍ¿ CÎ¿ DB¿ Dê¿ Dë¿ D⁄¿ E'¿ E(¿ Ed¿ EÇ¿ E†¿ E˚¿ E¸¿ FV¿ F¢¿ F÷¿ F◊¿ F‰¿ F¿ G¿ G¿ GM¿ Gp¿ Gì¿ G®¿ Gÿ¿ H¿ HT¿ HÄ¿ H¡¿ HŒ¿ HŸ¿ H¯¿ H¸¿ H˝¿ IN¿ Is¿ I§¿ I≈¿ J¿ J¿ J¿ J%¿ J1¿ JR¿ Ju¿ Jö¿ JΩ¿ J‹¿ JÎ¿ K¿ K/¿ KP¿ Ks¿ KÉ¿ Kâ¿ Kä¿ K’¿ L¿ L@¿ Lf¿ Lt¿ Lz¿ L•¿ LÀ¿ M¿ M¿ M¿ M¿ M'¿ M3¿ Mh¿ Mé¿ M¡¿ N¿ ND¿ Nh¿ Nà¿ N‘¿ O¿ O¿ OQ¿ Oì¿ O≤¿ O∫¿ O¿¿ Oƒ¿ O≈¿ P¿ Pa¿ Pe¿ Pf¿ PÖ¿ P•¿ Pπ¿ Q¿ Q	¿ Q\¿ Q´¿ Q˜¿ RH¿ Rì¿ RÂ¿ S5¿ SY¿ Ss¿ S∆¿ SÒ¿ S˘¿ Sˇ¿ T¿ TW¿ T]¿ Ta¿ Tb¿ TÑ¿ T≈¿ U¿ U)¿ UÅ¿ U…¿ U–¿ V¿ VC¿ Vd¿ Vq¿ Vï¿ Vµ¿ Vª¿ Vø¿ V¿¿ Vœ¿ V–¿ W ¿ W\¿ W|¿ W}¿ W√¿ W⁄¿ X¿ X¿ XS¿ Xj¿ Xó¿ Xò¿ XÂ¿ Y¿ Y*¿ Y?¿ Yf¿ Yã¿ Y∏¿ Y‹¿ Z¿ Z¿ Z¿ Z"¿ Z#¿ ZN¿ Z§¿ ZÒ¿ Zˇ¿ [¿ [U¿ [Y¿ [Z¿ [™¿ [˝¿ \M¿ \í¿ \ó¿ \È¿ \˝¿ ]4¿ ]S¿ ]x¿ ]õ¿ ]æ¿ ^!¿ ^o¿ ^ª¿ ^Ò¿ _¿ _¿ _i¿ _æ¿ `¿ `S¿ `•¿ `Ó¿ a¿ a2¿ ac¿ aâ¿ aº¿ a›¿ b*¿ b¿ b–¿ c¿ cm¿ c∂¿ c„¿ c˙¿ d+¿ dQ¿ dÑ¿ d£¿ dƒ¿ dÁ¿ e4¿ eâ¿ e‹¿ f¿ f2¿ f8¿ f<¿ f=¿ fd¿ fö¿ f‰¿ g¿ g.¿ gz¿ gá¿ gπ¿ gŒ¿ h¿ h4¿ ho¿ hõ¿ hœ¿ i¿ i5¿ i_¿ iõ¿ i®¿ i≥¿ i∑¿ i∏¿ i‘¿ j%¿ j~¿ jê¿ jî¿ jï¿ j±¿ jŒ¿ j“¿ j”¿ j˙¿ kR¿ k™¿ l	¿ lJ¿ lü¿ l÷¿ lÙ¿ mN¿ mÜ¿ mû¿ m´¿ mË¿ m˝¿ n@¿ nç¿ nœ¿ o¿ oS¿ oï¿ o’¿ p¿ p]¿ põ¿ p‹¿ q¿ qA¿ qí¿ qÕ¿ q˘¿ r-¿ rc¿ rì¿ rΩ¿ r˘¿ s¿ s¿ sG¿ së¿ sΩ¿ s€¿ t¿ t#¿ tU¿ tj¿ t®¿ t¿ u+¿ u8¿ uC¿ uG¿ uH¿ ud¿ u®¿ u”¿ v ¿ v.¿ vQ¿ vz¿ v°¿ v»¿ vÎ¿ w;¿ wO¿ wb¿ wá¿ w¨¿ w”¿ wÓ¿ x<¿ xå¿ xŸ¿ y¿ y/¿ yà¿ yØ¿ yÎ¿ zD¿ zY¿ zg¿ zÖ¿ z«¿ {¿ {(¿ {6¿ {_¿ {Ç¿ {ﬂ¿ |8¿ |q¿ |Ü¿ |î¿ |œ¿ }&¿ }y¿ }ó¿ }•¿ }Ã¿ }Û¿ ~¿ ~=¿ ~d¿ ~ü¿ ~ˆ¿  ¿ ¿ 7¿ ^¿ Ö¿ ®¿ ˙¿ ÄA¿ Ä|¿ Äæ¿ Å¿ Å%¿ ÅJ¿ Åo¿ Åñ¿ Å÷¿ Ç-¿ Ç7¿ Ç=¿ Çc¿ Çg¿ Çh¿ Ç§¿ ÇÒ¿ Çˇ¿ ÉN¿ Éô¿ É´¿ Éµ¿ ÉÌ¿ Ñ@¿ ÑF¿ Ñl¿ Ñp¿ Ñq¿ ÑØ¿ Ñ¸¿ Ö
¿ ÖY¿ Ö§¿ Ö∂¿ Ö¿¿ Ü¿ Ü[¿ Üi¿ Üí¿ Üπ¿ Ü‡¿ á3¿ ái¿ á∆¿ á‚¿ à¿ à4¿ àk¿ à|¿ à’¿ à„¿ â¿ â ¿ âH¿ âÉ¿ âØ¿ ä¿ ä-¿ äe¿ äå¿ äö¿ ä¥¿ ä‚¿ ã¿ ã7¿ ãF¿ ãù¿ ã¿ å¿ å¿ åA¿ åf¿ åç¿ åß¿ å’¿ åı¿ ç*¿ ç9¿ çê¿ çö¿ ç®¿ ç—¿ ç¯¿ é¿ éB¿ éí¿ éª¿ è¿ è)¿ èY¿ è{¿ è∑¿ è»¿ ê!¿ ê/¿ êT¿ êy¿ ê†¿ ê∫¿ êË¿ ë¿ ëB¿ ëQ¿ ë®¿ ë≤¿ ë∏¿ ëﬁ¿ ë‚¿ ë„¿ í¿ íG¿ íõ¿ íÍ¿ ì<¿ ìç¿ ì≠¿ ìÙ¿ î¿ î<¿ î_¿ îë¿ î´¿ î≈¿ îœ¿ îÓ¿ ï ¿ ï:¿ ïD¿ ïe¿ ïÜ¿ ï©¿ ï˙¿ ñ	¿ ñ¿ ñ)¿ ñO¿ ñv¿ ñz¿ ñ{¿ ñ∞¿ ñÁ¿ ó7¿ óÅ¿ ó¬¿ ò¿ ò2¿ òN¿ ò]¿ òu¿ ò}¿ òã¿ òë¿ òﬁ¿ òÏ¿ ô¿ ô<¿ ôc¿ ôÜ¿ ô°¿ ô„¿ ö:¿ ö_¿ öÑ¿ ö´¿ öÔ¿ ö˘¿ õ¿ õT¿ õ}¿ õ§¿ õÀ¿ õ¿ úE¿ úò¿ ú∂¿ ú‘¿ ú‚¿ ù¿ ù*¿ ùF¿ ù¶¿ ùΩ¿ ùÕ¿ û¿ ûq¿ ûè¿ ûù¿ û¬¿ ûÁ¿ ü¿ üU¿ üw¿ üä¿ üî¿ üö¿ ü¡¿ üÁ¿ üÎ¿ üÏ¿ †¿ †C¿ †Q¿ †W¿ †ü¿ †‡¿ °¿ °C¿ °I¿ °M¿ °N¿ °ë¿ °∂¿ °’¿ ¢¿ ¢W¿ ¢¢¿ ¢Ù¿ £C¿ £~¿ £î¿ £ö¿ £¿¿ £ƒ¿ £≈¿ §¿ §k¿ §∫¿ §‡¿ §‰¿ §Â¿ •$¿ •>¿ •d¿ •ã¿ •ü¿ •⁄¿ •¿ •ˆ¿ •˙¿ •˚¿ ¶C¿ ¶ì¿ ¶÷¿ ß)¿ ßZ¿ ßo¿ ßw¿ ß}¿ ßè¿ ßì¿ ßî¿ ßÀ¿ ®¿ ®o¿ ®´¿ ® ¿ ®Ô¿ ©¿ ©5¿ ©X¿ ©©¿ ©È¿ ™M¿ ™¿ ™ä¿ ™ ¿ ´¿ ´I¿ ´ã¿ ´•¿ ´Ê¿ ¨¿ ¨$¿ ¨.¿ ¨t¿ ¨ì¿ ¨“¿ ¨Û¿ ≠X¿ ≠q¿ ≠É¿ ≠ç¿ ≠Ã¿ ≠Ì¿ Æ¿ Æ&¿ Æ8¿ ÆB¿ Æì¿ Æ”¿ Ø7¿ Øi¿ Øt¿ Øµ¿ Ø˝¿ ∞¿ ∞¿ ∞\¿ ∞É¿ ∞“¿ ∞ˆ¿ ±2¿ ±F¿ ±Å¿ ±ß¿ ±´¿ ±¨¿ ±“¿ ±”¿ ±Ù¿ ≤;¿ ≤l¿ ≤m¿ ≤≥¿ ≤π¿ ≥
¿ ≥[¿ ≥ç¿ ≥Ÿ¿ ¥%¿ ¥p¿ ¥ø¿ µ¿ µQ¿ µ_¿ µe¿ µí¿ µΩ¿ µÒ¿ ∂¿ ∂(¿ ∂5¿ ∂X¿ ∂á¿ ∂”¿ ∑¿ ∑¿ ∑ ¿ ∑R¿ ∑ú¿ ∑‘¿ ∑‚¿ ∑Ë¿ ∑Ï¿ ∑Ì¿ ∏¿ ∏=¿ ∏b¿ ∏¿¿ π¿ π"¿ πN¿ πx¿ πÄ¿ πç¿ π´¿ π◊¿ πˇ¿ ∫¿ ∫R¿ ∫ê¿ ∫ù¿ ∫®¿ ∫∞¿ ∫∂¿ ∫–¿ ∫ˆ¿ ª¿ ª!¿ ª"¿ ªI¿ ªw¿ ªô¿ ªù¿ ªû¿ ª¡¿ º¿ º?¿ º@¿ ºà¿ ºé¿ ºﬂ¿ Ω0¿ Ωb¿ Ω∞¿ Ω¸¿ æG¿ æñ¿ æﬁ¿ ø,¿ ø:¿ ø@¿ øm¿ øö¿ ø–¿ ø˙¿ ¿¿ ¿¿ ¿7¿ ¿h¿ ¿¥¿ ¿Á¿ ¿˘¿ ¡¿ ¡7¿ ¡É¿ ¡Ω¿ ¡À¿ ¡—¿ ¡’¿ ¡÷¿ ¡ˇ¿ ¬/¿ ¬Q¿ ¬U¿ ¬V¿ ¬|¿ ¬}¿ ¬Æ¿ ¬›¿ ¬ﬁ¿ √&¿ √h¿ √i¿ √«¿ ƒ¿ ƒr¿ ƒs¿ ƒô¿ ƒ˛¿ ≈¿ ≈+¿ ≈/¿ ≈0¿ ≈z¿ ≈’¿ ∆¿ ∆h¿ ∆Ü¿ ∆≤¿ «¿ «+¿ «,¿ «T¿ «π¿ «¿¿ «Ê¿ »5¿ »9¿ »:¿ »Ä¿ »¿¿ …¿ …c¿ …≈¿ …∆¿ …Ï¿  O¿  V¿  |¿  Ä¿  Å¿  …¿ À ¿ Àj¿ À≥¿ Àœ¿ À˘¿ ÃH¿ Ãn¿ Ão¿ Ãó¿ Ã˙¿ Õ¿ Õ'¿ Õv¿ Õz¿ Õ{¿ Õ£¿ Õ≈¿ ÕË¿ ÕÓ¿ ŒF¿ Œü¿ Œœ¿ œ¿ œ9¿ œ`¿ œ£¿ œ¨¿ œÕ¿ œ‘¿ œ’¿ œÔ¿ –#¿ –?¿ –¿ –…¿ ––¿ –‘¿ –’¿ –¯¿ —"¿ —G¿ —U¿ —[¿ —´¿ —˜¿ “!¿ “9¿ “Y¿ “®¿ “Á¿ ”+¿ ”q¿ ”ú¿ ”Á¿ ‘$¿ ‘d¿ ‘¶¿ ‘œ¿ ‘˝¿ ’0¿ ’O¿ ’l¿ ’ü¿ ’Œ¿ ’˘¿ ÷6¿ ÷=¿ ÷A¿ ÷B¿ ÷e¿ ÷ä¿ ÷ò¿ ÷û¿ ÷»¿ ◊¿ ◊d¿ ◊{¿ ◊«¿ ÿ¿ ÿQ¿ ÿê¿ ÿ¡¿ ÿ≈¿ ÿ∆¿ ÿÈ¿ ÿÔ¿ Ÿ:¿ ŸG¿ Ÿ_¿ ŸÑ¿ Ÿ¨¿ Ÿø¿ Ÿ≈¿ Ÿ∆¿ ŸÔ¿ ⁄¿ ⁄	¿ ⁄
¿ ⁄)¿ ⁄O¿ ⁄`¿ ⁄d¿ ⁄e¿ ⁄ç¿ ⁄ì¿ ⁄ﬁ¿ €.¿ €{¿ €å¿ €í¿ €„¿ ‹¿ ‹S¿ ‹g¿ ‹m¿ ‹n¿ ‹ø¿ ›¿ ›_¿ ›™¿ ›Î¿ ﬁ¿ ﬁ/¿ ﬁ5¿ ﬁ6¿ ﬁ[¿ ﬁ|¿ ﬁÇ¿ ﬁÉ¿ ﬁ∂¿ ﬁ˙¿ ﬂ"¿ ﬂ5¿ ﬂ;¿ ﬂ<¿ ﬂb¿ ﬂc¿ ﬂá¿ ﬂü¿ ﬂ“¿ ‡¿ ‡¿ ‡¿ ‡-¿ ‡1¿ ‡2¿ ‡u¿ ‡{¿ ‡…¿ ·¿ ·c¿ ·i¿ ·≠¿ ·Î¿ ·Ò¿ ‚;¿ ‚ä¿ ‚“¿ ‚¯¿ ‚˛¿ „1¿ „7¿ „d¿ „j¿ „æ¿ ‰¿ ‰<¿ ‰B¿ ‰R¿ ‰ô¿ ‰ﬁ¿ Â¿ Âc¿ Âµ¿ Ê¿ Ê=¿ ÊS¿ Êo¿ Êå¿ Ê≤¿ Êπ¿ Ê–¿ Ê˚¿ ÁZ¿ Ác¿ Áq¿ Áw¿ Á¢¿ Á»¿ Ë¿ Ë¿ Ë¿ Ë¿ Ë`¿ Ëf¿ Ë¥¿ È¿ ÈN¿ ÈT¿ Èö¿ Èÿ¿ Èﬁ¿ Í(¿ Íw¿ Íø¿ ÍÂ¿ ÍÎ¿ Î¿ Î$¿ ÎQ¿ ÎW¿ Î´¿ ÎÛ¿ Ï)¿ Ï/¿ Ï?¿ ÏÇ¿ Ï«¿ Ì¿ ÌL¿ Ìû¿ ÌÓ¿ Ó&¿ Ó>¿ ÓZ¿ Ów¿ Óù¿ Ó§¿ Óª¿ ÓÊ¿ ÔG¿ ÔP¿ Ô^¿ Ôd¿ Ôë¿ Ôπ¿ ¿ 	¿ ¿ ¿ L¿ R¿ ¿ Ö¿ ï¿ ‹¿ Ò¿ Òd¿ Ò£¿ ÒÈ¿ Ú;¿ Ús¿ Ú´¿ Úÿ¿ ÚÚ¿ Û¿ Û8¿ Û<¿ Û=¿ Ûr¿ Ûx¿ Û•¿ Û´¿ Û¯¿ ÙC¿ Ùè¿ Ùï¿ ÙÁ¿ ı¿ ı¿ ı$¿ ık¿ ıÆ¿ ıÛ¿ ˆ2¿ ˆÇ¿ ˆ‘¿ ˜¿ ˜=¿ ˜j¿ ˜Ñ¿ ˜ﬂ¿ ˜„¿ ˜‰¿ ¯!¿ ¯'¿ ¯T¿ ¯Z¿ ¯¶¿ ¯Ò¿ ˘B¿ ˘H¿ ˘ö¿ ˘¡¿ ˘«¿ ˘◊¿ ˙¿ ˙a¿ ˙¶¿ ˙‰¿ ˚*¿ ˚b¿ ˚ò¿ ˚≈¿ ˚ﬂ¿ ¸?¿ ¸C¿ ¸D¿ ¸o¿ ¸u¿ ¸¬¿ ˝¿ ˝¿ ˝Y¿ ˝©¿ ˝Ú¿ ˛¿ ˛!¿ ˛D¿ ˛i¿ ˛m¿ ˛n¿ ˛Ø¿ ˛…¿ ˛„¿ ˇ¿ ˇ1¿ ˇw¿ ˇù¿ ˇ°¿ ˇ¢¿ ˇ¡¿ ¿ ¿ ,¿ 2¿ t¿ x¿ y¿ ô¿ ﬁ¿ ˆ¿¿
¿Z¿^¿_¿ñ¿ú¿¨¿≤¿¿0¿g¿ò¿Á¿¿'¿|¿”¿ˇ¿¿¿e¿õ¿∑¿·¿¿5¿<¿@¿A¿a¿ö¿ƒ¿Í¿¿¿[¿ß¿‡¿˘¿9¿S¿`¿¢¿®¿Ú¿-¿1¿2¿Å¿¨¿ﬁ¿Ï¿Ú¿	¿	A¿	[¿	ñ¿	∏¿	¡¿	»¿	Ó¿
=¿
d¿
h¿
i¿
ì¿
î¿
…¿
˚¿	¿¿e¿ß¿›¿¿]¿ß¿ﬂ¿¿¿A¿j¿í¿≠¿›¿¿=¿F¿M¿s¿¬¿È¿Ì¿Ó¿¿¿c¿å¿í¿¢¿®¿¸¿I¿õ¿‚¿1¿G¿ò¿Õ¿¿M¿ù¿ÿ¿¿A¿T¿e¿f¿ù¿∆¿Ì¿¿2¿â¿∏¿€¿˚¿ ¿E¿l¿á¿ë¿ö¿≤¿€¿¿%¿L¿Ç¿ß¿Ã¿Û¿¿'¿1¿:¿N¿`¿a¿ö¿√¿Í¿¿/¿Ü¿µ¿ÿ¿¯¿¿B¿i¿Ñ¿é¿ó¿»¿Ã¿Õ¿¿a¿¶¿æ¿ÿ¿ﬁ¿ﬂ¿!¿8¿W¿v¿ñ¿Œ¿˘¿S¿p¿~¿ã¿ñ¿ü¿•¿Ω¿¡¿¬¿ˇ¿¿d¿h¿i¿§¿¬¿¿	¿
¿Y¿ç¿›¿)¿S¿•¿ı¿ ,¿ Q¿ í¿ ’¿ ﬁ¿ Î¿!¿!S¿!î¿!ù¿!£¿!∂¿!∫¿!ª¿!„¿"%¿"Q¿"á¿"à¿"ó¿"¿¿"˘¿"˝¿#	¿#)¿#*¿#9¿#b¿#õ¿#ü¿#´¿#Õ¿#Œ¿#⁄¿$
¿$0¿$G¿$o¿$u¿$y¿$z¿$Ü¿$π¿$œ¿%¿%K¿%a¿%w¿%}¿%£¿%Ú¿&¿&¿&¿&-¿&V¿&è¿&ì¿&ü¿&”¿&‡¿&ˆ¿'E¿'l¿'p¿'q¿'Ä¿'©¿'‚¿'Ê¿'Ú¿(;¿(<¿(K¿(t¿(≠¿(±¿(Ω¿(Î¿)%¿))¿)*¿)9¿)b¿)õ¿)ü¿)´¿)ﬁ¿)Ò¿)ı¿)ˆ¿*¿*.¿*g¿*k¿*w¿*–¿+¿+¿+¿+¿+@¿+y¿+}¿+â¿+«¿+⁄¿+ﬁ¿+ﬂ¿,¿,¿,¿,4¿,U¿,s¿,©¿,¯¿,¸¿,˝¿-	¿-0¿-W¿-ê¿-ø¿-◊¿-€¿-‹¿-È¿-ı¿.¿.A¿.p¿.í¿.∫¿/¿/B¿/j¿/å¿/™¿/Â¿0¿0?¿0T¿0X¿0Y¿0f¿0r¿0ô¿0ƒ¿1 ¿19¿1û¿1•¿1∑¿1˙¿2 ¿2&¿2E¿2f¿2ç¿2º¿2‡¿2¯¿3¿3C¿3h¿3ã¿3¶¿3≥¿3æ¿3«¿3Œ¿3“¿3‘¿3’¿4#¿4'¿4u¿4∆¿4⁄¿5)¿5d¿5e¿5q¿5ß¿5»¿5Ù¿5˙¿6$¿6(¿6*¿6+¿6t¿6î¿6ï¿6∫¿6ª¿6«¿7¿7G¿7K¿7M¿7N¿7ü¿7√¿7ƒ¿7È¿7Í¿7ˆ¿8E¿8X¿8\¿8^¿8_¿8Æ¿8“¿9¿9 ¿9E¿9j¿9k¿9w¿9∞¿9Û¿9˜¿9˘¿9˙¿:P¿:t¿:∆¿:«¿:Ï¿;¿;¿;¿;W¿;{¿;±¿;ø¿;≈¿<¿<¿<¿<¿<h¿<å¿<ƒ¿<≈¿<Í¿<Î¿<˜¿=0¿=T¿=ä¿=ò¿=û¿=◊¿=€¿=›¿=ﬁ¿>,¿>g¿>k¿>π¿?¿?O¿?S¿?£¿?Ò¿@B¿@ó¿@Ω¿@¡¿A¿At¿AÕ¿B4¿B8¿BF¿BJ¿Bö¿BÂ¿C@¿CÄ¿C¡¿C¬¿D ¿D?¿D@¿DÉ¿D±¿D≤¿DÛ¿E¿E ¿Ez¿EÄ¿E‘¿F&¿F;¿FA¿Fö¿F∂¿Fº¿G¿G/¿G5¿Gì¿GÏ¿G˘¿HN¿Hd¿Hu¿H£¿Hµ¿HÂ¿Hˆ¿I&¿IT¿IZ¿I^¿I_¿I®¿IÊ¿J,¿J2¿J|¿Jœ¿K¿K;¿KA¿Kü¿K¯¿L¿L2¿LÄ¿Lé¿Lî¿LÂ¿M4¿Ml¿MØ¿Mµ¿MÏ¿M¿MÒ¿NB¿Nw¿NÑ¿N≠¿Nﬁ¿N¯¿Nˇ¿O¿OW¿Od¿O¨¿O≤¿O∂¿O∑¿P¿P7¿Pr¿Pû¿P‰¿Q,¿QP¿Qã¿Q“¿Q˘¿R:¿R`¿Rz¿RÖ¿Rú¿R•¿R´¿R’¿S¿S]¿S¿S∂¿S˘¿T ¿Ta¿TÖ¿Tù¿T®¿Tæ¿T«¿TÕ¿T—¿T“¿T˝¿U¿UG¿Uç¿UÃ¿UŸ¿V ¿VC¿Vr¿Vü¿V£¿V§¿VË¿VÓ¿W6¿Wf¿Wl¿W∞¿W˝¿X
¿XS¿XÇ¿XØ¿X≥¿X¥¿X¿¿XÁ¿Y!¿Y?¿YC¿YD¿YP¿Yì¿Y‘¿Y˝¿Z¿Z¿Z¿Z!¿Zf¿Z®¿Z—¿Z‰¿ZË¿ZÈ¿Zı¿[D¿[ã¿[¥¿[«¿[À¿[Ã¿[ÿ¿\¿\b¿\Ö¿\ò¿\ú¿\ù¿\©¿\˜¿]¿]U¿]ì¿]ö¿]Õ¿]—¿]“¿]ﬁ¿]Ò¿^¿^)¿^-¿^.¿^:¿^ô¿^≥¿^‚¿_.¿_V¿_É¿_Œ¿_ˆ¿`¿`Y¿`Ç¿`¨¿`€¿`Í¿a#¿a_¿aú¿aƒ¿a ¿b¿b¿b¿bj¿bp¿bí¿b‚¿c¿c:¿cå¿c«¿d¿d0¿d<¿do¿dÀ¿e$¿e_¿eh¿eî¿e…¿e—¿f¿f¿fr¿fÕ¿g
¿g¿gA¿gv¿g~¿gπ¿gø¿g√¿gƒ¿g–¿g¿h$¿hE¿h°¿h™¿h∞¿hÊ¿i¿ig¿ip¿iv¿iµ¿i€¿j!¿j(¿jP¿jñ¿jù¿jø¿j√¿j≈¿j∆¿k¿k¿k!¿kr¿k¿¿l ¿l\¿lv¿l¿¿l¿m¿mT¿mZ¿m^¿m_¿mü¿m–¿m—¿n¿n*¿n0¿n~¿nŒ¿nÈ¿nÔ¿o5¿on¿ot¿oπ¿o˚¿o¸¿pA¿pN¿ps¿pt¿pª¿p»¿pÔ¿p¿q¿q6¿qT¿qx¿qy¿q£¿qŒ¿qÛ¿r"¿r#¿rN¿rO¿r[¿r¿rÆ¿rŒ¿rÔ¿rÛ¿rÙ¿s ¿s'¿sP¿sò¿sƒ¿sÕ¿t¿t(¿t.¿tQ¿tr¿tv¿tw¿tæ¿tŸ¿t˘¿t˝¿t˛¿u#¿uJ¿us¿uß¿u“¿u‰¿uÓ¿v¿v8¿v@¿vA¿vú¿vÌ¿w9¿wÖ¿wø¿wÏ¿w˚¿x3¿xO¿xå¿xó¿xü¿x•¿x©¿x™¿x»¿xÏ¿y¿y&¿y,¿yH¿yL¿yM¿yh¿y¡¿yˇ¿z!¿z;¿zV¿zê¿z∆¿zÂ¿{J¿{Å¿{∫¿|¿|5¿|p¿|§¿|Æ¿|Á¿}¿}#¿}`¿}|¿}é¿}ñ¿}ó¿}Ë¿~¿~S¿~™¿¿0¿8¿~¿®¿¡¿«¿”¿Ä¿Ä?¿Ä}¿ÄÑ¿Ä◊¿Å&¿Åt¿Å√¿Ç¿Ç@¿Çv¿Çó¿Çõ¿Çú¿ÇŒ¿É(¿É_¿ÉÄ¿É≠¿É“¿Éÿ¿Ñ¿Ñ.¿Ñ4¿Ñt¿Ñx¿Ñy¿Ñæ¿ÑÀ¿Ñ‹¿Ñ¸¿Ö¿Ö ¿Ö!¿Ö-¿Öb¿Ö§¿Öª¿Ö›¿Ö‚¿Ö„¿Ü0¿ÜT¿Üì¿ÜΩ¿Ü‚¿Ü˚¿á¿á%¿á)¿á*¿áa¿áì¿á‚¿à*¿à0¿àC¿àG¿àH¿àî¿à¥¿à∫¿à⁄¿àÁ¿â)¿â*¿âi¿â«¿ä%¿ä^¿äu¿ää¿äê¿äø¿ä√¿äƒ¿ã¿ã ¿ã&¿ãp¿ã≤¿ã‰¿å%¿åh¿å∂¿å˘¿çG¿çW¿ç]¿çß¿çÃ¿ç“¿ç˚¿çˇ¿é ¿éP¿éò¿éû¿é›¿è¿è&¿èã¿èú¿è¢¿è∑¿ê¿ê,¿ê2¿êo¿êñ¿êú¿ê√¿ê«¿ê»¿êÛ¿ëD¿ëí¿ë‹¿í¿í¿í¿í5¿í9¿í:¿í¿íå¿íπ¿ì¿ìD¿ì¶¿ì¨¿ì≠¿ì‘¿î&¿îJ¿îl¿îu¿î≈¿îÁ¿ï¿ï¿ï¿ï¿ïS¿ï®¿ñ¿ñ9¿ñt¿ñ©¿ñﬁ¿ó¿ó¿ó ¿ó@¿óu¿óÀ¿ò¿ò¿òT¿ò]¿òï¿ò±¿ò÷¿òˆ¿ô;¿ôÄ¿ôã¿ôì¿ôô¿ôö¿ô–¿ö!¿öT¿ö∏¿öÎ¿õ"¿õ(¿õF¿õw¿õ…¿õ˛¿ú¿úJ¿úS¿úã¿ú•¿ú»¿úÊ¿ù'¿ùh¿ùs¿ù{¿ùÅ¿ùÇ¿ùÀ¿û¿û>¿ûe¿ûÆ¿ûæ¿ü¿ü|¿ü”¿ü˘¿†E¿†ù¿†·¿†Ó¿°¿°[¿°h¿°}¿°º¿°¬¿°√¿°·¿¢¿¢+¿¢Q¿¢≤¿¢Â¿¢˝¿£¿£¿£	¿£T¿£°¿£Ô¿§<¿§ã¿§®¿§≠¿§˝¿•V¿•ã¿•µ¿¶¿¶.¿¶4¿¶M¿¶Q¿¶R¿¶^¿¶¶¿¶Ú¿ß ¿ß¿ß+¿ßL¿ßp¿ßt¿ßu¿ß∆¿ßÃ¿®¿®`¿®Ø¿®…¿®Ò¿©*¿©_¿©•¿©Œ¿©È¿©˙¿™¿™.¿™R¿™é¿™†¿™√¿™Ú¿´¿´`¿´Å¿´Æ¿´–¿¨¿¨c¿¨¶¿¨¨¿¨˙¿≠¿≠C¿≠Å¿≠®¿≠∞¿≠⁄¿Æ¿Æ;¿ÆC¿ÆQ¿ÆW¿ÆX¿Æ•¿Æ·¿ÆÁ¿Ø0¿Øj¿Øp¿Øq¿Ø∑¿Ø∏¿Ø˙¿∞.¿∞c¿∞Ω¿∞À¿∞—¿∞“¿±¿±^¿±§¿±®¿±©¿±‚¿±Ó¿≤¿≤X¿≤è¿≤‚¿≤È¿≥¿≥¿≥ ¿≥P¿≥ä¿≥≥¿≥π¿≥Û¿≥˜¿≥¯¿¥G¿¥M¿¥¢¿¥¬¿¥Œ¿¥È¿µM¿µN¿µú¿µÒ¿∂=¿∂é¿∂´¿∂˚¿∑I¿∑\¿∑b¿∑{¿∑í¿∑Ø¿∏¿∏E¿∏∑¿π'¿πg¿π™¿π√¿∫!¿∫'¿∫e¿∫ü¿∫ƒ¿∫ﬁ¿ª¿ªJ¿ªç¿ªö¿ª§¿ª‘¿ªı¿º¿º¿º?¿ºe¿ºâ¿ºí¿º¿¿ºÊ¿Ω
¿Ω¿Ω,¿Ω]¿Ω∫¿Ω’¿Ω‰¿æ4¿æ<¿æB¿æN¿æ`¿ø¿ø
¿ø+¿øj¿øß¿øÆ¿ø≤¿ø≥¿¿¿¿A¿¿G¿¿ë¿¿∑¿¿√¿¿Ï¿¡*¿¡a¿¡∂¿¡Ω¿¡Í¿¡Ó¿¡Ô¿¬0¿¬k¿¬p¿¬√¿¬ı¿¬˙¿√>¿√b¿√∞¿√æ¿√ƒ¿ƒ¿ƒO¿ƒt¿ƒú¿ƒÆ¿ƒ¯¿≈¿≈/¿≈É¿≈ê¿≈û¿≈§¿≈˘¿∆L¿∆é¿∆¬¿∆‘¿∆‹¿«2¿«8¿«<¿«=¿«n¿«{¿«æ¿«ı¿»-¿»3¿»W¿»é¿»Ø¿»≥¿»¥¿»Ù¿… ¿…S¿…´¿…≤¿…·¿ ¿ l¿ Ø¿À¿À¿À8¿Àz¿À©¿À‚¿Ã&¿Ãc¿Ãò¿Ã™¿Ã∑¿Ãı¿Õ$¿Õ7¿ÕC¿ÕM¿ÕU¿Õ}¿Õ ¿Œ"¿ŒÄ¿Œß¿Œ±¿ŒÏ¿œ ¿œ
¿œW¿œÇ¿œå¿œ»¿–¿–_¿–u¿–ø¿–◊¿–˛¿—V¿—g¿—∞¿—∫¿—ﬁ¿—Ì¿“(¿“u¿“õ¿“•¿“≠¿“≥¿“‹¿“¸¿” ¿”¿”8¿”i¿”v¿”ª¿”‰¿”Ë¿”È¿‘%¿‘[¿‘h¿‘∑¿‘‡¿‘‰¿‘Â¿’-¿’:¿’~¿’µ¿’Ì¿’Û¿÷¿÷;¿÷\¿÷`¿÷a¿÷†¿÷≠¿◊¿◊[¿◊á¿◊¢¿◊Â¿◊Ù¿ÿL¿ÿT¿ÿZ¿ÿµ¿Ÿ¿Ÿ+¿Ÿ]¿Ÿ¥¿ŸŒ¿⁄¿⁄S¿⁄[¿⁄h¿⁄ñ¿⁄‹¿⁄ˆ¿€G¿€w¿€¿€Ö¿€ú¿€ ¿€◊¿‹¿‹¿‹ ¿‹$¿‹%¿‹d¿‹q¿‹—¿›%¿›Q¿›™¿›€¿ﬁ ¿ﬁt¿ﬁ}¿ﬁÉ¿ﬁﬁ¿ﬂ;¿ﬂZ¿ﬂå¿ﬂ·¿‡¿‡4¿‡R¿‡Ü¿‡Æ¿‡˙¿·	¿·<¿·H¿·R¿·Ä¿·—¿·ˇ¿‚5¿‚S¿‚á¿‚Ø¿‚˙¿„	¿„<¿„H¿„R¿„¿„≠¿„‹¿„‚¿„˘¿‰'¿‰4¿‰d¿‰j¿‰}¿‰Å¿‰Ç¿‰•¿‰≤¿Â ¿Â:¿Âf¿Âï¿Â«¿ÂÕ¿Â˘¿Ê'¿ÊX¿Ê\¿Ê]¿Êi¿Ê™¿ÊÙ¿Á2¿Ám¿Áì¿Áô¿Áœ¿Áı¿Ë¿Ë0¿Ë_¿Ëå¿Ë∏¿È¿È,¿ÈX¿Èù¿È∆¿ÈÚ¿Í6¿Í`¿Íå¿Í“¿Î¿Î-¿Î}¿Î∂¿Î·¿Ï<¿Ïx¿Ï£¿Ì¿Ì
¿Ì1¿ÌQ¿Ìd¿Ìh¿Ìi¿Ìu¿Ìà¿Ìø¿Ó¿Ó¿Ó/¿ÓW¿Ól¿Óp¿Óq¿Óø¿Ó≈¿Ô¿ÔT¿ÔZ¿Ô™¿Ôæ¿ÔÀ¿Ô˝¿Ô˛¿=¿C¿í¿ ¿◊¿Ò6¿Òk¿Òo¿Òp¿Ò¨¿Ò≤¿Ú¿ÚP¿Ú¢¿ÚÎ¿Û#¿Û)¿Ûx¿Û…¿Û÷¿Ù0¿Ù<¿Ùù¿Ù§¿Ùª¿Ùﬂ¿Ù¸¿ıT¿ıá¿ıﬁ¿ı˚¿ˆ¿ˆA¿ˆ]¿ˆ¿ˆõ¿ˆ√¿ˆÁ¿˜¿˜2¿˜N¿˜h¿˜ó¿˜£¿˜Õ¿˜Û¿¯¿¯;¿¯_¿¯g¿¯m¿¯n¿¯à¿¯´¿¯Œ¿¯‘¿¯Â¿˘¿˘¿˘J¿˘P¿˘p¿˘º¿˙¿˙Z¿˙Ö¿˙â¿˙ä¿˙ÿ¿˚¿˚$¿˚k¿˚º¿˚¸¿¸X¿¸h¿¸{¿¸€¿¸¿¸¯¿˝Z¿˝m¿˝w¿˝ô¿˝Ê¿˛6¿˛u¿˛¡¿˛›¿ˇ*¿ˇY¿ˇ`¿ˇ¥¿ˇ⁄¿ ¿ D¿ ~¿ ≤¿ Î¿#¿Ñ¿∫¿Ò¿*¿K¿Ñ¿æ¿ˆ¿¿¿2¿d¿¥¿ÿ¿*¿P¿¶¿‰¿Î¿4¿X¿_¿É¿∏¿¯¿5¿â¿Ê¿¿1¿W¿z¿´¿Œ¿¿¿:¿u¿®¿ª¿◊¿Ú¿˛¿	%¿	G¿	b¿	ë¿	∑¿	Í¿	˝¿
¿
5¿
A¿
I¿
O¿
`¿
ã¿
ò¿
≈¿
À¿
Î¿¿¿
¿¿U¿c¿∞¿±¿˝¿¿¿,¿0¿z¿ë¿æ¿¿¿S¿W¿ò¿Ã¿–¿¿P¿l¿ì¿ﬁ¿‰¿'¿p¿µ¿¯¿A¿M¿N¿ö¿†¿Ë¿/¿x¿¬¿¿M¿Z¿\¿]¿≠¿Ÿ¿›¿>¿Ä¿Ã¿¿>¿?¿Ñ¿µ¿∂¿¿.¿4¿s¿¿–¿—¿"¿:¿@¿¿å¿≈¿—¿¿T¿ï¿·¿Ë¿¿1¿5¿7¿8¿Ñ¿∑¿ª¿¿k¿ª¿–¿¿L¿w¿ë¿ó¿ò¿‰¿˛¿¿`¿∫¿¿¿W¿]¿∑¿«¿Õ¿¿_¿∫¿Õ¿!¿D¿H¿I¿U¿°¿Í¿Ó¿¿Ò¿F¿ù¿∏¿º¿ ¿ f¿ j¿ ∫¿!¿![¿!©¿!ﬂ¿!„¿!˜¿"N¿"Å¿"Ö¿"⁄¿"Í¿"Ó¿#¿#G¿#r¿#v¿#À¿#€¿#ﬂ¿#Ì¿#Ò¿$A¿$r¿$°¿$ˇ¿% ¿%9¿%n¿%o¿%™¿%∞¿%·¿%˜¿%¯¿&¿&K¿&M¿&N¿&è¿&Ë¿'¿'¿'¿'+¿'a¿'á¿' ¿(¿(¿(¿(¿("¿(5¿(W¿(l¿(p¿(q¿(}¿(§¿(ˆ¿(˙¿(¸¿(˝¿)M¿)o¿)ƒ¿)Û¿*4¿*8¿*9¿*i¿*j¿*ö¿*◊¿+¿+<¿+}¿+Å¿+Ç¿+é¿+©¿+∆¿,¿,F¿,o¿,}¿,É¿,≠¿,±¿,≤¿,æ¿,—¿-¿-6¿-K¿-O¿-P¿-\¿-ë¿-í¿-û¿-Ã¿-Œ¿-œ¿./¿.3¿.Ä¿.–¿/ ¿/>¿/B¿/ì¿/ı¿0¿0l¿0r¿0•¿0»¿0…¿1.¿1L¿1N¿1O¿1û¿1´¿1Ø¿1Ô¿2.¿2`¿2a¿2ª¿2¡¿3¿3z¿3û¿3∫¿4¿4¿4o¿4§¿4•¿4ˇ¿5¿5¿5©¿5∞¿5‹¿5‡¿5·¿6¿60¿64¿65¿6O¿6[¿6n¿6ö¿6Ø¿6≥¿6¥¿7¿7,¿72¿7h¿7t¿7†¿7¡¿7≈¿7«   _kLongPressSelectionDevices&_kSelectableVerticalComparingThresholdSelectableRegionSelectableRegionState_NonOverrideAction_SelectAllAction_CopySelectionAction _GranularlyExtendSelectionAction%_GranularlyExtendCaretSelectionAction(_DirectionallyExtendCaretSelectionAction StaticSelectionContainerDelegate)MultiSelectableSelectionContainerDelegateSelectableRegionSelectionStatus(_SelectableRegionSelectionStatusNotifier$SelectableRegionSelectionStatusScopeSelectionListener_SelectionListenerState_SelectionListenerDelegateSelectionDetailsSelectionListenerNotifier  ‚