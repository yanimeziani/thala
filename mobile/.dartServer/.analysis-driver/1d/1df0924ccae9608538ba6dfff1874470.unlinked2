Ä˛popdoNotPopbubblerequestFocus_requestFocus	navigator
_navigatorsettings	_settings_isPageBasedrestorationScopeId_restorationScopeId_updateSettings_updateRestorationIdoverlayEntriesinstalldidPushdidAdd
didReplacewillPoppopDispositiononPopInvokedonPopInvokedWithResultwillHandlePopInternallycurrentResultpopped_popCompleter_disposeCompleterdidPopdidComplete
didPopNextdidChangeNextdidChangePreviouschangedInternalStatechangedExternalStatedispose	isCurrentisFirsthasActiveRouteBelowisActivename	argumentstoString_defaultPopInvokedHandlerkeyrestorationIdcanPop	canUpdatecreateRoute_navigators	didRemovedidChangeTopdidStartUserGesturedidStopUserGesture
controllermaybeOfofupdateShouldNotifyrouteisWaitingForEnteringDecisionisWaitingForExitingDecisionmarkForPush
markForAdd
markForPopmarkForCompletemarkForRemove_transitionresolvepages	onPopPageonDidRemovePagetransitionDelegateinitialRouteonGenerateRouteonUnknownRoute	observersrouteTraversalEdgeBehavior%routeDirectionalTraversalEdgeBehaviordefaultRouteNameonGenerateInitialRoutesreportsRouteUpdateToEngineclipBehavior	pushNamedrestorablePushNamedpushReplacementNamedrestorablePushReplacementNamedpopAndPushNamedrestorablePopAndPushNamedpushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilpushrestorablePushpushReplacementrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntilreplacerestorableReplacereplaceRouteBelowrestorableReplaceRouteBelowmaybePoppopUntilremoveRouteremoveRouteBelowdefaultGenerateInitialRoutescreateStatestagingaddaddingpushReplacepushingidlecompleteremovepoppingremoving	disposingdisposedrestorationInformation	pageBasedkDebugPopAttemptLimitnotAnnouncedcurrentStatelastAnnouncedPreviousRoutelastAnnouncedPoppedNextRoutelastAnnouncedNextRoutelastFocusNodecanUpdateFrom	handleAdd
handlePushhandleDidPopNext	handlePophandleCompletehandleRemovalpendingResult_reportRemovalToObserverfinalizeforcedDisposewillBePresent	isPresentisPresentForRestorationsuitableForAnnouncementsuitableForTransitionAnimationshouldAnnounceChangeToNextisPresentPredicate'suitableForTransitionAnimationPredicatewillBePresentPredicateisRoutePredicate_isWaitingForExitingDecisionmarkNeedsExitingDecisionrestorationEnabledprimaryRoutesecondaryRoutenotify_value
indexWhereaddAllclearinsertremoveAt
removeLast[]iterator_overlayKey_history_entryWaitingForSubTreeDisposal_serializableHistory_observedRouteAdditions_observedRouteDeletions	focusNode_debugLocked_heroControllerFromScope_effectiveObservers_usingPagesAPI_handleHistoryChanged_debugCheckPageApiParameters	initState_recordLastFocus"_rawNextPagelessRestorationScopeId_nextPagelessRestorationScopeIdrestoreStatedidToggleBucketdidChangeDependencies_forcedDisposeAllRouteEntries_disposeRouteEntry_updateHeroController_updateEffectiveObserversdidUpdateWidget_debugCheckDuplicatedPageKeys
deactivateactivateoverlay_allRouteOverlayEntries_lastTopmostRoute_lastAnnouncedRouteName_debugUpdatingPage_updatePages_flushingHistory_flushHistoryUpdates_flushObserverNotifications_flushRouteAnnouncement_getRouteBefore_getIndexBefore_getRouteAfter_routeNamed_debugIsStaticCallback
_pushEntry_afterNavigation_pushReplacementEntry_pushEntryAndRemoveUntil_replaceEntry_replaceEntryBelowfinalizeRoute_getRouteById_userGesturesInProgress_userGesturesInProgressCountuserGestureInProgressuserGestureInProgressNotifier_activePointers_handlePointerDown_handlePointerUpOrCancel_cancelActivePointers_firstRouteEntryWhereOrNull_lastRouteEntryWhereOrNullbuildnamed	anonymoustype_serializableDataisRestorablegetSerializableDatacomputeSerializableDatatoRouteEntryrouteBuilder_pageToPagelessRoutesupdate_finalizeEntry_debugMapsEqualhasDatarestoreEntriesForPagecreateDefaultValuefromPrimitivesinitWithValuetoPrimitivesenablednavigatorFinder	onPresent
onCompletepresent_route	_disposed_hookOntoRouteFuture_defaultNavigatorFindercanHandlePop* _kAndroidRefocusingDelayDurationRouteFactoryRouteListFactoryRestorableRouteBuilderRoutePredicateWillPopCallbackPopPageCallbackDidRemovePageCallbackRoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate"kDefaultRouteTraversalEdgeBehavior-kDefaultRouteDirectionalTraversalEdgeBehavior	Navigator_RouteLifecycle_RouteEntryPredicate_RoutePlaceholder_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservation_IndexWhereCallback_HistoryNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyNavigatorFinderCallbackRoutePresentationCallbackRouteCompletionCallbackRestorableRouteFutureNavigationNotificationÅœDurationmillisecondsonGenerateRoutedynamiconGenerateInitialRoutesListStringrestorablePushTBuildContextObjectpopUntilboolpopForm	onWillPop
ModalRouteaddScopedWillPopCallbackremoveScopedWillPopCallbackWillPopScope
DeprecatedFuture	onPopPagedidPoppagesonDidRemovePagevoidwillPoppopDispositiondoNotPopbubbleSystemNavigatorOverlayOverlayEntryMaterialPageRoutecreateRouterequestFocusdebugMaybeDispatchCreatedwidgetRestorationScopeValueListenableValueNotifiervalueremove	protectedmustCallSuperTickerFuturecompletethen	focusNodeenclosingScopemaybePopsetFrameworkHandlesBackcanPopPopScopeonPopInvokedfuture	CompleterfinalizeRoutepushReplacementdidStartUserGesturepushoffstageStatedidUpdateWidgetMaterialAppdidChangeDependenciescontextbarrierColordisposedebugMaybeDispatchDisposed_lastRouteEntryWhereOrNullisPresentPredicateroute_firstRouteEntryWhereOrNull_historyentrymaintainStateisRoutePredicate	isPresent	immutableoverrideobjectRuntimeTypecurrentResultpoppedLocalKeyRestorationManagerPopInvokedWithResultCallbackruntimeTypekeysettingsfactoryname	argumentsExpandochildInheritedWidgetHeroControllerof"dependOnInheritedWidgetOfExactType
controllermaybeOfFlutterErrorresolveisWaitingForEnteringDecisiontransitionDelegateIterableMapnewPageRouteHistorylocationToExitingPageRoutepageRouteToPagelessRoutestoListgrowableSetvaluestoSetexitingPageRouteisWaitingForExitingDecisioncontainsKeypagelessRouteintcast
routeEntrylengthcontainsisEmptymarkForPush
markForAdd
markForPopmarkForCompletelastadd	pageRouterouteTraversalEdgeBehaviorTraversalEdgeBehaviorparentScope%routeDirectionalTraversalEdgeBehaviorstopRouterAppBarScaffoldappBar
WidgetsApp
PopupRoute
showDialogshowMenushowModalBottomSheetPopupMenuButtonDropdownButton	PageRoutePageRouteBuilderCupertinoTabViewBuilder	isCurrentrestorationIdrestorationScopeIdStatefulWidgetdefaultGenerateInitialRoutesCliphardEdgeWidgetElementRenderObjectcreateElementcreateStateRenderObjectWidgetcreateRenderObjectdefaultRouteNameRestorationBucketRestorationMixinselectSingleEntryHistory PlatformRouteInformationProviderrouternonedidPushdidChangeNext	observersonUnknownRouteoptionalTypeArgs	pushNamedStandardMessageCodecrestorablePushNamed
didReplacedidCompletepushReplacementNamedresultrestorablePushReplacementNamed
didPopNextTransitionRouteopaquepopAndPushNamedrestorablePopAndPushNamedwillHandlePopInternallywithName	didRemovepushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntildidChangePreviousreplaceoldRoutenewRouterestorableReplacenewRouteBuilderreplaceRouteBelowanchorRouterestorableReplaceRouteBelowPopEntryisFirstLocalHistoryRouteremoveRouteremoveRouteBelowStatefulElementstaterootNavigatorfindRootAncestorStateOfTypefindAncestorStateOfType
startsWith	substring_routeNamed	allowNullsplit
isNotEmptypartreportErrorFlutterErrorDetails	exceptionclearremoveWhereinitialStatestagingpushReplaceWeakReference	canUpdate	navigator_debugLockedadding_observedRouteAdditionspreviousPresent
_navigatorinstalloverlayEntriespushingwhenCompleteOrCancelidle_flushHistoryUpdatesprevious
isNewFirst_disposeCompleterdefaultTargetPlatformTargetPlatformandroiddelayedSystemChannelsaccessibilitysendFocusSemanticEventtoMapnodeIdreFocusNodeiOSpopping_popCompleterisCompletedonPopInvokedWithResultcallremoving_observedRouteDeletionsdidAddindex
isReplaceddisposed	disposingwhereemounted_entryWaitingForSubTreeDisposalVoidCallbackremoveListenereveryscheduleMicrotaskaddListenertargetsuitableForTransitionAnimationwillBePresent_updateRestorationIdprimaryRoutesecondaryRouteChangeNotifier kFlutterMemoryAllocationsEnabledmaybeDispatchObjectCreation
indexWherestartnotifyListenersaddAllinsertremoveAt
removeLastIteratoriteratortoStringTickerProviderStateMixin	GlobalKeyOverlayStateQueue	FocusNodeFocus
debugLabelcanHandlePopSchedulerBindinginstanceschedulerPhaseSchedulerPhasepostFrameCallbacksdispatchmidFrameMicrotaskspersistentCallbackstransientCallbacksaddPostFrameCallbacklibrarystack
StackTracecurrent	initStateobserver_navigators'getElementForInheritedWidgetOfExactTypereportsRouteUpdateToEngineServicesBindingaccessibilityFocus
lastOrNulllastFocusNodeRestorableNumregisterForRestorationrestoreEntriesForPagepage	pageBasedhasDatainitialRoutemaprestorationInformationnameddidToggleBucketbucketupdatechangedExternalStateforcedDisposegracefuloverlayEntry_heroControllerFromScoperestorePendingKey
deactivateactivatecurrentStateputIfAbsentcanUpdateFrom_updateSettingsmarkNeedsExitingDecision_transitionrearrangeOverlay	handleAdd
handlePushhandleDidPopNext	handlePopwillBePresentPredicatehandleCompletehandleRemovaldidChangeToprouteInformationUpdateduriUriparse	rearrangeforEachnotifyremoveFirstsuitableForAnnouncement'suitableForTransitionAnimationPredicatelastAnnouncedNextRouteshouldAnnounceChangeToNextlastAnnouncedPreviousRoute	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionDiagnosticsPropertystyleDiagnosticsTreeStyleerrorProperty!debugIsSerializableForRestorationtoRouteEntryFunctionkIsWebPluginUtilitiesgetCallbackHandle	anonymousrouteBuilderkReleaseMode
jsonEncodetoEncodableobject	postEventany	lastWheremoveNext
firstWherefinalizedidStopUserGesturePointerDownEventpointerPointerEventRenderAbsorbPointercurrentContextfindAncestorRenderObjectOfTypesetState	absorbingWidgetsBindingcancelPointerelementNotificationListeneronNotificationnotificationListeneronPointerDownonPointerUponPointerCancelAbsorbPointerFocusTraversalGrouppolicy	autofocusskipTraversalincludeSemanticsUnmanagedRestorationScopeclipBehaviorinitialEntriesfromSerializableDatasublistelementAtOrNullcomputeSerializableDatagetCallbackFromHandleCallbackHandlefromRawHandletoRawHandleRestorablePropertyisRegisteredkeysisPresentForRestorationrestorationEnabledisRestorablegetSerializableData	setEquals
listEqualsdataMapEntryfromnavigatorFinder	onPresent
onComplete_getRouteByIdNotification_RoutePlaceholderRouteSettingsInheritedWidgetTransitionDelegateStatefulWidgetRouteTransitionRecord_NavigatorObservationIterableChangeNotifierStateTickerProviderStateMixinRestorationMixin_RestorationInformationRestorablePropertyNotificationY≥A[qj®ì¨◊.m     ÅŒ   
dart:async  Å„   dart:collection  Å˝   dart:convert  Ç   Ç+Ç.	developerÇ.dart:developer  Ç:   ÇJÇMuiÇMdart:ui  ÇS   package:flutter/foundation.dart  Ç}   package:flutter/rendering.dart  Ç¶   package:flutter/scheduler.dart  Çœ   package:flutter/services.dart  Ç¯   
basic.dart  É   binding.dart  É$   focus_manager.dart  ÉA   focus_scope.dart  É\   focus_traversal.dart  É{   framework.dart  Éî   heroes.dart  É™   notification_listener.dart  Éœ   overlay.dart  ÉÊ   restoration.dart  Ñ   restoration_properties.dart  Ñ'   routes.dart  Ñ=   ticker_provider.dart¿HK ¿©ò¯ <ÄÜÄ§Ä•Ä÷ÅÅ
Å%ÅAÅ^ÅÅùÅ√ÅÃÅÕÅ‚Å¸ÇÇ9ÇQÇRÇ|Ç•ÇŒÇˆÇ˜ÉÉ#É@É[ÉzÉìÉ©ÉŒÉÂÑ Ñ&Ñ<Ñ[Ñ\Ñ∑ÖÖÖÖCÖhÖŒÖÜÜÜAÜEÜnÜrÜÄÜÑÜ¿á	á
á6á:ákáÜáÿáŸàààeà≤àΩà¡ââTâòâ„ääqärä±äÔäãAãEãäãÃãŸã˛å6å8åkålå¢å¶åÒç4çÇçŒç˚éJéKéáéãéÿèèjèóè⁄è€êêêKêOê]êaê≠êøê⁄êÔêıëCëuë|ë}ëôëüëÌííííRíXí©í˘ìììììWì[ì¶ìıîDîhîlî≤î€îﬂï.ïPïTï£ïÈñ6ñ~ñŒóó
óKóõóæóÚòòòcòwò}òºôô"ô7ônô£ô»ööööjöpöƒõõ6õ7õiõòõ∂õ∑õ⁄õ‡úúúXúïú¥ú∫ù
ùUùüùÈûû8ûSûTûäûãû‹ûÓûÙü@üVü\ü´ü˚†I†ô†Ë°°e°∏°π°Ì¢¢0¢P¢p¢x¢~¢Ç¢É¢Õ££1£5£6£_£e£¥£Ú£¯§E§T§Z§¶§À•••K•Q•£•˜¶<¶Y¶f¶w¶ã¶å¶÷¶‹ß$ß*ßwß∏ßæ®®<®I®Z®u®Ø®…©©©©©©b©h©¥©È©Ô™>™m™z™ã™ù™µ´´T´£´Ú¨¨¨p¨√≠≠D≠x≠ ÆÆoÆøØØaØíØùØÌ∞;∞n∞´∞µ∞ª∞ø∞¿±±±d±ì±†±±±‡±·≤1≤Y≤_≤Ø≤Õ≤”≥≥W≥¢≥Ó¥=¥z¥Ä¥¿¥„¥Èµ8µfµlµ|µÇµÕµ·∂.∂D∂S∂v∂∞∂¥∂‰∑/∑3∑4∑Ñ∑¨∑≤∏∏A∏r∏x∏√∏¸πGπìπ‚∫∫%∫e∫à∫é∫›ªªª!ª'ªpª¿ºº-ºEºÅºõº»º–º÷Ω!Ω%Ω&ΩRΩXΩ¶Ωˆæ,æ;ækæ¶æ™æŒæœøø>øDøíø‚¿ @¿ @-¿ @>¿ @v¿ @é¿ @æ¿ @Á¿ @Ì¿ @Ò¿ @Ú¿ A%¿ AR¿ AS¿ Aù¿ Aﬂ¿ AÂ¿ B4¿ B[¿ B{¿ B|¿ B«¿ BÕ¿ C¿ Ck¿ CÄ¿ C±¿ CË¿ CÈ¿ D$¿ D%¿ Dl¿ D∏¿ E¿ EQ¿ Em¿ Es¿ E¿¿ F¿ F^¿ F©¿ F˘¿ G¿ G¿ Gh¿ G∏¿ GÙ¿ G˙¿ HI¿ Hb¿ Hs¿ Hé¿ Hß¿ H∏¿ Hº¿ HΩ¿ I¿ I¿ IE¿ Ií¿ IÊ¿ J ¿ J¿ JS¿ J§¿ JŸ¿ Jﬂ¿ K*¿ Kx¿ K…¿ L¿ L¿ L/¿ LO¿ LÑ¿ Là¿ Lâ¿ L“¿ L„¿ LÈ¿ M8¿ MP¿ M]¿ Mn¿ Mù¿ Mû¿ M‡¿ MÊ¿ N6¿ NÜ¿ NÃ¿ N¿ Nˆ¿ OE¿ Od¿ Oq¿ OÇ¿ Oµ¿ O∂¿ O¸¿ P¿ PN¿ Pû¿ PÔ¿ Q	¿ Q¿ Q\¿ Q¿ Qå¿ Qù¿ Qÿ¿ QŸ¿ R¿ R"¿ Rl¿ RΩ¿ S¿ SG¿ SM¿ S]¿ Sc¿ S≠¿ SÎ¿ S¯¿ T	¿ T*¿ T+¿ Tw¿ Tƒ¿ T ¿ Tˇ¿ UP¿ Uì¿ U’¿ V¿ Va¿ Vû¿ V§¿ VÎ¿ W6¿ W}¿ W∂¿ Wº¿ X ¿ X¿ X ¿ X0¿ X6¿ XÜ¿ X£¿ X∞¿ X¡¿ X‚¿ X„¿ Y¿ Y¿ Yk¿ Yú¿ Y¢¿ Y¿ Z¿ Z¿ ZT¿ Z¢¿ ZÒ¿ [¿ [¿ ["¿ [9¿ [\¿ [~¿ [¨¿ [∞¿ [±¿ [Ú¿ [¯¿ \-¿ \D¿ \b¿ \v¿ \|¿ \œ¿ \ı¿ \¸¿ ]!¿ ]5¿ ];¿ ]g¿ ]k¿ ]l¿ ]∑¿ ]Ω¿ ^¿ ^E¿ ^Z¿ ^x¿ ^å¿ ^í¿ ^Ê¿ _¿ _¿ _8¿ _L¿ _R¿ _~¿ _Ç¿ _É¿ _À¿ _ÿ¿ _˘¿ `¿ `+¿ `1¿ `m¿ `é¿ `§¿ `¨¿ `ﬂ¿ `Ù¿ `¸¿ a¿ a¿ a¿ a¿ aG¿ aM¿ aù¿ aÌ¿ b)¿ b/¿ bÅ¿ b’¿ c,¿ cB¿ cß¿ c∂¿ c∫¿ cº¿ cΩ¿ cˆ¿ d¿ d¿ dD¿ dx¿ dy¿ d™¿ d∞¿ d◊¿ dÌ¿ dÓ¿ e¿ e¿ en¿ eâ¿ eä¿ eñ¿ e≠¿ f¿ f¿ f¿ fE¿ fI¿ fí¿ fŸ¿ f›¿ g!¿ g%¿ g9¿ gÖ¿ gô¿ gù¿ gÂ¿ gı¿ g˘¿ h¿ h¿ h\¿ hl¿ hõ¿ h÷¿ hÂ¿ hÛ¿ i¿ i¿ i0¿ iH¿ i{¿ iÅ¿ iÇ¿ i ¿ iÀ¿ iÙ¿ i˙¿ j:¿ jQ¿ jR¿ j¢¿ j≥¿ jπ¿ k	¿ k¿ k¿ k%¿ kr¿ kÑ¿ k£¿ k§¿ k‚¿ kË¿ l8¿ l~¿ lù¿ l£¿ lÙ¿ m<¿ må¿ m∆¿ m¸¿ m˝¿ n>¿ nD¿ nè¿ nØ¿ nµ¿ n¸¿ oH¿ ou¿ oä¿ oã¿ o…¿ oœ¿ p¿ p+¿ pS¿ pî¿ pò¿ pô¿ p“¿ pÿ¿ q.¿ q9¿ qg¿ qh¿ qt¿ qÃ¿ qŒ¿ qœ¿ r¿ r'¿ rc¿ rô¿ rö¿ r‚¿ s1¿ sk¿ s•¿ sÛ¿ t;¿ tÜ¿ t–¿ t¿ u@¿ uA¿ ug¿ um¿ u∏¿ uŸ¿ v ¿ v!¿ vG¿ vM¿ vì¿ v¥¿ v˙¿ v˚¿ w"¿ w(¿ ws¿ wü¿ w•¿ wÍ¿ x5¿ xÖ¿ x§¿ xÌ¿ xÓ¿ y)¿ yt¿ yu¿ yõ¿ y°¿ y¿ z?¿ zÄ¿ zÜ¿ z÷¿ {'¿ {r¿ {ƒ¿ {≈¿ |¿ |¿ |\¿ |ó¿ |Í¿ |Î¿ }(¿ }.¿ }j¿ }â¿ }ã¿ }å¿ }ø¿ }√¿ ~¿ ~Z¿ ~ß¿ ~´¿ ~˙¿ J¿ ï¿ ﬂ¿ Ä¿ ÄJ¿ Äh¿ Äw¿ Ä§¿ Äæ¿ Äƒ¿ Ä≈¿ Å¿ Å#¿ Å|¿ Å}¿ Å∫¿ Åﬁ¿ Åﬂ¿ Ç+¿ ÇS¿ ÇY¿ Çõ¿ Ç⁄¿ Ç‡¿ Ç¿ Çˆ¿ ÉE¿ É|¿ Éµ¿ É„¿ Ñ'¿ ÑD¿ ÑH¿ ÑI¿ Ñï¿ Ñ•¿ Ñ´¿ Ñ˚¿ Ö¿ Ö%¿ Ög¿ Öï¿ Öõ¿ Ö´¿ Ö±¿ Ö˝¿ ÜA¿ Üt¿ Ü≠¿ ÜΩ¿ Ü›¿ Ü˘¿ áQ¿ á{¿ á–¿ à"¿ às¿ à®¿ àÃ¿ à‰¿ àÔ¿ à˜¿ â
¿ â¿ â,¿ â0¿ â1¿ â=¿ âx¿ âß¿ â´¿ â≠¿ âÆ¿ â˝¿ äG¿ än¿ äì¿ äØ¿ ä∞¿ ã¿ ã¿ ãW¿ ã¢¿ ã∆¿ ãÔ¿ ã¿ å@¿ åF¿ åñ¿ å‡¿ ç¿ ç,¿ ç-¿ çc¿ çi¿ ç∂¿ é¿ ék¿ éÅ¿ éÇ¿ é∫¿ é¿¿ è¿ ès¿ èƒ¿ èŸ¿ è⁄¿ ê¿ ê¿ êb¿ ê≥¿ ê—¿ êˆ¿ ê˜¿ ë3¿ ë9¿ ëÖ¿ ë“¿ í ¿ íJ¿ íK¿ íÖ¿ íã¿ í◊¿ ì%¿ ìb¿ ìq¿ ìñ¿ ìÊ¿ î ¿ î$¿ îQ¿ îS¿ îT¿ î•¿ îÕ¿ î—¿ ï ¿ ïs¿ ïw¿ ï¬¿ ï∆¿ ï⁄¿ ñ)¿ ñv¿ ñô¿ ñù¿ ñ©¿ ñÙ¿ ó¿ ó4¿ óv¿ ó÷¿ ò;¿ òF¿ òï¿ òô¿ òÊ¿ ô¿ ôB¿ ôN¿ ôp¿ ôt¿ ô~¿ ô‡¿ ö¿ öM¿ öπ¿ ö‚¿ õ3¿ õd¿ õt¿ õÅ¿ õç¿ õ∂¿ õ∫¿ õƒ¿ õ‹¿ õ‰¿ õÍ¿ õÓ¿ õˆ¿ ú¿ ú
¿ ú¿ ú¿ úg¿ úÑ¿ ú”¿ ù	¿ ù0¿ ùz¿ ùò¿ ùô¿ ù…¿ û¿ ûc¿ ûƒ¿ ûÀ¿ ü¿ ü8¿ üv¿ ü≤¿ üπ¿ ü˚¿ †¿ †¿ †n¿ †~¿ †À¿ †Ú¿ °@¿ °g¿ °∂¿ ¢¿ ¢$¿ ¢3¿ ¢:¿ ¢e¿ ¢l¿ ¢•¿ ¢¨¿ ¢⁄¿ £*¿ £K¿ £R¿ £ù¿ £Í¿ £˙¿ §U¿ §≤¿ §∆¿ •¿ •V¿ •ï¿ •‹¿ ¶¿ ¶V¿ ¶ñ¿ ¶¢¿ ¶¨¿ ¶¥¿ ß¿ ß3¿ ß_¿ ß`¿ ß≤¿ ®¿ ®a¿ ®∞¿ ®Í¿ ©¿ ©+¿ ©X¿ ©b¿ ©j¿ ©k¿ ©y¿ ©⁄¿ ™*¿ ™s¿ ™|¿ ™è¿ ™ô¿ ™ö¿ ™Æ¿ ™≤¿ ™≥¿ ™˛¿ ´J¿ ´P¿ ´°¿ ´È¿ ¨&¿ ¨s¿ ¨ø¿ ≠¿ ≠:¿ ≠@¿ ≠å¿ ≠⁄¿ Æ&¿ Æq¿ Æ¿¿ Ø	¿ ØX¿ Øé¿ Ø⁄¿ ∞%¿ ∞c¿ ∞ç¿ ∞ﬁ¿ ±*¿ ±z¿ ±»¿ ≤¿ ≤e¿ ≤É¿ ≤â¿ ≤◊¿ ≥&¿ ≥u¿ ≥†¿ ≥¶¿ ≥ˆ¿ ¥3¿ ¥~¿ ¥…¿ µ¿ µa¿ µ£¿ µ©¿ µŸ¿ µﬂ¿ ∂¿ ∂¿ ∂C¿ ∂I¿ ∂p¿ ∂v¿ ∂°¿ ∂Ì¿ ∑
¿ ∑¿ ∑9¿ ∑?¿ ∑Ü¿ ∑œ¿ ∑’¿ ∑Â¿ ∑Î¿ ∏<¿ ∏b¿ ∏≤¿ ∏€¿ π*¿ πP¿ π†¿ π‚¿ ∫1¿ ∫s¿ ∫ü¿ ∫›¿ ª9¿ ªö¿ ª†¿ ª¢¿ ª£¿ ªÙ¿ º4¿ º8¿ ºâ¿ º◊¿ Ω,¿ Ωi¿ Ω¨¿ ΩÔ¿ æ¿ æK¿ æL¿ æX¿ æÑ¿ æ¬¿ ø¿ ø¿ øÜ¿ ø—¿ ¿!¿ ¿o¿ ¿±¿ ¿˝¿ ¡Y¿ ¡¿ ¡è¿ ¡ó¿ ¡—¿ ¬0¿ ¬\¿ ¬≠¿ ¬Ë¿ √5¿ √F¿ √ò¿ √¢¿ √¬¿ √ˇ¿ ƒ;¿ ƒâ¿ ƒÿ¿ ≈$¿ ≈s¿ ≈∞¿ ∆¿ ∆Q¿ ∆h¿ ∆∫¿ ∆ ¿ ∆ÿ¿ ∆‰¿ ∆Ó¿ ∆ˆ¿ «¿ «¿ «p¿ «§¿ «™¿ «´¿ «‚¿ »¿ »¿ »g¿ »±¿ »Â¿ …:¿ …]¿ …n¿ …ê¿ …ö¿ …¢¿ …¿¿ …ˆ¿ …¸¿  ¿  ¿  ¿  ¿  X¿  \¿  û¿ À¿ À¿ ÀO¿ ÀS¿ Àï¿ À·¿ Ã¿ Ã¿ ÃL¿ ÃP¿ Ãü¿ ÃÓ¿ Õ<¿ Õë¿ Õ‚¿ Œ¿ Œ#¿ Œ>¿ ŒB¿ Œí¿ Œ·¿ œ0¿ œÄ¿ œÕ¿ –¿ –<¿ –@¿ –è¿ –‹¿ —¿ —8¿ —<¿ —Ü¿ —ä¿ —©¿ —≠¿ —ˆ¿ “<¿ “Ç¿ “Ã¿ ”¿ ”=¿ ”A¿ ”å¿ ”÷¿ ‘$¿ ‘o¿ ‘π¿ ’¿ ’S¿ ’ú¿ ’º¿ ’¿¿ ’Á¿ ’Î¿ ÷9¿ ÷â¿ ÷◊¿ ÷¿ ÷Ù¿ ◊B¿ ◊í¿ ◊∏¿ ◊º¿ ◊»¿ ◊⁄¿ ÿ¿ ÿ¿ ÿ¿ ÿ ¿ ÿc¿ ÿ≠¿ ÿ‹¿ ÿ‡¿ ÿÏ¿ Ÿ!¿ ŸI¿ Ÿb¿ Ÿö¿ Ÿ≤¿ Ÿ—¿ Ÿ˘¿ ⁄¿ ⁄?¿ ⁄P¿ ⁄_¿ ⁄l¿ ⁄w¿ ⁄Ä¿ ⁄à¿ ⁄ê¿ ⁄î¿ ⁄⁄¿ €¿ €T¿ €X¿ €¢¿ €Õ¿ €—¿ €›¿ €˘¿ ‹¿ ‹¿ ‹P¿ ‹õ¿ ‹‹¿ ›#¿ ›C¿ ›G¿ ›l¿ ›p¿ ›µ¿ ›˜¿ ﬁ.¿ ﬁe¿ ﬁi¿ ﬁé¿ ﬁÿ¿ ﬂ ¿ ﬂj¿ ﬂn¿ ﬂz¿ ﬂå¿ ﬂ¶¿ ﬂÊ¿ ‡¿ ‡_¿ ‡Æ¿ ‡˝¿ ·¿ ·¿ ·¿ · ¿ ·$¿ ·A¿ ·E¿ ·Q¿ ·y¿ ·Å¿ ·Ö¿ ·ß¿ ·´¿ ·Ù¿ ‚*¿ ‚.¿ ‚|¿ ‚»¿ ‚◊¿ ‚€¿ „$¿ „c¿ „g¿ „s¿ „º¿ „‰¿ „˚¿ ‰¿ ‰B¿ ‰z¿ ‰á¿ ‰í¿ ‰ö¿ ‰¢¿ ‰™¿ ‰Æ¿ ‰ˆ¿ Â@¿ Â\¿ Â`¿ Â¨¿ ÂË¿ Ê3¿ ÊÑ¿ Êì¿ Êó¿ Ê¨¿ Ê∞¿ Ê¸¿ ÁM¿ Áú¿ Á«¿ ÁÀ¿ Ë¿ ËT¿ Ëô¿ Ë›¿ È¿ È¿ Èi¿ È∂¿ Í¿ Í¿ Í¿ Í¿ Ío¿ Íº¿ Î¿ Î@¿ ÎD¿ Îê¿ Îﬁ¿ Ï/¿ Ï|¿ ÏÄ¿ Ïå¿ Ï¿¿ Ï’¿ Ì¿ ÌA¿ ÌJ¿ Ìò¿ Ì∑¿ Ì’¿ Ì˙¿ ÓE¿ Ó_¿ Ól¿ Ów¿ Ó¿ Óá¿ Óè¿ Óì¿ Ó–¿ Ô¿ Ôf¿ Ô±¿ ÔÓ¿ ¿ ¿ W¿ x¿ |¿ ó¿ õ¿ Á¿ Ò7¿ Òà¿ Ò≈¿ Ò…¿ Ò⁄¿ Òﬁ¿ Ú+¿ Úy¿ Ú¥¿ Ú∏¿ Û¿ ÛU¿ Û§¿ ÛÒ¿ Ù@¿ ÙV¿ ÙZ¿ Ù§¿ Ùı¿ ı¿ ı¿ ı$¿ ıs¿ ıß¿ ı´¿ ıÙ¿ ˆD¿ ˆH¿ ˆë¿ ˆ¬¿ ˆ∆¿ ˜¿ ˜ ¿ ˜$¿ ˜s¿ ˜æ¿ ¯¿ ¯]¿ ¯ã¿ ¯è¿ ¯≥¿ ¯∑¿ ˘¿ ˘N¿ ˘õ¿ ˘Ï¿ ˙¿ ˙¿ ˙$¿ ˙(¿ ˙s¿ ˙ø¿ ˚	¿ ˚W¿ ˚y¿ ˚}¿ ˚«¿ ˚ÿ¿ ¸(¿ ¸W¿ ¸§¿ ¸ı¿ ˝?¿ ˝ç¿ ˝Ÿ¿ ˛ ¿ ˛¿ ˛H¿ ˛ñ¿ ˛‚¿ ˇ*¿ ˇS¿ ˇ°¿ ˇß¿ ˇÏ¿  ¿ ¿ 9¿ J¿ p¿ ≠¿ ≥¿ «¿ ﬁ¿)¿C¿\¿¶¿”¿˙¿,¿J¿g¿±¿¿+¿1¿2¿n¿t¿º¿	¿B¿í¿ò¿‚¿¿!¿q¿æ¿¿^¿Ö¿ã¿÷¿&¿t¿∂¿“¿ÿ¿)¿]¿c¿Æ¿˛¿	5¿	X¿	Y¿	ï¿	õ¿	Á¿
¿
¿
b¿
ë¿
ó¿
„¿	¿¿`¿Ø¿ˇ¿7¿F¿j¿•¿©¿Õ¿Œ¿¿8¿>¿É¿«¿Õ¿¿,¿2¿É¿«¿¿6¿f¿g¿∑¿Ÿ¿ﬂ¿¿F¿G¿r¿x¿®¿Æ¿˚¿-¿3¿Ç¿”¿¿8¿9¿w¿û¿ü¿ﬁ¿‰¿0¿Å¿ö¿†¿Ó¿+¿Q¿R¿Ä¿´¿¨¿˚¿¿¿S¿¢¿Ú¿)¿/¿{¿…¿’¿€¿¿j¿∫¿·¿Á¿˜¿˝¿J¿\¿™¿—¿¿e¿≥¿Î¿ ¿$¿%¿s¿Ω¿√¿
¿T¿ü¿Ô¿>¿å¿Ÿ¿)¿H¿]¿ó¿ò¿Á¿<¿B¿Ü¿À¿Ã¿¿¿¿!¿{¿¢¿–¿—¿ !¿ N¿ T¿ Ü¿ å¿ ⁄¿!*¿!@¿!F¿!ç¿!ƒ¿"¿"b¿"Ø¿"Ù¿#A¿#ê¿#ô¿#À¿#Ã¿$¿$F¿$L¿$ô¿$Í¿%7¿%=¿%â¿%º¿&¿&W¿&•¿&π¿&ø¿'¿'\¿'™¿'ı¿( ¿(¿(¿(H¿(I¿(¿(Ö¿(’¿(Ë¿(Ó¿)¿),¿)-¿)Ä¿)∑¿)Ω¿*¿*)¿*/¿*G¿*b¿*c¿*¥¿*√¿*…¿*ˇ¿+F¿+å¿+í¿+ÿ¿,%¿,e¿,â¿,è¿,‡¿,Ó¿,Ù¿->¿-D¿-é¿-û¿-≥¿-π¿-˚¿.I¿.Ç¿.ó¿.ù¿.”¿/¿/f¿/≥¿/È¿/Ô¿03¿0l¿0Å¿0á¿0ù¿0£¿0∆¿0Ã¿0⁄¿0¯¿1+¿13¿1=¿1O¿1U¿1k¿1q¿1Ω¿1 ¿1–¿1ﬁ¿2 ¿2¿20¿2F¿2m¿2ã¿2≠¿2∫¿2≈¿2Õ¿2◊¿2È¿2Ô¿3¿3¿3W¿3]¿3k¿3è¿3›¿3¯¿4¿4¿4?¿4z¿4Ñ¿4å¿4í¿4Æ¿4À¿4ﬁ¿4Ù¿5D¿5O¿5W¿5a¿5s¿5y¿5â¿5è¿5Ÿ¿5¸¿6¿6B¿6\¿6t¿6ã¿6í¿6‚¿6Ê¿6Á¿78¿7G¿7M¿7ç¿7‹¿8(¿8a¿8v¿8|¿8Ø¿8µ¿8ˇ¿9A¿9ä¿9⁄¿9˘¿9ˇ¿:A¿:z¿:è¿:ï¿:·¿;0¿;~¿;À¿<¿<4¿<I¿<O¿<e¿<k¿<é¿<î¿<¢¿<√¿<Í¿<˝¿=¿=:¿=W¿=x¿=Ö¿=ê¿=ò¿=¢¿=¥¿=»¿> ¿>¿>2¿>I¿>P¿>™¿>Æ¿>Ø¿>ˇ¿?M¿?î¿?ö¿?€¿@'¿@t¿@Ω¿A¿AZ¿A£¿A©¿A¿B6¿B<¿Bà¿B’¿C¿Cc¿C±¿C˛¿D&¿D,¿D}¿Dã¿Dë¿Dﬂ¿E ¿E&¿Ew¿Eä¿Eü¿E•¿E‰¿EÍ¿F¿F#¿F9¿F?¿Fb¿Fh¿Fv¿Fô¿F‚¿FÍ¿FÙ¿G¿G¿G¿G"¿Gs¿G¶¿G∫¿H¿H%¿H=¿HM¿Hd¿Hk¿HÑ¿Hì¿HÁ¿HÎ¿HÏ¿I<¿Iä¿I—¿I◊¿J"¿Jp¿Jø¿K¿K¿K¿KZ¿K`¿Kß¿K≠¿Kˆ¿K¸¿L¿L¿L;¿LA¿LO¿Ls¿L¬¿L ¿L‘¿LÊ¿L˙¿MQ¿Mk¿MÉ¿Mì¿M™¿M±¿M ¿MŸ¿N7¿N;¿N<¿Nâ¿N¬¿N»¿O¿OE¿OK¿Oò¿Oﬁ¿O‰¿P3¿Pt¿P¬¿Q¿Q]¿Q¨¿Q¸¿R3¿R9¿Rä¿Rò¿Rû¿RÏ¿S&¿S,¿SÖ¿Sö¿S†¿Sﬂ¿SÂ¿T¿T¿T4¿T:¿T]¿Tc¿Tq¿Tï¿T‹¿T‰¿TÓ¿U ¿U¿U¿U¿Ug¿Uì¿Uß¿UÛ¿V¿V%¿V5¿VL¿VS¿Vl¿V{¿V ¿VŒ¿Vœ¿W¿WU¿W[¿W°¿WÍ¿X9¿X{¿Xê¿Xñ¿Xœ¿X’¿Y¿Y"¿Yk¿Yq¿Yá¿Yç¿Y∞¿Y∂¿Yƒ¿Y‚¿Z-¿Z5¿Z?¿ZQ¿Ze¿Z∑¿Z—¿ZÈ¿Z˘¿[¿[¿[0¿[?¿[ò¿[ú¿[ù¿[Î¿\;¿\_¿\e¿\©¿\¿]¿]%¿]g¿]£¿]©¿]˜¿^A¿^G¿^î¿^¡¿^«¿_¿_T¿_n¿_t¿_¿¿`¿`L¿`å¿`÷¿a$¿ak¿aÄ¿aÜ¿a◊¿aÂ¿aÎ¿b9¿b?¿bè¿bß¿bº¿b¬¿c¿c¿c:¿c@¿cV¿c\¿c¿cÖ¿cì¿c≥¿d¿d¿d ¿d2¿d8¿dH¿dN¿dû¿dÕ¿d·¿e!¿e;¿eT¿et¿eã¿eí¿e´¿e∫¿f¿f¿f¿f^¿fÆ¿f“¿fÿ¿g&¿gw¿g∆¿h¿h¿h#¿hd¿hj¿h±¿h∑¿i ¿i¿i¿i"¿iE¿iK¿iY¿iy¿iﬁ¿iÊ¿i¿j¿j¿j\¿jv¿jè¿jØ¿j∆¿jÕ¿jÊ¿jı¿kP¿kT¿kU¿k¢¿k∑¿kΩ¿kÓ¿l4¿lÅ¿l¡¿lÂ¿lÎ¿m<¿mJ¿mP¿mö¿mØ¿mµ¿mÙ¿m˙¿n¿n¿n9¿n?¿nM¿nh¿nÜ¿nô¿nº¿n˚¿o¿o¿o¿o%¿o7¿o=¿oM¿oS¿oü¿oª¿oœ¿p#¿pQ¿pU¿pV¿pü¿p¥¿p∫¿pı¿qC¿qí¿qƒ¿qŸ¿qﬂ¿r¿r¿rN¿rù¿rÈ¿s5¿sw¿sƒ¿t¿t¿tZ¿t•¿t∫¿t¿¿u	¿u¿u%¿uH¿uN¿u™¿uº¿u–¿v¿v¿vK¿vb¿vi¿væ¿v¬¿v√¿w¿wb¿wú¿w¢¿wﬁ¿x*¿x|¿x ¿y¿yh¿y¶¿y¨¿y¯¿zE¿zÖ¿z”¿{¿{¿{l¿{z¿{Ä¿{Œ¿|¿|$¿|*¿|i¿|o¿|Ö¿|ã¿|Æ¿|¥¿|¬¿|‡¿}¿}"¿}E¿}à¿}ï¿}†¿}®¿}≤¿}ƒ¿} ¿}⁄¿}‡¿~0¿~_¿~s¿~ø¿~Ÿ¿~Ú¿¿	¿\¿`¿a¿±¿¸¿Ä6¿Ä<¿ÄÇ¿Ä–¿Å¿Å\¿Åq¿Åw¿Å∞¿Å∂¿ÅÓ¿ÅÙ¿Ç=¿ÇC¿ÇY¿Ç|¿ÇÇ¿ÇÍ¿Ç¸¿É¿Éb¿É|¿É™¿É∫¿É—¿Éÿ¿ÉÒ¿Ñ ¿Ñ\¿Ñ`¿Ña¿ÑÆ¿Ñı¿Ö¿Ö¿ÖZ¿Ö°¿Ö–¿Ö÷¿Ü¿ÜT¿ÜZ¿Ü®¿ÜÚ¿Ü¯¿áE¿ár¿áx¿áæ¿à¿àY¿à©¿àÚ¿â?¿âè¿âÃ¿â“¿ä#¿ä1¿ä7¿äÖ¿äö¿ä†¿äﬂ¿äÂ¿ä˚¿ã¿ã$¿ã*¿ã8¿ã^¿ãä¿ãù¿ã˜¿å¿å&¿å.¿å8¿åJ¿åP¿å`¿åf¿å∞¿å‹¿å¿ç+¿çE¿ç\¿çz¿çÄ¿çÕ¿ç—¿ç“¿é¿éb¿éÇ¿éà¿é—¿è"¿èl¿èÆ¿è√¿è…¿ê¿ê¿êC¿êI¿êí¿êò¿êÆ¿ê—¿ê◊¿ëD¿ëV¿ëj¿ë´¿ë≈¿ëÙ¿í¿í+¿í2¿íK¿íZ¿í≥¿í∑¿í∏¿ì¿ì%¿ì+¿ì_¿ì´¿ì˙¿îI¿îô¿î¡¿î«¿ï¿ï¿ïd¿ï£¿ïÛ¿ñ;¿ñâ¿ñ°¿ñß¿ñ˜¿ó¿ó¿óm¿óÇ¿óà¿óò¿óû¿óÌ¿ò8¿òÅ¿ò≠¿ò¡¿òÎ¿ô¿ô-¿ôM¿ôT¿ô©¿ô≠¿ôÆ¿ô˚¿ö¿ö!¿ö_¿öÆ¿ö˝¿õ/¿õD¿õJ¿õ{¿õÅ¿õπ¿õø¿ú¿ú¿úR¿ún¿úî¿úÃ¿ú„¿úÍ¿ù!¿ù;¿ùc¿ù¿ùÜ¿ùä¿ùã¿ùÿ¿û&¿ûA¿ûG¿ûÖ¿ûœ¿ü¿üm¿üΩ¿üÂ¿üÎ¿†1¿†7¿†à¿†«¿°¿°_¿°≠¿°≈¿°À¿¢¿¢.¿¢4¿¢D¿¢J¿¢ó¿¢™¿¢˙¿£)¿£=¿£q¿£ç¿£∂¿£÷¿£›¿§B¿§F¿§G¿§î¿§‚¿§˝¿•¿•K¿•ô¿•Á¿¶/¿¶D¿¶J¿¶Ö¿¶ã¿¶√¿¶…¿ß¿ß&¿ßf¿ßÇ¿ß´¿ß„¿ß˙¿®¿®B¿®b¿®ä¿®¶¿®≠¿®±¿®≤¿©¿©¿©¿©I¿©ò¿©Ë¿™¿™¿™A¿™G¿™ó¿™©¿™æ¿™ƒ¿™‘¿™⁄¿´%¿´=¿´j¿´¨¿´‡¿´‰¿´Â¿¨)¿¨u¿¨√¿¨“¿¨ÿ¿≠¿≠]¿≠Æ¿≠≈¿≠À¿Æ¿Æ\¿Æb¿Æ∞¿Æ˙¿ØC¿ØI¿Øö¿Ø·¿ØÁ¿∞2¿∞}¿∞å¿∞°¿∞ß¿∞∑¿∞Ω¿±¿±H¿±ô¿± ¿±ﬁ¿≤5¿≤k¿≤o¿≤p¿≤æ¿≤”¿≤Ÿ¿≥	¿≥Y¿≥ß¿≥Ï¿¥9¿¥?¿¥ã¿¥Ÿ¿µ"¿µq¿µø¿∂
¿∂¿∂`¿∂Ø¿∂Ô¿∑¿∑¿∑i¿∑o¿∑º¿∑„¿∑¯¿∑˛¿∏¿∏¿∏Q¿∏W¿∏e¿∏{¿∏õ¿∏£¿∏≠¿∏ø¿∏≈¿∏˜¿∏˝¿π¿π"¿π_¿πg¿πq¿πÖ¿πœ¿π˘¿π˝¿π˛¿∫K¿∫Å¿∫á¿∫º¿ª¿ª2¿ª8¿ªÅ¿ª¨¿ª≤¿ªÒ¿ª˜¿º=¿ºR¿ºX¿ºn¿ºt¿ºó¿ºù¿º´¿º¬¿Ω¿Ω¿Ω¿Ω*¿Ωs¿Ω¢¿Ω¶¿Ωß¿Ωˆ¿æ'¿æ-¿æe¿æ¢¿æ®¿æÌ¿ø<¿øÑ¿ø—¿øÈ¿øÔ¿¿9¿¿W¿¿]¿¿©¿¿˘¿¡I¿¡t¿¡z¿¡À¿¡—¿¬¿¬F¿¬L¿¬ä¿¬ü¿¬•¿¬ˆ¿√*¿√>¿√†¿√‡¿√‰¿√Â¿ƒ4¿ƒÑ¿ƒ≠¿ƒ≥¿ƒ¿≈-¿≈3¿≈x¿≈«¿∆¿∆\¿∆t¿∆z¿∆À¿«¿«¿«e¿«µ¿»¿»0¿»6¿»á¿»ç¿»⁄¿…¿…¿…F¿…[¿…o¿…¢¿…º¿…ÿ¿…Á¿…Ó¿ 9¿ =¿ >¿ é¿ ù¿ £¿ ∆¿ Ã¿ ⁄¿ ˆ¿À¿À¿À8¿ÀB¿ÀH¿Àô¿À‚¿Ã¿Ã¿Ãe¿Ã≠¿Ã≥¿ÃÛ¿ÕD¿Õc¿Õ®¿Õ¡¿Õ«¿Õ»¿ÕÊ¿Œ3¿Œ}¿Œ~¿Œé¿Œ≠¿Œ…¿œ'¿œÄ¿œ¿¿œÀ¿œ”¿œÊ¿œ¿–¿–¿–¿–\¿–s¿–y¿–ú¿–¢¿–∞¿–Û¿—¿—.¿—@¿—R¿—v¿—~¿—à¿—é¿—ﬂ¿“(¿“S¿“Y¿“¶¿“¨¿“Ï¿”C¿”b¿”ß¿”¿¿”∆¿”«¿”‡¿‘-¿‘w¿‘{¿‘|¿‘≥¿‘π¿’¿’*¿’0¿’Å¿’œ¿÷¿÷3¿÷9¿÷â¿÷’¿◊$¿◊_¿◊õ¿◊π¿◊÷¿◊‹¿ÿ¿ÿe¿ÿ≤¿ÿ„¿Ÿ¿Ÿ¿ŸZ¿Ÿo¿Ÿ{¿Ÿç¿Ÿµ¿Ÿ€¿Ÿˆ¿⁄¿⁄¿⁄%¿⁄h¿⁄ë¿⁄∞¿⁄‡¿€¿€¿€D¿€]¿€m¿€–¿€⁄¿€‚¿‹¿‹¿‹;¿‹\¿‹u¿‹∞¿‹˘¿›m¿›ƒ¿›”¿›‡¿›˜¿ﬁ¿ﬁ;¿ﬁW¿ﬁa¿ﬁy¿ﬁÅ¿ﬁ¬¿ﬂ-¿ﬂo¿ﬂÅ¿ﬂ›¿ﬂÊ¿ﬂÏ¿‡+¿‡2¿‡~¿‡Œ¿·¿·7¿·y¿·ì¿·Ú¿·¯¿‚"¿‚&¿‚'¿‚3¿‚g¿‚i¿‚j¿‚°¿‚§¿‚÷¿‚˚¿„ ¿„F¿„m¿„ö¿„¡¿„Á¿‰¿‰G¿‰w¿‰ß¿‰◊¿Â¿Â;¿Âk¿Âö¿Â»¿Âı¿Ê!¿ÊL¿Ên¿Êò¿Ê¬¿Ê¿Á¿Á?¿Ád¿Áè¿Á∑¿Áﬂ¿Ë¿Ë/¿ËX¿Ë}¿Ëß¿ËÃ¿Ëı¿È¿È?¿Ès¿È†¿È£¿ÈÔ¿Í¿Íf¿Í}¿Í÷¿Í€¿Í˘¿Í˛¿Îz¿Îœ¿Î˙¿ÏS¿Ï∫¿Ï˛¿Ì`¿ÌÉ¿Ìà¿Ì™¿ÌØ¿Ó¿Ó<¿Ók¿Ó£¿Ô¿Ô`¿Ô∆¿¿B¿ç¿œ¿„¿Ò¿Ò¿Ò¿ÒQ¿ÒR¿Òo¿Òâ¿Ò¶¿Ò®¿Ò©¿Ò€¿ÒÍ¿Ò¸¿Ú'¿ÚD¿Úe¿Úö¿Ú©¿Ú›¿Û¿ÛF¿ÛÇ¿Û∏¿Û¬¿ÛÁ¿Ù.¿Ù2¿Ù3¿Ù?¿Ù]¿Ùñ¿ÙÆ¿ÙØ¿Ùˇ¿ı*¿ıZ¿ı[¿ı†¿ı°¿ı¡¿ıÛ¿ˆ3¿ˆó¿ˆ©¿ˆ”¿˜7¿˜Ñ¿˜Ö¿˜’¿¯¿¯9¿¯â¿¯—¿¯Ê¿˘(¿˘t¿˘z¿˘§¿˘‰¿˘Í¿˘˚¿˘ˇ¿˙ ¿˙+¿˙E¿˙Y¿˙_¿˙u¿˙â¿˙è¿˙‘¿˙˙¿˙˛¿˙ˇ¿˚a¿˚í¿˚∂¿˚·¿¸?¿¸C¿¸D¿¸X¿¸¿¸ù¿¸ƒ¿¸Ú¿¸˘¿˝¿˝3¿˝l¿˝ü¿˝¶¿˝ ¿˝÷¿˝ˆ¿˛C¿˛k¿˛r¿˛™¿˛Ã¿˛·¿ˇ¿ˇm¿ˇ•¿ˇ”¿ˇˇ¿ 6¿ e¿ ê¿ ¶¿ —¿ Í¿ ˙¿&¿<¿h¿Å¿ë¿õ¿•¿≤¿È¿¿6¿<¿R¿s¿y¿z¿ﬁ¿A¿N¿É¿„¿È¿Ì¿Ó¿$¿G¿ñ¿∑¿Í¿3¿\¿É¿Â¿A¿ù¿—¿¿J¿è¿û¿¡¿¿7¿F¿X¿k¿u¿¿Ö¿â¿ä¿∞¿∂¿	¿	F¿	L¿	ù¿	π¿
¿
?¿
j¿
ñ¿
¡¿¿Q¿j¿è¿¢¿®¿–¿˚¿¿¿L¿a¿£¿◊¿›¿˜¿¿¿¿'¿M¿g¿∂¿·¿Â¿Ê¿˝¿$¿R¿Y¿}¿®¿’¿˘¿[¿a¿e¿f¿µ¿€¿˝¿¿?¿S¿|¿í¿≥¿π¿Ω¿æ¿◊¿ÿ¿Û¿
¿&¿N¿R¿S¿{¿|¿Ø¿È¿ı¿&¿v¿ƒ¿À¿	¿¿¿4¿`¿|¿©¿≠¿Æ¿¬¿¿.¿2¿3¿p¿v¿«¿ﬂ¿¯¿9¿g¿î¿©¿≠¿Æ¿ﬂ¿Â¿5¿y¿ú¿¢¿Ï¿ˇ¿A¿o¿p¿¿¿¿O¿û¿Ô¿¿>¿c¿j¿k¿ç¿§¿≤¿∏¿π¿‚¿˚¿3¿l¿£¿≈¿€¿¯¿¿+¿S¿o¿Ω¿¿X¿ß¿Ã¿Ÿ¿!¿Z¿Ç¿Õ¿¿;¿Å¿ó¿•¿‰¿¿¿¿"¿E¿K¿O¿P¿k¿™¿„¿Á¿Ë¿ˇ¿ @¿ y¿ }¿ ~¿ ÷¿ ◊¿ ¸¿!?¿!y¿!}¿!~¿!™¿!Î¿"%¿")¿"*¿"i¿"ö¿"Ë¿#$¿#Ü¿#ä¿#ã¿#”¿$¿$K¿$õ¿$ú¿$„¿%¿%¿% ¿%,¿%Ä¿%Å¿%ç¿%’¿&¿&¿&M¿&N¿&Z¿&q¿&}¿&¡¿'¿'f¿'m¿'ñ¿'ö¿'õ¿'ß¿'Ω¿'…¿(¿(^¿(±¿(∏¿(‡¿(‰¿(Â¿(Ò¿)¿)#¿)t¿)≈¿*¿* ¿*d¿*y¿*•¿*∑¿*Õ¿*˝¿+S¿+Ü¿+†¿+¶¿+¿¿+Í¿+Ó¿+Ô¿+˚¿,&¿,2¿,É¿,‘¿-(¿-6¿-=¿-\¿-Ü¿-ä¿-ã¿-‘¿-˚¿.(¿.f¿.j¿.l¿.m¿.î¿.’¿.˙¿/"¿/#¿/N¿/P¿/Q¿/ë¿/ÿ¿/Ÿ¿/Â¿0¿0E¿0I¿0K¿0L¿0ã¿0—¿0“¿0ﬁ¿1
¿1=¿1A¿1C¿1D¿1Ü¿1œ¿1–¿1‹¿2¿2>¿2B¿2D¿2E¿2à¿2“¿2”¿2ﬂ¿3¿3V¿3Z¿3\¿3]¿3ü¿3†¿3Â¿3È¿46¿4C¿4Ü¿4Ø¿4æ¿4Í¿5"¿5(¿5,¿5-¿5a¿5b¿5†¿5À¿5œ¿5–¿5Ú¿6¿6"¿6&¿6'¿6W¿6t¿6ì¿6¨¿6≤¿6∂¿6∑¿6»¿6˜¿7¿7%¿7>¿7D¿7H¿7I¿7y¿7ú¿7≥¿7∑¿7∏¿7‹¿8¿8)¿8;¿8?¿8@¿8]¿8ê¿8ß¿8π¿8Ω¿8æ¿8Â¿8ˇ¿9¿9¿9¿97¿9S¿9W¿9X¿9d¿9z¿9ò¿9ú¿9û¿9ü¿9«¿9À¿:¿:t¿:†¿:»¿:…¿;¿;&¿;,¿;z¿;∑¿;Ω¿<¿<P¿<ú¿<‡¿=?¿=û¿=ü¿=ﬂ¿>!¿>"¿>}¿>~¿>™¿>´¿>ﬂ¿>‡¿?&¿?'¿?H¿?s¿?í¿?Æ¿@¿@&¿@Ö¿@í¿@∞¿@∂¿@˛¿A5¿A<¿A~¿A∂¿A‰¿B¿B,¿BZ¿Bâ¿B∑¿C¿C¿C3¿C?¿Ci¿C£¿C©¿C≠¿CÆ¿C÷¿CÒ¿D¿D
¿D*¿DJ¿Dg¿Dä¿D ¿DÌ¿D˙¿E¿ED¿EO¿EX¿E©¿E…¿EÊ¿F	¿FX¿Fâ¿Fñ¿Fª¿F‡¿FÎ¿FÙ¿F˙¿G¿G¿G¿G¿G)¿G>¿GU¿GÅ¿G¬¿GÏ¿H"¿H(¿HT¿HU¿H¢¿H◊¿I¿Ic¿Ià¿Iƒ¿I≈¿IÚ¿J$¿J*¿J+¿Jz¿J´¿JØ¿J∞¿J‚¿J˛¿KX¿K¶¿K™¿K´¿KÍ¿LA¿LB¿Lõ¿Lú¿L©¿Lµ¿L˛¿MD¿MÅ¿MÇ¿M≈¿MÍ¿N¿N5¿N6¿Nm¿N∫¿NÔ¿O¿O?¿OX¿OÉ¿Oå¿Oö¿O¿¿P¿P_¿Ph¿PÉ¿P”¿PŸ¿P⁄¿Q(¿QQ¿QÉ¿Q•¿Q⁄¿Q‚¿R¿R¿R.¿Ré¿R¢¿RŸ¿RÚ¿S¿SK¿Së¿S»¿S˛¿T)¿Tx¿Tí¿T∞¿T√¿T‘¿Tﬂ¿TÁ¿TÌ¿TÓ¿T˙¿U¿Ua¿UØ¿U¸¿V¿V ¿V;¿VK¿Vf¿Vy¿VÉ¿Vü¿VØ¿VÀ¿Vﬁ¿VË¿VÏ¿VÌ¿V˙¿W¿W=¿Wc¿W}¿W™¿W∑¿W€¿W·¿WÂ¿WÊ¿WÚ¿X,¿X-¿X:¿XF¿Xg¿Xä¿XÀ¿X˚¿Y&¿YR¿YZ¿Y`¿Yd¿Ye¿Yù¿Y∆¿Z¿Z)¿Z<¿ZD¿Zf¿Z®¿ZÆ¿Z≤¿Z≥¿[¿[M¿[j¿[p¿[Ñ¿[õ¿[®¿[≈¿[À¿[œ¿[–¿\¿\K¿\r¿\«¿\€¿]*¿]z¿]´¿]‡¿^/¿^Ä¿^—¿_¿_y¿_¨¿_ˇ¿`N¿`t¿`≤¿`ﬁ¿a¿a6¿aå¿aﬂ¿b¿b-¿bÇ¿b‘¿c¿c$¿cU¿cÜ¿cù¿c≤¿cƒ¿c‘¿d¿d&¿d=¿dK¿då¿dî¿d‰¿d˝¿e6¿e¿eá¿eª¿eﬁ¿e‰¿eË¿eÈ¿f¿f:¿fô¿f¶¿f‘¿f⁄¿fﬁ¿fﬂ¿fÏ¿f¯¿g&¿gL¿gx¿g´¿gÒ¿h)¿h1¿ht¿h†¿hÿ¿h‡¿i¿i	¿iG¿iY¿i}¿i°¿i¬¿iÈ¿j-¿jT¿je¿jé¿j∑¿j∆¿j”¿j›¿jÚ¿j˛¿k¿k¿k¿kK¿kv¿k¢¿k™¿k∞¿k¥¿kµ¿kﬁ¿kÓ¿l¿lT¿l|¿ló¿l»¿lÎ¿lı¿l˝¿m¿m¿m¿m¿m,¿m8¿mN¿mí¿m»¿mŒ¿mˇ¿n¿n¿n¿n)¿n5¿nI¿n_¿nÄ¿nƒ¿nÓ¿o$¿o*¿o.¿o/¿o<¿oH¿o[¿ov¿oÜ¿o°¿o¥¿oæ¿oÁ¿p¿p!¿pF¿px¿pú¿p…¿q¿qO¿qg¿q|¿qµ¿qœ¿q”¿q‘¿r¿rP¿rQ¿rà¿rÏ¿r¿rÒ¿s¿s6¿s7¿sZ¿sr¿sÇ¿s•¿sÃ¿sÌ¿t ¿t
¿t¿tO¿tô¿t„¿u*¿u1¿u`¿uÄ¿u”¿v¿vP¿vu¿v¬¿w¿w¿wf¿wª¿wÓ¿x9¿xÖ¿x“¿xÛ¿y7¿y_¿y£¿y≥¿yÓ¿z<¿z]¿zô¿zﬂ¿{.¿{L¿{ñ¿{±¿{ˇ¿|+¿|e¿|f¿|é¿|™¿|»¿|˜¿}$¿}%¿}_¿}™¿}◊¿}ÿ¿}ˇ¿~+¿~[¿~ö¿~€¿$¿C¿d¿º¿·¿Ä¿Ä¿Ä3¿ÄR¿Äd¿Äl¿Äñ¿Ä•¿Ä≠¿ÄÔ¿Å¿Å,¿Å4¿Å`¿Åè¿ÅØ¿Å ¿ÅÁ¿ÅÌ¿ÅÓ¿Ç6¿Çà¿Çò¿ÇÌ¿É)¿Éj¿Éã¿Éª¿É◊¿ÉÈ¿ÉÒ¿Ñ0¿Ñ^¿Ñm¿Ñu¿Ñv¿ÑÕ¿ÑÛ¿Ö$¿ÖS¿Ög¿Öß¿Ö≤¿Ö‹¿Ö‰¿ÖÂ¿Öˇ¿Ü¿Ü¿ÜX¿Üé¿Üè¿Ü·¿á¿áh¿áµ¿áÕ¿à
¿à@¿àÖ¿à®¿àÈ¿â8¿âG¿âh¿âz¿âÇ¿âÉ¿âŒ¿âÏ¿â˛¿ä¿ä¿ä,¿äR¿äd¿äl¿ä§¿ä”¿äŸ¿ä⁄¿ã¿ã-¿ãp¿ãã¿ã≠¿ãÁ¿å.¿å~¿å…¿åÈ¿ç¿çD¿ç_¿çê¿çõ¿ç¡¿ç—¿é ¿éR¿é£¿éÆ¿é–¿éﬂ¿è*¿è}¿è¥¿èÎ¿ê¿ê¿ê ¿ê!¿ês¿êÕ¿ë¿ë8¿ëÖ¿ë¢¿ë£¿ë“¿í¿í]¿íÇ¿í£¿íÆ¿í‚¿ì(¿ì\¿ìô¿ì£¿ìµ¿ìΩ¿ìæ¿ì¿î2¿îÇ¿îŒ¿îÚ¿ï!¿ïg¿ï§¿ï¸¿ñB¿ñv¿ñ≥¿ñΩ¿ñ≈¿ñˇ¿ó¿ó¿ó+¿ó^¿óç¿ó∏¿ó·¿ò6¿òP¿ò`¿òè¿òø¿òÛ¿ôG¿ôV¿ôÉ¿ôã¿ôï¿ôñ¿ô∫¿ö¿öN¿öè¿ö∞¿ö„¿õ;¿õ`¿õÅ¿õå¿õ≤¿õƒ¿õÃ¿õ¯¿ú:¿úi¿úò¿ú∏¿ú’¿ú¿úˆ¿ú˜¿ùE¿ù°¿ù—¿ùÚ¿û¿û4¿ûa¿û•¿ûÁ¿ûÛ¿ü¿ü¿ü/¿üh¿üü¿üÿ¿üﬁ¿†¿†*¿†e¿†¢¿†™¿†∞¿†¿¿†‚¿†ı¿†ˇ¿°¿°*¿°=¿°G¿°c¿°s¿°è¿°¢¿°¨¿°∞¿°±¿°“¿°”¿¢¿¢B¿¢_¿¢Æ¿¢˝¿£N¿£ï¿£∫¿£—¿£˚¿§?¿§Y¿§ƒ¿§ÿ¿•.¿•é¿• ¿•„¿¶¿¶*¿¶N¿¶i¿¶Ü¿¶Ê¿¶Û¿ß3¿ßG¿ßl¿ßú¿ß·¿®!¿®7¿®C¿®f¿®ê¿®∂¿®⁄¿®ˆ¿©¿©:¿©ö¿©¿¿©Õ¿™¿™P¿™ë¿™Õ¿™„¿™Ô¿´G¿´É¿´¥¿´¿¿´Â¿¨¿¨D¿¨u¿¨Å¿¨¶¿¨¯¿≠5¿≠V¿≠x¿≠ò¿≠µ¿Æ¿Æ$¿Æd¿Æz¿ÆÜ¿Æ´¿Æ“¿Ø¿Ø¿Ø:¿ØF¿Øm¿Øì¿ØÆ¿Øˇ¿∞¿∞¿∞Z¿∞ß¿∞»¿∞ﬁ¿∞Í¿±+¿±L¿±r¿±Æ¿±ø¿±Ê¿≤¿≤H¿≤\¿≤Å¿≤¶¿≤Õ¿≥ ¿≥¿≥.¿≥:¿≥Y¿≥v¿≥÷¿≥„¿¥%¿¥9¿¥`¿¥ë¿¥Ã¿¥ﬂ¿¥Î¿µ¿µ]¿µi¿µ°¿µµ¿µ€¿∂-¿∂c¿∂{¿∂£¿∂ ¿∂¿∑	¿∑¿∑#¿∑7¿∑O¿∑à¿∑é¿∑∆¿∑È¿∑Í¿∏6¿∏L¿∏k¿∏l¿∏À¿π
¿πP¿πö¿π¢¿π®¿πÀ¿πÔ¿∫¿∫\¿∫£¿∫Ô¿ª¿ª$¿ª*¿ª+¿ªy¿ªÜ¿ª∫¿ªÎ¿ªÒ¿º¿º@¿ºF¿º`¿ºç¿ºì¿º±¿ºµ¿º∂¿º›¿Ω¿Ω+¿ΩR¿Ω`¿Ωf¿Ωó¿ΩÌ¿æ$¿æ*¿æ+¿æ\¿æ≥¿æÍ¿æ¿æÙ¿æı¿ø¿ø=¿øV¿øá¿ø≥¿ø«¿øŸ¿ø·¿¿¿¿$¿¿a¿¿j¿¿k¿¿§¿¿·¿¡¿¡¿¡Q¿¡Y¿¡é¿¡°¿¡ﬁ¿¡Á¿¬(¿¬`¿¬ú¿¬§¿¬∂¿¬º¿¬¿¿¬¡¿√¿√<¿√l¿√p¿√q¿√¥¿√Ï¿√˛¿ƒ¿ƒ¿ƒ¿ƒ¿ƒf¿ƒ´¿ƒΩ¿ƒ√¿≈ ¿≈¿≈¿≈f¿≈Å¿≈∏¿≈À¿≈—¿≈·¿∆¿∆)¿∆á¿∆‰¿«2¿«Y¿«z¿«è¿«ö¿«¢¿«µ¿«ø¿»¿»[¿»Ç¿»î¿»¡¿»˚¿…¿…u¿…Ñ¿…¢¿ ¿ 0¿ ?¿ p¿ ì¿ ß¿ ‡¿ Ô¿ ˝¿À¿À¿À(¿Àf¿Àx¿Àï¿Àœ¿ÀÈ¿ÃH¿ÃW¿Ã¨¿Ã›¿Õ ¿Õ¿ÕM¿Õ\¿Õj¿Õt¿Õâ¿Õï¿Õõ¿Õ√¿Õ’¿ÕŸ¿Õ⁄¿Œ¿Œ¿Œ@¿ŒF¿ŒÖ¿Œã¿Œæ¿Œƒ¿Œ⁄¿Œ‡¿œ¿œ	¿œ¿œ4¿œ^¿œf¿œp¿œÇ¿œà¿œò¿œû¿œË¿–¿–¿–r¿–π¿–Ω¿–æ¿–Î¿–Ò¿—.¿—4¿—g¿—m¿—¥¿—∫¿“¿“	¿“¿“%¿“H¿“N¿“\¿“x¿“¨¿“¥¿“æ¿“–¿“‰¿”=¿”I¿”}¿”Œ¿”’¿‘¿‘)¿‘E¿‘Ä¿‘æ¿‘’¿‘ˆ¿‘˙¿‘˚¿’G¿’ñ¿’≥¿’π¿’˜¿’˝¿÷<¿÷B¿÷u¿÷{¿÷ë¿÷ó¿÷∫¿÷¿¿÷Œ¿÷Ë¿◊ ¿◊(¿◊2¿◊D¿◊J¿◊Z¿◊`¿◊±¿◊‚¿◊ˆ¿ÿ@¿ÿX¿ÿh¿ÿ¿ÿÜ¿ÿ™¿ÿ‚¿ÿ¯¿ÿˇ¿Ÿ¿Ÿ¿ŸP¿Ÿü¿Ÿº¿Ÿ¬¿⁄
¿⁄¿⁄N¿⁄T¿⁄õ¿⁄°¿⁄Í¿⁄¿€¿€¿€/¿€5¿€C¿€\¿€û¿€¶¿€∞¿€¬¿€÷¿‹&¿‹>¿‹N¿‹e¿‹l¿‹x¿‹¨¿‹˝¿›¿›A¿›X¿›t¿›Ø¿›Ù¿ﬁ¿ﬁ?¿ﬁC¿ﬁD¿ﬁê¿ﬁù¿ﬁ£¿ﬁ‹¿ﬁ‚¿ﬂ!¿ﬂ'¿ﬂZ¿ﬂ`¿ﬂv¿ﬂ|¿ﬂü¿ﬂ•¿ﬂ≥¿ﬂ…¿ﬂ˘¿‡¿‡¿‡¿‡#¿‡3¿‡9¿‡Ñ¿‡∞¿‡ƒ¿·	¿·!¿·1¿·H¿·O¿·d¿·û¿·¢¿·£¿·Ô¿·¸¿‚¿‚E¿‚K¿‚Ñ¿‚ä¿‚—¿‚◊¿„ ¿„&¿„<¿„B¿„e¿„k¿„y¿„ç¿„«¿„œ¿„Ÿ¿„Î¿„ˇ¿‰J¿‰b¿‰r¿‰â¿‰ê¿‰•¿‰Ê¿‰Í¿‰Î¿Â<¿Âz¿ÂÄ¿Â¡¿Â«¿Ê¿Ê¿Ê?¿ÊE¿Ê[¿Êa¿ÊÑ¿Êä¿Êò¿Êª¿Á¿Á¿Á¿Á1¿Á7¿ÁG¿ÁM¿Áù¿ÁÃ¿Á‡¿Ë¿Ë2¿ËR¿Ëi¿Ëp¿Ë”¿Ë◊¿Ëÿ¿È)¿Èg¿Èm¿È∏¿Èæ¿Èˇ¿Í¿ÍL¿ÍR¿Íõ¿Í°¿Í∑¿ÍΩ¿Í‡¿ÍÊ¿ÍÙ¿Î¿Îm¿Îu¿Î¿Îë¿Î•¿Î‰¿Î˝¿Ï¿Ï4¿Ï;¿ÏG¿Ï{¿ÏÃ¿Ï”¿Ì¿Ì*¿ÌF¿ÌÅ¿Ìø¿ÌÔ¿Ó¿Ó¿Ó¿ÓD¿ÓJ¿Óx¿Ó~¿ÓΩ¿Ó√¿ÓŸ¿Óﬂ¿Ô¿Ô¿Ô¿Ô/¿ÔM¿Ôp¿ÔØ¿Ôº¿Ô«¿Ôœ¿ÔŸ¿ÔÎ¿ÔÒ¿¿¿S¿o¿É¿∫¿Ò¿Ò-¿Ò1¿Ò2¿Òe¿Ò~¿Òé¿Ú¿ÚT¿Úg¿Úq¿ÚÑ¿Úà¿Úâ¿Ú¥¿Ú∫¿ÚÚ¿Ú¯¿Û&¿Û,¿Ûd¿Ûj¿Û≥¿Ûπ¿Ûœ¿ÛÚ¿Û¯¿ÙZ¿Ùl¿ÙÄ¿Ù¨¿Ù⁄¿ÙÒ¿Ù¯¿ı¿ı0¿ın¿ıu¿ıÅ¿ıµ¿ˆ¿ˆ¿ˆN¿ˆp¿ˆå¿ˆ«¿˜¿˜¿˜=¿˜A¿˜B¿˜i¿˜Ñ¿˜î¿˜Ø¿˜¬¿˜Ã¿˜¯¿¯0¿¯I¿¯e¿¯u¿¯ë¿¯§¿¯Æ¿¯—¿¯’¿¯÷¿˘¿˘ ¿˘p¿˘π¿˘ˇ¿˙ ¿˙+¿˙F¿˙s¿˙t¿˙ñ¿˙«¿˚	¿˚=¿˚N¿˚p¿˚z¿˚Æ¿˚Ø¿˚Ê¿¸F¿¸p¿¸¶¿¸∆¿¸˛¿˝¿˝¿˝K¿˝S¿˝T¿˝∞¿˝∂¿˝”¿˝◊¿˝ÿ¿˛(¿˛p¿˛Ñ¿˛ä¿˛√¿˛…¿ˇ¿ˇ¿ˇ$¿ˇ*¿ˇM¿ˇS¿ˇa¿ˇ|¿ˇ´¿ˇŒ¿ ¿ ¿ )¿ 1¿ ;¿ M¿ S¿ c¿ i¿ π¿ Ë¿ ¸¿A¿Z¿j¿q¿ö¿µ¿¿¿$¿@¿D¿E¿ë¿Ÿ¿Ì¿Û¿6¿<¿u¿{¿≥¿π¿¿¿¿A¿G¿µ¿«¿€¿&¿T¿d¿{¿Ç¿é¿∫¿¯¿ˇ¿¿?¿ê¿ó¿ÿ¿˙¿¿Q¿ñ¿¿¿·¿Â¿Ê¿8¿S¿c¿~¿ë¿õ¿«¿Ë¿Ù¿	(¿	\¿	c¿	¢¿	˝¿
¿
2¿
B¿
^¿
q¿
{¿
û¿
¢¿
£¿
Û¿$¿*¿f¿l¿´¿±¿«¿Õ¿¿ˆ¿¿%¿Q¿´¿œ¿⁄¿‚¿Ï¿˛¿¿
¿¿ ¿j¿ñ¿™¿¿5¿b¿Ä¿”¿‰¿Î¿¿¿¿X¿â¿è¿’¿€¿¿¿U¿[¿§¿™¿¿¿„¿È¿\¿n¿Ç¿º¿Î¿¿"¿)¿5¿d¿¢¿©¿µ¿È¿:¿A¿Ç¿ß¿√¿˛¿<¿l¿ç¿ë¿í¿·¿¸¿¿'¿:¿D¿p¿†¿ÿ¿˝¿¿T¿{¿£¿´¿Ω¿√¿ﬂ¿‡¿¿¿¿)¿L¿P¿Q¿ã¿ë¿¬¿»¿ÿ¿ﬁ¿-¿x¿¡¿Ì¿¿e¿Ä¿©¿º¿¿"¿)¿-¿.¿h¿n¿©¿Ø¿‡¿Ê¿¿$¿m¿Å¿±¿◊¿¿&¿-¿V¿b¿ë¿œ¿÷¿‚¿¿g¿n¿Ø¿‘¿¿+¿l¿ê¿±¿µ¿∂¿˘¿¿7¿E¿K¿[¿v¿â¿ì¿Œ¿˙¿ M¿ †¿ ¨¿ Õ¿!¿!!¿!Q¿!x¿!Æ¿! ¿!⁄¿!ˆ¿"	¿"¿")¿"N¿"T¿"X¿"Y¿"£¿"‹¿"‚¿#¿##¿#3¿#9¿#Ü¿#ô¿#È¿$¿$,¿$Z¿$É¿$£¿$™¿$”¿$ˇ¿%¿%m¿%Ä¿%á¿%ã¿%å¿%÷¿&¿&¿&Z¿&`¿&õ¿&°¿&Ÿ¿&ﬂ¿'(¿'<¿'v¿'ü¿'◊¿'Ó¿'ı¿(!¿(-¿(\¿(ö¿(°¿(≠¿(·¿)2¿)9¿)z¿)ü¿)ª¿)ˆ¿*7¿*c¿*Ñ¿*à¿*â¿*‘¿*Ô¿*ˇ¿+¿+-¿+7¿+ì¿+Ô¿+˚¿,"¿,r¿,y¿,ö¿,≥¿,⁄¿,È¿,Ò¿-¿-	¿-Y¿-Ä¿-∂¿-“¿-‚¿-˛¿.¿.¿.¿. ¿.K¿.Q¿.Å¿.á¿.ó¿.ù¿.Ë¿/ ¿/¿/v¿/ñ¿/ ¿/ﬁ¿/‰¿0¿0^¿0q¿0w¿0ó¿0…¿0›¿0„¿1"¿1&¿1'¿1r¿1¿¿1Ù¿1˙¿2,¿22¿2B¿2H¿2ë¿2Ÿ¿3(¿3Y¿3m¿3≠¿4¿4)¿4=¿4C¿4s¿4t¿4¡¿4ˆ¿5A¿5T¿5Z¿5n¿5∞¿5√¿5…¿5 ¿6,¿6Q¿6§¿6∑¿6Ω¿6æ¿6Ï¿7¿7)¿7M¿7b¿7w¿7†¿7ﬂ¿7Ù¿7˙¿7˛¿7ˇ¿8/¿85¿8b¿8h¿8~¿8Ñ¿8ª¿8¡¿8œ¿8Î¿9¿9¿9¿9(¿9>¿9D¿9v¿9|¿9ä¿9ß¿9€¿9„¿9Ì¿9ˇ¿:¿:@¿:[¿:k¿:Ü¿:ô¿:£¿:ı¿;,¿;`¿;¶¿;˜¿<0¿<d¿<n¿<®¿<∞¿<Ω¿<Ÿ¿=¿=¿=M¿=Ç¿=à¿=È¿=˘¿>¿>(¿>2¿>U¿>Y¿>Z¿>ô¿>ü¿>—¿>◊¿>Ì¿>Û¿?¿?¿?*¿?C¿?~¿?Ü¿?ê¿?¢¿?Œ¿@'¿@G¿@o¿@¿@á¿@î¿@‚¿@Ë¿@Ï¿@Ì¿A:¿A@¿Au¿Aâ¿AŒ¿AÈ¿A˘¿B¿B'¿B1¿BW¿BÑ¿B‹¿B¯¿C+¿C;¿CW¿Cj¿Ct¿Cä¿CÂ¿CÎ¿CÔ¿C¿DA¿DÖ¿Dã¿D≈¿DŸ¿E)¿ED¿ET¿Eo¿EÇ¿Eå¿E∏¿F¿Fp¿F|¿F£¿FÛ¿F˙¿G¿G4¿G[¿Gj¿Gr¿GÑ¿Gä¿G⁄¿H ¿H3¿HC¿H_¿Hr¿H|¿HÄ¿HÅ¿H“¿Hÿ¿I(¿Ix¿I≈¿J¿J9¿J?¿Jå¿J›¿Jı¿K"¿Kn¿Kº¿K‘¿KÓ¿K˛¿L#¿L>¿LQ¿L[¿L®¿L¯¿M'¿Mr¿Mù¿M¿N¿N5¿NF¿Nó¿N¢¿N´¿N∏¿Nı¿N˚¿O¿OY¿Ox¿Oï¿O ¿O–¿O—¿O·¿P¿P¿P$¿P(¿P)¿P=¿Pg¿P«¿P›¿P·¿P‚¿Q%¿QM¿Qx¿Q¢¿QÈ¿QÌ¿QÓ¿R5¿RZ¿R`¿Rp¿Rv¿R¿¿R˜¿S@¿SA¿Sè¿SÁ¿SË¿T#¿T)¿Tm¿Ts¿TØ¿TŒ¿T¿U¿UF¿Uc¿Uè¿Uò¿U◊¿U¸¿V:¿Vû¿V¶¿VÏ¿W(¿W0¿W6¿W:¿W;¿W[¿Wa¿WØ¿WÛ¿X¿X:¿X\¿XÑ¿X ¿XÒ¿X˘¿Xˇ¿Y¿Y¿Y0¿Y1¿Ye¿Yç¿Yë¿Yí¿Y»¿YÛ¿Y˜¿Y¯¿Z¿ZÖ¿Z–¿[¿[`¿[è¿[÷¿\¿\-¿\Q¿\†¿\«¿\—¿\◊¿]$¿](¿])¿]v¿]æ¿]¿^¿^#¿^+¿^1¿^B¿^F¿^G¿^ì¿^⁄¿^Û¿_%¿_@¿_Z¿_b¿_h¿_{¿_¿_Ä¿_ç¿_ô¿_¿¿_€¿_¸¿_˝¿`K¿`ô¿`¨¿`—¿a¿aL¿aõ¿a„¿b¿b5¿bA¿bë¿bÃ¿c¿c>¿cK¿cy¿cê¿cõ¿c¥¿c·¿d¿dG¿dg¿dΩ¿dÂ¿e!¿e=¿ec¿eÑ¿e©¿e“¿f¿f&¿fH¿fn¿f•¿fŸ¿g#¿gU¿gj¿g}¿gé¿gù¿g™¿gµ¿gæ¿g≈¿g…¿gÀ¿gÃ¿g¸¿g˝¿h&¿hL¿hv¿hê¿h∞¿h’¿h˙¿i(¿ic¿iÉ¿i®¿i—¿i“¿j¿jP¿jo¿j«¿j€¿k¿kX¿kÑ¿k›¿k„¿kÁ¿kË¿l¿l*¿lG¿lH¿li¿lj¿lã¿l¿¿lﬂ¿l„¿l‰¿lı¿m ¿mA¿mE¿mF¿mS¿mã¿må¿m®¿m»¿n ¿n¿n@¿nX¿ne¿n}¿nü¿n√¿n ¿nŒ¿n–¿n—¿o¿o7¿oO¿ol¿oí¿oΩ¿oæ¿p¿p%¿pQ¿pr¿pù¿p«¿p»¿p‘¿pˇ¿q*¿qÅ¿qÖ¿qÜ¿qí¿q≤¿q«¿q‚¿q„¿qÔ¿r(¿rÜ¿rò¿rú¿rû¿rü¿rË¿s¿s-¿sJ¿sp¿sü¿s†¿sÏ¿t¿t7¿tL¿tÄ¿t¬¿t”¿t¸¿u'¿uU¿uV¿ub¿u”¿u˜¿u¯¿v¿v/¿vI¿v£¿vø¿v¸¿w¿w3¿w\¿wd¿wh¿wi¿wu¿wï¿wÀ¿wÊ¿wÁ¿wÛ¿x,¿xz¿xç¿xë¿xì¿xî¿xÂ¿y)¿y^¿y_¿yn¿yo¿yë¿y´¿yÏ¿z¿zT¿zr¿z©¿{¿{*¿{+¿{t¿{ø¿{¿¿{Ô¿|¿|E¿|W¿|_¿|`¿|ç¿|™¿|«¿}+¿}¿}ú¿}÷¿~¿~/¿~^¿~é¿~Û¿¿:¿p¿z¿å¿î¿ï¿µ¿–¿Ä'¿Ä\¿Ä|¿Ä©¿ÄÛ¿Å)¿ÅÑ¿Å°¿Å√¿Ç¿Çj¿Çü¿Çß¿Ç≠¿Ç∆¿É&¿Év¿Éw¿Éø¿É¿¿ÉÃ¿Ñ-¿Ñ4¿Ñ5¿ÑS¿Ñy¿Ñí¿Ñò¿Ñú¿Ñù¿Ñ¥¿ÑÕ¿Ñ‰¿Ö¿Ö1¿Ö7¿Öc¿Öü¿Öº¿Öˆ¿Ü/¿Ü[¿ÜÜ¿Üå¿Üê¿Üë¿ÜÊ¿á¿á0¿á6¿á^¿áá¿áù¿á•¿á´¿áº¿á¿¿á¡¿á“¿áÏ¿à¿à#¿à)¿àK¿àb¿àf¿àg¿ày¿àz¿àØ¿à∞¿â	¿â#¿âO¿âÖ¿âﬁ¿âÛ¿â˘¿äO¿äq¿äÜ¿äå¿äº¿ã¿ã ¿ã3¿ã7¿ã8¿ã[¿ã\¿ãh¿ãù¿ãÆ¿ã≤¿ã≥¿ãø¿ã¸¿åE¿ås¿å∫¿å“¿ç¿ç¿ç¿ç¿ç¿ç&¿ç`¿çÉ¿çá¿çà¿çî¿çØ¿ç—¿ç’¿ç÷¿ç‚¿é¿é¿é¿éI¿éM¿éú¿é∆¿è¿è¿è`¿è´¿è∫¿èæ¿ê¿êU¿êY¿êà¿êÍ¿êÎ¿ë'¿ë+¿ëy¿ëï¿ëô¿ë…¿í¿í¿íV¿íç¿íë¿í‡¿ì/¿ìs¿ìw¿ì«¿î¿î^¿î≠¿î¸¿ï¿ï¿ïd¿ïâ¿ïç¿ïﬁ¿ñ,¿ñs¿ñó¿ñõ¿ñÊ¿ó5¿ói¿óm¿óÅ¿ó—¿ò¿ò¿òi¿òy¿òæ¿òÁ¿ô¿ô5¿ôR¿ôg¿ôm¿ôn¿ôº¿ö¿öK¿ö|¿ö}¿ö¿¿ö∆¿õ¿õc¿õÆ¿õœ¿õ’¿ú"¿úp¿úé¿úª¿úº¿ù¿ù¿ù¿ùZ¿ùä¿ùã¿ùÿ¿ùÈ¿ùÔ¿û8¿ûs¿û¡¿ûÁ¿ûˇ¿ü¿üV¿üy¿üê¿üî¿üï¿üÿ¿üﬁ¿†.¿†U¿†V¿†ç¿†ì¿†«¿†Ë¿†¸¿†˝¿°	¿°1¿°2¿°>¿°d¿°}¿°†¿°¶¿°™¿°´¿°∑¿°“¿°Ì¿¢¿¢.¿¢2¿¢3¿¢?¿¢g¿¢Å¿¢ù¿¢°¿¢¢¿¢º¿¢Ω¿¢…¿¢‹¿¢Ò¿£1¿£G¿£K¿£L¿£X¿£ó¿£ò¿£∫¿£ˇ¿§¿§¿§¿§C¿§q¿§ç¿§…¿§Û¿•
¿•¿•"¿•d¿•y¿•í¿•∑¿•ø¿•√¿•ƒ¿¶$¿¶&¿¶'¿¶g¿¶k¿¶º¿¶Œ¿¶“¿ß¿ß\¿ßê¿ß⁄¿®¿®¿®b¿®É¿®û¿®ü¿®´¿®¡¿©¿©¿©   Å/// @docImport 'package:flutter/cupertino.dart';
/// @docImport 'package:flutter/material.dart';
///
/// @docImport 'app.dart';
/// @docImport 'form.dart';
/// @docImport 'pages.dart';
/// @docImport 'pop_scope.dart';
/// @docImport 'router.dart';
/// @docImport 'will_pop_scope.dart';ÅÕ   Å‚   Å¸   ÇÇ/Ç. Ç9ÇNÇM ÇR   Ç|   Ç•   ÇŒ   Ç˜   É   É#   É@   É[   Éz   Éì   É©   ÉŒ   ÉÂ   Ñ    Ñ&   Ñ<     ì¿ PûìóÕÑ†/// An abstraction for an entry managed by a [Navigator].
///
/// This class defines an abstract interface between the navigator and the
/// "routes" that are pushed on and popped off the navigator. Most routes have
/// visual affordances, which they place in the navigators [Overlay] using one
/// or more [OverlayEntry] objects.
///
/// See [Navigator] for more explanation of how to use a [Route] with
/// navigation, including code examples.
///
/// See [MaterialPageRoute] for a route that replaces the entire screen with a
/// platform-adaptive transition.
///
/// A route can belong to a page if the [settings] are a subclass of [Page]. A
/// page-based route, as opposed to a pageless route, is created from
/// [Page.createRoute] during [Navigator.pages] updates. The page associated
/// with this route may change during the lifetime of the route. If the
/// [Navigator] updates the page of this route, it calls [changedInternalState]
/// to notify the route that the page has been updated.
///
/// The type argument `T` is the route's return type, as used by
/// [currentResult], [popped], and [didPop]. The type `void` may be used if the
/// route does not return a value.ó”ó”ó”óÙÇô9 ô9ô> Å2/// Initialize the [Route].
///
/// If the [settings] are not provided, an empty [RouteSettings] object is
/// used instead.
///
/// {@template flutter.widgets.navigator.Route.requestFocus}
/// If [requestFocus] is not provided, the value of [Navigator.requestFocus] is
/// used instead.
/// {@endtemplate}ô@ôPôO  ôYô`ô_  ô~ôtôâôÄôåôíôüô†ô∑ô©ôπõõ'õ'  õöõ™õ™  û:ûHûH  °gO°Ñ°Ñ °ö°ß°Ø°®°Æ°∞°µ°±¿ C≥3¿ C«¿ C« ¿ C◊¿ C‡¿ C„¿ C·¿ C‚¿ C‰¿ CÂ¿ CÎ7¿ Cˇ¿ Cˇ ¿ D¿ D¿ D¿ D¿ D¿ D ¿ D!öÅöœöœÄ¨/// When the route state is updated, request focus if the current route is at the top.
///
/// If not provided in the constructor, [Navigator.requestFocus] is used instead.   õ9^õõ//// The navigator that the route is in, if any.   õπÇ~û!û!Ç;/// The settings for this route.
///
/// See [RouteSettings] for details.
///
/// The settings can change during the route's lifetime. If the settings
/// change, the route's overlays will be marked dirty (see
/// [changedInternalState]).
///
/// If the route is created from a [Page] in the [Navigator.pages] list, then
/// this will be a [Page] subclass, and it will be updated each time its
/// corresponding [Page] in the [Navigator.pages] has changed. Once the
/// [Route] is removed from the history, this value stops updating (and
/// remains with its last value).   ûV3û_û_    ûçÇ◊°:°:Çw/// The restoration scope ID to be used for the [RestorationScope] surrounding
/// this route.
///
/// The restoration scope ID is null if restoration is currently disabled
/// for this route.
///
/// If the restoration scope ID changes (e.g. because restoration is enabled
/// or disabled) during the life of the route, the [ValueListenable] notifies
/// its listeners. As an example, the ID changes to null while the route is
/// transitioning off screen, which triggers a notification on this field. At
/// that point, the route is considered as no longer present for restoration
/// purposes and its state will not be restored.   £8Å’§‰§‰ÅÄ/// The overlay entries of this route.
///
/// These are typically populated by [install]. The [Navigator] is in charge
/// of adding them to and removing them from the [Overlay].
///
/// There must be at least one entry in this list after [install] has been
/// invoked.
///
/// The [Navigator] will take care of keeping the entries together if the
/// route is moved in the history.   ∑6ÖÓººÑõ/// Returns whether calling [Navigator.maybePop] when this [Route] is current
/// ([isCurrent]) should do anything.
///
/// [Navigator.maybePop] is usually used instead of [Navigator.pop] to handle
/// the system back button, when it hasn't been disabled via
/// [SystemNavigator.setFrameworkHandlesBack].
///
/// By default, if a [Route] is the first route in the history (i.e., if
/// [isFirst]), it reports that pops should be bubbled
/// ([RoutePopDisposition.bubble]). This behavior prevents the user from
/// popping the first route off the history and being stranded at a blank
/// screen; instead, the larger scope is popped (e.g. the application quits,
/// so that the user returns to the previous application).
///
/// In other cases, the default behavior is to accept the pop
/// ([RoutePopDisposition.pop]).
///
/// The third possible value is [RoutePopDisposition.doNotPop], which causes
/// the pop request to be ignored entirely.
///
/// See also:
///
///  * [Form], which provides a [Form.canPop] boolean that is similar.
///  * [PopScope], a widget that provides a way to intercept the back button.
///  * [Page.canPop], a way for [Page] to affect this property.   ¿ @Ù]¿ A0¿ A00/// Whether calling [didPop] would return false.   ¿ AUÅ%¿ Bd¿ BdÄ˝/// When this route is popped (see [Navigator.pop]) if the result isn't
/// specified or if it's null, this value will be used instead.
///
/// This fallback is implemented by [didComplete]. This value is used if the
/// argument to that method is null.   ¿ B~Å2¿ Cë¿ CëÄ˘/// A future that completes when this route is popped off the navigator.
///
/// The future completes with the value given to [Navigator.pop], if any, or
/// else the value of [currentResult]. See [didComplete] for more discussion
/// on this topic.   ¿ [≥Å∑¿ \8¿ \8u/// Whether this route is the top-most route on the navigator.
///
/// If this is true, then [isActive] is also true.   ¿ ]nÇ¿ ^P¿ ^PÄ–/// Whether this route is the bottom-most active route on the navigator.
///
/// If [isFirst] and [isCurrent] are both true then this is the only route on
/// the navigator (and [isActive] will also be true).   ¿ _ÖÅí¿ _„¿ _„E/// Whether there is at least one active route underneath this route.  ¿ _Õ¿ _Œ¿ aÇû¿ c7¿ c7Ç /// Whether this route is on the navigator.
///
/// If the route is not only active, but also the current route (the top-most
/// route), then [isCurrent] will also be true. If it is the first route (the
/// bottom-most route), then [isFirst] will also be true.
///
/// If a higher route is entirely opaque, then the route will be active but not
/// rendered. It is even possible for the route to be active but for the stateful
/// widgets within the route to not be instantiated. See [ModalRoute.maintainState].    °ªÄ∆°¿°¿  °–°ﬂ°ﬁ   ¢œe¢‘¢‘  ¢È¢Ú¢Ò   •Åy¶~¶~Å=/// Called when the route is inserted into the navigator.
///
/// Uses this to populate [overlayEntries]. There must be at least one entry in
/// this list after [install] has been invoked. The [Navigator] will be in charge
/// to add them to the [Overlay] or remove them from it by calling
/// [OverlayEntry.remove].  ¶[¶\¶h¶i¶éÇã®i®iÅù/// Called after [install] when the route is pushed onto the navigator.
///
/// The returned value resolves when the push transition is complete.
///
/// The [didAdd] method will be called instead of [didPush] when the route
/// immediately appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  ®>®?®K®L©á°™í™íÅC/// Called after [install] when the route is added to the navigator.
///
/// This method is called instead of [didPush] when the route immediately
/// appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  ™o™p™|™}∞¬Å±∏±∏Ä /// Called after [install] when the route replaced another in the navigator.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called. ±√±‘±”  ±ï±ñ±¢±£±„ÖO∂“∂“Ñ0/// Returns whether calling [Navigator.maybePop] when this [Route] is current
/// ([isCurrent]) should do anything.
///
/// [Navigator.maybePop] is usually used instead of [Navigator.pop] to handle
/// the system back button.
///
/// By default, if a [Route] is the first route in the history (i.e., if
/// [isFirst]), it reports that pops should be bubbled
/// ([RoutePopDisposition.bubble]). This behavior prevents the user from
/// popping the first route off the history and being stranded at a blank
/// screen; instead, the larger scope is popped (e.g. the application quits,
/// so that the user returns to the previous application).
///
/// In other cases, the default behavior is to accept the pop
/// ([RoutePopDisposition.pop]).
///
/// The third possible value is [RoutePopDisposition.doNotPop], which causes
/// the pop request to be ignored entirely.
///
/// See also:
///
///  * [Form], which provides a [Form.onWillPop] callback that uses this
///    mechanism.
///  * [WillPopScope], another widget that provides a way to intercept the
///    back button.  ∂F∂G∂Q∂≤∂W∂zΩ(Å•æ±æ±Ä˚/// Called after a route pop was handled.
///
/// Even when the pop is canceled, for example by a [PopScope] widget, this
/// will still be called. The `didPop` parameter indicates whether or not the
/// back navigation actually happened successfully. æææƒæ√  æ.æ/æ9æ®æ?æoæ—Ç¿ @E¿ @EÅO/// {@template flutter.widgets.navigator.onPopInvokedWithResult}
/// Called after a route pop was handled.
///
/// Even when the pop is canceled, for example by a [PopScope] widget, this
/// will still be called. The `didPop` parameter indicates whether or not the
/// back navigation actually happened successfully.
/// {@endtemplate} ¿ @\¿ @b¿ @a  ¿ @i	¿ @m¿ @l  ¿ @/¿ @0¿ D'Ñî¿ Hz¿ HzÑ/// A request was made to pop this route. If the route can handle it
/// internally (e.g. because it has its own stack of internal state) then
/// return false, otherwise return true (by returning the value of calling
/// `super.didPop`). Returning false will prevent the default behavior of
/// [NavigatorState.pop].
///
/// When this function returns true, the navigator removes this route from
/// the history but does not yet call [dispose]. Instead, it is the route's
/// responsibility to call [NavigatorState.finalizeRoute], which will in turn
/// call [dispose] on the route. This sequence lets the route perform an
/// exit animation (or some other visual effect) after being popped but prior
/// to being disposed.
///
/// This method should call [didComplete] to resolve the [popped] future (and
/// this is all that the default implementation does); routes should not wait
/// for their exit animation to complete before doing so.
///
/// See [popped], [didComplete], and [currentResult] for a discussion of the
/// `result` argument. ¿ HÅ	¿ HÖ¿ HÑ  ¿ Hd¿ He¿ HøÉ»¿ L6¿ L6É5/// The route was popped or is otherwise being removed somewhat gracefully.
///
/// This is called by [didPop] and in response to
/// [NavigatorState.pushReplacement]. If [didPop] was not called, then the
/// [NavigatorState.finalizeRoute] method must be called immediately, and no exit
/// animation will run.
///
/// The [popped] future is completed by this method. The `result` argument
/// specifies the value that this future is completed with, unless it is null,
/// in which case [currentResult] is used instead.
///
/// This should be called before the pop animation, if any, takes place,
/// though in some cases the animation may be driven by the user before the
/// route is committed to being popped; this can in particular happen with the
/// iOS-style back gesture. See [NavigatorState.didStartUserGesture]. ¿ LB	¿ LF¿ LE  ¿ L¿ L¿ L ¿ L!¿ LãÅ¿ Mu¿ MuÄº/// The given route, which was above this one, has been popped off the
/// navigator.
///
/// This route is now the current route ([isCurrent] is now true), and there
/// is no next route. ¿ MÄ¿ Mê¿ Mè  ¿ MR¿ MS¿ M_¿ M`¿ M†Ç¿ Oâ¿ OâÅ≥/// This route's next route has changed to the given new route.
///
/// This is called on a route whenever the next route changes for any reason,
/// so long as it is in the history, including when a route is first added to
/// a [Navigator] (e.g. by [Navigator.push]), except for cases when
/// [didPopNext] would be called.
///
/// The `nextRoute` argument will be null if there's no new next route (i.e.
/// if [isCurrent] is true). ¿ Oó¿ O®¿ Oß  ¿ Of¿ Og¿ Os¿ Ot¿ O∏Ç¿ Q§¿ Q§Å∂/// This route's previous route has changed to the given new route.
///
/// This is called on a route whenever the previous route changes for any
/// reason, so long as it is in the history, except for immediately after the
/// route itself has been pushed (in which case [didPush] or [didReplace] will
/// be called instead).
///
/// The `previousRoute` argument will be null if there's no previous route
/// (i.e. if [isFirst] is true). ¿ Q∂¿ Q«¿ Q∆  ¿ QÅ¿ QÇ¿ Qé¿ Qè¿ Q€ÇN¿ T¿ TÅ˚/// Called whenever the internal state of the route has changed.
///
/// This should be called whenever [willHandlePopInternally], [didPop],
/// [ModalRoute.offstage], or other internal state of the route changes value.
/// It is used by [ModalRoute], for example, to report the new information via
/// its inherited widget to any children of the route.
///
/// See also:
///
///  * [changedExternalState], which is called when the [Navigator] has
///    updated in some manner that might affect the routes.  ¿ SÌ¿ SÓ¿ S˙¿ S˚¿ T-Ñ¥¿ X»¿ X»ÑI/// Called whenever the [Navigator] has updated in some manner that might
/// affect routes, to indicate that the route may wish to rebuild as well.
///
/// This is called by the [Navigator] whenever the
/// [NavigatorState]'s [State.widget] changes (as in [State.didUpdateWidget]),
/// for example because the [MaterialApp] has been rebuilt. This
/// ensures that routes that directly refer to the state of the
/// widget that built the [MaterialApp] will be notified when that
/// widget rebuilds, since it would otherwise be difficult to notify
/// the routes that state they depend on may have changed.
///
/// It is also called whenever the [Navigator]'s dependencies change
/// (as in [State.didChangeDependencies]). This allows routes to use the
/// [Navigator]'s context ([NavigatorState.context]), for example in
/// [ModalRoute.barrierColor], and update accordingly.
///
/// The [ModalRoute] subclass overrides this to force the barrier
/// overlay to rebuild.
///
/// See also:
///
///  * [changedInternalState], the equivalent but for changes to the internal
///    state of the route.  ¿ X•¿ X¶¿ X≤¿ X≥¿ XÂÇ ¿ [¿ [Å˜/// Discards any resources used by the object.
///
/// This method should not remove its [overlayEntries] from the [Overlay]. The
/// object's owner is in charge of doing that.
///
/// After this is called, the object is not in a usable state and should be
/// discarded.
///
/// This method should only be called by the object's owner; typically the
/// [Navigator] owns a route and so will call this method when the route is
/// removed, after which the route is no longer referenced by the navigator.  ¿ ZÛ¿ ZÙ¿ [¿ [ ¿ cΩÇX¿ cΩ¿ d8/// Data that might be useful in constructing a [Route]. ¿ d^¿ dL ¿ dL¿ dY */// Creates data used to construct routes.¿ d[	¿ da¿ d`  ¿ df¿ dl¿ dk   ¿ d{p¿ dÁ¿ dÁW/// The name of the route (e.g., "/settings").
///
/// If null, the route is anonymous. ¿ dÄó¿ e~¿ e~y/// The arguments passed to this route.
///
/// May be used when building the route, e.g. in [Navigator.onGenerateRoute].   ¿ eåÄá¿ eü¿ eü   ¿ eå¿ eç¿ cˆ¿ c˜¿ fã∂¿ f¿ h{ÇT/// Describes the configuration of a [Route].
///
/// The type argument `T` is the corresponding [Route]'s return type, as
/// used by [Route.currentResult], [Route.popped], and [Route.didPop].
///
/// The [canPop] and [onPopInvoked] are used for intercepting pops.
///
/// {@tool dartpad}
/// This sample demonstrates how to use this [canPop] and [onPopInvoked] to
/// intercept pops.
///
/// ** See code in examples/api/lib/widgets/page/page_can_pop.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Navigator.pages], which accepts a list of [Page]s and updates its routes
///    history.¿ hÄ¿ hÄ¿ hÄ¿ hùÄ„¿ hﬁ ¿ hﬁ¿ h‚ 8/// Creates a page and initializes [key] for subclasses.¿ hÈ¿ hÔ¿ hÓ  ¿ h˜
¿ h˛¿ h˝  ¿ i¿ i¿ i  ¿ i¿ i"¿ i!  ¿ i4¿ i:¿ i9  ¿ iL-¿ iR¿ iQ  ¿ iB¿ i`¿ iÕÄÇ¿ jL¿ jLh/// The key associated with this page.
///
/// This key will be used for comparing pages in [canUpdate]. ¿ jTÅM¿ kî¿ kîÅ/// Restoration ID to save and restore the state of the [Route] configured by
/// this page.
///
/// If no restoration ID is provided, the [Route] will not restore its state.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter. ¿ k¶ÇT¿ mÓ¿ mÓÇ/// Called after a pop on the associated route was handled.
///
/// It's not possible to prevent the pop from happening at the time that this
/// method is called; the pop has already happened. Use [canPop] to
/// disable pops in advance.
///
/// This will still be called even when the pop is canceled. A pop is canceled
/// when the associated [Route.popDisposition] returns false, or when
/// [canPop] is set to false. The `didPop` parameter indicates whether or not
/// the back navigation actually happened successfully. ¿ mˇÅâ¿ oÇ¿ oÇÅg/// When false, blocks the associated route from being popped.
///
/// If this is set to false for first page in the Navigator. It prevents
/// Flutter app from exiting.
///
/// If there are any [PopScope] widgets in a route's widget subtree,
/// each of their `canPop` must be `true`, in addition to this canPop, in
/// order for the route to be able to pop.   ¿ iÑE¿ iê¿ iê  ¿ i™¿ i∞¿ iØ  ¿ i∑¿ i¿¿ iø   ¿ oçÅ
¿ p2¿ p2Äó/// Whether this page can be updated with the [other] page.
///
/// Two pages are consider updatable if they have same the [runtimeType] and
/// [key]. ¿ p<¿ pK¿ pJ   ¿ põÄÀ¿ qD¿ qDÄé/// Creates the [Route] that corresponds to this page.
///
/// The created [Route] must have its [Route.settings] property set to this [Page]. ¿ qP¿ q^¿ q]  ¿ q0¿ q1¿ qja¿ q}¿ q}   ¿ qj¿ qk ¿ qœãª¿ qœ¿ r=/// An interface for observing the behavior of a [Navigator].  ¿ tÚL¿ u¿ u ¿ u%¿ u,¿ u;¿ u-¿ u<¿ u=¿ r)o¿ ry¿ ry9/// The navigator that the observer is observing, if any.    ¿ uCÄ‹¿ u‡¿ u‡Äè/// The [Navigator] pushed `route`.
///
/// The route immediately below that one, and thus the previously active
/// route, is `previousRoute`. ¿ uË¿ u¯¿ u˜  ¿ u˛¿ v¿ v   ¿ v#Ä÷¿ vª¿ vªÄä/// The [Navigator] popped `route`.
///
/// The route immediately below that one, and thus the newly active
/// route, is `previousRoute`. ¿ v¬¿ v“¿ v—  ¿ vÿ¿ vÈ¿ vË   ¿ v˝ÅÔ¿ x´¿ x´Åñ/// The [Navigator] removed `route`.
///
/// If only one route is being removed, then the route immediately below
/// that one, if any, is `previousRoute`.
///
/// If multiple routes are being removed, then the route below the
/// bottommost route being removed, if any, is `previousRoute`, and this
/// method will be called once for each removed route, from the topmost route
/// to the bottommost route. ¿ xµ¿ x≈¿ xƒ  ¿ xÀ¿ x‹¿ x€   ¿ xÄÉ¿ y0¿ y08/// The [Navigator] replaced `oldRoute` with `newRoute`. ¿ y<¿ yM¿ yL  ¿ yV¿ yg¿ yf   ¿ ywÇL¿ {y¿ {yÅÍ/// The top most route has changed.
///
/// The `topRoute` is the new top most route. This can be a new route pushed
/// on top of the screen, or an existing route that becomes the new top-most
/// route because the previous top-most route has been popped.
///
/// The `previousTopRoute` was the top most route before the change. This can
/// be a route that was popped off the screen, or a route that will be covered
/// by the `topRoute`. This can also be null if this is the first build. ¿ {Ü¿ {ñ¿ {ï  ¿ {ü ¿ {∞¿ {Ø   ¿ {«Å"¿ |û¿ |ûÄ…/// The [Navigator]'s routes are being moved by a user gesture.
///
/// For example, this is called when an iOS back gesture starts, and is used
/// to disable hero animations during such interactions. ¿ |≤¿ |¬¿ |¡  ¿ |»¿ |Ÿ¿ |ÿ   ¿ |ÌÄõ¿ }q¿ }qx/// User gesture is no longer controlling the [Navigator].
///
/// Paired with an earlier call to [didStartUserGesture].    ¿ }åå ¿ }å¿ ÂÇR/// An inherited widget to host a hero controller.
///
/// The hosted hero controller will be picked up by the navigator in the
/// [child] subtree. Once a navigator picks up this controller, the navigator
/// will bar any navigator below its subtree from receiving this controller.
///
/// The hero controller inside the [HeroControllerScope] can only subscribe to
/// one navigator at a time. An assertion will be thrown if the hero controller
/// subscribes to more than one navigators. This can happen when there are
/// multiple navigators under the same [HeroControllerScope] in parallel. ¿ ÄÄÆ¿ ÄR ¿ ÄR¿ Äe 4/// Creates a widget to host the input [controller].¿ Äl	¿ Äs¿ Är  ¿ Ä{'¿ Äô¿ Äò  ¿ Ä®¿ Ä∏¿ Ä∑   ¿ Ä«Ä¥¿ Å+¿ Å>¿ Å?¿ ÅC¿ Å?Y/// Creates a widget to prevent the subtree from receiving the hero controller
/// above.¿ ÅE	¿ ÅL¿ ÅK  ¿ ÅP¿ Å`¿ Å_  ¿ Åt¿ Åi¿ Åv¿ Å]¿ Å“¿ Å“:/// The hero controller that is hosted inside this widget.   ¿ Å·Çf¿ Éï¿ ÉïÅà/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor, or null if none exists.
///
/// Calling this method will create a dependency on the closest
/// [HeroControllerScope] in the [context], if there is one.
///
/// See also:
///
/// * [HeroControllerScope.of], which is similar to this method, but asserts
///   if no [HeroControllerScope] ancestor is found. ¿ Éù¿ É´¿ É™   ¿ ÑKÑ‰¿ ÜY¿ ÜYÅ›/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor.
///
/// If no ancestor is found, this method will assert in debug mode, and throw
/// an exception in release mode.
///
/// Calling this method will create a dependency on the closest
/// [HeroControllerScope] in the [context].
///
/// See also:
///
/// * [HeroControllerScope.maybeOf], which is similar to this method, but
///   returns null if no [HeroControllerScope] ancestor is found. ¿ Ü\¿ Üj¿ Üi   ¿ â3w¿ âD¿ âD  ¿ âW¿ âl¿ âk  ¿ â3¿ â4 ¿ âÆä§¿ âÆ¿ äVÄò/// A [Route] wrapper interface that can be staged for [TransitionDelegate] to
/// decide how its underlying [Route] should transition on or off screen.   ¿ äp>¿ ä®¿ ä®"/// Retrieves the wrapped [Route].   ¿ ä≤Å<¿ ã—¿ ã—Å/// Whether this route is waiting for the decision on how to enter the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition into the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ ãÚÅ9¿ ç¿ çÅ	/// Whether this route is waiting for the decision on how to exit the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition off the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].    ¿ ç/ÅQ¿ ér¿ érÅ3/// Marks the [route] to be pushed with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be pushed onto the [Navigator] with an animated transition.   ¿ éÑÅT¿ èÀ¿ èÀÅ7/// Marks the [route] to be added without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be added onto the [Navigator] without an animated transition.   ¿ è‹Å¿ êÿ¿ êÿÄÏ/// Marks the [route] to be popped with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be popped off the [Navigator] with
/// an animated transition. ¿ ê‰¿ êÌ¿ êÏ   ¿ ê˘ÅP¿ í'¿ í'Å/// Marks the [route] to be completed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be completed with the provided
/// result and removed from the [Navigator] without an animated transition. ¿ í8¿ íA¿ í@   ¿ íMÇ¿ î+¿ î+Å/// Marks the [route] to be removed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be removed from the [Navigator]
/// without completing and without an animated transition.  ¿ ìd¿ ìe¿ ìo¿ î"¿ ìu¿ ìö¿ ìÍ ¿ îTßM¿ îT¿ ùà¥/// The delegate that decides how pages added and removed from [Navigator.pages]
/// transition in or out of the screen.
///
/// This abstract class implements the API to be called by [Navigator] when it
/// requires explicit decisions on how the routes transition on or off the screen.
///
/// To make route transition decisions, subclass must implement [resolve].
///
/// {@tool snippet}
/// The following example demonstrates how to implement a subclass that always
/// removes or adds routes without animated transitions and puts the removed
/// routes at the top of the list.
///
/// ```dart
/// class NoAnimationTransitionDelegate extends TransitionDelegate<void> {
///   @override
///   Iterable<RouteTransitionRecord> resolve({
///     required List<RouteTransitionRecord> newPageRouteHistory,
///     required Map<RouteTransitionRecord?, RouteTransitionRecord> locationToExitingPageRoute,
///     required Map<RouteTransitionRecord?, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,
///   }) {
///     final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];
///
///     for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {
///       if (pageRoute.isWaitingForEnteringDecision) {
///         pageRoute.markForAdd();
///       }
///       results.add(pageRoute);
///
///     }
///     for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {
///       if (exitingPageRoute.isWaitingForExitingDecision) {
///        exitingPageRoute.markForComplete();
///        final List<RouteTransitionRecord>? pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];
///        if (pagelessRoutes != null) {
///          for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {
///             pagelessRoute.markForComplete();
///           }
///        }
///       }
///       results.add(exitingPageRoute);
///
///     }
///     return results;
///   }
/// }
///
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [Navigator.transitionDelegate], which uses this class to make route
///    transition decisions.
///  * [DefaultTransitionDelegate], which implements the default way to decide
///    how routes transition in or out of the screen.¿ ù+¿ ù+¿ ù+¿ ù2e¿ ùÇ ¿ ùÇ¿ ùî G/// Creates a delegate and enables subclass to create a constant class.     ¿ ùõç¿ ùª¿ ùª  ¿ ùÕ8¿ ùÛ¿ ùÚ  ¿ ûV¿ ûH¿ ûG  ¿ ûg[¿ û™¿ û©   ¿ ™µêÍ¿ ∫ï¿ ∫ïè-/// A method that will be called by the [Navigator] to decide how routes
/// transition in or out of the screen when [Navigator.pages] is updated.
///
/// The `newPageRouteHistory` list contains all page-based routes in the order
/// that will be on the [Navigator]'s history stack after this update
/// completes. If a route in `newPageRouteHistory` has its
/// [RouteTransitionRecord.isWaitingForEnteringDecision] set to true, this
/// route requires explicit decision on how it should transition onto the
/// Navigator. To make a decision, call [RouteTransitionRecord.markForPush] or
/// [RouteTransitionRecord.markForAdd].
///
/// The `locationToExitingPageRoute` contains the pages-based routes that
/// are removed from the routes history after page update. This map records
/// page-based routes to be removed with the location of the route in the
/// original route history before the update. The keys are the locations
/// represented by the page-based routes that are directly below the removed
/// routes, and the value are the page-based routes to be removed. The
/// location is null if the route to be removed is the bottom most route. If
/// a route in `locationToExitingPageRoute` has its
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to true, this
/// route requires explicit decision on how it should transition off the
/// Navigator. To make a decision for a removed route, call
/// [RouteTransitionRecord.markForPop],
/// [RouteTransitionRecord.markForComplete]. It is possible that decisions are
/// not required for routes in the `locationToExitingPageRoute`. This can
/// happen if the routes have already been popped in earlier page updates and
/// are still waiting for popping animations to finish. In such case, those
/// routes are still included in the `locationToExitingPageRoute` with their
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to false and no
/// decisions are required.
///
/// The `pageRouteToPagelessRoutes` records the page-based routes and their
/// associated pageless routes. If a page-based route is waiting for exiting
/// decision, its associated pageless routes also require explicit decisions
/// on how to transition off the screen.
///
/// Once all the decisions have been made, this method must merge the removed
/// routes (whether or not they require decisions) and the
/// `newPageRouteHistory` and return the merged result. The order in the
/// result will be the order the [Navigator] uses for updating the route
/// history. The return list must preserve the same order of routes in
/// `newPageRouteHistory`. The removed routes, however, can be inserted into
/// the return list freely as long as all of them are included.
///
/// For example, consider the following case.
///
/// `newPageRouteHistory = [A, B, C]`
///
/// `locationToExitingPageRoute = {A -> D, C -> E}`
///
/// The following outputs are valid.
///
/// `result = [A, B ,C ,D ,E]` is valid.
/// `result = [D, A, B ,C ,E]` is also valid because exiting route can be
/// inserted in any place.
///
/// The following outputs are invalid.
///
/// `result = [B, A, C ,D ,E]` is invalid because B must be after A.
/// `result = [A, B, C ,E]` is invalid because results must include D.
///
/// See also:
///
///  * [RouteTransitionRecord.markForPush], which makes route enter the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForAdd], which makes route enter the screen
///    without an animated transition.
///  * [RouteTransitionRecord.markForPop], which makes route exit the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForComplete], which completes the route and
///    makes it exit the screen without an animated transition.
///  * [DefaultTransitionDelegate.resolve], which implements the default way
///    to decide how routes transition in or out of the screen. ¿ ∫£8¿ ∫…¿ ∫»  ¿ ∫·V¿ ª¿ ª  ¿ ª=[¿ ªÄ¿ ª    ¿ ª£ér¿ ª£¿ Ω≤Ç/// The default implementation of [TransitionDelegate] that the [Navigator] will
/// use if its [Navigator.transitionDelegate] is not specified.
///
/// This transition delegate follows two rules. Firstly, all the entering routes
/// are placed on top of the exiting routes if they are at the same location.
/// Secondly, the top most route will always transition with an animated transition.
/// All the other routes below will either be completed with
/// [Route.currentResult] or added without an animated transition.¿ ΩÃ¿ ΩÃ¿ ΩÃ¿ ΩÒY¿ æ$ ¿ æ$¿ æ= */// Creates a default transition delegate. ¿ æB¿ æG¿ æH   ¿ æNã≈¿ æz¿ æz  ¿ æà8¿ æÆ¿ æ≠  ¿ æ∆V¿ ø¿ ø  ¿ ø"[¿ øe¿ ød  ¿ æN¿ æO ¿ Ã¿f¿ Ã¿ ˇ0≥'/// A widget that manages a set of child widgets with a stack discipline.
///
/// Many apps have a navigator near the top of their widget hierarchy in order
/// to display their logical history using an [Overlay] with the most recently
/// visited pages visually on top of the older pages. Using this pattern lets
/// the navigator visually transition from one page to another by moving the widgets
/// around in the overlay. Similarly, the navigator can be used to show a dialog
/// by positioning the dialog widget above the current page.
///
/// ## Using the Pages API
///
/// The [Navigator] will convert its [Navigator.pages] into a stack of [Route]s
/// if it is provided. A change in [Navigator.pages] will trigger an update to
/// the stack of [Route]s. The [Navigator] will update its routes to match the
/// new configuration of its [Navigator.pages]. To use this API, one can create
/// a [Page] subclass and defines a list of [Page]s for [Navigator.pages]. A
/// [Navigator.onPopPage] callback is also required to properly clean up the
/// input pages in case of a pop.
///
/// By Default, the [Navigator] will use [DefaultTransitionDelegate] to decide
/// how routes transition in or out of the screen. To customize it, define a
/// [TransitionDelegate] subclass and provide it to the
/// [Navigator.transitionDelegate].
///
/// For more information on using the pages API, see the [Router] widget.
///
/// ## Using the Navigator API
///
/// Mobile apps typically reveal their contents via full-screen elements
/// called "screens" or "pages". In Flutter these elements are called
/// routes and they're managed by a [Navigator] widget. The navigator
/// manages a stack of [Route] objects and provides two ways for managing
/// the stack, the declarative API [Navigator.pages] or imperative API
/// [Navigator.push] and [Navigator.pop].
///
/// When your user interface fits this paradigm of a stack, where the user
/// should be able to _navigate_ back to an earlier element in the stack,
/// the use of routes and the Navigator is appropriate. On certain platforms,
/// such as Android, the system UI will provide a back button (outside the
/// bounds of your application) that will allow the user to navigate back
/// to earlier routes in your application's stack. On platforms that don't
/// have this build-in navigation mechanism, the use of an [AppBar] (typically
/// used in the [Scaffold.appBar] property) can automatically add a back
/// button for user navigation.
///
/// ### Displaying a full-screen route
///
/// Although you can create a navigator directly, it's most common to use the
/// navigator created by the `Router` which itself is created and configured by
/// a [WidgetsApp] or a [MaterialApp] widget. You can refer to that navigator
/// with [Navigator.of].
///
/// A [MaterialApp] is the simplest way to set things up. The [MaterialApp]'s
/// home becomes the route at the bottom of the [Navigator]'s stack. It is what
/// you see when the app is launched.
///
/// ```dart
/// void main() {
///   runApp(const MaterialApp(home: MyAppHome()));
/// }
/// ```
///
/// To push a new route on the stack you can create an instance of
/// [MaterialPageRoute] with a builder function that creates whatever you
/// want to appear on the screen. For example:
///
/// ```dart
/// Navigator.push(context, MaterialPageRoute<void>(
///   builder: (BuildContext context) {
///     return Scaffold(
///       appBar: AppBar(title: const Text('My Page')),
///       body: Center(
///         child: TextButton(
///           child: const Text('POP'),
///           onPressed: () {
///             Navigator.pop(context);
///           },
///         ),
///       ),
///     );
///   },
/// ));
/// ```
///
/// The route defines its widget with a builder function instead of a
/// child widget because it will be built and rebuilt in different
/// contexts depending on when it's pushed and popped.
///
/// As you can see, the new route can be popped, revealing the app's home
/// page, with the Navigator's pop method:
///
/// ```dart
/// Navigator.pop(context);
/// ```
///
/// It usually isn't necessary to provide a widget that pops the Navigator
/// in a route with a [Scaffold] because the Scaffold automatically adds a
/// 'back' button to its AppBar. Pressing the back button causes
/// [Navigator.pop] to be called. On Android, pressing the system back
/// button does the same thing.
///
/// ### Using named navigator routes
///
/// Mobile apps often manage a large number of routes and it's often
/// easiest to refer to them by name. Route names, by convention,
/// use a path-like structure (for example, '/a/b/c').
/// The app's home page route is named '/' by default.
///
/// The [MaterialApp] can be created
/// with a [Map<String, WidgetBuilder>] which maps from a route's name to
/// a builder function that will create it. The [MaterialApp] uses this
/// map to create a value for its navigator's [onGenerateRoute] callback.
///
/// ```dart
/// void main() {
///   runApp(MaterialApp(
///     home: const MyAppHome(), // becomes the route named '/'
///     routes: <String, WidgetBuilder> {
///       '/a': (BuildContext context) => const MyPage(title: Text('page A')),
///       '/b': (BuildContext context) => const MyPage(title: Text('page B')),
///       '/c': (BuildContext context) => const MyPage(title: Text('page C')),
///     },
///   ));
/// }
/// ```
///
/// To show a route by name:
///
/// ```dart
/// Navigator.pushNamed(context, '/b');
/// ```
///
/// ### Routes can return a value
///
/// When a route is pushed to ask the user for a value, the value can be
/// returned via the [pop] method's result parameter.
///
/// Methods that push a route return a [Future]. The Future resolves when the
/// route is popped and the [Future]'s value is the [pop] method's `result`
/// parameter.
///
/// For example if we wanted to ask the user to press 'OK' to confirm an
/// operation we could `await` the result of [Navigator.push]:
///
/// ```dart
/// bool? value = await Navigator.push(context, MaterialPageRoute<bool>(
///   builder: (BuildContext context) {
///     return Center(
///       child: GestureDetector(
///         child: const Text('OK'),
///         onTap: () { Navigator.pop(context, true); }
///       ),
///     );
///   }
/// ));
/// ```
///
/// If the user presses 'OK' then value will be true. If the user backs
/// out of the route, for example by pressing the Scaffold's back button,
/// the value will be null.
///
/// When a route is used to return a value, the route's type parameter must
/// match the type of [pop]'s result. That's why we've used
/// `MaterialPageRoute<bool>` instead of `MaterialPageRoute<void>` or just
/// `MaterialPageRoute`. (If you prefer to not specify the types, though, that's
/// fine too.)
///
/// ### Popup routes
///
/// Routes don't have to obscure the entire screen. [PopupRoute]s cover the
/// screen with a [ModalRoute.barrierColor] that can be only partially opaque to
/// allow the current screen to show through. Popup routes are "modal" because
/// they block input to the widgets below.
///
/// There are functions which create and show popup routes. For
/// example: [showDialog], [showMenu], and [showModalBottomSheet]. These
/// functions return their pushed route's Future as described above.
/// Callers can await the returned value to take an action when the
/// route is popped, or to discover the route's value.
///
/// There are also widgets which create popup routes, like [PopupMenuButton] and
/// [DropdownButton]. These widgets create internal subclasses of PopupRoute
/// and use the Navigator's push and pop methods to show and dismiss them.
///
/// ### Custom routes
///
/// You can create your own subclass of one of the widget library route classes
/// like [PopupRoute], [ModalRoute], or [PageRoute], to control the animated
/// transition employed to show the route, the color and behavior of the route's
/// modal barrier, and other aspects of the route.
///
/// The [PageRouteBuilder] class makes it possible to define a custom route
/// in terms of callbacks. Here's an example that rotates and fades its child
/// when the route appears or disappears. This route does not obscure the entire
/// screen because it specifies `opaque: false`, just as a popup route does.
///
/// ```dart
/// Navigator.push(context, PageRouteBuilder<void>(
///   opaque: false,
///   pageBuilder: (BuildContext context, _, _) {
///     return const Center(child: Text('My PageRoute'));
///   },
///   transitionsBuilder: (_, Animation<double> animation, _, Widget child) {
///     return FadeTransition(
///       opacity: animation,
///       child: RotationTransition(
///         turns: Tween<double>(begin: 0.5, end: 1.0).animate(animation),
///         child: child,
///       ),
///     );
///   }
/// ));
/// ```
///
/// The page route is built in two parts, the "page" and the
/// "transitions". The page becomes a descendant of the child passed to
/// the `transitionsBuilder` function. Typically the page is only built once,
/// because it doesn't depend on its animation parameters (elided with `_`
/// in this example). The transition is built on every frame
/// for its duration.
///
/// (In this example, `void` is used as the return type for the route, because
/// it does not return a value.)
///
/// ### Nesting Navigators
///
/// An app can use more than one [Navigator]. Nesting one [Navigator] below
/// another [Navigator] can be used to create an "inner journey" such as tabbed
/// navigation, user registration, store checkout, or other independent journeys
/// that represent a subsection of your overall application.
///
/// #### Example
///
/// It is standard practice for iOS apps to use tabbed navigation where each
/// tab maintains its own navigation history. Therefore, each tab has its own
/// [Navigator], creating a kind of "parallel navigation."
///
/// In addition to the parallel navigation of the tabs, it is still possible to
/// launch full-screen pages that completely cover the tabs. For example: an
/// on-boarding flow, or an alert dialog. Therefore, there must exist a "root"
/// [Navigator] that sits above the tab navigation. As a result, each of the
/// tab's [Navigator]s are actually nested [Navigator]s sitting below a single
/// root [Navigator].
///
/// In practice, the nested [Navigator]s for tabbed navigation sit in the
/// [WidgetsApp] and [CupertinoTabView] widgets and do not need to be explicitly
/// created or managed.
///
/// {@tool sample}
/// The following example demonstrates how a nested [Navigator] can be used to
/// present a standalone user registration journey.
///
/// Even though this example uses two [Navigator]s to demonstrate nested
/// [Navigator]s, a similar result is possible using only a single [Navigator].
///
/// Run this example with `flutter run --route=/signup` to start it with
/// the signup flow instead of on the home page.
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.0.dart **
/// {@end-tool}
///
/// [Navigator.of] operates on the nearest ancestor [Navigator] from the given
/// [BuildContext]. Be sure to provide a [BuildContext] below the intended
/// [Navigator], especially in large `build` methods where nested [Navigator]s
/// are created. The [Builder] widget can be used to access a [BuildContext] at
/// a desired location in the widget subtree.
///
/// ### Finding the enclosing route
///
/// In the common case of a modal route, the enclosing route can be obtained
/// from inside a build method using [ModalRoute.of]. To determine if the
/// enclosing route is the active route (e.g. so that controls can be dimmed
/// when the route is not active), the [Route.isCurrent] property can be checked
/// on the returned route.
///
/// ## State Restoration
///
/// If provided with a [restorationScopeId] and when surrounded by a valid
/// [RestorationScope] the [Navigator] will restore its state by recreating
/// the current history stack of [Route]s during state restoration and by
/// restoring the internal state of those [Route]s. However, not all [Route]s
/// on the stack can be restored:
///
///  * [Page]-based routes restore their state if [Page.restorationId] is
///    provided.
///  * [Route]s added with the classic imperative API ([push], [pushNamed], and
///    friends) can never restore their state.
///  * A [Route] added with the restorable imperative API ([restorablePush],
///    [restorablePushNamed], and all other imperative methods with "restorable"
///    in their name) restores its state if all routes below it up to and
///    including the first [Page]-based route below it are restored. If there
///    is no [Page]-based route below it, it only restores its state if all
///    routes below it restore theirs.
///
/// If a [Route] is deemed restorable, the [Navigator] will set its
/// [Route.restorationScopeId] to a non-null value. Routes can use that ID to
/// store and restore their own state. As an example, the [ModalRoute] will
/// use this ID to create a [RestorationScope] for its content widgets. ¿ ˇUÉ€¿ ˇÙ ¿ ˇÙ¿ ˇ˝ Äí/// Creates a widget that maintains a stack-based history of child widgets.
///
/// If the [pages] is not empty, the [onPopPage] must not be null.¿ 	¿ ¿ 
  ¿ $¿ ¿   ¿ =Äà¿ Ω¿ º  ¿ À¿ —¿ –  ¿ ‚E¿ Ë¿ Á  ¿-¿3¿2  ¿G¿M¿L  ¿`D¿f¿e  ¿™'¿∞¿Ø  ¿◊!¿›¿‹  ¿˛,¿¿  ¿0¿6¿5  ¿N¿T¿S  ¿kD¿q¿p  ¿µZ¿ª¿∫  ¿¿¿  &¿  ¿ 5¿ 6¿ &¿ 4¿ '¿ +¿ 3¿ ,¿ =¿ >¿ H¿ ±¿ P¿ v¿¿
¿¿z¿Ä¿ô¿°¿ö¿¢¿£¿Ã¿Î¿Ô¿¿¿(¿)¿¿'¿¿D¿ç¿‚¿4Ü"¿	Q¿	QÖ /// The list of pages with which to populate the history.
///
/// Pages are turned into routes using [Page.createRoute] in a manner
/// analogous to how [Widget]s are turned into [Element]s (and [State]s or
/// [RenderObject]s) using [Widget.createElement] (and
/// [StatefulWidget.createState] or [RenderObjectWidget.createRenderObject]).
///
/// When this list is updated, the new list is compared to the previous
/// list and the set of routes is updated accordingly.
///
/// Some [Route]s do not correspond to [Page] objects, namely, those that are
/// added to the history using the [Navigator] API ([push] and friends). A
/// [Route] that does not correspond to a [Page] object is called a pageless
/// route and is tied to the [Route] that _does_ correspond to a [Page] object
/// that is below it in the history.
///
/// Pages that are added or removed may be animated as controlled by the
/// [transitionDelegate]. If a page is removed that had other pageless routes
/// pushed on top of it using [push] and friends, those pageless routes are
/// also removed with or without animation as determined by the
/// [transitionDelegate].
///
/// To use this API, an [onPopPage] callback must also be provided to properly
/// clean up this list if a page has been popped.
///
/// If [initialRoute] is non-null when the widget is first created, then
/// [onGenerateInitialRoutes] is used to generate routes that are above those
/// corresponding to [pages] in the initial history. ¿	[Ép¿¬¿¬Çø/// This is deprecated and replaced by [onDidRemovePage].
///
/// Called when [pop] is invoked but the current [Route] corresponds to a
/// [Page] found in the [pages] list.
///
/// The `result` argument is the value with which the route is to complete
/// (e.g. the value returned from a dialog).
///
/// This callback is responsible for calling [Route.didPop] and returning
/// whether this pop is successful.
///
/// The [Navigator] widget should be rebuilt with a [pages] list that does not
/// contain the [Page] for the given [Route]. The next time the [pages] list
/// is updated, if the [Page] corresponding to this [Route] is still present,
/// it will be interpreted as a new route to display.¿9¿:¿D¿ß¿J¿n¿–Çî¿U¿UÇM/// Called when the [Route] associated with the given [Page] has been removed
/// from the Navigator.
///
/// This can happen when the route is removed or completed through
/// [Navigator.pop], [Navigator.pushReplacement], or its friends.
///
/// This callback is responsible for removing the given page from the list of
/// [pages].
///
/// The [Navigator] widget should be rebuilt with a [pages] list that does not
/// contain the given page [Page]. The next time the [pages] list
/// is updated, if the given [Page] is still present, it will be interpreted
/// as a new page to display. ¿iÄ€¿2¿2Äû/// The delegate used for deciding how routes transition in or off the screen
/// during the [pages] updates.
///
/// Defaults to [DefaultTransitionDelegate]. ¿IÅÌ¿*¿*Åæ/// The name of the first route to show.
///
/// Defaults to [Navigator.defaultRouteName].
///
/// The value is interpreted according to [onGenerateInitialRoutes], which
/// defaults to [defaultGenerateInitialRoutes].
///
/// Changing the [initialRoute] will have no effect, as it only controls the
/// _initial_ route. To change the route while the application is running, use
/// the static functions on this class, such as [push] or [replace]. ¿;a¿ç¿ç;/// Called to generate a route for a given [RouteSettings]. ¿°ÅÆ¿A¿AÅ{/// Called when [onGenerateRoute] fails to generate a route.
///
/// This callback is typically used for error handling. For example, this
/// callback might always generate a "not found" page that describes the route
/// that wasn't found.
///
/// Unknown routes can arise either from errors in the app or from external
/// requests to push routes, such as from Android intents. ¿TU¿†¿†+/// A list of observers for this navigator. ¿ÆÖt¿¿Ö/// Restoration ID to save and restore the state of the navigator, including
/// its history.
///
/// {@template flutter.widgets.navigator.restorationScopeId}
/// If a restoration ID is provided, the navigator will persist its internal
/// state (including the route history as well as the restorable state of the
/// routes) and restore it during state restoration.
///
/// If no restoration ID is provided, the route history stack will not be
/// restored and state restoration is disabled for the individual routes as
/// well.
///
/// The state is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
/// Within that bucket, the [Navigator] also creates a new [RestorationScope]
/// for its children (the [Route]s).
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
///  * [RestorationMixin], which contains a runnable code sample showcasing
///    state restoration in Flutter.
///  * [Navigator], which explains under the heading "state restoration"
///    how and under what conditions the navigator restores its state.
///  * [Navigator.restorablePush], which includes an example showcasing how
///    to push a restorable route onto the navigator.
/// {@endtemplate} ¿'Én¿{¿{É/// Controls the transfer of focus beyond the first and the last items of a
/// focus scope that defines focus traversal of widgets within a route.
///
/// {@template flutter.widgets.navigator.routeTraversalEdgeBehavior}
/// The focus inside routes installed in the top of the app affects how
/// the app behaves with respect to the platform content surrounding it.
/// For example, on the web, an app is at a minimum surrounded by browser UI,
/// such as the address bar, browser tabs, and more. The user should be able
/// to reach browser UI using normal focus shortcuts. Similarly, if the app
/// is embedded within an `<iframe>` or inside a custom element, it should
/// be able to participate in the overall focus traversal, including elements
/// not rendered by Flutter.
/// {@endtemplate} ¿öÅ/¿§¿§ÄÂ/// Controls the directional transfer of focus beyond the first and the last
/// items of a focus scope that defines focus traversal of widgets within a route.
///
/// {@macro flutter.widgets.navigator.routeTraversalEdgeBehavior} ¿ŒÅ ¿∏¿∏Ä…/// The name for the default route of the application.
///
/// See also:
///
///  * [dart:ui.PlatformDispatcher.defaultRouteName], which reflects the route that the
///    application was started with.¿À¿”Éˆ¿#≤¿#≤É≠/// Called when the widget is created to generate the initial list of [Route]
/// objects if [initialRoute] is not null.
///
/// Defaults to [defaultGenerateInitialRoutes].
///
/// The [NavigatorState] and [initialRoute] will be passed to the callback.
/// The callback must return a list of [Route] objects with which the history
/// will be primed.
///
/// When parsing the initialRoute, if there's any chance that it may
/// contain complex characters, it's best to use the
/// [characters](https://pub.dev/packages/characters) API. This will ensure
/// that extended grapheme clusters and surrogate pairs are treated as single
/// characters by the code, the same way that they appear to the user. For
/// example, the string "üë®‚Äçüë©‚Äçüë¶" appears to the user as a single
/// character and `string.characters.length` intuitively returns 1. On the
/// other hand, `string.length` returns 8, and `string.runes.length` returns
/// 5! ¿#ŒÑx¿(,¿(,Ñ(/// Whether this navigator should report route update message back to the
/// engine when the top-most route changes.
///
/// If the property is set to true, this navigator automatically sends the
/// route update message to the engine when it detects top-most route changes.
/// The messages are used by the web engine to update the browser URL bar.
///
/// If the property is set to true when the [Navigator] is first created,
/// single-entry history mode is requested using
/// [SystemNavigator.selectSingleEntryHistory]. This means this property
/// should not be used at the same time as [PlatformRouteInformationProvider]
/// is used with a [Router] (including when used with [MaterialApp.router],
/// for example).
///
/// If there are multiple navigators in the widget tree, at most one of them
/// can set this property to true (typically, the top-most one created from
/// the [WidgetsApp]). Otherwise, the web engine may receive multiple route
/// update messages from different navigators and fail to update the URL
/// bar.
///
/// Defaults to false. ¿(KÄﬂ¿)¿)Äª/// {@macro flutter.material.Material.clipBehavior}
///
/// In cases where clipping is not desired, consider setting this property to
/// [Clip.none].
///
/// Defaults to [Clip.hardEdge]. ¿)/Å1¿*T¿*TÅ/// Whether or not the navigator and it's new topmost route should request focus
/// when the new route is pushed onto the navigator.
///
/// If [Route.requestFocus] is set on the topmost route, that will take precedence
/// over this value.
///
/// Defaults to true.   ¿*eåÄ¿6$¿6$ä⁄/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.pushNamed}
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
///
/// To use [pushNamed], an [Navigator.onGenerateRoute] callback must be
/// provided,
/// {@endtemplate}
///
/// {@template flutter.widgets.navigator.pushNamed.returnValue}
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.pushNamed}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object can be passed as `arguments` (e.g. a
/// [String], [int], or an instance of a custom `MyRouteArguments` class).
/// Often, a [Map] is used to pass key-value pairs.
///
/// The `arguments` may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _didPushButton() {
///   Navigator.pushNamed(context, '/settings');
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass additional `arguments` to the
/// route:
///
/// ```dart
/// void _showBerlinWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Berlin',
///       'country': 'Germany',
///     },
///   );
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass a custom Object to the route:
///
/// ```dart
/// class WeatherRouteArguments {
///   WeatherRouteArguments({ required this.city, required this.country });
///   final String city;
///   final String country;
///
///   bool get isGermanCapital {
///     return country == 'Germany' && city == 'Berlin';
///   }
/// }
///
/// void _showWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: WeatherRouteArguments(city: 'Berlin', country: 'Germany'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿6.¿6.¿6.¿6F¿6T¿6S  ¿6`¿6h¿6g  ¿6x¿6Å¿6Ä  ¿5˛¿5ˇ¿6Èáƒ¿=ÿ¿=ÿÜp/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.restorablePushNamed}
/// Unlike [Route]s pushed via [pushNamed], [Route]s pushed with this method
/// are restored during state restoration according to the rules outlined
/// in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.arguments}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object that is serializable via the
/// [StandardMessageCodec] can be passed as `arguments`. Often, a Map is used
/// to pass key-value pairs.
///
/// The arguments may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.returnValue}
/// The method returns an opaque ID for the pushed route that can be used by
/// the [RestorableRouteFuture] to gain access to the actual [Route] object
/// added to the navigator and its return value. You can ignore the return
/// value of this method, if you do not care about the route object or the
/// route's return value.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _showParisWeather() {
///   Navigator.restorablePushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Paris',
///       'country': 'France',
///     },
///   );
/// }
/// ```
/// {@end-tool}¿=Ï¿=Ï¿=Ï¿>¿>¿>  ¿>¿>&¿>%  ¿>6¿>?¿>>  ¿=∂¿=∑¿>±ä9¿GŒ¿GŒàé/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacementNamed}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the old route (`TO`).
///
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]). The removed
/// route's exit animation is not run (see [popAndPushNamed] for a variant
/// that animates the removed route).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
///
/// To use [pushReplacementNamed], a [Navigator.onGenerateRoute] callback must
/// be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToBrightness() {
///   Navigator.pushReplacementNamed(context, '/settings/brightness');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///    can be restored during state restoration.¿G„¿G„¿G„¿Gˆ¿Gˆ¿Gˆ¿H¿H¿H  ¿H)¿H1¿H0  ¿HA
¿HF¿HE  ¿HQ¿HZ¿HY  ¿G®¿G©¿HÓÖL¿M
¿M
É≈/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacementNamed}
/// Unlike [Route]s pushed via [pushReplacementNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToAudioVolume() {
///   Navigator.restorablePushReplacementNamed(context, '/settings/volume');
/// }
/// ```
/// {@end-tool}¿M)¿M)¿M)¿M<¿M<¿M<¿MU¿Mc¿Mb  ¿Mo¿Mw¿Mv  ¿Má
¿Må¿Mã  ¿Mó¿M†¿Mü  ¿LË¿LÈ¿N>àè¿Uª¿UªÜ˙/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.popAndPushNamed}
/// The popping of the previous route is handled as per [pop].
///
/// The new route's name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route, the old route, and the route below the old route (if any)
/// are all notified (see [Route.didPop], [Route.didComplete],
/// [Route.didPopNext], [Route.didPush], and [Route.didChangeNext]). If the
/// [Navigator] has any [Navigator.observers], they will be notified as well
/// (see [NavigatorObserver.didPop] and [NavigatorObserver.didPush]). The
/// animations for the pop and the push are performed simultaneously, so the
/// route below may be briefly visible even if both the old route and the new
/// route are opaque (see [TransitionRoute.opaque]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the return value type of the old route.
///
/// To use [popAndPushNamed], a [Navigator.onGenerateRoute] callback must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectAccessibility() {
///   Navigator.popAndPushNamed(context, '/settings/accessibility');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿UÀ¿UÀ¿UÀ¿Uﬁ¿Uﬁ¿Uﬁ¿U˜¿V¿V  ¿V¿V¿V  ¿V)
¿V.¿V-  ¿V9¿VB¿VA  ¿Uï¿Uñ¿V—Ñ ¿Zu¿ZuÉO/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.restorablePopAndPushNamed}
/// Unlike [Route]s pushed via [popAndPushNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectNetwork() {
///   Navigator.restorablePopAndPushNamed(context, '/settings/network');
/// }
/// ```
/// {@end-tool}¿Zè¿Zè¿Zè¿Z¢¿Z¢¿Z¢¿Zª¿Z…¿Z»  ¿Z’¿Z›¿Z‹  ¿ZÌ
¿ZÚ¿ZÒ  ¿Z˝¿[¿[  ¿ZS¿ZT¿[üäo¿dı¿dıàª/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushNamedAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The new route's name (`routeName`) will be passed to the
/// [Navigator.onGenerateRoute] callback. The returned route will be pushed
/// into the navigator.
///
/// The new route and the route below the bottommost removed route (which
/// becomes the route below the new route) are notified (see [Route.didPush]
/// and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush] and [NavigatorObserver.didRemove]). The
/// removed routes are disposed, once the new route has finished animating,
/// and the futures that had been returned from pushing those routes
/// will complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
///
/// To use [pushNamedAndRemoveUntil], an [Navigator.onGenerateRoute] callback
/// must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToCalendar() {
///   Navigator.pushNamedAndRemoveUntil(context, '/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿e¿e¿e¿e%¿e3¿e2  ¿e?¿eG¿eF  ¿eX¿eh¿eg  ¿ex¿eÅ¿eÄ  ¿dœ¿d–¿fÖA¿j&¿j&ÉΩ/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
/// Unlike [Route]s pushed via [pushNamedAndRemoveUntil], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToOverview() {
///   Navigator.restorablePushNamedAndRemoveUntil(context, '/overview', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿jH¿jH¿jH¿j`¿jn¿jm  ¿jz¿jÇ¿jÅ  ¿jì¿j£¿j¢  ¿j≥¿jº¿jª  ¿j¿j¿kWÑ˝¿o„¿o„Ñ/// Push the given route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.push}
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openMyPage() {
///   Navigator.push<void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿oË¿oË¿oË¿o˚¿p	¿p  ¿p¿p¿p  ¿oΩ¿oæ¿pXÜi¿u‡¿u‡Ö)/// Push a new route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.restorablePush}
/// Unlike [Route]s pushed via [push], [Route]s pushed with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@template flutter.widgets.Navigator.restorablePush}
/// The method takes a [RestorableRouteBuilder] as argument, which must be a
/// _static_ function annotated with `@pragma('vm:entry-point')`. It must
/// instantiate and return a new [Route] object that will be added to the
/// navigator. The provided `arguments` object is passed to the
/// `routeBuilder`. The navigator calls the static `routeBuilder` function
/// again during state restoration to re-create the route object.
///
/// Any object that is serializable via the [StandardMessageCodec] can be
/// passed as `arguments`. Often, a Map is used to pass key-value pairs.
/// {@endtemplate}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push.0.dart **
/// {@end-tool}¿uÔ¿uÔ¿uÔ¿v¿v¿v  ¿v!&¿v<¿v;  ¿vO¿vX¿vW  ¿uæ¿uø¿v≈àö¿~á¿~áá=/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the given route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacement}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route will
/// complete with `result`. Routes such as dialogs or popup menus typically
/// use this mechanism to return the value selected by the user to the widget
/// that created their route. The type of `result`, if provided, must match
/// the type argument of the class of the old route (`TO`).
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _completeLogin() {
///   Navigator.pushReplacement<void, void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿~ó¿~ó¿~ó¿~™¿~™¿~™¿~√¿~—¿~–  ¿~›¿~Á¿~Ê  ¿~ˆ
¿~˚¿~˙  ¿~a¿~b¿cÑ¸¿É ¿É Ép/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing a new route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacement}
/// Unlike [Route]s pushed via [pushReplacement], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_replacement.0.dart **
/// {@end-tool}¿É:¿É:¿É:¿ÉM¿ÉM¿ÉM¿Éf¿Ét¿És  ¿ÉÄ&¿Éõ¿Éö  ¿ÉÆ
¿É≥¿É≤  ¿Éæ¿É«¿É∆  ¿Ç˛¿Çˇ¿Ñcâm¿ç¿çà/// Push the given route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The newly pushed route and its preceding route are notified for
/// [Route.didPush]. After removal, the new route and its new preceding route,
/// (the route below the bottommost removed route) are notified through
/// [Route.didChangeNext]). If the [Navigator] has any [Navigator.observers],
/// they will be notified as well (see [NavigatorObserver.didPush] and
/// [NavigatorObserver.didRemove]). The removed routes are disposed of and
/// notified, once the new route has finished animating. The futures that had
/// been returned from pushing those routes will complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _finishAccountCreation() {
///   Navigator.pushAndRemoveUntil<void>(
///     context,
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿ç¿ç¿ç¿ç/¿ç=¿ç<  ¿çI¿çS¿çR  ¿ç`¿çp¿ço  ¿åﬁ¿åﬂ¿ç‘Ñ‚¿ëz¿ëzÉY/// Push a new route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushAndRemoveUntil}
/// Unlike [Route]s pushed via [pushAndRemoveUntil], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿ëó¿ëó¿ëó¿ëØ¿ëΩ¿ëº  ¿ë…)¿ë‰¿ë„  ¿ë¯¿í¿í  ¿í¿í!¿í   ¿ëX¿ëY¿í∫ÜÚ¿òœ¿òœÖ∂/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.replace}
/// The old route must not be currently visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed and completed with a `null` value.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed with its
/// future completed.
///
/// This can be useful in combination with [removeRouteBelow] when building a
/// non-linear user experience.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿ò◊¿ò◊¿ò◊¿òÔ¿ò˝¿ò¸  ¿ô ¿ô$¿ô#  ¿ô1¿ôD¿ôC  ¿òØ¿ò∞¿ô∞ÉŸ¿ú,¿ú,Ç=/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.restorableReplace}
/// Unlike [Route]s added via [replace], [Route]s added with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿ú>¿ú>¿ú>¿úV¿úd¿úc  ¿úr ¿úã¿úä  ¿úò2¿úº¿úª  ¿ú–¿úŸ¿úÿ  ¿ú
¿ú¿ùçÜ∏¿£K¿£KÖc/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.replaceRouteBelow}
/// The old route must not be current visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed and completed with a `null` value.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed with its
/// future completed.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿£]¿£]¿£]¿£u¿£É¿£Ç  ¿£ë#¿£™¿£©  ¿£∫¿£Õ¿£Ã  ¿£+¿£,¿§IÑg¿ß6¿ß6Ç¨/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.restorableReplaceRouteBelow}
/// Unlike [Route]s added via [restorableReplaceRouteBelow], [Route]s added
/// with this method are restored during state restoration according to the
/// rules outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿ßR¿ßR¿ßR¿ßj¿ßx¿ßw  ¿ßÜ#¿ßü¿ßû  ¿ßØ2¿ß”¿ß“  ¿ßÁ¿ß¿ßÔ  ¿ß¿ß¿®¥É/¿´K¿´KÇf/// Whether the navigator that most tightly encloses the given context can be
/// popped.
///
/// {@template flutter.widgets.navigator.canPop}
/// The initial route cannot be popped off the navigator, which implies that
/// this function returns true only if popping the navigator would not remove
/// the initial route.
///
/// If there is no [Navigator] in scope, returns false.
///
/// Does not consider anything that might externally prevent popping, such as
/// [PopEntry].
/// {@endtemplate}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false. ¿´R¿´`¿´_   ¿´ÁÜá¿±Ù¿±ÙÖ¶/// Consults the current route's [Route.popDisposition] getter or
/// [Route.willPop] method, and acts accordingly, potentially popping the
/// route as a result; returns whether the pop request should be considered
/// handled.
///
/// {@template flutter.widgets.navigator.maybePop}
/// If the [RoutePopDisposition] is [RoutePopDisposition.pop], then the [pop]
/// method is called, and this method returns true, indicating that it handled
/// the pop request.
///
/// If the [RoutePopDisposition] is [RoutePopDisposition.doNotPop], then this
/// method returns true, but does not do anything beyond that.
///
/// If the [RoutePopDisposition] is [RoutePopDisposition.bubble], then this
/// method returns false, and the caller is responsible for sending the
/// request to the containing scope (e.g. by closing the application).
///
/// This method is typically called for a user-initiated [pop]. For example on
/// Android it's called by the binding for the system's back button.
///
/// The `T` type argument is the type of the return value of the current
/// route. (Typically this isn't known; consider specifying `dynamic` or
/// `Null`.)
/// {@endtemplate}
///
/// See also:
///
///  * [Form], which provides an `onWillPop` callback that enables the form
///    to veto a [pop] initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedWillPopCallback` that can be used
///    to define the route's `willPop` method.¿±˝¿±˝¿±˝¿≤¿≤¿≤  ¿≤'	¿≤+¿≤*  ¿±Ã¿±Õ¿≤ráä¿πì¿πìÜ¶/// Pop the top-most route off the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.pop}
/// The current route's [Route.didPop] method is called first. If that method
/// returns false, then the route remains in the [Navigator]'s history (the
/// route is expected to have popped some internal state; see e.g.
/// [LocalHistoryRoute]). Otherwise, the rest of this description applies.
///
/// If non-null, `result` will be used as the result of the route that is
/// popped; the future that had been returned from pushing the popped route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the popped route (`T`).
///
/// The popped route and the route below it are notified (see [Route.didPop],
/// [Route.didComplete], and [Route.didPopNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPop]).
///
/// The `T` type argument is the type of the return value of the popped route.
///
/// The type of `result`, if provided, must match the type argument of the
/// class of the popped route (`T`).
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _close() {
///   Navigator.pop(context);
/// }
/// ```
/// {@end-tool}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _accept() {
///   Navigator.pop(context, true); // dialog returns true
/// }
/// ```¿πó¿πó¿πó¿π™¿π∏¿π∑  ¿π¡	¿π≈¿πƒ  ¿πs¿πt¿∫ É•¿Ω8¿Ω8Ç˘/// Calls [pop] repeatedly on the navigator that most tightly encloses the
/// given context until the predicate returns true.
///
/// {@template flutter.widgets.navigator.popUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To pop until a route with a certain name, use the [RoutePredicate]
/// returned from [ModalRoute.withName].
///
/// The routes are closed with null as their `return` value.
///
/// See [pop] for more details of the semantics of popping a route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _logout() {
///   Navigator.popUntil(context, ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿ΩA¿ΩO¿ΩN  ¿ΩW¿Ωg¿Ωf   ¿Ω©Ü:¿√L¿√LÖF/// Immediately remove `route` from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it.
///
/// {@template flutter.widgets.navigator.removeRoute}
/// No animations are run as a result of this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed with its
/// future completed.
///
/// The given `route` must be in the history; this method will throw an
/// exception if it is not.
///
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing the removed route
/// will complete with `result`. If provided, must match the type argument of
/// the class of the popped route (`T`).
///
/// The `T` type argument is the type of the return value of the popped route.
///
/// The type of `result`, if provided, must match the type argument of the
/// class of the removed route (`T`).
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate}
///
/// This method is used, for example, to instantly dismiss dropdown menus that
/// are up when the screen's orientation changes.¿√X¿√X¿√X¿√k¿√y¿√x  ¿√Å¿√ã¿√ä  ¿√í	¿√ñ¿√ï  ¿√,¿√-¿√ÁÜU¿…}¿…}Ö=/// Immediately remove a route from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it. The route to be removed is the
/// one below the given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.removeRouteBelow}
/// No animations are run as a result of this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed with its
/// future completed.
///
/// The given `anchorRoute` must be in the history and must have a route below
/// it; this method will throw an exception if it is not or does not.
///
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing the removed route
/// will complete with `result`. If provided, must match the type argument of
/// the class of the popped route (`T`).
///
/// The `T` type argument is the type of the return value of the popped route.
///
/// The type of `result`, if provided, must match the type argument of the
/// class of the removed route (`T`).
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate}¿…é¿…é¿…é¿…¶¿…¥¿…≥  ¿…¿¿… ¿……  ¿…‹	¿…‡¿…ﬂ  ¿…]¿…^¿ @Ö ¿Õ¿ÕÇå/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// Navigator.of(context)
///   ..pop()
///   ..pop()
///   ..pushNamed('/settings');
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// If there is no [Navigator] in the given `context`, this function will throw
/// a [FlutterError] in debug mode, and an exception in release mode.
///
/// This method can be expensive (it walks the element tree). ¿Õ¿Õ¿Õ  ¿Õ%¿Õ+¿Õ*  ¿Õ:¿–Ñl¿”¿”Ç≥/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Typical usage is as follows:
///
/// ```dart
/// NavigatorState? navigatorState = Navigator.maybeOf(context);
/// if (navigatorState != null) {
///   navigatorState
///     ..pop()
///     ..pop()
///     ..pushNamed('/settings');
/// }
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// Will return null if there is no ancestor [Navigator] in the `context`.
///
/// This method can be expensive (it walks the element tree). ¿”¿”¿”  ¿”$¿”*¿”)  ¿”9¿‘~çß¿◊}¿◊}Ç∆/// Turn a route name into a set of [Route] objects.
///
/// This is the default value of [onGenerateInitialRoutes], which is used if
/// [initialRoute] is not null.
///
/// If this string starts with a `/` character and has multiple `/` characters
/// in it, then the string is split on those characters and substrings from
/// the start of the string up to each such character are, in turn, used as
/// routes to push.
///
/// For example, if the route `/stocks/HOOLI` was used as the [initialRoute],
/// then the [Navigator] would push the following routes on startup: `/`,
/// `/stocks`, `/stocks/HOOLI`. This enables deep linking while allowing the
/// application to maintain a predictable route history. ¿◊ü¿◊Ø¿◊Æ  ¿◊Ω¿◊≈¿◊ƒ   ¿‚)=¿‚D¿‚D   ¿‚)¿‚* ¿ÒRU¿ÒR¿Òu/// Placeholder for a route. ¿Òã¿Òë ¿Òë¿Ò¢         ¿Ò©º¬¿Ò©¿ÒØ  ¿Ò›ÇT¿Ò› ¿Ò›¿ÒË  ¿ÒÓ
¿ÒÙ¿ÒÛ  ¿Ú %¿Ú¿Ú  ¿Ú+¿Ú:¿Ú9  ¿ÚH¿ÚN¿ÚM  .¿Úl¿Úr¿Úó¿Ú~¿Ús¿Út¿Úê¿ÚÅ¿ÚÜ¿Úá¿Úì¿Ú°¿Úß¿Ûø¿Û¿ÛC¿Û¿Ú⁄¿Úø¿Ú≤¿Ú¬¿Ú—¿Ú“¿Ú˜¿ÚÍ¿Ú˙¿Û	¿Û
¿Û+¿Û¿Û.¿Û=¿Û>¿Û`¿ÛS¿Ûc¿Ûr¿Ûs¿Ûú¿Ûè¿Ûü¿ÛÆ¿ÛØ¿Û÷¿Û…¿Ûÿ¿Ù5&¿ÙV¿ÙV ¿Ù5¿Ù6¿Ù_5¿Ù~¿Ù~  ¿Ùò¿Ù£¿Ù£  ¿Ù±Äß¿ı=¿ı=v/// The limit this route entry will attempt to pop in the case of route being
/// remove as a result of a page update.¿ıU¿ı]A¿ı|¿ı| ¿ıã¿ıú¿ıù¿ı£¿ı≥¿ı≥  ¿ı√B¿ı÷¿ı÷ ¿ı˘¿ˆ5w¿ˆV¿ˆV ¿ˆu¿ˆÇ¿ˆî¿ˆÉ¿ˆï¿ˆ´¿ˆõ¿ˆ’8¿ˆË¿ˆË ¿˜¿˜9¿˜>¿˜>  ¿¿¿»¿»  ¿U$¿Z¿Z ¿u¿%◊)¿%‹¿%‹ ¿%˚	¿˜áÇw¿¯)¿¯)Äë/// Restoration ID to be used for the encapsulating route when restoration is
/// enabled for it or null if restoration cannot be enabled for it.   ¿RÄî¿[¿[    ¿ÍÄí¿Û¿Û    ¿ ÄU¿ â¿ â    ¿ ŸÄ£¿ ‚¿ ‚    ¿!ÄÄ®¿!â¿!â    ¿%"]¿%7¿%7   ¿%"¿%#¿%ÉQ¿%ò¿%ò   ¿%É¿%Ñ¿-çF¿-ñ¿-ñ    ¿-÷Äì¿-⁄¿-⁄  ¿-Ì
¿-Û¿-Ú   ¿˙Ä˚¿˙¿˙  ¿˙¿˙$¿˙#   ¿˚ÅA¿˚¿˚  ¿˚!¿˚*¿˚)  ¿˚4(¿˚N¿˚M   ¿¸Fá¶¿¸K¿¸K  ¿¸\!¿¸u¿¸t  ¿¸É¿¸í¿¸ë  ¿¸°!¿¸ª¿¸∫  ¿¸»(¿¸‚¿¸·   ¿Ñò¿ı¿ı  ¿¿¿   ¿åÑ¿	¿¿	¿Å /// Process the to-be-popped route.
///
/// A route can be marked for pop by transition delegate or Navigator.pop,
/// this method actually pops the route by calling Route.didPop.
///
/// Returns true if the route is popped; otherwise, returns false if the route
/// refuses to be popped. ¿	À!¿	‰¿	„  ¿	Ó(¿
¿
   ¿Ä’¿¿    ¿ËÅ|¿Ì¿Ì  ¿!¿¿  ¿((¿B¿A   ¿hÅT¿m¿m  ¿u!¿é¿ç  ¿ò¿ß¿¶   ¿⁄w¿ﬂ¿ﬂ ¿„¿„¿„¿Ê	¿Í¿È   ¿±Å˚¿∂¿∂ ¿ø¿ø¿ø¿¬¿≈¿ƒ  ¿Õ¿”¿“  ¿ﬂ¿∞ÄÅ¿µ¿µ    ¿5Åw¿Ê¿ÊÄ£/// Disposes this route entry and its [route] immediately.
///
/// This method does not wait for the widget subtree of the [route] to unmount
/// before disposing.   ¿∞âû¿Û¿ÛÅ//// Disposes this route entry and its [route].
///
/// This method waits for the widget subtree of the [route] to unmount before
/// disposing. If subtree is already unmounted, this method calls
/// [forcedDispose] immediately.
///
/// Use [forcedDispose] if the [route] need to be disposed immediately.   ¿",Å]¿"1¿"1  ¿"L¿"]¿"\   ¿#çE¿#ô¿#ô  ¿#¨¿#π¿#∏   ¿#’u¿#·¿#·  ¿$	¿$¿$   ¿$MM¿$Y¿$Y  ¿$p¿$}¿$|   ¿$ûÄÄ¿$∫¿$∫  ¿$À¿$€¿$⁄   ¿&G¿&
¿&
    ¿&PÅI¿&a¿&a   ¿&P¿&Q¿'ùÅF¿'Æ¿'Æ   ¿'ù¿'û¿(ÁÉ¿(¯¿(¯  ¿)¿)¿)  ¿(Á¿(Ë¿+ÒÅò¿,¿,  ¿,¿,¿,  ¿+Ò¿+Ú ¿.mÄ‚¿.m¿.|  ¿.ñ>¿.ñ ¿.ñ¿.´  ¿.¨¿.≤¿.±  ¿.ø¿.≈¿.ƒ   ¿.◊!¿.Ï¿.Ï  ¿.¸$¿/¿/    ¿/%(¿/*¿/*  ¿/1¿/D¿/C    ¿/QÄ˘¿/Q¿/W  ¿/ìD¿/ì ¿/ì¿/¨  ¿/≠¿/¥¿/≥  ¿/¡¿/»¿/«      ¿/€m¿/Ï¿/Ï  ¿/Û¿0¿0  ¿/€¿/‹ ¿0LÄˆ¿0L¿0R  ¿0çC¿0ç ¿0ç¿0•  ¿0¶¿0≠¿0¨  ¿0∫¿0¡¿0¿      ¿0‘l¿0Â¿0Â  ¿0Ï¿0ˇ¿0˛  ¿0‘¿0’ ¿1DÄˇ¿1D¿1J  ¿1àF¿1à ¿1à¿1£  ¿1§¿1´¿1™  ¿1∏¿1ø¿1æ      ¿1“o¿1„¿1„  ¿1Í¿1˝¿1¸  ¿1“¿1” ¿2EÅ¿2E¿2K  ¿2äG¿2ä ¿2ä¿2¶  ¿2ß¿2Æ¿2≠  ¿2ª¿2¬¿2¡      ¿2’ÄÑ¿2Ê¿2Ê  ¿2Ì¿3 ¿2ˇ  ¿2’¿2÷ ¿3†Ö˝¿3†¿4IÄ¢/// A collection of _RouteEntries representing a navigation history.
///
/// Acts as a ChangeNotifier and notifies after its List of _RouteEntries is
/// mutated. ¿4àÄ£¿4± ¿4±¿4π &/// Creates an instance of [_History].  ¿5/0¿5G¿5G ¿5]¿5^¿5P¿5\¿5Q¿9P¿9,¿9,   ¿9¿9 	¿5dj¿5h¿5h  ¿5s¿5à¿5á  ¿5é¿5ì¿5í  ¿5ö¿5“S¿5◊¿5◊  ¿5€¿5Ë¿5Á   ¿6)Äå¿6.¿6.  ¿65¿6L¿6K   ¿6πÄé¿6æ¿6æ    ¿7Kk¿7P¿7P  ¿7W	¿7\¿7[  ¿7b¿7o¿7n   ¿7∫ÄÑ¿7∆¿7∆  ¿7œ	¿7‘¿7”   ¿8Bz¿8N¿8N    ¿8¿B¿8’¿8’  ¿8ÿ	¿8›¿8‹   ¿9ZA¿9m¿9m   ¿9Z¿9[ ¿9ü¿.+¿9ü¿:t/// The state for a [Navigator] widget.
///
/// A reference to this class can be obtained by calling [Navigator.of].  ¿:v(¿:ì¿:ì  ¿:¢$¿:±¿:± ¿:º¿:ƒ¿:≈¿:ÀÅœ¿<i¿<iÅv/// A set for entries that are waiting to dispose until their subtrees are
/// disposed.
///
/// These entries are not considered to be in the _history and will usually
/// remove themselves from this set once they can dispose.
///
/// The navigator keep track of these entries so that, in case the navigator
/// itself is disposed, it can dispose these entries immediately.¿<ò¿<ô¿<ã¿<ó¿<å¿<û@¿<µ¿<µ ¿<Ã¿<‹¿<›¿<‚[¿=¿= ¿=¿=$¿=:¿=%¿=;¿=<¿=A[¿=d¿=d ¿=~¿=É¿=ô¿=Ñ¿=ö¿=õ¿=°~¿=Ò¿=Ò=/// The [FocusNode] for the [Focus] that encloses the routes.¿=˝¿>¿>¿>¿>¿>¿>$¿>)¿>) ¿>8¿>Ä(¿>ê¿>ê  ¿>≠0¿> ¿>   ¿KÏS¿L¿L ¿L*¿L7¿L;¿L8¿L<¿L>¿L=¿rÛ¿s ¿s   ¿s¿s¿s  ¿s9¿s>¿s> ¿sS¿°≥¿°∏¿°∏ ¿°À¿Q'$¿Q+¿Q+ ¿QJ¿SCÄ¢¿S´¿S´K/// Notifies its listeners if the value of [userGestureInProgress] changes.¿SÀ¿Sÿ¿S›¿SŸ¿Sﬁ¿S‰¿Sﬂ¿Y(¿Y¿Y ¿Y,¿Y-¿Y'¿Y+¿Y(¿>‚C¿>Î¿>Î    ¿LDV¿LL¿LL    ¿WËC¿X ¿X    ¿WË¿WÈ¿q÷y¿r+¿r+@/// The overlay this navigator uses for its visual presentation.   ¿rSÄú¿rn¿rn    ¿P‰@¿PÏ¿PÏ    ¿QÅO¿S¿SÄ˙/// Whether a route is currently being manipulated by the user, e.g.
/// as during an iOS back gesture.
///
/// See also:
///
///  * [userGestureInProgressNotifier], which notifies its listeners if
///    the value of [userGestureInProgress] changes.   ¿QOÄù¿QS¿QS  ¿Qk	¿Qp¿Qo   A¿?)ÑÉ¿?.¿?.    ¿C∞É^¿Cµ¿Cµ    ¿GÉú¿G0¿G0   ¿G¿G¿G¿G ¿J‰Ä≈¿JÈ¿JÈ    ¿LûäM¿Lº¿Lº  ¿L…¿L›¿L‹  ¿LÁ¿LÌ¿LÏ  ¿Lû¿Lü¿L´¿L¨¿VÔÄı¿W¿W  ¿W¿W1¿W0  ¿VÔ¿V¿V¸¿V˝¿X/Å4¿XM¿XM   ¿X/¿X0¿X<¿X=¿YgÅJ¿Y§¿Y§5/// Dispose all lingering router entries immediately.   ¿ZµÅ¿Z¡¿Z¡  ¿Z‘¿Z·¿Z‡  ¿ZË¿Z˜¿Zˆ   ¿[“ä¿[◊¿[◊  ¿[Ì!¿[˛¿[˝   ¿eÎÄÚ¿e¿e    ¿f·Ñ“¿fˇ¿fˇ  ¿g¿g¿g  ¿f·¿f‚¿fÓ¿fÔ¿k∑Åf¿kº¿kº    ¿m!Ä˘¿m?¿m?   ¿m!¿m"¿m.¿m/¿nÅ¿n<¿n<   ¿n¿n¿n+¿n,¿o1Ç°¿oO¿oO   ¿o1¿o2¿o>¿o?¿s\ÆS¿sa¿sa    ¿°’öﬂ¿°⁄¿°⁄  ¿°¿°ˆ¿°ı  ¿¢¿º∏Ç;¿ºΩ¿ºΩ    ¿æ˜É»¿æ¸¿æ¸    ¿¬√Ä¨¿¬–¿¬–  ¿¬‡	¿¬Â¿¬‰  ¿¬Î¿√¿√    ¿√sÄ¶¿√w¿√w  ¿√á	¿√å¿√ã  ¿√í¿√®¿√ß   ¿ƒÄÊ¿ƒ*¿ƒ*  ¿ƒ9	¿ƒ>¿ƒ=  ¿ƒD¿ƒZ¿ƒY   ¿≈à—¿≈¿≈ ¿≈¿≈¿≈¿≈!¿≈)¿≈(  ¿≈/¿≈A¿≈@  ¿≈K¿≈Q¿≈P  ¿≈\¿Õ‹Ç‡¿–,¿–,Ç/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _aaronBurrSir() {
///   navigator.pushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿–6¿–6¿–6¿–I¿–Q¿–P  ¿–\¿–e¿–d  ¿–¿–¿–¿Ñ9¿“Ì¿“ÌÅÈ/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openDetails() {
///   navigator.restorablePushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿”¿”¿”¿”¿”¿”  ¿”'¿”0¿”/  ¿““¿“”¿‘˝Ñ¿ÿ¿ÿÇ¥/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startBike() {
///   navigator.pushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///  can be restored during state restoration.¿ÿ¿ÿ¿ÿ¿ÿ+¿ÿ+¿ÿ+¿ÿD¿ÿL¿ÿK  ¿ÿ\
¿ÿa¿ÿ`  ¿ÿl¿ÿu¿ÿt  ¿◊‰¿◊Â¿ŸÖ<¿€ﬂ¿€ﬂÇë/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startCar() {
///   navigator.restorablePushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}¿€˛¿€˛¿€˛¿‹¿‹¿‹¿‹*¿‹2¿‹1  ¿‹B
¿‹G¿‹F  ¿‹R¿‹[¿‹Z  ¿€ƒ¿€≈¿ﬁFÉ[¿‡—¿‡—Ç;/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _begin() {
///   navigator.popAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿‡·¿‡·¿‡·¿‡Ù¿‡Ù¿‡Ù¿·¿·¿·  ¿·%
¿·*¿·)  ¿·5¿·>¿·=  ¿‡≤¿‡≥¿·•ÉD¿‰¿‰Ç/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.restorablePopAndPushNamed}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _end() {
///   navigator.restorablePopAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿‰"¿‰"¿‰"¿‰5¿‰5¿‰5¿‰N¿‰V¿‰U  ¿‰f
¿‰k¿‰j  ¿‰v¿‰¿‰~  ¿„Ì¿„Ó¿‰ÌÉÈ¿ÁÌ¿ÁÌÇ∞/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _handleOpenCalendar() {
///   navigator.pushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿Ë¿Ë¿Ë¿Ë¿Ë%¿Ë$  ¿Ë6¿ËF¿ËE  ¿ËV¿Ë_¿Ë^  ¿ÁŒ¿Áœ¿Ë⁄Ö9¿ÎÆ¿ÎÆÇé/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openCalendar() {
///   navigator.restorablePushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿Î–¿Î–¿Î–¿ÎË¿Î¿ÎÔ  ¿Ï¿Ï¿Ï  ¿Ï!¿Ï*¿Ï)  ¿Îì¿Îî¿ÓÉ¿ê¿êÇ'/// Push the given route onto the navigator.
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openPage() {
///   navigator.push<void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿ï¿ï¿ï¿®¿≤¿±  ¿q¿r¿Ò4ÅS¿Ò9¿Ò9  ¿ÒP¿ÒZ¿ÒY   ¿ÚãÑµ¿Ùâ¿ÙâÅƒ/// Push a new route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePush}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push.0.dart **
/// {@end-tool}¿Ùò¿Ùò¿Ùò¿Ù∞&¿ÙÀ¿Ù   ¿Ùﬁ¿ÙÁ¿ÙÊ  ¿Ùn¿Ùo¿˜DÅê¿˜I¿˜I  ¿˜T¿˜a¿˜`   ¿¯ÿÑ˛¿¯›¿¯›  ¿¯Ó¿¯ˇ¿¯˛   ¿˝⁄Ñi¿	¿	ÇŸ/// Replace the current route of the navigator by pushing the given route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doOpenPage() {
///   navigator.pushReplacement<void, void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿¿¿¿,¿,¿,¿E¿O¿N  ¿^
¿c¿b  ¿ Í¿ Î¿GÖù¿‰¿‰Ç_/// Replace the current route of the navigator by pushing a new route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacement}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_replacement.0.dart **
/// {@end-tool}¿˛¿˛¿˛¿¿¿¿*&¿E¿D  ¿X
¿]¿\  ¿h¿q¿p  ¿…¿ ¿ËÇπ¿Ì¿Ì ¿¿¿¿¿$¿#  ¿*
¿/¿.   ¿
•Ñe¿∑¿∑Çæ/// Push the given route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetAndOpenPage() {
///   navigator.pushAndRemoveUntil<void>(
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿ ¿ ¿ ¿›¿Á¿Ê  ¿¿ ¿ˇ  ¿ò¿ô¿ÖÇ¿ã¿ãÇA/// Push a new route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿®¿®¿®¿¿)¿€¿⁄  ¿Ô¿ˇ¿˛  ¿¿¿  ¿p¿q¿îÇª¿ô¿ô  ¿≤¿ø¿æ  ¿≈¿’¿‘   ¿SÇŸ¿¿Åá/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.replace}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿¿¿¿$ ¿=¿<  ¿F¿Y¿X  ¿Ô¿¿0ÑÑ¿ä¿äÅ,/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.restorableReplace}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿ú¿ú¿ú¿µ ¿Œ¿Õ  ¿€2¿ˇ¿˛  ¿¿¿  ¿o¿p¿∏Éü¿Ω¿Ω  ¿À¿ÿ¿◊  ¿ﬁ¿Ó¿Ì   ¿"[É/¿$3¿$3Å®/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿$E¿$E¿$E¿$^#¿$w¿$v  ¿$á¿$ö¿$ô  ¿$¿$¿%éÑ˘¿'E¿'EÅá/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.restorableReplaceRouteBelow}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿'a¿'a¿'a¿'z#¿'ì¿'í  ¿'£2¿'«¿'∆  ¿'€¿'‰¿'„  ¿'*¿'+¿*ãÉì¿*ê¿*ê  ¿*£¿*∞¿*Ø  ¿*∂¿*∆¿*≈   ¿."É¿/¿/Äœ/// Whether the navigator can be popped.
///
/// {@macro flutter.widgets.navigator.canPop}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false.   ¿1)Ü‘¿3|¿3|Ç/// Consults the current route's [Route.popDisposition] method, and acts
/// accordingly, potentially popping the route as a result; returns whether
/// the pop request should be considered handled.
///
/// {@macro flutter.widgets.navigator.maybePop}
///
/// See also:
///
///  * [Form], which provides a [Form.canPop] boolean that enables the
///    form to prevent any [pop]s initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedOnPopCallback` that can be used
///    to define the route's `willPop` method.¿3Ö¿3Ö¿3Ö¿3ô	¿3ù¿3ú  ¿3[¿3\¿8ÜW¿:¿:Åœ/// Pop the top-most route off the navigator.
///
/// {@macro flutter.widgets.navigator.pop}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _handleClose() {
///   navigator.pop();
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _handleAccept() {
///   navigator.pop(true); // dialog returns true
/// }
/// ```
/// {@end-tool}¿:¿:¿:¿:2	¿:6¿:5  ¿:¿:¿>\Çè¿?©¿?©Å+/// Calls [pop] repeatedly until the predicate returns true.
///
/// {@macro flutter.widgets.navigator.popUntil}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doLogout() {
///   navigator.popUntil(ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿?≤¿?¬¿?¡   ¿@ÔÇˇ¿Aê¿AêÄÅ/// Immediately remove `route` from the navigator, and [Route.dispose] it.
///
/// {@macro flutter.widgets.navigator.removeRoute}¿Aú¿Aú¿Aú¿AØ¿Aπ¿A∏  ¿A¿	¿Aƒ¿A√  ¿Aw¿Ax¿CÚÑç¿D‡¿D‡ÄÃ/// Immediately remove a route from the navigator, and [Route.dispose] it. The
/// route to be removed is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.removeRouteBelow}¿DÒ¿DÒ¿DÒ¿E¿E¿E  ¿E	¿E¿E  ¿D«¿D»¿HÉá§¿J¸¿J¸Ç]/// Complete the lifecycle for a route that has been popped off the navigator.
///
/// When the navigator pops a route, the navigator retains a reference to the
/// route in order to call [Route.dispose] if the navigator itself is removed
/// from the tree. When the route is finished with any exit animation, the
/// route should call this function to complete its lifecycle (e.g., to
/// receive a call to [Route.dispose]).
///
/// The given `route` must have already received a call to [Route.didPop].
/// This function may be called directly from [Route.didPop] if [Route.didPop]
/// will return true. ¿K
¿K¿K   ¿P+Äµ¿PI¿PI ¿PW¿PW¿PW¿PZ	¿Pb¿Pa  ¿P+¿P,¿SÍÉO¿T∂¿T∂Äº/// The navigator is being controlled by a user gesture.
///
/// For example, called when the user beings an iOS back gesture.
///
/// When the gesture finishes, call [didStopUserGesture].   ¿W=Å≈¿W˙¿W˙ÄØ/// A user gesture completed.
///
/// Notifies the navigator that a gesture regarding which the navigator was
/// previously notified with [didStartUserGesture] has completed.   ¿Y3]¿Y8¿Y8  ¿YK¿Y]¿Y\   ¿Yîb¿Yô¿Yô  ¿Y≤¿Y¿¿Yø   ¿Y˙É-¿Yˇ¿Yˇ    ¿]+Å¿]Ö¿]ÖJ/// Gets first route entry satisfying the predicate, or null if not found. ¿]°¿]∑¿]∂   ¿^IÅ5¿^¢¿^¢I/// Gets last route entry satisfying the predicate, or null if not found. ¿^Ω¿^”¿^“   ¿_ÇàF¿_¢¿_¢  ¿_®¿_∂¿_µ  ¿_Ç¿_É¿_è¿_ê ¿g˝Ü“¿g˝¿h  ¿h(#¿h( ¿h(¿h?  ¿h@	¿hF¿hE   ¿hNÄ´¿hV¿hm¿hn¿hs¿hn ¿hz¿hã¿hä  ¿hî¿h¶¿h•  ¿h¥¿h¬¿h¡   ¿h¸Ä‘¿i¿i¿i¿i%¿i ¿i,5¿iV¿iU  ¿ig¿iy¿ix  ¿iá¿iï¿iî   ¿i‘Ç¿i‹¿iÛ¿iÙ¿j¿iÙ ¿j	¿j¿j   ¿kÍ ¿l¿l  ¿l,¿l4¿l4  ¿l¿l¿l    ¿lJ¿lS¿lS     ¿llv¿ls¿ls    ¿lÊ^¿m¿m   ¿lÊ¿lÁ¿mHB¿md¿md  ¿mp¿mÄ¿m  ¿mH¿mI¿méÅ?¿mö¿mö  ¿m¨¿mº¿mª  ¿mÃ2¿m›¿m‹  ¿mÎ¿m˙¿m˚ ¿n—ÉÃ¿n—¿n◊  ¿oÄ§¿o ¿o¿o4  ¿o;¿oJ¿oI  ¿oS¿ob¿oa  ¿op ¿o¿o~  ¿oô¿oû¿o∫¿oü¿o¥¿oµ¿o¿Å¿o¿¿o‹¿o›¿oÒ¿o› ¿oÚ¿p¿p   (¿p¿p¿p"¿p¿p¿p¿p¿p!¿p>¿p+¿pI¿pG¿pD¿pF¿p@¿pE¿pL¿p\¿pW¿pg¿pe¿pb¿pd¿p^¿pc¿pj¿pÇ¿px¿pÑ¿pà¿pâ¿pò¿pö¿pô¿p£¿p®¿pƒ¿p©¿pæ¿pø¿qà(¿qû¿qû ¿qà¿qâ¿q¥¿q¡¿q¡  ¿q…¿q◊¿q◊    ¿p Ä∫¿p„¿p„   ¿p ¿pÀ¿qÂÄ∂¿r ¿r   ¿r¿r¿r  ¿qÂ¿qÊ ¿rüÖÛ¿rü¿r•  ¿rÍÄ¥¿rÍ ¿rÍ¿s
  ¿s¿s ¿s  ¿s1¿s@¿s?  ¿sN ¿s]¿s\  ¿sw¿s|¿sú¿s}¿sí¿sì¿s¢Å≤¿s¢¿s¬¿s√¿s◊¿s√ ¿sÿ¿sÁ¿sÊ  9¿sÚ¿s¯¿t¿t¿s˘¿s˝¿s˛¿t¿t$¿t¿t/¿t-¿t*¿t,¿t&¿t+¿t2¿tJ¿t=¿t·¿t—¿tV¿tX¿tY¿th¿ti¿t~¿t–¿tê¿tí¿tì¿t°¿t¢¿tØ¿tø¿tπ¿t∑¿t¥¿t∂¿t∞¿tµ¿tº¿t‰¿u¿u¿u¿u¿u¿u"¿u$¿u#¿u-¿u2¿uR¿u3¿uH¿uI¿wk(¿wÅ¿wÅ ¿wk¿wl¿wó2¿wΩ¿wΩ  ¿wÕ¿w€¿w€  ¿uXÄû¿uﬁ¿uﬁ   ¿uX¿uY ¿u˙Åm¿v¿v   ¿u˙¿u˚¿wÈÄß¿x¿x  ¿x¿x ¿x  ¿wÈ¿wÍ ¿xîïn¿xî¿xö   ¿y+1¿yG¿yG  ¿à|2¿àÖ¿àÖ    ¿çÿ(¿çÌ¿çÌ   ¿çÿ¿çŸ 	¿yqã*¿yv¿yv  ¿y}¿yá¿yÜ   ¿ÑüÅ¿Ñ§¿Ñ§  ¿Ñ∏¿Ñ∆¿Ñ≈  ¿Ñ—¿Ñﬂ¿Ñﬁ  ¿ÑË'¿Ö¿Ö  ¿Ö¿Ö#¿Ö"   ¿ÜìÅ,¿Üò¿Üò  ¿Ü®¿Üƒ¿Ü√  ¿Ü∆¿Ü‚¿Ü·   ¿á√Ä¢¿á»¿á»    ¿à≤ÇÑ¿àƒ¿àƒ  ¿à⁄¿àË¿àÁ  ¿àÌ¿à˝¿à¸   ¿ã^S¿ãÜ¿ãÜ   ¿ã^¿ã_¿ãµÅc¿ã›¿ã›  ¿ãÏ¿ãı¿ãÙ  ¿ãµ¿ã∂¿çj¿ç-¿ç-  ¿ç;!¿çX¿çW  ¿ç¿ç¿çäJ¿çû¿çû   ¿çä¿çã ¿íî¿í¿òÜp/// Gives access to a [Route] object and its return value that was added to a
/// navigator via one of its "restorable" API methods.
///
/// When a [State] object wants access to the return value of a [Route] object
/// it has pushed onto the [Navigator], a [RestorableRouteFuture] ensures that
/// it will also have access to that value after state restoration.
///
/// To show a new route on the navigator defined by the [navigatorFinder], call
/// [present], which will invoke the [onPresent] callback. The [onPresent]
/// callback must add a new route to the navigator provided to it using one
/// of the "restorable" API methods. When the newly added route completes, the
/// [onComplete] callback executes. It is given the return value of the route,
/// which may be null.
///
/// While the route added via [present] is shown on the navigator, it can be
/// accessed via the [route] getter.
///
/// If the property is restored to a state in which [present] had been called on
/// it, but the route has not completed yet, the [RestorableRouteFuture] will
/// obtain the restored route object from the navigator again and call
/// [onComplete] once it completes.
///
/// The [RestorableRouteFuture] can only keep track of one active [route].
/// When [present] has been called to add a route, it may only be called again
/// after the previously added route has completed.
///
/// {@tool dartpad}
/// This example uses a [RestorableRouteFuture] in the `_MyHomeState` to push a
/// new `MyCounter` route and to retrieve its return value.
///
/// ** See code in examples/api/lib/widgets/navigator/restorable_route_future.0.dart **
/// {@end-tool}¿òï¿òï¿òï¿ò¿Ä¨¿òÈ ¿òÈ¿ò˛ &/// Creates a [RestorableRouteFuture].¿ô.¿ô¿ô
  ¿ô9¿ôH¿ôG  ¿ôV¿ô\¿ô[  ¿ô¿ôpÅ
¿ök¿ökÄ÷/// A callback that given the [BuildContext] of the [State] object to which
/// this property is registered returns the [NavigatorState] of the navigator
/// to which the route instantiated in [onPresent] is added. ¿öÇ:¿ú∞¿ú∞Å¸/// A callback that add a new [Route] to the provided navigator.
///
/// The callback must use one of the API methods on the [NavigatorState] that
/// have "restorable" in their name (e.g. [NavigatorState.restorablePush],
/// [NavigatorState.restorablePushNamed], etc.) and return the opaque ID
/// returned by those methods.
///
/// This callback is invoked when [present] is called with the `arguments`
/// Object that was passed to that method and the [NavigatorState] obtained
/// from [navigatorFinder]. ¿úæÄ ¿ù~¿ù~Äï/// A callback that is invoked when the [Route] added via [onPresent]
/// completes.
///
/// The return value of that route is passed to this method. ¿†Í¿†Ù¿†Ù  ¿¢§¿¢©¿¢© ¿¢µ¿üóÄΩ¿†9¿†9Äí/// Whether the [Route] created by [present] is currently shown.
///
/// Returns true after [present] has been called until the [Route] completes.   ¿†XÄè¿†◊¿†◊j/// The route that [present] added to the Navigator.
///
/// Returns null when currently no route is shown   ¿£NH¿£c¿£c   ¿£N¿£O¿£ö~¿£≠¿£≠     ¿ùçÇ¿û»¿û»Å)/// Shows the route created by [onPresent] and invoke [onComplete] when it
/// completes.
///
/// The `arguments` object is passed to [onPresent] and can be used to
/// customize the route. It must be serializable via the
/// [StandardMessageCodec]. Often, a [Map] is used to pass key-value pairs. ¿û—¿û⁄¿ûŸ   ¿†ˇ1¿°¿°   ¿†ˇ¿° ¿°4u¿°E¿°E  ¿°S¿°\¿°[  ¿°4¿°5¿°≠ÄÑ¿°¡¿°¡   ¿°≠¿°Æ¿¢5k¿¢H¿¢H  ¿¢W¿¢`¿¢_  ¿¢5¿¢6¿¢øÄã¿¢–¿¢–   ¿¢ø¿¢¿¿§Å¶¿§!¿§!  ¿§6	¿§>¿§=   ¿•∆]¿•‹¿•‹  ¿•Ù¿¶¿¶    ¿¶'Ç‡¿¶'¿ßbÅ4/// A notification that a change in navigation has taken place.
///
/// Specifically, this notification indicates that at least one of the following
/// has occurred:
///
///  * That route stack of a [Navigator] has changed in any way.
///  * The ability to pop has changed, such as controlled by [PopScope]. ¿ßíÄÖ¿ß‚ ¿ß‚¿ß¯ G/// Creates a notification that some change in navigation has happened.¿ß˙¿®	¿®   ¿®ÄÅ¿®ê¿®êe/// Indicates that the originator of this [Notification] is capable of
/// handling a navigation pop.   ¿®°d¿®¥¿®¥   ¿®°¿®¢  è€É@è€êƒÄ„/// Indicates whether the current route should be popped.
///
/// Used as the return value for [Route.willPop].
///
/// See also:
///
///  * [WillPopScope], a widget that hooks into the route's [Route.willPop]
///    mechanism.  ê‹ÄûëwëwÄí/// Pop the route.
///
/// If [Route.willPop] or [Route.popDisposition] return [pop] then the back
/// button will actually pop the current route. ëÄõííÄä/// Do not pop the route.
///
/// If [Route.willPop] or [Route.popDisposition] return [doNotPop] then the
/// back button will be ignored. íÄ˘ììÄË/// Delegate this to the next level of navigation.
///
/// If [Route.willPop] or [Route.popDisposition] return [bubble] then the back
/// button will be handled by the [SystemNavigator], which will usually close
/// the application.     ¿ÍfÜ®¿Íf¿Ík   ¿Í¿Í¿Í  ¿Î ¿Î ¿Î   ¿Î|¿Î|¿Î|  ¿Î¸¿Î¸¿Î¸  ¿ÏU¿ÏU¿ÏU  ¿Ïº¿Ïº¿Ïº  ¿Ì ¿Ì ¿Ì   ¿Ìb¿Ìb¿Ìb  ¿Ó¿Ó¿Ó  ¿Ó>¿Ó>¿Ó>  ¿Óm¿Óm¿Óm  ¿Ô¿Ô¿Ô  ¿Ôb¿Ôb¿Ôb  ¿¿¿  ¿D	¿D¿D  ¿Â¿Â¿Â      ¿gÃ/¿gÃ¿g—   ¿gÈ¿gÈ¿gÈ  ¿g	¿g¿g            ÜÄ˘ÜÜ»Ä∞/// Creates a route for the given route settings.
///
/// Used by [Navigator.onGenerateRoute].
///
/// See also:
///
///  * [Navigator], which is where all the [Route]s end up.  ÜÜˇÜ˛   á
ÄÕá
ás`/// Creates a series of one or more routes.
///
/// Used by [Navigator.onGenerateInitialRoutes].  á®á∏á∑  á¬á á…   áŸÇóáŸäÇ7/// Creates a [Route] that is to be added to a [Navigator].
///
/// The route can be configured with the provided `arguments`. The provided
/// `context` is the `BuildContext` of the [Navigator] to which the route is
/// added.
///
/// Used by the restorable methods of the [Navigator] that add anonymous routes
/// (e.g. [NavigatorState.restorablePush]). For this use case, the
/// [RestorableRouteBuilder] must be static function annotated with
/// `@pragma('vm:entry-point')`. The [Navigator] will call it again during
/// state restoration to re-create the route.ä0ä0ä0 äGäUäT  ä]äfäe   är|äräπ>/// Signature for the [Navigator.popUntil] predicate argument.  äÿäËäÁ   äÅzäå@Ä€/// Signature for a callback that verifies that it's OK to call [Navigator.pop].
///
/// Used by [Form.onWillPop], [ModalRoute.addScopedWillPopCallback],
/// [ModalRoute.removeScopedWillPopCallback], and [WillPopScope].   ãÃãÕã◊å6ã€å ålÅ›åléÅé/// Signature for the [Navigator.onPopPage] callback.
///
/// This callback must call [Route.didPop] on the specified route and must
/// properly update the pages list the next time it is passed into
/// [Navigator.pages] so that it no longer includes the corresponding [Page].
/// (Otherwise, the page will be interpreted as a new page to show when the
/// [Navigator.pages] list is next updated.)  é#é3é2  é9éBéA   éKÅééKèüÅK/// Signature for the [Navigator.onDidRemovePage] callback.
///
/// This must properly update the pages list the next time it is passed into
/// [Navigator.pages] so that it no longer includes the input `page`.
/// (Otherwise, the page will be interpreted as a new page to show when the
/// [Navigator.pages] list is next updated.)  è≈è‘è”   ¿Ò@¿Ò¿Ò   ¿Ò=¿ÒJ¿ÒI   ¿3]A¿3]¿3e   ¿3â¿3ñ¿3ï   ¿éÅ¿é¿éŒÄ¡/// A callback that given a [BuildContext] finds a [NavigatorState].
///
/// Used by [RestorableRouteFuture.navigatorFinder] to determine the navigator
/// to which a new route should be added.  ¿è ¿è¿è   ¿èÅ—¿è¿êêÅo/// A callback that given some `arguments` and a `navigator` adds a new
/// restorable route to that `navigator` and returns the opaque ID of that
/// new route.
///
/// Usually, this callback calls one of the imperative methods on the Navigator
/// that have "restorable" in the name and returns their return value.
///
/// Used by [RestorableRouteFuture.onPresent].  ¿êº¿êÃ¿êÀ  ¿ê÷¿êﬂ¿êﬁ   ¿êÎÅ¿êÎ¿ë—Ä›/// A callback to handle the result of a completed [Route].
///
/// The return value of the route (which can be null for e.g. void routes) is
/// passed to the callback.
///
/// Used by [RestorableRouteFuture.onComplete].¿ëÈ¿ëÈ¿ëÈ ¿ë¸¿ëˇ¿ë˛    Ñ∑MÑ∆Ñ∆ ÑÈÑÒÖÑ˛ÑÚÖ ¿  ÄÈ¿  ∫¿  ∫ÄÜ/// The default value of [Navigator.routeTraversalEdgeBehavior].
///
/// {@macro flutter.widgets.navigator.routeTraversalEdgeBehavior}¿  ﬂ¿  Ù¿  ı¿ ÀÄ¸¿ À±¿ À±Äë/// The default value of [Navigator.routeDirectionalTraversalEdgeBehavior].
///
/// {@macro flutter.widgets.navigator.routeTraversalEdgeBehavior}¿ ÀÂ¿ À˙¿ À˚   ÄÆ  package:flutter/cupertino.dart  Äﬂ  package:flutter/material.dart  Å  app.dart  Å.  	form.dart  ÅJ  
pages.dart  Åg  pop_scope.dart  Åà  router.dart  Å¶  will_pop_scope.dart ò¯ <ÄÜÄ§Ä•Ä÷ÅÅ
Å%ÅAÅ^ÅÅùÅ√ÅÃÅÕÅ‚Å¸ÇÇ9ÇQÇRÇ|Ç•ÇŒÇˆÇ˜ÉÉ#É@É[ÉzÉìÉ©ÉŒÉÂÑ Ñ&Ñ<Ñ[Ñ\Ñ∑ÖÖÖÖCÖhÖŒÖÜÜÜAÜEÜnÜrÜÄÜÑÜ¿á	á
á6á:ákáÜáÿáŸàààeà≤àΩà¡ââTâòâ„ääqärä±äÔäãAãEãäãÃãŸã˛å6å8åkålå¢å¶åÒç4çÇçŒç˚éJéKéáéãéÿèèjèóè⁄è€êêêKêOê]êaê≠êøê⁄êÔêıëCëuë|ë}ëôëüëÌííííRíXí©í˘ìììììWì[ì¶ìıîDîhîlî≤î€îﬂï.ïPïTï£ïÈñ6ñ~ñŒóó
óKóõóæóÚòòòcòwò}òºôô"ô7ônô£ô»ööööjöpöƒõõ6õ7õiõòõ∂õ∑õ⁄õ‡úúúXúïú¥ú∫ù
ùUùüùÈûû8ûSûTûäûãû‹ûÓûÙü@üVü\ü´ü˚†I†ô†Ë°°e°∏°π°Ì¢¢0¢P¢p¢x¢~¢Ç¢É¢Õ££1£5£6£_£e£¥£Ú£¯§E§T§Z§¶§À•••K•Q•£•˜¶<¶Y¶f¶w¶ã¶å¶÷¶‹ß$ß*ßwß∏ßæ®®<®I®Z®u®Ø®…©©©©©©b©h©¥©È©Ô™>™m™z™ã™ù™µ´´T´£´Ú¨¨¨p¨√≠≠D≠x≠ ÆÆoÆøØØaØíØùØÌ∞;∞n∞´∞µ∞ª∞ø∞¿±±±d±ì±†±±±‡±·≤1≤Y≤_≤Ø≤Õ≤”≥≥W≥¢≥Ó¥=¥z¥Ä¥¿¥„¥Èµ8µfµlµ|µÇµÕµ·∂.∂D∂S∂v∂∞∂¥∂‰∑/∑3∑4∑Ñ∑¨∑≤∏∏A∏r∏x∏√∏¸πGπìπ‚∫∫%∫e∫à∫é∫›ªªª!ª'ªpª¿ºº-ºEºÅºõº»º–º÷Ω!Ω%Ω&ΩRΩXΩ¶Ωˆæ,æ;ækæ¶æ™æŒæœøø>øDøíø‚¿ @¿ @-¿ @>¿ @v¿ @é¿ @æ¿ @Á¿ @Ì¿ @Ò¿ @Ú¿ A%¿ AR¿ AS¿ Aù¿ Aﬂ¿ AÂ¿ B4¿ B[¿ B{¿ B|¿ B«¿ BÕ¿ C¿ Ck¿ CÄ¿ C±¿ CË¿ CÈ¿ D$¿ D%¿ Dl¿ D∏¿ E¿ EQ¿ Em¿ Es¿ E¿¿ F¿ F^¿ F©¿ F˘¿ G¿ G¿ Gh¿ G∏¿ GÙ¿ G˙¿ HI¿ Hb¿ Hs¿ Hé¿ Hß¿ H∏¿ Hº¿ HΩ¿ I¿ I¿ IE¿ Ií¿ IÊ¿ J ¿ J¿ JS¿ J§¿ JŸ¿ Jﬂ¿ K*¿ Kx¿ K…¿ L¿ L¿ L/¿ LO¿ LÑ¿ Là¿ Lâ¿ L“¿ L„¿ LÈ¿ M8¿ MP¿ M]¿ Mn¿ Mù¿ Mû¿ M‡¿ MÊ¿ N6¿ NÜ¿ NÃ¿ N¿ Nˆ¿ OE¿ Od¿ Oq¿ OÇ¿ Oµ¿ O∂¿ O¸¿ P¿ PN¿ Pû¿ PÔ¿ Q	¿ Q¿ Q\¿ Q¿ Qå¿ Qù¿ Qÿ¿ QŸ¿ R¿ R"¿ Rl¿ RΩ¿ S¿ SG¿ SM¿ S]¿ Sc¿ S≠¿ SÎ¿ S¯¿ T	¿ T*¿ T+¿ Tw¿ Tƒ¿ T ¿ Tˇ¿ UP¿ Uì¿ U’¿ V¿ Va¿ Vû¿ V§¿ VÎ¿ W6¿ W}¿ W∂¿ Wº¿ X ¿ X¿ X ¿ X0¿ X6¿ XÜ¿ X£¿ X∞¿ X¡¿ X‚¿ X„¿ Y¿ Y¿ Yk¿ Yú¿ Y¢¿ Y¿ Z¿ Z¿ ZT¿ Z¢¿ ZÒ¿ [¿ [¿ ["¿ [9¿ [\¿ [~¿ [¨¿ [∞¿ [±¿ [Ú¿ [¯¿ \-¿ \D¿ \b¿ \v¿ \|¿ \œ¿ \ı¿ \¸¿ ]!¿ ]5¿ ];¿ ]g¿ ]k¿ ]l¿ ]∑¿ ]Ω¿ ^¿ ^E¿ ^Z¿ ^x¿ ^å¿ ^í¿ ^Ê¿ _¿ _¿ _8¿ _L¿ _R¿ _~¿ _Ç¿ _É¿ _À¿ _ÿ¿ _˘¿ `¿ `+¿ `1¿ `m¿ `é¿ `§¿ `¨¿ `ﬂ¿ `Ù¿ `¸¿ a¿ a¿ a¿ a¿ aG¿ aM¿ aù¿ aÌ¿ b)¿ b/¿ bÅ¿ b’¿ c,¿ cB¿ cß¿ c∂¿ c∫¿ cº¿ cΩ¿ cˆ¿ d¿ d¿ dD¿ dx¿ dy¿ d™¿ d∞¿ d◊¿ dÌ¿ dÓ¿ e¿ e¿ en¿ eâ¿ eä¿ eñ¿ e≠¿ f¿ f¿ f¿ fE¿ fI¿ fí¿ fŸ¿ f›¿ g!¿ g%¿ g9¿ gÖ¿ gô¿ gù¿ gÂ¿ gı¿ g˘¿ h¿ h¿ h\¿ hl¿ hõ¿ h÷¿ hÂ¿ hÛ¿ i¿ i¿ i0¿ iH¿ i{¿ iÅ¿ iÇ¿ i ¿ iÀ¿ iÙ¿ i˙¿ j:¿ jQ¿ jR¿ j¢¿ j≥¿ jπ¿ k	¿ k¿ k¿ k%¿ kr¿ kÑ¿ k£¿ k§¿ k‚¿ kË¿ l8¿ l~¿ lù¿ l£¿ lÙ¿ m<¿ må¿ m∆¿ m¸¿ m˝¿ n>¿ nD¿ nè¿ nØ¿ nµ¿ n¸¿ oH¿ ou¿ oä¿ oã¿ o…¿ oœ¿ p¿ p+¿ pS¿ pî¿ pò¿ pô¿ p“¿ pÿ¿ q.¿ q9¿ qg¿ qh¿ qt¿ qÃ¿ qŒ¿ qœ¿ r¿ r'¿ rc¿ rô¿ rö¿ r‚¿ s1¿ sk¿ s•¿ sÛ¿ t;¿ tÜ¿ t–¿ t¿ u@¿ uA¿ ug¿ um¿ u∏¿ uŸ¿ v ¿ v!¿ vG¿ vM¿ vì¿ v¥¿ v˙¿ v˚¿ w"¿ w(¿ ws¿ wü¿ w•¿ wÍ¿ x5¿ xÖ¿ x§¿ xÌ¿ xÓ¿ y)¿ yt¿ yu¿ yõ¿ y°¿ y¿ z?¿ zÄ¿ zÜ¿ z÷¿ {'¿ {r¿ {ƒ¿ {≈¿ |¿ |¿ |\¿ |ó¿ |Í¿ |Î¿ }(¿ }.¿ }j¿ }â¿ }ã¿ }å¿ }ø¿ }√¿ ~¿ ~Z¿ ~ß¿ ~´¿ ~˙¿ J¿ ï¿ ﬂ¿ Ä¿ ÄJ¿ Äh¿ Äw¿ Ä§¿ Äæ¿ Äƒ¿ Ä≈¿ Å¿ Å#¿ Å|¿ Å}¿ Å∫¿ Åﬁ¿ Åﬂ¿ Ç+¿ ÇS¿ ÇY¿ Çõ¿ Ç⁄¿ Ç‡¿ Ç¿ Çˆ¿ ÉE¿ É|¿ Éµ¿ É„¿ Ñ'¿ ÑD¿ ÑH¿ ÑI¿ Ñï¿ Ñ•¿ Ñ´¿ Ñ˚¿ Ö¿ Ö%¿ Ög¿ Öï¿ Öõ¿ Ö´¿ Ö±¿ Ö˝¿ ÜA¿ Üt¿ Ü≠¿ ÜΩ¿ Ü›¿ Ü˘¿ áQ¿ á{¿ á–¿ à"¿ às¿ à®¿ àÃ¿ à‰¿ àÔ¿ à˜¿ â
¿ â¿ â,¿ â0¿ â1¿ â=¿ âx¿ âß¿ â´¿ â≠¿ âÆ¿ â˝¿ äG¿ än¿ äì¿ äØ¿ ä∞¿ ã¿ ã¿ ãW¿ ã¢¿ ã∆¿ ãÔ¿ ã¿ å@¿ åF¿ åñ¿ å‡¿ ç¿ ç,¿ ç-¿ çc¿ çi¿ ç∂¿ é¿ ék¿ éÅ¿ éÇ¿ é∫¿ é¿¿ è¿ ès¿ èƒ¿ èŸ¿ è⁄¿ ê¿ ê¿ êb¿ ê≥¿ ê—¿ êˆ¿ ê˜¿ ë3¿ ë9¿ ëÖ¿ ë“¿ í ¿ íJ¿ íK¿ íÖ¿ íã¿ í◊¿ ì%¿ ìb¿ ìq¿ ìñ¿ ìÊ¿ î ¿ î$¿ îQ¿ îS¿ îT¿ î•¿ îÕ¿ î—¿ ï ¿ ïs¿ ïw¿ ï¬¿ ï∆¿ ï⁄¿ ñ)¿ ñv¿ ñô¿ ñù¿ ñ©¿ ñÙ¿ ó¿ ó4¿ óv¿ ó÷¿ ò;¿ òF¿ òï¿ òô¿ òÊ¿ ô¿ ôB¿ ôN¿ ôp¿ ôt¿ ô~¿ ô‡¿ ö¿ öM¿ öπ¿ ö‚¿ õ3¿ õd¿ õt¿ õÅ¿ õç¿ õ∂¿ õ∫¿ õƒ¿ õ‹¿ õ‰¿ õÍ¿ õÓ¿ õˆ¿ ú¿ ú
¿ ú¿ ú¿ úg¿ úÑ¿ ú”¿ ù	¿ ù0¿ ùz¿ ùò¿ ùô¿ ù…¿ û¿ ûc¿ ûƒ¿ ûÀ¿ ü¿ ü8¿ üv¿ ü≤¿ üπ¿ ü˚¿ †¿ †¿ †n¿ †~¿ †À¿ †Ú¿ °@¿ °g¿ °∂¿ ¢¿ ¢$¿ ¢3¿ ¢:¿ ¢e¿ ¢l¿ ¢•¿ ¢¨¿ ¢⁄¿ £*¿ £K¿ £R¿ £ù¿ £Í¿ £˙¿ §U¿ §≤¿ §∆¿ •¿ •V¿ •ï¿ •‹¿ ¶¿ ¶V¿ ¶ñ¿ ¶¢¿ ¶¨¿ ¶¥¿ ß¿ ß3¿ ß_¿ ß`¿ ß≤¿ ®¿ ®a¿ ®∞¿ ®Í¿ ©¿ ©+¿ ©X¿ ©b¿ ©j¿ ©k¿ ©y¿ ©⁄¿ ™*¿ ™s¿ ™|¿ ™è¿ ™ô¿ ™ö¿ ™Æ¿ ™≤¿ ™≥¿ ™˛¿ ´J¿ ´P¿ ´°¿ ´È¿ ¨&¿ ¨s¿ ¨ø¿ ≠¿ ≠:¿ ≠@¿ ≠å¿ ≠⁄¿ Æ&¿ Æq¿ Æ¿¿ Ø	¿ ØX¿ Øé¿ Ø⁄¿ ∞%¿ ∞c¿ ∞ç¿ ∞ﬁ¿ ±*¿ ±z¿ ±»¿ ≤¿ ≤e¿ ≤É¿ ≤â¿ ≤◊¿ ≥&¿ ≥u¿ ≥†¿ ≥¶¿ ≥ˆ¿ ¥3¿ ¥~¿ ¥…¿ µ¿ µa¿ µ£¿ µ©¿ µŸ¿ µﬂ¿ ∂¿ ∂¿ ∂C¿ ∂I¿ ∂p¿ ∂v¿ ∂°¿ ∂Ì¿ ∑
¿ ∑¿ ∑9¿ ∑?¿ ∑Ü¿ ∑œ¿ ∑’¿ ∑Â¿ ∑Î¿ ∏<¿ ∏b¿ ∏≤¿ ∏€¿ π*¿ πP¿ π†¿ π‚¿ ∫1¿ ∫s¿ ∫ü¿ ∫›¿ ª9¿ ªö¿ ª†¿ ª¢¿ ª£¿ ªÙ¿ º4¿ º8¿ ºâ¿ º◊¿ Ω,¿ Ωi¿ Ω¨¿ ΩÔ¿ æ¿ æK¿ æL¿ æX¿ æÑ¿ æ¬¿ ø¿ ø¿ øÜ¿ ø—¿ ¿!¿ ¿o¿ ¿±¿ ¿˝¿ ¡Y¿ ¡¿ ¡è¿ ¡ó¿ ¡—¿ ¬0¿ ¬\¿ ¬≠¿ ¬Ë¿ √5¿ √F¿ √ò¿ √¢¿ √¬¿ √ˇ¿ ƒ;¿ ƒâ¿ ƒÿ¿ ≈$¿ ≈s¿ ≈∞¿ ∆¿ ∆Q¿ ∆h¿ ∆∫¿ ∆ ¿ ∆ÿ¿ ∆‰¿ ∆Ó¿ ∆ˆ¿ «¿ «¿ «p¿ «§¿ «™¿ «´¿ «‚¿ »¿ »¿ »g¿ »±¿ »Â¿ …:¿ …]¿ …n¿ …ê¿ …ö¿ …¢¿ …¿¿ …ˆ¿ …¸¿  ¿  ¿  ¿  ¿  X¿  \¿  û¿ À¿ À¿ ÀO¿ ÀS¿ Àï¿ À·¿ Ã¿ Ã¿ ÃL¿ ÃP¿ Ãü¿ ÃÓ¿ Õ<¿ Õë¿ Õ‚¿ Œ¿ Œ#¿ Œ>¿ ŒB¿ Œí¿ Œ·¿ œ0¿ œÄ¿ œÕ¿ –¿ –<¿ –@¿ –è¿ –‹¿ —¿ —8¿ —<¿ —Ü¿ —ä¿ —©¿ —≠¿ —ˆ¿ “<¿ “Ç¿ “Ã¿ ”¿ ”=¿ ”A¿ ”å¿ ”÷¿ ‘$¿ ‘o¿ ‘π¿ ’¿ ’S¿ ’ú¿ ’º¿ ’¿¿ ’Á¿ ’Î¿ ÷9¿ ÷â¿ ÷◊¿ ÷¿ ÷Ù¿ ◊B¿ ◊í¿ ◊∏¿ ◊º¿ ◊»¿ ◊⁄¿ ÿ¿ ÿ¿ ÿ¿ ÿ ¿ ÿc¿ ÿ≠¿ ÿ‹¿ ÿ‡¿ ÿÏ¿ Ÿ!¿ ŸI¿ Ÿb¿ Ÿö¿ Ÿ≤¿ Ÿ—¿ Ÿ˘¿ ⁄¿ ⁄?¿ ⁄P¿ ⁄_¿ ⁄l¿ ⁄w¿ ⁄Ä¿ ⁄à¿ ⁄ê¿ ⁄î¿ ⁄⁄¿ €¿ €T¿ €X¿ €¢¿ €Õ¿ €—¿ €›¿ €˘¿ ‹¿ ‹¿ ‹P¿ ‹õ¿ ‹‹¿ ›#¿ ›C¿ ›G¿ ›l¿ ›p¿ ›µ¿ ›˜¿ ﬁ.¿ ﬁe¿ ﬁi¿ ﬁé¿ ﬁÿ¿ ﬂ ¿ ﬂj¿ ﬂn¿ ﬂz¿ ﬂå¿ ﬂ¶¿ ﬂÊ¿ ‡¿ ‡_¿ ‡Æ¿ ‡˝¿ ·¿ ·¿ ·¿ · ¿ ·$¿ ·A¿ ·E¿ ·Q¿ ·y¿ ·Å¿ ·Ö¿ ·ß¿ ·´¿ ·Ù¿ ‚*¿ ‚.¿ ‚|¿ ‚»¿ ‚◊¿ ‚€¿ „$¿ „c¿ „g¿ „s¿ „º¿ „‰¿ „˚¿ ‰¿ ‰B¿ ‰z¿ ‰á¿ ‰í¿ ‰ö¿ ‰¢¿ ‰™¿ ‰Æ¿ ‰ˆ¿ Â@¿ Â\¿ Â`¿ Â¨¿ ÂË¿ Ê3¿ ÊÑ¿ Êì¿ Êó¿ Ê¨¿ Ê∞¿ Ê¸¿ ÁM¿ Áú¿ Á«¿ ÁÀ¿ Ë¿ ËT¿ Ëô¿ Ë›¿ È¿ È¿ Èi¿ È∂¿ Í¿ Í¿ Í¿ Í¿ Ío¿ Íº¿ Î¿ Î@¿ ÎD¿ Îê¿ Îﬁ¿ Ï/¿ Ï|¿ ÏÄ¿ Ïå¿ Ï¿¿ Ï’¿ Ì¿ ÌA¿ ÌJ¿ Ìò¿ Ì∑¿ Ì’¿ Ì˙¿ ÓE¿ Ó_¿ Ól¿ Ów¿ Ó¿ Óá¿ Óè¿ Óì¿ Ó–¿ Ô¿ Ôf¿ Ô±¿ ÔÓ¿ ¿ ¿ W¿ x¿ |¿ ó¿ õ¿ Á¿ Ò7¿ Òà¿ Ò≈¿ Ò…¿ Ò⁄¿ Òﬁ¿ Ú+¿ Úy¿ Ú¥¿ Ú∏¿ Û¿ ÛU¿ Û§¿ ÛÒ¿ Ù@¿ ÙV¿ ÙZ¿ Ù§¿ Ùı¿ ı¿ ı¿ ı$¿ ıs¿ ıß¿ ı´¿ ıÙ¿ ˆD¿ ˆH¿ ˆë¿ ˆ¬¿ ˆ∆¿ ˜¿ ˜ ¿ ˜$¿ ˜s¿ ˜æ¿ ¯¿ ¯]¿ ¯ã¿ ¯è¿ ¯≥¿ ¯∑¿ ˘¿ ˘N¿ ˘õ¿ ˘Ï¿ ˙¿ ˙¿ ˙$¿ ˙(¿ ˙s¿ ˙ø¿ ˚	¿ ˚W¿ ˚y¿ ˚}¿ ˚«¿ ˚ÿ¿ ¸(¿ ¸W¿ ¸§¿ ¸ı¿ ˝?¿ ˝ç¿ ˝Ÿ¿ ˛ ¿ ˛¿ ˛H¿ ˛ñ¿ ˛‚¿ ˇ*¿ ˇS¿ ˇ°¿ ˇß¿ ˇÏ¿  ¿ ¿ 9¿ J¿ p¿ ≠¿ ≥¿ «¿ ﬁ¿)¿C¿\¿¶¿”¿˙¿,¿J¿g¿±¿¿+¿1¿2¿n¿t¿º¿	¿B¿í¿ò¿‚¿¿!¿q¿æ¿¿^¿Ö¿ã¿÷¿&¿t¿∂¿“¿ÿ¿)¿]¿c¿Æ¿˛¿	5¿	X¿	Y¿	ï¿	õ¿	Á¿
¿
¿
b¿
ë¿
ó¿
„¿	¿¿`¿Ø¿ˇ¿7¿F¿j¿•¿©¿Õ¿Œ¿¿8¿>¿É¿«¿Õ¿¿,¿2¿É¿«¿¿6¿f¿g¿∑¿Ÿ¿ﬂ¿¿F¿G¿r¿x¿®¿Æ¿˚¿-¿3¿Ç¿”¿¿8¿9¿w¿û¿ü¿ﬁ¿‰¿0¿Å¿ö¿†¿Ó¿+¿Q¿R¿Ä¿´¿¨¿˚¿¿¿S¿¢¿Ú¿)¿/¿{¿…¿’¿€¿¿j¿∫¿·¿Á¿˜¿˝¿J¿\¿™¿—¿¿e¿≥¿Î¿ ¿$¿%¿s¿Ω¿√¿
¿T¿ü¿Ô¿>¿å¿Ÿ¿)¿H¿]¿ó¿ò¿Á¿<¿B¿Ü¿À¿Ã¿¿¿¿!¿{¿¢¿–¿—¿ !¿ N¿ T¿ Ü¿ å¿ ⁄¿!*¿!@¿!F¿!ç¿!ƒ¿"¿"b¿"Ø¿"Ù¿#A¿#ê¿#ô¿#À¿#Ã¿$¿$F¿$L¿$ô¿$Í¿%7¿%=¿%â¿%º¿&¿&W¿&•¿&π¿&ø¿'¿'\¿'™¿'ı¿( ¿(¿(¿(H¿(I¿(¿(Ö¿(’¿(Ë¿(Ó¿)¿),¿)-¿)Ä¿)∑¿)Ω¿*¿*)¿*/¿*G¿*b¿*c¿*¥¿*√¿*…¿*ˇ¿+F¿+å¿+í¿+ÿ¿,%¿,e¿,â¿,è¿,‡¿,Ó¿,Ù¿->¿-D¿-é¿-û¿-≥¿-π¿-˚¿.I¿.Ç¿.ó¿.ù¿.”¿/¿/f¿/≥¿/È¿/Ô¿03¿0l¿0Å¿0á¿0ù¿0£¿0∆¿0Ã¿0⁄¿0¯¿1+¿13¿1=¿1O¿1U¿1k¿1q¿1Ω¿1 ¿1–¿1ﬁ¿2 ¿2¿20¿2F¿2m¿2ã¿2≠¿2∫¿2≈¿2Õ¿2◊¿2È¿2Ô¿3¿3¿3W¿3]¿3k¿3è¿3›¿3¯¿4¿4¿4?¿4z¿4Ñ¿4å¿4í¿4Æ¿4À¿4ﬁ¿4Ù¿5D¿5O¿5W¿5a¿5s¿5y¿5â¿5è¿5Ÿ¿5¸¿6¿6B¿6\¿6t¿6ã¿6í¿6‚¿6Ê¿6Á¿78¿7G¿7M¿7ç¿7‹¿8(¿8a¿8v¿8|¿8Ø¿8µ¿8ˇ¿9A¿9ä¿9⁄¿9˘¿9ˇ¿:A¿:z¿:è¿:ï¿:·¿;0¿;~¿;À¿<¿<4¿<I¿<O¿<e¿<k¿<é¿<î¿<¢¿<√¿<Í¿<˝¿=¿=:¿=W¿=x¿=Ö¿=ê¿=ò¿=¢¿=¥¿=»¿> ¿>¿>2¿>I¿>P¿>™¿>Æ¿>Ø¿>ˇ¿?M¿?î¿?ö¿?€¿@'¿@t¿@Ω¿A¿AZ¿A£¿A©¿A¿B6¿B<¿Bà¿B’¿C¿Cc¿C±¿C˛¿D&¿D,¿D}¿Dã¿Dë¿Dﬂ¿E ¿E&¿Ew¿Eä¿Eü¿E•¿E‰¿EÍ¿F¿F#¿F9¿F?¿Fb¿Fh¿Fv¿Fô¿F‚¿FÍ¿FÙ¿G¿G¿G¿G"¿Gs¿G¶¿G∫¿H¿H%¿H=¿HM¿Hd¿Hk¿HÑ¿Hì¿HÁ¿HÎ¿HÏ¿I<¿Iä¿I—¿I◊¿J"¿Jp¿Jø¿K¿K¿K¿KZ¿K`¿Kß¿K≠¿Kˆ¿K¸¿L¿L¿L;¿LA¿LO¿Ls¿L¬¿L ¿L‘¿LÊ¿L˙¿MQ¿Mk¿MÉ¿Mì¿M™¿M±¿M ¿MŸ¿N7¿N;¿N<¿Nâ¿N¬¿N»¿O¿OE¿OK¿Oò¿Oﬁ¿O‰¿P3¿Pt¿P¬¿Q¿Q]¿Q¨¿Q¸¿R3¿R9¿Rä¿Rò¿Rû¿RÏ¿S&¿S,¿SÖ¿Sö¿S†¿Sﬂ¿SÂ¿T¿T¿T4¿T:¿T]¿Tc¿Tq¿Tï¿T‹¿T‰¿TÓ¿U ¿U¿U¿U¿Ug¿Uì¿Uß¿UÛ¿V¿V%¿V5¿VL¿VS¿Vl¿V{¿V ¿VŒ¿Vœ¿W¿WU¿W[¿W°¿WÍ¿X9¿X{¿Xê¿Xñ¿Xœ¿X’¿Y¿Y"¿Yk¿Yq¿Yá¿Yç¿Y∞¿Y∂¿Yƒ¿Y‚¿Z-¿Z5¿Z?¿ZQ¿Ze¿Z∑¿Z—¿ZÈ¿Z˘¿[¿[¿[0¿[?¿[ò¿[ú¿[ù¿[Î¿\;¿\_¿\e¿\©¿\¿]¿]%¿]g¿]£¿]©¿]˜¿^A¿^G¿^î¿^¡¿^«¿_¿_T¿_n¿_t¿_¿¿`¿`L¿`å¿`÷¿a$¿ak¿aÄ¿aÜ¿a◊¿aÂ¿aÎ¿b9¿b?¿bè¿bß¿bº¿b¬¿c¿c¿c:¿c@¿cV¿c\¿c¿cÖ¿cì¿c≥¿d¿d¿d ¿d2¿d8¿dH¿dN¿dû¿dÕ¿d·¿e!¿e;¿eT¿et¿eã¿eí¿e´¿e∫¿f¿f¿f¿f^¿fÆ¿f“¿fÿ¿g&¿gw¿g∆¿h¿h¿h#¿hd¿hj¿h±¿h∑¿i ¿i¿i¿i"¿iE¿iK¿iY¿iy¿iﬁ¿iÊ¿i¿j¿j¿j\¿jv¿jè¿jØ¿j∆¿jÕ¿jÊ¿jı¿kP¿kT¿kU¿k¢¿k∑¿kΩ¿kÓ¿l4¿lÅ¿l¡¿lÂ¿lÎ¿m<¿mJ¿mP¿mö¿mØ¿mµ¿mÙ¿m˙¿n¿n¿n9¿n?¿nM¿nh¿nÜ¿nô¿nº¿n˚¿o¿o¿o¿o%¿o7¿o=¿oM¿oS¿oü¿oª¿oœ¿p#¿pQ¿pU¿pV¿pü¿p¥¿p∫¿pı¿qC¿qí¿qƒ¿qŸ¿qﬂ¿r¿r¿rN¿rù¿rÈ¿s5¿sw¿sƒ¿t¿t¿tZ¿t•¿t∫¿t¿¿u	¿u¿u%¿uH¿uN¿u™¿uº¿u–¿v¿v¿vK¿vb¿vi¿væ¿v¬¿v√¿w¿wb¿wú¿w¢¿wﬁ¿x*¿x|¿x ¿y¿yh¿y¶¿y¨¿y¯¿zE¿zÖ¿z”¿{¿{¿{l¿{z¿{Ä¿{Œ¿|¿|$¿|*¿|i¿|o¿|Ö¿|ã¿|Æ¿|¥¿|¬¿|‡¿}¿}"¿}E¿}à¿}ï¿}†¿}®¿}≤¿}ƒ¿} ¿}⁄¿}‡¿~0¿~_¿~s¿~ø¿~Ÿ¿~Ú¿¿	¿\¿`¿a¿±¿¸¿Ä6¿Ä<¿ÄÇ¿Ä–¿Å¿Å\¿Åq¿Åw¿Å∞¿Å∂¿ÅÓ¿ÅÙ¿Ç=¿ÇC¿ÇY¿Ç|¿ÇÇ¿ÇÍ¿Ç¸¿É¿Éb¿É|¿É™¿É∫¿É—¿Éÿ¿ÉÒ¿Ñ ¿Ñ\¿Ñ`¿Ña¿ÑÆ¿Ñı¿Ö¿Ö¿ÖZ¿Ö°¿Ö–¿Ö÷¿Ü¿ÜT¿ÜZ¿Ü®¿ÜÚ¿Ü¯¿áE¿ár¿áx¿áæ¿à¿àY¿à©¿àÚ¿â?¿âè¿âÃ¿â“¿ä#¿ä1¿ä7¿äÖ¿äö¿ä†¿äﬂ¿äÂ¿ä˚¿ã¿ã$¿ã*¿ã8¿ã^¿ãä¿ãù¿ã˜¿å¿å&¿å.¿å8¿åJ¿åP¿å`¿åf¿å∞¿å‹¿å¿ç+¿çE¿ç\¿çz¿çÄ¿çÕ¿ç—¿ç“¿é¿éb¿éÇ¿éà¿é—¿è"¿èl¿èÆ¿è√¿è…¿ê¿ê¿êC¿êI¿êí¿êò¿êÆ¿ê—¿ê◊¿ëD¿ëV¿ëj¿ë´¿ë≈¿ëÙ¿í¿í+¿í2¿íK¿íZ¿í≥¿í∑¿í∏¿ì¿ì%¿ì+¿ì_¿ì´¿ì˙¿îI¿îô¿î¡¿î«¿ï¿ï¿ïd¿ï£¿ïÛ¿ñ;¿ñâ¿ñ°¿ñß¿ñ˜¿ó¿ó¿óm¿óÇ¿óà¿óò¿óû¿óÌ¿ò8¿òÅ¿ò≠¿ò¡¿òÎ¿ô¿ô-¿ôM¿ôT¿ô©¿ô≠¿ôÆ¿ô˚¿ö¿ö!¿ö_¿öÆ¿ö˝¿õ/¿õD¿õJ¿õ{¿õÅ¿õπ¿õø¿ú¿ú¿úR¿ún¿úî¿úÃ¿ú„¿úÍ¿ù!¿ù;¿ùc¿ù¿ùÜ¿ùä¿ùã¿ùÿ¿û&¿ûA¿ûG¿ûÖ¿ûœ¿ü¿üm¿üΩ¿üÂ¿üÎ¿†1¿†7¿†à¿†«¿°¿°_¿°≠¿°≈¿°À¿¢¿¢.¿¢4¿¢D¿¢J¿¢ó¿¢™¿¢˙¿£)¿£=¿£q¿£ç¿£∂¿£÷¿£›¿§B¿§F¿§G¿§î¿§‚¿§˝¿•¿•K¿•ô¿•Á¿¶/¿¶D¿¶J¿¶Ö¿¶ã¿¶√¿¶…¿ß¿ß&¿ßf¿ßÇ¿ß´¿ß„¿ß˙¿®¿®B¿®b¿®ä¿®¶¿®≠¿®±¿®≤¿©¿©¿©¿©I¿©ò¿©Ë¿™¿™¿™A¿™G¿™ó¿™©¿™æ¿™ƒ¿™‘¿™⁄¿´%¿´=¿´j¿´¨¿´‡¿´‰¿´Â¿¨)¿¨u¿¨√¿¨“¿¨ÿ¿≠¿≠]¿≠Æ¿≠≈¿≠À¿Æ¿Æ\¿Æb¿Æ∞¿Æ˙¿ØC¿ØI¿Øö¿Ø·¿ØÁ¿∞2¿∞}¿∞å¿∞°¿∞ß¿∞∑¿∞Ω¿±¿±H¿±ô¿± ¿±ﬁ¿≤5¿≤k¿≤o¿≤p¿≤æ¿≤”¿≤Ÿ¿≥	¿≥Y¿≥ß¿≥Ï¿¥9¿¥?¿¥ã¿¥Ÿ¿µ"¿µq¿µø¿∂
¿∂¿∂`¿∂Ø¿∂Ô¿∑¿∑¿∑i¿∑o¿∑º¿∑„¿∑¯¿∑˛¿∏¿∏¿∏Q¿∏W¿∏e¿∏{¿∏õ¿∏£¿∏≠¿∏ø¿∏≈¿∏˜¿∏˝¿π¿π"¿π_¿πg¿πq¿πÖ¿πœ¿π˘¿π˝¿π˛¿∫K¿∫Å¿∫á¿∫º¿ª¿ª2¿ª8¿ªÅ¿ª¨¿ª≤¿ªÒ¿ª˜¿º=¿ºR¿ºX¿ºn¿ºt¿ºó¿ºù¿º´¿º¬¿Ω¿Ω¿Ω¿Ω*¿Ωs¿Ω¢¿Ω¶¿Ωß¿Ωˆ¿æ'¿æ-¿æe¿æ¢¿æ®¿æÌ¿ø<¿øÑ¿ø—¿øÈ¿øÔ¿¿9¿¿W¿¿]¿¿©¿¿˘¿¡I¿¡t¿¡z¿¡À¿¡—¿¬¿¬F¿¬L¿¬ä¿¬ü¿¬•¿¬ˆ¿√*¿√>¿√†¿√‡¿√‰¿√Â¿ƒ4¿ƒÑ¿ƒ≠¿ƒ≥¿ƒ¿≈-¿≈3¿≈x¿≈«¿∆¿∆\¿∆t¿∆z¿∆À¿«¿«¿«e¿«µ¿»¿»0¿»6¿»á¿»ç¿»⁄¿…¿…¿…F¿…[¿…o¿…¢¿…º¿…ÿ¿…Á¿…Ó¿ 9¿ =¿ >¿ é¿ ù¿ £¿ ∆¿ Ã¿ ⁄¿ ˆ¿À¿À¿À8¿ÀB¿ÀH¿Àô¿À‚¿Ã¿Ã¿Ãe¿Ã≠¿Ã≥¿ÃÛ¿ÕD¿Õc¿Õ®¿Õ¡¿Õ«¿Õ»¿ÕÊ¿Œ3¿Œ}¿Œ~¿Œé¿Œ≠¿Œ…¿œ'¿œÄ¿œ¿¿œÀ¿œ”¿œÊ¿œ¿–¿–¿–¿–\¿–s¿–y¿–ú¿–¢¿–∞¿–Û¿—¿—.¿—@¿—R¿—v¿—~¿—à¿—é¿—ﬂ¿“(¿“S¿“Y¿“¶¿“¨¿“Ï¿”C¿”b¿”ß¿”¿¿”∆¿”«¿”‡¿‘-¿‘w¿‘{¿‘|¿‘≥¿‘π¿’¿’*¿’0¿’Å¿’œ¿÷¿÷3¿÷9¿÷â¿÷’¿◊$¿◊_¿◊õ¿◊π¿◊÷¿◊‹¿ÿ¿ÿe¿ÿ≤¿ÿ„¿Ÿ¿Ÿ¿ŸZ¿Ÿo¿Ÿ{¿Ÿç¿Ÿµ¿Ÿ€¿Ÿˆ¿⁄¿⁄¿⁄%¿⁄h¿⁄ë¿⁄∞¿⁄‡¿€¿€¿€D¿€]¿€m¿€–¿€⁄¿€‚¿‹¿‹¿‹;¿‹\¿‹u¿‹∞¿‹˘¿›m¿›ƒ¿›”¿›‡¿›˜¿ﬁ¿ﬁ;¿ﬁW¿ﬁa¿ﬁy¿ﬁÅ¿ﬁ¬¿ﬂ-¿ﬂo¿ﬂÅ¿ﬂ›¿ﬂÊ¿ﬂÏ¿‡+¿‡2¿‡~¿‡Œ¿·¿·7¿·y¿·ì¿·Ú¿·¯¿‚"¿‚&¿‚'¿‚3¿‚g¿‚i¿‚j¿‚°¿‚§¿‚÷¿‚˚¿„ ¿„F¿„m¿„ö¿„¡¿„Á¿‰¿‰G¿‰w¿‰ß¿‰◊¿Â¿Â;¿Âk¿Âö¿Â»¿Âı¿Ê!¿ÊL¿Ên¿Êò¿Ê¬¿Ê¿Á¿Á?¿Ád¿Áè¿Á∑¿Áﬂ¿Ë¿Ë/¿ËX¿Ë}¿Ëß¿ËÃ¿Ëı¿È¿È?¿Ès¿È†¿È£¿ÈÔ¿Í¿Íf¿Í}¿Í÷¿Í€¿Í˘¿Í˛¿Îz¿Îœ¿Î˙¿ÏS¿Ï∫¿Ï˛¿Ì`¿ÌÉ¿Ìà¿Ì™¿ÌØ¿Ó¿Ó<¿Ók¿Ó£¿Ô¿Ô`¿Ô∆¿¿B¿ç¿œ¿„¿Ò¿Ò¿Ò¿ÒQ¿ÒR¿Òo¿Òâ¿Ò¶¿Ò®¿Ò©¿Ò€¿ÒÍ¿Ò¸¿Ú'¿ÚD¿Úe¿Úö¿Ú©¿Ú›¿Û¿ÛF¿ÛÇ¿Û∏¿Û¬¿ÛÁ¿Ù.¿Ù2¿Ù3¿Ù?¿Ù]¿Ùñ¿ÙÆ¿ÙØ¿Ùˇ¿ı*¿ıZ¿ı[¿ı†¿ı°¿ı¡¿ıÛ¿ˆ3¿ˆó¿ˆ©¿ˆ”¿˜7¿˜Ñ¿˜Ö¿˜’¿¯¿¯9¿¯â¿¯—¿¯Ê¿˘(¿˘t¿˘z¿˘§¿˘‰¿˘Í¿˘˚¿˘ˇ¿˙ ¿˙+¿˙E¿˙Y¿˙_¿˙u¿˙â¿˙è¿˙‘¿˙˙¿˙˛¿˙ˇ¿˚a¿˚í¿˚∂¿˚·¿¸?¿¸C¿¸D¿¸X¿¸¿¸ù¿¸ƒ¿¸Ú¿¸˘¿˝¿˝3¿˝l¿˝ü¿˝¶¿˝ ¿˝÷¿˝ˆ¿˛C¿˛k¿˛r¿˛™¿˛Ã¿˛·¿ˇ¿ˇm¿ˇ•¿ˇ”¿ˇˇ¿ 6¿ e¿ ê¿ ¶¿ —¿ Í¿ ˙¿&¿<¿h¿Å¿ë¿õ¿•¿≤¿È¿¿6¿<¿R¿s¿y¿z¿ﬁ¿A¿N¿É¿„¿È¿Ì¿Ó¿$¿G¿ñ¿∑¿Í¿3¿\¿É¿Â¿A¿ù¿—¿¿J¿è¿û¿¡¿¿7¿F¿X¿k¿u¿¿Ö¿â¿ä¿∞¿∂¿	¿	F¿	L¿	ù¿	π¿
¿
?¿
j¿
ñ¿
¡¿¿Q¿j¿è¿¢¿®¿–¿˚¿¿¿L¿a¿£¿◊¿›¿˜¿¿¿¿'¿M¿g¿∂¿·¿Â¿Ê¿˝¿$¿R¿Y¿}¿®¿’¿˘¿[¿a¿e¿f¿µ¿€¿˝¿¿?¿S¿|¿í¿≥¿π¿Ω¿æ¿◊¿ÿ¿Û¿
¿&¿N¿R¿S¿{¿|¿Ø¿È¿ı¿&¿v¿ƒ¿À¿	¿¿¿4¿`¿|¿©¿≠¿Æ¿¬¿¿.¿2¿3¿p¿v¿«¿ﬂ¿¯¿9¿g¿î¿©¿≠¿Æ¿ﬂ¿Â¿5¿y¿ú¿¢¿Ï¿ˇ¿A¿o¿p¿¿¿¿O¿û¿Ô¿¿>¿c¿j¿k¿ç¿§¿≤¿∏¿π¿‚¿˚¿3¿l¿£¿≈¿€¿¯¿¿+¿S¿o¿Ω¿¿X¿ß¿Ã¿Ÿ¿!¿Z¿Ç¿Õ¿¿;¿Å¿ó¿•¿‰¿¿¿¿"¿E¿K¿O¿P¿k¿™¿„¿Á¿Ë¿ˇ¿ @¿ y¿ }¿ ~¿ ÷¿ ◊¿ ¸¿!?¿!y¿!}¿!~¿!™¿!Î¿"%¿")¿"*¿"i¿"ö¿"Ë¿#$¿#Ü¿#ä¿#ã¿#”¿$¿$K¿$õ¿$ú¿$„¿%¿%¿% ¿%,¿%Ä¿%Å¿%ç¿%’¿&¿&¿&M¿&N¿&Z¿&q¿&}¿&¡¿'¿'f¿'m¿'ñ¿'ö¿'õ¿'ß¿'Ω¿'…¿(¿(^¿(±¿(∏¿(‡¿(‰¿(Â¿(Ò¿)¿)#¿)t¿)≈¿*¿* ¿*d¿*y¿*•¿*∑¿*Õ¿*˝¿+S¿+Ü¿+†¿+¶¿+¿¿+Í¿+Ó¿+Ô¿+˚¿,&¿,2¿,É¿,‘¿-(¿-6¿-=¿-\¿-Ü¿-ä¿-ã¿-‘¿-˚¿.(¿.f¿.j¿.l¿.m¿.î¿.’¿.˙¿/"¿/#¿/N¿/P¿/Q¿/ë¿/ÿ¿/Ÿ¿/Â¿0¿0E¿0I¿0K¿0L¿0ã¿0—¿0“¿0ﬁ¿1
¿1=¿1A¿1C¿1D¿1Ü¿1œ¿1–¿1‹¿2¿2>¿2B¿2D¿2E¿2à¿2“¿2”¿2ﬂ¿3¿3V¿3Z¿3\¿3]¿3ü¿3†¿3Â¿3È¿46¿4C¿4Ü¿4Ø¿4æ¿4Í¿5"¿5(¿5,¿5-¿5a¿5b¿5†¿5À¿5œ¿5–¿5Ú¿6¿6"¿6&¿6'¿6W¿6t¿6ì¿6¨¿6≤¿6∂¿6∑¿6»¿6˜¿7¿7%¿7>¿7D¿7H¿7I¿7y¿7ú¿7≥¿7∑¿7∏¿7‹¿8¿8)¿8;¿8?¿8@¿8]¿8ê¿8ß¿8π¿8Ω¿8æ¿8Â¿8ˇ¿9¿9¿9¿97¿9S¿9W¿9X¿9d¿9z¿9ò¿9ú¿9û¿9ü¿9«¿9À¿:¿:t¿:†¿:»¿:…¿;¿;&¿;,¿;z¿;∑¿;Ω¿<¿<P¿<ú¿<‡¿=?¿=û¿=ü¿=ﬂ¿>!¿>"¿>}¿>~¿>™¿>´¿>ﬂ¿>‡¿?&¿?'¿?H¿?s¿?í¿?Æ¿@¿@&¿@Ö¿@í¿@∞¿@∂¿@˛¿A5¿A<¿A~¿A∂¿A‰¿B¿B,¿BZ¿Bâ¿B∑¿C¿C¿C3¿C?¿Ci¿C£¿C©¿C≠¿CÆ¿C÷¿CÒ¿D¿D
¿D*¿DJ¿Dg¿Dä¿D ¿DÌ¿D˙¿E¿ED¿EO¿EX¿E©¿E…¿EÊ¿F	¿FX¿Fâ¿Fñ¿Fª¿F‡¿FÎ¿FÙ¿F˙¿G¿G¿G¿G¿G)¿G>¿GU¿GÅ¿G¬¿GÏ¿H"¿H(¿HT¿HU¿H¢¿H◊¿I¿Ic¿Ià¿Iƒ¿I≈¿IÚ¿J$¿J*¿J+¿Jz¿J´¿JØ¿J∞¿J‚¿J˛¿KX¿K¶¿K™¿K´¿KÍ¿LA¿LB¿Lõ¿Lú¿L©¿Lµ¿L˛¿MD¿MÅ¿MÇ¿M≈¿MÍ¿N¿N5¿N6¿Nm¿N∫¿NÔ¿O¿O?¿OX¿OÉ¿Oå¿Oö¿O¿¿P¿P_¿Ph¿PÉ¿P”¿PŸ¿P⁄¿Q(¿QQ¿QÉ¿Q•¿Q⁄¿Q‚¿R¿R¿R.¿Ré¿R¢¿RŸ¿RÚ¿S¿SK¿Së¿S»¿S˛¿T)¿Tx¿Tí¿T∞¿T√¿T‘¿Tﬂ¿TÁ¿TÌ¿TÓ¿T˙¿U¿Ua¿UØ¿U¸¿V¿V ¿V;¿VK¿Vf¿Vy¿VÉ¿Vü¿VØ¿VÀ¿Vﬁ¿VË¿VÏ¿VÌ¿V˙¿W¿W=¿Wc¿W}¿W™¿W∑¿W€¿W·¿WÂ¿WÊ¿WÚ¿X,¿X-¿X:¿XF¿Xg¿Xä¿XÀ¿X˚¿Y&¿YR¿YZ¿Y`¿Yd¿Ye¿Yù¿Y∆¿Z¿Z)¿Z<¿ZD¿Zf¿Z®¿ZÆ¿Z≤¿Z≥¿[¿[M¿[j¿[p¿[Ñ¿[õ¿[®¿[≈¿[À¿[œ¿[–¿\¿\K¿\r¿\«¿\€¿]*¿]z¿]´¿]‡¿^/¿^Ä¿^—¿_¿_y¿_¨¿_ˇ¿`N¿`t¿`≤¿`ﬁ¿a¿a6¿aå¿aﬂ¿b¿b-¿bÇ¿b‘¿c¿c$¿cU¿cÜ¿cù¿c≤¿cƒ¿c‘¿d¿d&¿d=¿dK¿då¿dî¿d‰¿d˝¿e6¿e¿eá¿eª¿eﬁ¿e‰¿eË¿eÈ¿f¿f:¿fô¿f¶¿f‘¿f⁄¿fﬁ¿fﬂ¿fÏ¿f¯¿g&¿gL¿gx¿g´¿gÒ¿h)¿h1¿ht¿h†¿hÿ¿h‡¿i¿i	¿iG¿iY¿i}¿i°¿i¬¿iÈ¿j-¿jT¿je¿jé¿j∑¿j∆¿j”¿j›¿jÚ¿j˛¿k¿k¿k¿kK¿kv¿k¢¿k™¿k∞¿k¥¿kµ¿kﬁ¿kÓ¿l¿lT¿l|¿ló¿l»¿lÎ¿lı¿l˝¿m¿m¿m¿m¿m,¿m8¿mN¿mí¿m»¿mŒ¿mˇ¿n¿n¿n¿n)¿n5¿nI¿n_¿nÄ¿nƒ¿nÓ¿o$¿o*¿o.¿o/¿o<¿oH¿o[¿ov¿oÜ¿o°¿o¥¿oæ¿oÁ¿p¿p!¿pF¿px¿pú¿p…¿q¿qO¿qg¿q|¿qµ¿qœ¿q”¿q‘¿r¿rP¿rQ¿rà¿rÏ¿r¿rÒ¿s¿s6¿s7¿sZ¿sr¿sÇ¿s•¿sÃ¿sÌ¿t ¿t
¿t¿tO¿tô¿t„¿u*¿u1¿u`¿uÄ¿u”¿v¿vP¿vu¿v¬¿w¿w¿wf¿wª¿wÓ¿x9¿xÖ¿x“¿xÛ¿y7¿y_¿y£¿y≥¿yÓ¿z<¿z]¿zô¿zﬂ¿{.¿{L¿{ñ¿{±¿{ˇ¿|+¿|e¿|f¿|é¿|™¿|»¿|˜¿}$¿}%¿}_¿}™¿}◊¿}ÿ¿}ˇ¿~+¿~[¿~ö¿~€¿$¿C¿d¿º¿·¿Ä¿Ä¿Ä3¿ÄR¿Äd¿Äl¿Äñ¿Ä•¿Ä≠¿ÄÔ¿Å¿Å,¿Å4¿Å`¿Åè¿ÅØ¿Å ¿ÅÁ¿ÅÌ¿ÅÓ¿Ç6¿Çà¿Çò¿ÇÌ¿É)¿Éj¿Éã¿Éª¿É◊¿ÉÈ¿ÉÒ¿Ñ0¿Ñ^¿Ñm¿Ñu¿Ñv¿ÑÕ¿ÑÛ¿Ö$¿ÖS¿Ög¿Öß¿Ö≤¿Ö‹¿Ö‰¿ÖÂ¿Öˇ¿Ü¿Ü¿ÜX¿Üé¿Üè¿Ü·¿á¿áh¿áµ¿áÕ¿à
¿à@¿àÖ¿à®¿àÈ¿â8¿âG¿âh¿âz¿âÇ¿âÉ¿âŒ¿âÏ¿â˛¿ä¿ä¿ä,¿äR¿äd¿äl¿ä§¿ä”¿äŸ¿ä⁄¿ã¿ã-¿ãp¿ãã¿ã≠¿ãÁ¿å.¿å~¿å…¿åÈ¿ç¿çD¿ç_¿çê¿çõ¿ç¡¿ç—¿é ¿éR¿é£¿éÆ¿é–¿éﬂ¿è*¿è}¿è¥¿èÎ¿ê¿ê¿ê ¿ê!¿ês¿êÕ¿ë¿ë8¿ëÖ¿ë¢¿ë£¿ë“¿í¿í]¿íÇ¿í£¿íÆ¿í‚¿ì(¿ì\¿ìô¿ì£¿ìµ¿ìΩ¿ìæ¿ì¿î2¿îÇ¿îŒ¿îÚ¿ï!¿ïg¿ï§¿ï¸¿ñB¿ñv¿ñ≥¿ñΩ¿ñ≈¿ñˇ¿ó¿ó¿ó+¿ó^¿óç¿ó∏¿ó·¿ò6¿òP¿ò`¿òè¿òø¿òÛ¿ôG¿ôV¿ôÉ¿ôã¿ôï¿ôñ¿ô∫¿ö¿öN¿öè¿ö∞¿ö„¿õ;¿õ`¿õÅ¿õå¿õ≤¿õƒ¿õÃ¿õ¯¿ú:¿úi¿úò¿ú∏¿ú’¿ú¿úˆ¿ú˜¿ùE¿ù°¿ù—¿ùÚ¿û¿û4¿ûa¿û•¿ûÁ¿ûÛ¿ü¿ü¿ü/¿üh¿üü¿üÿ¿üﬁ¿†¿†*¿†e¿†¢¿†™¿†∞¿†¿¿†‚¿†ı¿†ˇ¿°¿°*¿°=¿°G¿°c¿°s¿°è¿°¢¿°¨¿°∞¿°±¿°“¿°”¿¢¿¢B¿¢_¿¢Æ¿¢˝¿£N¿£ï¿£∫¿£—¿£˚¿§?¿§Y¿§ƒ¿§ÿ¿•.¿•é¿• ¿•„¿¶¿¶*¿¶N¿¶i¿¶Ü¿¶Ê¿¶Û¿ß3¿ßG¿ßl¿ßú¿ß·¿®!¿®7¿®C¿®f¿®ê¿®∂¿®⁄¿®ˆ¿©¿©:¿©ö¿©¿¿©Õ¿™¿™P¿™ë¿™Õ¿™„¿™Ô¿´G¿´É¿´¥¿´¿¿´Â¿¨¿¨D¿¨u¿¨Å¿¨¶¿¨¯¿≠5¿≠V¿≠x¿≠ò¿≠µ¿Æ¿Æ$¿Æd¿Æz¿ÆÜ¿Æ´¿Æ“¿Ø¿Ø¿Ø:¿ØF¿Øm¿Øì¿ØÆ¿Øˇ¿∞¿∞¿∞Z¿∞ß¿∞»¿∞ﬁ¿∞Í¿±+¿±L¿±r¿±Æ¿±ø¿±Ê¿≤¿≤H¿≤\¿≤Å¿≤¶¿≤Õ¿≥ ¿≥¿≥.¿≥:¿≥Y¿≥v¿≥÷¿≥„¿¥%¿¥9¿¥`¿¥ë¿¥Ã¿¥ﬂ¿¥Î¿µ¿µ]¿µi¿µ°¿µµ¿µ€¿∂-¿∂c¿∂{¿∂£¿∂ ¿∂¿∑	¿∑¿∑#¿∑7¿∑O¿∑à¿∑é¿∑∆¿∑È¿∑Í¿∏6¿∏L¿∏k¿∏l¿∏À¿π
¿πP¿πö¿π¢¿π®¿πÀ¿πÔ¿∫¿∫\¿∫£¿∫Ô¿ª¿ª$¿ª*¿ª+¿ªy¿ªÜ¿ª∫¿ªÎ¿ªÒ¿º¿º@¿ºF¿º`¿ºç¿ºì¿º±¿ºµ¿º∂¿º›¿Ω¿Ω+¿ΩR¿Ω`¿Ωf¿Ωó¿ΩÌ¿æ$¿æ*¿æ+¿æ\¿æ≥¿æÍ¿æ¿æÙ¿æı¿ø¿ø=¿øV¿øá¿ø≥¿ø«¿øŸ¿ø·¿¿¿¿$¿¿a¿¿j¿¿k¿¿§¿¿·¿¡¿¡¿¡Q¿¡Y¿¡é¿¡°¿¡ﬁ¿¡Á¿¬(¿¬`¿¬ú¿¬§¿¬∂¿¬º¿¬¿¿¬¡¿√¿√<¿√l¿√p¿√q¿√¥¿√Ï¿√˛¿ƒ¿ƒ¿ƒ¿ƒ¿ƒf¿ƒ´¿ƒΩ¿ƒ√¿≈ ¿≈¿≈¿≈f¿≈Å¿≈∏¿≈À¿≈—¿≈·¿∆¿∆)¿∆á¿∆‰¿«2¿«Y¿«z¿«è¿«ö¿«¢¿«µ¿«ø¿»¿»[¿»Ç¿»î¿»¡¿»˚¿…¿…u¿…Ñ¿…¢¿ ¿ 0¿ ?¿ p¿ ì¿ ß¿ ‡¿ Ô¿ ˝¿À¿À¿À(¿Àf¿Àx¿Àï¿Àœ¿ÀÈ¿ÃH¿ÃW¿Ã¨¿Ã›¿Õ ¿Õ¿ÕM¿Õ\¿Õj¿Õt¿Õâ¿Õï¿Õõ¿Õ√¿Õ’¿ÕŸ¿Õ⁄¿Œ¿Œ¿Œ@¿ŒF¿ŒÖ¿Œã¿Œæ¿Œƒ¿Œ⁄¿Œ‡¿œ¿œ	¿œ¿œ4¿œ^¿œf¿œp¿œÇ¿œà¿œò¿œû¿œË¿–¿–¿–r¿–π¿–Ω¿–æ¿–Î¿–Ò¿—.¿—4¿—g¿—m¿—¥¿—∫¿“¿“	¿“¿“%¿“H¿“N¿“\¿“x¿“¨¿“¥¿“æ¿“–¿“‰¿”=¿”I¿”}¿”Œ¿”’¿‘¿‘)¿‘E¿‘Ä¿‘æ¿‘’¿‘ˆ¿‘˙¿‘˚¿’G¿’ñ¿’≥¿’π¿’˜¿’˝¿÷<¿÷B¿÷u¿÷{¿÷ë¿÷ó¿÷∫¿÷¿¿÷Œ¿÷Ë¿◊ ¿◊(¿◊2¿◊D¿◊J¿◊Z¿◊`¿◊±¿◊‚¿◊ˆ¿ÿ@¿ÿX¿ÿh¿ÿ¿ÿÜ¿ÿ™¿ÿ‚¿ÿ¯¿ÿˇ¿Ÿ¿Ÿ¿ŸP¿Ÿü¿Ÿº¿Ÿ¬¿⁄
¿⁄¿⁄N¿⁄T¿⁄õ¿⁄°¿⁄Í¿⁄¿€¿€¿€/¿€5¿€C¿€\¿€û¿€¶¿€∞¿€¬¿€÷¿‹&¿‹>¿‹N¿‹e¿‹l¿‹x¿‹¨¿‹˝¿›¿›A¿›X¿›t¿›Ø¿›Ù¿ﬁ¿ﬁ?¿ﬁC¿ﬁD¿ﬁê¿ﬁù¿ﬁ£¿ﬁ‹¿ﬁ‚¿ﬂ!¿ﬂ'¿ﬂZ¿ﬂ`¿ﬂv¿ﬂ|¿ﬂü¿ﬂ•¿ﬂ≥¿ﬂ…¿ﬂ˘¿‡¿‡¿‡¿‡#¿‡3¿‡9¿‡Ñ¿‡∞¿‡ƒ¿·	¿·!¿·1¿·H¿·O¿·d¿·û¿·¢¿·£¿·Ô¿·¸¿‚¿‚E¿‚K¿‚Ñ¿‚ä¿‚—¿‚◊¿„ ¿„&¿„<¿„B¿„e¿„k¿„y¿„ç¿„«¿„œ¿„Ÿ¿„Î¿„ˇ¿‰J¿‰b¿‰r¿‰â¿‰ê¿‰•¿‰Ê¿‰Í¿‰Î¿Â<¿Âz¿ÂÄ¿Â¡¿Â«¿Ê¿Ê¿Ê?¿ÊE¿Ê[¿Êa¿ÊÑ¿Êä¿Êò¿Êª¿Á¿Á¿Á¿Á1¿Á7¿ÁG¿ÁM¿Áù¿ÁÃ¿Á‡¿Ë¿Ë2¿ËR¿Ëi¿Ëp¿Ë”¿Ë◊¿Ëÿ¿È)¿Èg¿Èm¿È∏¿Èæ¿Èˇ¿Í¿ÍL¿ÍR¿Íõ¿Í°¿Í∑¿ÍΩ¿Í‡¿ÍÊ¿ÍÙ¿Î¿Îm¿Îu¿Î¿Îë¿Î•¿Î‰¿Î˝¿Ï¿Ï4¿Ï;¿ÏG¿Ï{¿ÏÃ¿Ï”¿Ì¿Ì*¿ÌF¿ÌÅ¿Ìø¿ÌÔ¿Ó¿Ó¿Ó¿ÓD¿ÓJ¿Óx¿Ó~¿ÓΩ¿Ó√¿ÓŸ¿Óﬂ¿Ô¿Ô¿Ô¿Ô/¿ÔM¿Ôp¿ÔØ¿Ôº¿Ô«¿Ôœ¿ÔŸ¿ÔÎ¿ÔÒ¿¿¿S¿o¿É¿∫¿Ò¿Ò-¿Ò1¿Ò2¿Òe¿Ò~¿Òé¿Ú¿ÚT¿Úg¿Úq¿ÚÑ¿Úà¿Úâ¿Ú¥¿Ú∫¿ÚÚ¿Ú¯¿Û&¿Û,¿Ûd¿Ûj¿Û≥¿Ûπ¿Ûœ¿ÛÚ¿Û¯¿ÙZ¿Ùl¿ÙÄ¿Ù¨¿Ù⁄¿ÙÒ¿Ù¯¿ı¿ı0¿ın¿ıu¿ıÅ¿ıµ¿ˆ¿ˆ¿ˆN¿ˆp¿ˆå¿ˆ«¿˜¿˜¿˜=¿˜A¿˜B¿˜i¿˜Ñ¿˜î¿˜Ø¿˜¬¿˜Ã¿˜¯¿¯0¿¯I¿¯e¿¯u¿¯ë¿¯§¿¯Æ¿¯—¿¯’¿¯÷¿˘¿˘ ¿˘p¿˘π¿˘ˇ¿˙ ¿˙+¿˙F¿˙s¿˙t¿˙ñ¿˙«¿˚	¿˚=¿˚N¿˚p¿˚z¿˚Æ¿˚Ø¿˚Ê¿¸F¿¸p¿¸¶¿¸∆¿¸˛¿˝¿˝¿˝K¿˝S¿˝T¿˝∞¿˝∂¿˝”¿˝◊¿˝ÿ¿˛(¿˛p¿˛Ñ¿˛ä¿˛√¿˛…¿ˇ¿ˇ¿ˇ$¿ˇ*¿ˇM¿ˇS¿ˇa¿ˇ|¿ˇ´¿ˇŒ¿ ¿ ¿ )¿ 1¿ ;¿ M¿ S¿ c¿ i¿ π¿ Ë¿ ¸¿A¿Z¿j¿q¿ö¿µ¿¿¿$¿@¿D¿E¿ë¿Ÿ¿Ì¿Û¿6¿<¿u¿{¿≥¿π¿¿¿¿A¿G¿µ¿«¿€¿&¿T¿d¿{¿Ç¿é¿∫¿¯¿ˇ¿¿?¿ê¿ó¿ÿ¿˙¿¿Q¿ñ¿¿¿·¿Â¿Ê¿8¿S¿c¿~¿ë¿õ¿«¿Ë¿Ù¿	(¿	\¿	c¿	¢¿	˝¿
¿
2¿
B¿
^¿
q¿
{¿
û¿
¢¿
£¿
Û¿$¿*¿f¿l¿´¿±¿«¿Õ¿¿ˆ¿¿%¿Q¿´¿œ¿⁄¿‚¿Ï¿˛¿¿
¿¿ ¿j¿ñ¿™¿¿5¿b¿Ä¿”¿‰¿Î¿¿¿¿X¿â¿è¿’¿€¿¿¿U¿[¿§¿™¿¿¿„¿È¿\¿n¿Ç¿º¿Î¿¿"¿)¿5¿d¿¢¿©¿µ¿È¿:¿A¿Ç¿ß¿√¿˛¿<¿l¿ç¿ë¿í¿·¿¸¿¿'¿:¿D¿p¿†¿ÿ¿˝¿¿T¿{¿£¿´¿Ω¿√¿ﬂ¿‡¿¿¿¿)¿L¿P¿Q¿ã¿ë¿¬¿»¿ÿ¿ﬁ¿-¿x¿¡¿Ì¿¿e¿Ä¿©¿º¿¿"¿)¿-¿.¿h¿n¿©¿Ø¿‡¿Ê¿¿$¿m¿Å¿±¿◊¿¿&¿-¿V¿b¿ë¿œ¿÷¿‚¿¿g¿n¿Ø¿‘¿¿+¿l¿ê¿±¿µ¿∂¿˘¿¿7¿E¿K¿[¿v¿â¿ì¿Œ¿˙¿ M¿ †¿ ¨¿ Õ¿!¿!!¿!Q¿!x¿!Æ¿! ¿!⁄¿!ˆ¿"	¿"¿")¿"N¿"T¿"X¿"Y¿"£¿"‹¿"‚¿#¿##¿#3¿#9¿#Ü¿#ô¿#È¿$¿$,¿$Z¿$É¿$£¿$™¿$”¿$ˇ¿%¿%m¿%Ä¿%á¿%ã¿%å¿%÷¿&¿&¿&Z¿&`¿&õ¿&°¿&Ÿ¿&ﬂ¿'(¿'<¿'v¿'ü¿'◊¿'Ó¿'ı¿(!¿(-¿(\¿(ö¿(°¿(≠¿(·¿)2¿)9¿)z¿)ü¿)ª¿)ˆ¿*7¿*c¿*Ñ¿*à¿*â¿*‘¿*Ô¿*ˇ¿+¿+-¿+7¿+ì¿+Ô¿+˚¿,"¿,r¿,y¿,ö¿,≥¿,⁄¿,È¿,Ò¿-¿-	¿-Y¿-Ä¿-∂¿-“¿-‚¿-˛¿.¿.¿.¿. ¿.K¿.Q¿.Å¿.á¿.ó¿.ù¿.Ë¿/ ¿/¿/v¿/ñ¿/ ¿/ﬁ¿/‰¿0¿0^¿0q¿0w¿0ó¿0…¿0›¿0„¿1"¿1&¿1'¿1r¿1¿¿1Ù¿1˙¿2,¿22¿2B¿2H¿2ë¿2Ÿ¿3(¿3Y¿3m¿3≠¿4¿4)¿4=¿4C¿4s¿4t¿4¡¿4ˆ¿5A¿5T¿5Z¿5n¿5∞¿5√¿5…¿5 ¿6,¿6Q¿6§¿6∑¿6Ω¿6æ¿6Ï¿7¿7)¿7M¿7b¿7w¿7†¿7ﬂ¿7Ù¿7˙¿7˛¿7ˇ¿8/¿85¿8b¿8h¿8~¿8Ñ¿8ª¿8¡¿8œ¿8Î¿9¿9¿9¿9(¿9>¿9D¿9v¿9|¿9ä¿9ß¿9€¿9„¿9Ì¿9ˇ¿:¿:@¿:[¿:k¿:Ü¿:ô¿:£¿:ı¿;,¿;`¿;¶¿;˜¿<0¿<d¿<n¿<®¿<∞¿<Ω¿<Ÿ¿=¿=¿=M¿=Ç¿=à¿=È¿=˘¿>¿>(¿>2¿>U¿>Y¿>Z¿>ô¿>ü¿>—¿>◊¿>Ì¿>Û¿?¿?¿?*¿?C¿?~¿?Ü¿?ê¿?¢¿?Œ¿@'¿@G¿@o¿@¿@á¿@î¿@‚¿@Ë¿@Ï¿@Ì¿A:¿A@¿Au¿Aâ¿AŒ¿AÈ¿A˘¿B¿B'¿B1¿BW¿BÑ¿B‹¿B¯¿C+¿C;¿CW¿Cj¿Ct¿Cä¿CÂ¿CÎ¿CÔ¿C¿DA¿DÖ¿Dã¿D≈¿DŸ¿E)¿ED¿ET¿Eo¿EÇ¿Eå¿E∏¿F¿Fp¿F|¿F£¿FÛ¿F˙¿G¿G4¿G[¿Gj¿Gr¿GÑ¿Gä¿G⁄¿H ¿H3¿HC¿H_¿Hr¿H|¿HÄ¿HÅ¿H“¿Hÿ¿I(¿Ix¿I≈¿J¿J9¿J?¿Jå¿J›¿Jı¿K"¿Kn¿Kº¿K‘¿KÓ¿K˛¿L#¿L>¿LQ¿L[¿L®¿L¯¿M'¿Mr¿Mù¿M¿N¿N5¿NF¿Nó¿N¢¿N´¿N∏¿Nı¿N˚¿O¿OY¿Ox¿Oï¿O ¿O–¿O—¿O·¿P¿P¿P$¿P(¿P)¿P=¿Pg¿P«¿P›¿P·¿P‚¿Q%¿QM¿Qx¿Q¢¿QÈ¿QÌ¿QÓ¿R5¿RZ¿R`¿Rp¿Rv¿R¿¿R˜¿S@¿SA¿Sè¿SÁ¿SË¿T#¿T)¿Tm¿Ts¿TØ¿TŒ¿T¿U¿UF¿Uc¿Uè¿Uò¿U◊¿U¸¿V:¿Vû¿V¶¿VÏ¿W(¿W0¿W6¿W:¿W;¿W[¿Wa¿WØ¿WÛ¿X¿X:¿X\¿XÑ¿X ¿XÒ¿X˘¿Xˇ¿Y¿Y¿Y0¿Y1¿Ye¿Yç¿Yë¿Yí¿Y»¿YÛ¿Y˜¿Y¯¿Z¿ZÖ¿Z–¿[¿[`¿[è¿[÷¿\¿\-¿\Q¿\†¿\«¿\—¿\◊¿]$¿](¿])¿]v¿]æ¿]¿^¿^#¿^+¿^1¿^B¿^F¿^G¿^ì¿^⁄¿^Û¿_%¿_@¿_Z¿_b¿_h¿_{¿_¿_Ä¿_ç¿_ô¿_¿¿_€¿_¸¿_˝¿`K¿`ô¿`¨¿`—¿a¿aL¿aõ¿a„¿b¿b5¿bA¿bë¿bÃ¿c¿c>¿cK¿cy¿cê¿cõ¿c¥¿c·¿d¿dG¿dg¿dΩ¿dÂ¿e!¿e=¿ec¿eÑ¿e©¿e“¿f¿f&¿fH¿fn¿f•¿fŸ¿g#¿gU¿gj¿g}¿gé¿gù¿g™¿gµ¿gæ¿g≈¿g…¿gÀ¿gÃ¿g¸¿g˝¿h&¿hL¿hv¿hê¿h∞¿h’¿h˙¿i(¿ic¿iÉ¿i®¿i—¿i“¿j¿jP¿jo¿j«¿j€¿k¿kX¿kÑ¿k›¿k„¿kÁ¿kË¿l¿l*¿lG¿lH¿li¿lj¿lã¿l¿¿lﬂ¿l„¿l‰¿lı¿m ¿mA¿mE¿mF¿mS¿mã¿må¿m®¿m»¿n ¿n¿n@¿nX¿ne¿n}¿nü¿n√¿n ¿nŒ¿n–¿n—¿o¿o7¿oO¿ol¿oí¿oΩ¿oæ¿p¿p%¿pQ¿pr¿pù¿p«¿p»¿p‘¿pˇ¿q*¿qÅ¿qÖ¿qÜ¿qí¿q≤¿q«¿q‚¿q„¿qÔ¿r(¿rÜ¿rò¿rú¿rû¿rü¿rË¿s¿s-¿sJ¿sp¿sü¿s†¿sÏ¿t¿t7¿tL¿tÄ¿t¬¿t”¿t¸¿u'¿uU¿uV¿ub¿u”¿u˜¿u¯¿v¿v/¿vI¿v£¿vø¿v¸¿w¿w3¿w\¿wd¿wh¿wi¿wu¿wï¿wÀ¿wÊ¿wÁ¿wÛ¿x,¿xz¿xç¿xë¿xì¿xî¿xÂ¿y)¿y^¿y_¿yn¿yo¿yë¿y´¿yÏ¿z¿zT¿zr¿z©¿{¿{*¿{+¿{t¿{ø¿{¿¿{Ô¿|¿|E¿|W¿|_¿|`¿|ç¿|™¿|«¿}+¿}¿}ú¿}÷¿~¿~/¿~^¿~é¿~Û¿¿:¿p¿z¿å¿î¿ï¿µ¿–¿Ä'¿Ä\¿Ä|¿Ä©¿ÄÛ¿Å)¿ÅÑ¿Å°¿Å√¿Ç¿Çj¿Çü¿Çß¿Ç≠¿Ç∆¿É&¿Év¿Éw¿Éø¿É¿¿ÉÃ¿Ñ-¿Ñ4¿Ñ5¿ÑS¿Ñy¿Ñí¿Ñò¿Ñú¿Ñù¿Ñ¥¿ÑÕ¿Ñ‰¿Ö¿Ö1¿Ö7¿Öc¿Öü¿Öº¿Öˆ¿Ü/¿Ü[¿ÜÜ¿Üå¿Üê¿Üë¿ÜÊ¿á¿á0¿á6¿á^¿áá¿áù¿á•¿á´¿áº¿á¿¿á¡¿á“¿áÏ¿à¿à#¿à)¿àK¿àb¿àf¿àg¿ày¿àz¿àØ¿à∞¿â	¿â#¿âO¿âÖ¿âﬁ¿âÛ¿â˘¿äO¿äq¿äÜ¿äå¿äº¿ã¿ã ¿ã3¿ã7¿ã8¿ã[¿ã\¿ãh¿ãù¿ãÆ¿ã≤¿ã≥¿ãø¿ã¸¿åE¿ås¿å∫¿å“¿ç¿ç¿ç¿ç¿ç¿ç&¿ç`¿çÉ¿çá¿çà¿çî¿çØ¿ç—¿ç’¿ç÷¿ç‚¿é¿é¿é¿éI¿éM¿éú¿é∆¿è¿è¿è`¿è´¿è∫¿èæ¿ê¿êU¿êY¿êà¿êÍ¿êÎ¿ë'¿ë+¿ëy¿ëï¿ëô¿ë…¿í¿í¿íV¿íç¿íë¿í‡¿ì/¿ìs¿ìw¿ì«¿î¿î^¿î≠¿î¸¿ï¿ï¿ïd¿ïâ¿ïç¿ïﬁ¿ñ,¿ñs¿ñó¿ñõ¿ñÊ¿ó5¿ói¿óm¿óÅ¿ó—¿ò¿ò¿òi¿òy¿òæ¿òÁ¿ô¿ô5¿ôR¿ôg¿ôm¿ôn¿ôº¿ö¿öK¿ö|¿ö}¿ö¿¿ö∆¿õ¿õc¿õÆ¿õœ¿õ’¿ú"¿úp¿úé¿úª¿úº¿ù¿ù¿ù¿ùZ¿ùä¿ùã¿ùÿ¿ùÈ¿ùÔ¿û8¿ûs¿û¡¿ûÁ¿ûˇ¿ü¿üV¿üy¿üê¿üî¿üï¿üÿ¿üﬁ¿†.¿†U¿†V¿†ç¿†ì¿†«¿†Ë¿†¸¿†˝¿°	¿°1¿°2¿°>¿°d¿°}¿°†¿°¶¿°™¿°´¿°∑¿°“¿°Ì¿¢¿¢.¿¢2¿¢3¿¢?¿¢g¿¢Å¿¢ù¿¢°¿¢¢¿¢º¿¢Ω¿¢…¿¢‹¿¢Ò¿£1¿£G¿£K¿£L¿£X¿£ó¿£ò¿£∫¿£ˇ¿§¿§¿§¿§C¿§q¿§ç¿§…¿§Û¿•
¿•¿•"¿•d¿•y¿•í¿•∑¿•ø¿•√¿•ƒ¿¶$¿¶&¿¶'¿¶g¿¶k¿¶º¿¶Œ¿¶“¿ß¿ß\¿ßê¿ß⁄¿®¿®¿®b¿®É¿®û¿®ü¿®´¿®¡¿©¿©¿©    _kAndroidRefocusingDelayDurationRoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate"kDefaultRouteTraversalEdgeBehavior-kDefaultRouteDirectionalTraversalEdgeBehavior	Navigator_RouteLifecycle_RoutePlaceholder_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservation_HistoryNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyRestorableRouteFutureNavigationNotification!,flutter.widgets.navigator.Route.requestFocusYIf [requestFocus] is not provided, the value of [Navigator.requestFocus] is
used instead.0flutter.widgets.navigator.onPopInvokedWithResultÄËCalled after a route pop was handled.

Even when the pop is canceled, for example by a [PopScope] widget, this
will still be called. The `didPop` parameter indicates whether or not the
back navigation actually happened successfully.,flutter.widgets.navigator.restorationScopeIdÑIf a restoration ID is provided, the navigator will persist its internal
state (including the route history as well as the restorable state of the
routes) and restore it during state restoration.

If no restoration ID is provided, the route history stack will not be
restored and state restoration is disabled for the individual routes as
well.

The state is persisted in a [RestorationBucket] claimed from
the surrounding [RestorationScope] using the provided restoration ID.
Within that bucket, the [Navigator] also creates a new [RestorationScope]
for its children (the [Route]s).

See also:

 * [RestorationManager], which explains how state restoration works in
   Flutter.
 * [RestorationMixin], which contains a runnable code sample showcasing
   state restoration in Flutter.
 * [Navigator], which explains under the heading "state restoration"
   how and under what conditions the navigator restores its state.
 * [Navigator.restorablePush], which includes an example showcasing how
   to push a restorable route onto the navigator.4flutter.widgets.navigator.routeTraversalEdgeBehaviorÇThe focus inside routes installed in the top of the app affects how
the app behaves with respect to the platform content surrounding it.
For example, on the web, an app is at a minimum surrounded by browser UI,
such as the address bar, browser tabs, and more. The user should be able
to reach browser UI using normal focus shortcuts. Similarly, if the app
is embedded within an `<iframe>` or inside a custom element, it should
be able to participate in the overall focus traversal, including elements
not rendered by Flutter.#flutter.widgets.navigator.pushNamedÇHThe route name will be passed to the [Navigator.onGenerateRoute]
callback. The returned route will be pushed into the navigator.

The new route and the previous route (if any) are notified (see
[Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
[Navigator.observers], they will be notified as well (see
[NavigatorObserver.didPush]).

Ongoing gestures within the current route are canceled when a new route is
pushed.

The `T` type argument is the type of the return value of the route.

To use [pushNamed], an [Navigator.onGenerateRoute] callback must be
provided,/flutter.widgets.navigator.pushNamed.returnValuezReturns a [Future] that completes to the `result` value passed to [pop]
when the pushed route is popped off the navigator.#flutter.widgets.Navigator.pushNamedÅoThe provided `arguments` are passed to the pushed route via
[RouteSettings.arguments]. Any object can be passed as `arguments` (e.g. a
[String], [int], or an instance of a custom `MyRouteArguments` class).
Often, a [Map] is used to pass key-value pairs.

The `arguments` may be used in [Navigator.onGenerateRoute] or
[Navigator.onUnknownRoute] to construct the route.-flutter.widgets.navigator.restorablePushNamedÄ¡Unlike [Route]s pushed via [pushNamed], [Route]s pushed with this method
are restored during state restoration according to the rules outlined
in the "State Restoration" section of [Navigator].7flutter.widgets.Navigator.restorablePushNamed.argumentsÅQThe provided `arguments` are passed to the pushed route via
[RouteSettings.arguments]. Any object that is serializable via the
[StandardMessageCodec] can be passed as `arguments`. Often, a Map is used
to pass key-value pairs.

The arguments may be used in [Navigator.onGenerateRoute] or
[Navigator.onUnknownRoute] to construct the route.9flutter.widgets.Navigator.restorablePushNamed.returnValueÅ4The method returns an opaque ID for the pushed route that can be used by
the [RestorableRouteFuture] to gain access to the actual [Route] object
added to the navigator and its return value. You can ignore the return
value of this method, if you do not care about the route object or the
route's return value..flutter.widgets.navigator.pushReplacementNamedÖIf non-null, `result` will be used as the result of the route that is
removed; the future that had been returned from pushing that old route
will complete with `result`. Routes such as dialogs or popup menus
typically use this mechanism to return the value selected by the user to
the widget that created their route. The type of `result`, if provided,
must match the type argument of the class of the old route (`TO`).

The route name will be passed to the [Navigator.onGenerateRoute]
callback. The returned route will be pushed into the navigator.

The new route and the route below the removed route are notified (see
[Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
[Navigator.observers], they will be notified as well (see
[NavigatorObserver.didReplace]). The removed route is notified once the
new route has finished animating (see [Route.didComplete]). The removed
route's exit animation is not run (see [popAndPushNamed] for a variant
that animates the removed route).

Ongoing gestures within the current route are canceled when a new route is
pushed.

The `T` type argument is the type of the return value of the new route,
and `TO` is the type of the return value of the old route.

To use [pushReplacementNamed], a [Navigator.onGenerateRoute] callback must
be provided.8flutter.widgets.navigator.restorablePushReplacementNamedÄÃUnlike [Route]s pushed via [pushReplacementNamed], [Route]s pushed with
this method are restored during state restoration according to the rules
outlined in the "State Restoration" section of [Navigator].)flutter.widgets.navigator.popAndPushNamedÑThe popping of the previous route is handled as per [pop].

The new route's name will be passed to the [Navigator.onGenerateRoute]
callback. The returned route will be pushed into the navigator.

The new route, the old route, and the route below the old route (if any)
are all notified (see [Route.didPop], [Route.didComplete],
[Route.didPopNext], [Route.didPush], and [Route.didChangeNext]). If the
[Navigator] has any [Navigator.observers], they will be notified as well
(see [NavigatorObserver.didPop] and [NavigatorObserver.didPush]). The
animations for the pop and the push are performed simultaneously, so the
route below may be briefly visible even if both the old route and the new
route are opaque (see [TransitionRoute.opaque]).

Ongoing gestures within the current route are canceled when a new route is
pushed.

The `T` type argument is the type of the return value of the new route,
and `TO` is the return value type of the old route.

To use [popAndPushNamed], a [Navigator.onGenerateRoute] callback must be provided.3flutter.widgets.navigator.restorablePopAndPushNamedÄ«Unlike [Route]s pushed via [popAndPushNamed], [Route]s pushed with
this method are restored during state restoration according to the rules
outlined in the "State Restoration" section of [Navigator].1flutter.widgets.navigator.pushNamedAndRemoveUntilÖEThe predicate may be applied to the same route more than once if
[Route.willHandlePopInternally] is true.

To remove routes until a route with a certain name, use the
[RoutePredicate] returned from [ModalRoute.withName].

To remove all the routes below the pushed route, use a [RoutePredicate]
that always returns false (e.g. `(Route<dynamic> route) => false`).

The removed routes are removed without being completed, so this method
does not take a return value argument.

The new route's name (`routeName`) will be passed to the
[Navigator.onGenerateRoute] callback. The returned route will be pushed
into the navigator.

The new route and the route below the bottommost removed route (which
becomes the route below the new route) are notified (see [Route.didPush]
and [Route.didChangeNext]). If the [Navigator] has any
[Navigator.observers], they will be notified as well (see
[NavigatorObserver.didPush] and [NavigatorObserver.didRemove]). The
removed routes are disposed, once the new route has finished animating,
and the futures that had been returned from pushing those routes
will complete.

Ongoing gestures within the current route are canceled when a new route is
pushed.

The `T` type argument is the type of the return value of the new route.

To use [pushNamedAndRemoveUntil], an [Navigator.onGenerateRoute] callback
must be provided.;flutter.widgets.navigator.restorablePushNamedAndRemoveUntilÄœUnlike [Route]s pushed via [pushNamedAndRemoveUntil], [Route]s pushed with
this method are restored during state restoration according to the rules
outlined in the "State Restoration" section of [Navigator].flutter.widgets.navigator.pushÅwThe new route and the previous route (if any) are notified (see
[Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
[Navigator.observers], they will be notified as well (see
[NavigatorObserver.didPush]).

Ongoing gestures within the current route are canceled when a new route is
pushed.

The `T` type argument is the type of the return value of the route.(flutter.widgets.navigator.restorablePushÄºUnlike [Route]s pushed via [push], [Route]s pushed with this method are
restored during state restoration according to the rules outlined in the
"State Restoration" section of [Navigator].(flutter.widgets.Navigator.restorablePushÇ!The method takes a [RestorableRouteBuilder] as argument, which must be a
_static_ function annotated with `@pragma('vm:entry-point')`. It must
instantiate and return a new [Route] object that will be added to the
navigator. The provided `arguments` object is passed to the
`routeBuilder`. The navigator calls the static `routeBuilder` function
again during state restoration to re-create the route object.

Any object that is serializable via the [StandardMessageCodec] can be
passed as `arguments`. Often, a Map is used to pass key-value pairs.)flutter.widgets.navigator.pushReplacementÉ«If non-null, `result` will be used as the result of the route that is
removed; the future that had been returned from pushing that old route will
complete with `result`. Routes such as dialogs or popup menus typically
use this mechanism to return the value selected by the user to the widget
that created their route. The type of `result`, if provided, must match
the type argument of the class of the old route (`TO`).

The new route and the route below the removed route are notified (see
[Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
[Navigator.observers], they will be notified as well (see
[NavigatorObserver.didReplace]). The removed route is notified once the
new route has finished animating (see [Route.didComplete]).

Ongoing gestures within the current route are canceled when a new route is
pushed.

The `T` type argument is the type of the return value of the new route,
and `TO` is the type of the return value of the old route.3flutter.widgets.navigator.restorablePushReplacementÄ«Unlike [Route]s pushed via [pushReplacement], [Route]s pushed with this
method are restored during state restoration according to the rules
outlined in the "State Restoration" section of [Navigator].,flutter.widgets.navigator.pushAndRemoveUntilÑöThe predicate may be applied to the same route more than once if
[Route.willHandlePopInternally] is true.

To remove routes until a route with a certain name, use the
[RoutePredicate] returned from [ModalRoute.withName].

To remove all the routes below the pushed route, use a [RoutePredicate]
that always returns false (e.g. `(Route<dynamic> route) => false`).

The removed routes are removed without being completed, so this method
does not take a return value argument.

The newly pushed route and its preceding route are notified for
[Route.didPush]. After removal, the new route and its new preceding route,
(the route below the bottommost removed route) are notified through
[Route.didChangeNext]). If the [Navigator] has any [Navigator.observers],
they will be notified as well (see [NavigatorObserver.didPush] and
[NavigatorObserver.didRemove]). The removed routes are disposed of and
notified, once the new route has finished animating. The futures that had
been returned from pushing those routes will complete.

Ongoing gestures within the current route are canceled when a new route is
pushed.

The `T` type argument is the type of the return value of the new route.6flutter.widgets.navigator.restorablePushAndRemoveUntilÄ Unlike [Route]s pushed via [pushAndRemoveUntil], [Route]s pushed with this
method are restored during state restoration according to the rules
outlined in the "State Restoration" section of [Navigator].!flutter.widgets.navigator.replaceÉüThe old route must not be currently visible, as this method skips the
animations and therefore the removal would be jarring if it was visible.
To replace the top-most route, consider [pushReplacement] instead, which
_does_ animate the new route, and delays removing the old route until the
new route has finished animating.

The removed route is removed and completed with a `null` value.

The new route, the route below the new route (if any), and the route above
the new route, are all notified (see [Route.didReplace],
[Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
has any [Navigator.observers], they will be notified as well (see
[NavigatorObserver.didReplace]). The removed route is disposed with its
future completed.

This can be useful in combination with [removeRouteBelow] when building a
non-linear user experience.

The `T` type argument is the type of the return value of the new route.+flutter.widgets.navigator.restorableReplaceÄΩUnlike [Route]s added via [replace], [Route]s added with this method are
restored during state restoration according to the rules outlined in the
"State Restoration" section of [Navigator].+flutter.widgets.navigator.replaceRouteBelowÉ6The old route must not be current visible, as this method skips the
animations and therefore the removal would be jarring if it was visible.
To replace the top-most route, consider [pushReplacement] instead, which
_does_ animate the new route, and delays removing the old route until the
new route has finished animating.

The removed route is removed and completed with a `null` value.

The new route, the route below the new route (if any), and the route above
the new route, are all notified (see [Route.didReplace],
[Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
has any [Navigator.observers], they will be notified as well (see
[NavigatorObserver.didReplace]). The removed route is disposed with its
future completed.

The `T` type argument is the type of the return value of the new route.5flutter.widgets.navigator.restorableReplaceRouteBelowÄ—Unlike [Route]s added via [restorableReplaceRouteBelow], [Route]s added
with this method are restored during state restoration according to the
rules outlined in the "State Restoration" section of [Navigator]. flutter.widgets.navigator.canPopÅ1The initial route cannot be popped off the navigator, which implies that
this function returns true only if popping the navigator would not remove
the initial route.

If there is no [Navigator] in scope, returns false.

Does not consider anything that might externally prevent popping, such as
[PopEntry]."flutter.widgets.navigator.maybePopÉIf the [RoutePopDisposition] is [RoutePopDisposition.pop], then the [pop]
method is called, and this method returns true, indicating that it handled
the pop request.

If the [RoutePopDisposition] is [RoutePopDisposition.doNotPop], then this
method returns true, but does not do anything beyond that.

If the [RoutePopDisposition] is [RoutePopDisposition.bubble], then this
method returns false, and the caller is responsible for sending the
request to the containing scope (e.g. by closing the application).

This method is typically called for a user-initiated [pop]. For example on
Android it's called by the binding for the system's back button.

The `T` type argument is the type of the return value of the current
route. (Typically this isn't known; consider specifying `dynamic` or
`Null`.)flutter.widgets.navigator.popÑ_The current route's [Route.didPop] method is called first. If that method
returns false, then the route remains in the [Navigator]'s history (the
route is expected to have popped some internal state; see e.g.
[LocalHistoryRoute]). Otherwise, the rest of this description applies.

If non-null, `result` will be used as the result of the route that is
popped; the future that had been returned from pushing the popped route
will complete with `result`. Routes such as dialogs or popup menus
typically use this mechanism to return the value selected by the user to
the widget that created their route. The type of `result`, if provided,
must match the type argument of the class of the popped route (`T`).

The popped route and the route below it are notified (see [Route.didPop],
[Route.didComplete], and [Route.didPopNext]). If the [Navigator] has any
[Navigator.observers], they will be notified as well (see
[NavigatorObserver.didPop]).

The `T` type argument is the type of the return value of the popped route.

The type of `result`, if provided, must match the type argument of the
class of the popped route (`T`)."flutter.widgets.navigator.popUntilÅMThe predicate may be applied to the same route more than once if
[Route.willHandlePopInternally] is true.

To pop until a route with a certain name, use the [RoutePredicate]
returned from [ModalRoute.withName].

The routes are closed with null as their `return` value.

See [pop] for more details of the semantics of popping a route.%flutter.widgets.navigator.removeRouteÉ¶No animations are run as a result of this method call.

The routes below and above the removed route are notified (see
[Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
has any [Navigator.observers], they will be notified as well (see
[NavigatorObserver.didRemove]). The removed route is disposed with its
future completed.

The given `route` must be in the history; this method will throw an
exception if it is not.

If non-null, `result` will be used as the result of the route that is
removed; the future that had been returned from pushing the removed route
will complete with `result`. If provided, must match the type argument of
the class of the popped route (`T`).

The `T` type argument is the type of the return value of the popped route.

The type of `result`, if provided, must match the type argument of the
class of the removed route (`T`).

Ongoing gestures within the current route are canceled.*flutter.widgets.navigator.removeRouteBelowÉ◊No animations are run as a result of this method call.

The routes below and above the removed route are notified (see
[Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
has any [Navigator.observers], they will be notified as well (see
[NavigatorObserver.didRemove]). The removed route is disposed with its
future completed.

The given `anchorRoute` must be in the history and must have a route below
it; this method will throw an exception if it is not or does not.

If non-null, `result` will be used as the result of the route that is
removed; the future that had been returned from pushing the removed route
will complete with `result`. If provided, must match the type argument of
the class of the popped route (`T`).

The `T` type argument is the type of the return value of the popped route.

The type of `result`, if provided, must match the type argument of the
class of the removed route (`T`).

Ongoing gestures within the current route are canceled. È†